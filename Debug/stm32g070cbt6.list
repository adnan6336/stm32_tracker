
stm32g070cbt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012534  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d0  080125f0  080125f0  000225f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012fc0  08012fc0  000302b4  2**0
                  CONTENTS
  4 .ARM          00000000  08012fc0  08012fc0  000302b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012fc0  08012fc0  000302b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012fc0  08012fc0  00022fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012fc4  08012fc4  00022fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  08012fc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a44  200002b4  0801327c  000302b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cf8  0801327c  00030cf8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fdd  00000000  00000000  000302dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c82  00000000  00000000  000472b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00049f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  0004b238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e04  00000000  00000000  0004c508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017933  00000000  00000000  0006430c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009319e  00000000  00000000  0007bc3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010eddd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d04  00000000  00000000  0010ee30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200002b4 	.word	0x200002b4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080125d4 	.word	0x080125d4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200002b8 	.word	0x200002b8
 80000fc:	080125d4 	.word	0x080125d4

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fa89 	bl	8001960 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9d9 	bl	8001810 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fa7b 	bl	8001960 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fa71 	bl	8001960 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fa01 	bl	8001894 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 f9f7 	bl	8001894 <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 faad 	bl	8000a1c <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fa39 	bl	8000944 <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fa9f 	bl	8000a1c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fa95 	bl	8000a1c <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fa45 	bl	8000990 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 fa3b 	bl	8000990 <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_d2uiz>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	2200      	movs	r2, #0
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <__aeabi_d2uiz+0x38>)
 800052e:	0004      	movs	r4, r0
 8000530:	000d      	movs	r5, r1
 8000532:	f7ff ffb5 	bl	80004a0 <__aeabi_dcmpge>
 8000536:	2800      	cmp	r0, #0
 8000538:	d104      	bne.n	8000544 <__aeabi_d2uiz+0x1c>
 800053a:	0020      	movs	r0, r4
 800053c:	0029      	movs	r1, r5
 800053e:	f002 f88f 	bl	8002660 <__aeabi_d2iz>
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <__aeabi_d2uiz+0x38>)
 8000546:	2200      	movs	r2, #0
 8000548:	0020      	movs	r0, r4
 800054a:	0029      	movs	r1, r5
 800054c:	f001 fcd8 	bl	8001f00 <__aeabi_dsub>
 8000550:	f002 f886 	bl	8002660 <__aeabi_d2iz>
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	061b      	lsls	r3, r3, #24
 8000558:	469c      	mov	ip, r3
 800055a:	4460      	add	r0, ip
 800055c:	e7f1      	b.n	8000542 <__aeabi_d2uiz+0x1a>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	41e00000 	.word	0x41e00000

08000564 <__aeabi_d2lz>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	0005      	movs	r5, r0
 8000568:	000c      	movs	r4, r1
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f7ff ff77 	bl	8000464 <__aeabi_dcmplt>
 8000576:	2800      	cmp	r0, #0
 8000578:	d108      	bne.n	800058c <__aeabi_d2lz+0x28>
 800057a:	0028      	movs	r0, r5
 800057c:	0021      	movs	r1, r4
 800057e:	f000 f80f 	bl	80005a0 <__aeabi_d2ulz>
 8000582:	0002      	movs	r2, r0
 8000584:	000b      	movs	r3, r1
 8000586:	0010      	movs	r0, r2
 8000588:	0019      	movs	r1, r3
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	061b      	lsls	r3, r3, #24
 8000590:	18e1      	adds	r1, r4, r3
 8000592:	0028      	movs	r0, r5
 8000594:	f000 f804 	bl	80005a0 <__aeabi_d2ulz>
 8000598:	2300      	movs	r3, #0
 800059a:	4242      	negs	r2, r0
 800059c:	418b      	sbcs	r3, r1
 800059e:	e7f2      	b.n	8000586 <__aeabi_d2lz+0x22>

080005a0 <__aeabi_d2ulz>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <__aeabi_d2ulz+0x34>)
 80005a6:	000d      	movs	r5, r1
 80005a8:	0004      	movs	r4, r0
 80005aa:	f001 fa3d 	bl	8001a28 <__aeabi_dmul>
 80005ae:	f7ff ffbb 	bl	8000528 <__aeabi_d2uiz>
 80005b2:	0006      	movs	r6, r0
 80005b4:	f002 f8ba 	bl	800272c <__aeabi_ui2d>
 80005b8:	2200      	movs	r2, #0
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <__aeabi_d2ulz+0x38>)
 80005bc:	f001 fa34 	bl	8001a28 <__aeabi_dmul>
 80005c0:	0002      	movs	r2, r0
 80005c2:	000b      	movs	r3, r1
 80005c4:	0020      	movs	r0, r4
 80005c6:	0029      	movs	r1, r5
 80005c8:	f001 fc9a 	bl	8001f00 <__aeabi_dsub>
 80005cc:	f7ff ffac 	bl	8000528 <__aeabi_d2uiz>
 80005d0:	0031      	movs	r1, r6
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	3df00000 	.word	0x3df00000
 80005d8:	41f00000 	.word	0x41f00000

080005dc <__aeabi_l2d>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	0006      	movs	r6, r0
 80005e0:	0008      	movs	r0, r1
 80005e2:	f002 f873 	bl	80026cc <__aeabi_i2d>
 80005e6:	2200      	movs	r2, #0
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__aeabi_l2d+0x28>)
 80005ea:	f001 fa1d 	bl	8001a28 <__aeabi_dmul>
 80005ee:	000d      	movs	r5, r1
 80005f0:	0004      	movs	r4, r0
 80005f2:	0030      	movs	r0, r6
 80005f4:	f002 f89a 	bl	800272c <__aeabi_ui2d>
 80005f8:	002b      	movs	r3, r5
 80005fa:	0022      	movs	r2, r4
 80005fc:	f000 fad6 	bl	8000bac <__aeabi_dadd>
 8000600:	bd70      	pop	{r4, r5, r6, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	41f00000 	.word	0x41f00000

08000608 <__aeabi_fadd>:
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	46c6      	mov	lr, r8
 800060c:	0243      	lsls	r3, r0, #9
 800060e:	0a5b      	lsrs	r3, r3, #9
 8000610:	024e      	lsls	r6, r1, #9
 8000612:	0045      	lsls	r5, r0, #1
 8000614:	004f      	lsls	r7, r1, #1
 8000616:	00da      	lsls	r2, r3, #3
 8000618:	0fc4      	lsrs	r4, r0, #31
 800061a:	469c      	mov	ip, r3
 800061c:	0a70      	lsrs	r0, r6, #9
 800061e:	4690      	mov	r8, r2
 8000620:	b500      	push	{lr}
 8000622:	0e2d      	lsrs	r5, r5, #24
 8000624:	0e3f      	lsrs	r7, r7, #24
 8000626:	0fc9      	lsrs	r1, r1, #31
 8000628:	09b6      	lsrs	r6, r6, #6
 800062a:	428c      	cmp	r4, r1
 800062c:	d04b      	beq.n	80006c6 <__aeabi_fadd+0xbe>
 800062e:	1bea      	subs	r2, r5, r7
 8000630:	2a00      	cmp	r2, #0
 8000632:	dd36      	ble.n	80006a2 <__aeabi_fadd+0x9a>
 8000634:	2f00      	cmp	r7, #0
 8000636:	d061      	beq.n	80006fc <__aeabi_fadd+0xf4>
 8000638:	2dff      	cmp	r5, #255	; 0xff
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0x36>
 800063c:	e0ad      	b.n	800079a <__aeabi_fadd+0x192>
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	04db      	lsls	r3, r3, #19
 8000642:	431e      	orrs	r6, r3
 8000644:	2a1b      	cmp	r2, #27
 8000646:	dc00      	bgt.n	800064a <__aeabi_fadd+0x42>
 8000648:	e0d3      	b.n	80007f2 <__aeabi_fadd+0x1ea>
 800064a:	2001      	movs	r0, #1
 800064c:	4643      	mov	r3, r8
 800064e:	1a18      	subs	r0, r3, r0
 8000650:	0143      	lsls	r3, r0, #5
 8000652:	d400      	bmi.n	8000656 <__aeabi_fadd+0x4e>
 8000654:	e08c      	b.n	8000770 <__aeabi_fadd+0x168>
 8000656:	0180      	lsls	r0, r0, #6
 8000658:	0987      	lsrs	r7, r0, #6
 800065a:	0038      	movs	r0, r7
 800065c:	f002 f95c 	bl	8002918 <__clzsi2>
 8000660:	3805      	subs	r0, #5
 8000662:	4087      	lsls	r7, r0
 8000664:	4285      	cmp	r5, r0
 8000666:	dc00      	bgt.n	800066a <__aeabi_fadd+0x62>
 8000668:	e0b6      	b.n	80007d8 <__aeabi_fadd+0x1d0>
 800066a:	1a2d      	subs	r5, r5, r0
 800066c:	48b3      	ldr	r0, [pc, #716]	; (800093c <__aeabi_fadd+0x334>)
 800066e:	4038      	ands	r0, r7
 8000670:	0743      	lsls	r3, r0, #29
 8000672:	d004      	beq.n	800067e <__aeabi_fadd+0x76>
 8000674:	230f      	movs	r3, #15
 8000676:	4003      	ands	r3, r0
 8000678:	2b04      	cmp	r3, #4
 800067a:	d000      	beq.n	800067e <__aeabi_fadd+0x76>
 800067c:	3004      	adds	r0, #4
 800067e:	0143      	lsls	r3, r0, #5
 8000680:	d400      	bmi.n	8000684 <__aeabi_fadd+0x7c>
 8000682:	e078      	b.n	8000776 <__aeabi_fadd+0x16e>
 8000684:	1c6a      	adds	r2, r5, #1
 8000686:	2dfe      	cmp	r5, #254	; 0xfe
 8000688:	d065      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800068a:	0180      	lsls	r0, r0, #6
 800068c:	0a43      	lsrs	r3, r0, #9
 800068e:	469c      	mov	ip, r3
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	4663      	mov	r3, ip
 8000694:	05d0      	lsls	r0, r2, #23
 8000696:	4318      	orrs	r0, r3
 8000698:	07e4      	lsls	r4, r4, #31
 800069a:	4320      	orrs	r0, r4
 800069c:	bc80      	pop	{r7}
 800069e:	46b8      	mov	r8, r7
 80006a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a2:	2a00      	cmp	r2, #0
 80006a4:	d035      	beq.n	8000712 <__aeabi_fadd+0x10a>
 80006a6:	1b7a      	subs	r2, r7, r5
 80006a8:	2d00      	cmp	r5, #0
 80006aa:	d000      	beq.n	80006ae <__aeabi_fadd+0xa6>
 80006ac:	e0af      	b.n	800080e <__aeabi_fadd+0x206>
 80006ae:	4643      	mov	r3, r8
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d100      	bne.n	80006b6 <__aeabi_fadd+0xae>
 80006b4:	e0a7      	b.n	8000806 <__aeabi_fadd+0x1fe>
 80006b6:	1e53      	subs	r3, r2, #1
 80006b8:	2a01      	cmp	r2, #1
 80006ba:	d100      	bne.n	80006be <__aeabi_fadd+0xb6>
 80006bc:	e12f      	b.n	800091e <__aeabi_fadd+0x316>
 80006be:	2aff      	cmp	r2, #255	; 0xff
 80006c0:	d069      	beq.n	8000796 <__aeabi_fadd+0x18e>
 80006c2:	001a      	movs	r2, r3
 80006c4:	e0aa      	b.n	800081c <__aeabi_fadd+0x214>
 80006c6:	1be9      	subs	r1, r5, r7
 80006c8:	2900      	cmp	r1, #0
 80006ca:	dd70      	ble.n	80007ae <__aeabi_fadd+0x1a6>
 80006cc:	2f00      	cmp	r7, #0
 80006ce:	d037      	beq.n	8000740 <__aeabi_fadd+0x138>
 80006d0:	2dff      	cmp	r5, #255	; 0xff
 80006d2:	d062      	beq.n	800079a <__aeabi_fadd+0x192>
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	04db      	lsls	r3, r3, #19
 80006d8:	431e      	orrs	r6, r3
 80006da:	291b      	cmp	r1, #27
 80006dc:	dc00      	bgt.n	80006e0 <__aeabi_fadd+0xd8>
 80006de:	e0b0      	b.n	8000842 <__aeabi_fadd+0x23a>
 80006e0:	2001      	movs	r0, #1
 80006e2:	4440      	add	r0, r8
 80006e4:	0143      	lsls	r3, r0, #5
 80006e6:	d543      	bpl.n	8000770 <__aeabi_fadd+0x168>
 80006e8:	3501      	adds	r5, #1
 80006ea:	2dff      	cmp	r5, #255	; 0xff
 80006ec:	d033      	beq.n	8000756 <__aeabi_fadd+0x14e>
 80006ee:	2301      	movs	r3, #1
 80006f0:	4a93      	ldr	r2, [pc, #588]	; (8000940 <__aeabi_fadd+0x338>)
 80006f2:	4003      	ands	r3, r0
 80006f4:	0840      	lsrs	r0, r0, #1
 80006f6:	4010      	ands	r0, r2
 80006f8:	4318      	orrs	r0, r3
 80006fa:	e7b9      	b.n	8000670 <__aeabi_fadd+0x68>
 80006fc:	2e00      	cmp	r6, #0
 80006fe:	d100      	bne.n	8000702 <__aeabi_fadd+0xfa>
 8000700:	e083      	b.n	800080a <__aeabi_fadd+0x202>
 8000702:	1e51      	subs	r1, r2, #1
 8000704:	2a01      	cmp	r2, #1
 8000706:	d100      	bne.n	800070a <__aeabi_fadd+0x102>
 8000708:	e0d8      	b.n	80008bc <__aeabi_fadd+0x2b4>
 800070a:	2aff      	cmp	r2, #255	; 0xff
 800070c:	d045      	beq.n	800079a <__aeabi_fadd+0x192>
 800070e:	000a      	movs	r2, r1
 8000710:	e798      	b.n	8000644 <__aeabi_fadd+0x3c>
 8000712:	27fe      	movs	r7, #254	; 0xfe
 8000714:	1c6a      	adds	r2, r5, #1
 8000716:	4217      	tst	r7, r2
 8000718:	d000      	beq.n	800071c <__aeabi_fadd+0x114>
 800071a:	e086      	b.n	800082a <__aeabi_fadd+0x222>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0x11a>
 8000720:	e0b7      	b.n	8000892 <__aeabi_fadd+0x28a>
 8000722:	4643      	mov	r3, r8
 8000724:	2b00      	cmp	r3, #0
 8000726:	d100      	bne.n	800072a <__aeabi_fadd+0x122>
 8000728:	e0f3      	b.n	8000912 <__aeabi_fadd+0x30a>
 800072a:	2200      	movs	r2, #0
 800072c:	2e00      	cmp	r6, #0
 800072e:	d0b0      	beq.n	8000692 <__aeabi_fadd+0x8a>
 8000730:	1b98      	subs	r0, r3, r6
 8000732:	0143      	lsls	r3, r0, #5
 8000734:	d400      	bmi.n	8000738 <__aeabi_fadd+0x130>
 8000736:	e0fa      	b.n	800092e <__aeabi_fadd+0x326>
 8000738:	4643      	mov	r3, r8
 800073a:	000c      	movs	r4, r1
 800073c:	1af0      	subs	r0, r6, r3
 800073e:	e797      	b.n	8000670 <__aeabi_fadd+0x68>
 8000740:	2e00      	cmp	r6, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x13e>
 8000744:	e0c8      	b.n	80008d8 <__aeabi_fadd+0x2d0>
 8000746:	1e4a      	subs	r2, r1, #1
 8000748:	2901      	cmp	r1, #1
 800074a:	d100      	bne.n	800074e <__aeabi_fadd+0x146>
 800074c:	e0ae      	b.n	80008ac <__aeabi_fadd+0x2a4>
 800074e:	29ff      	cmp	r1, #255	; 0xff
 8000750:	d023      	beq.n	800079a <__aeabi_fadd+0x192>
 8000752:	0011      	movs	r1, r2
 8000754:	e7c1      	b.n	80006da <__aeabi_fadd+0xd2>
 8000756:	2300      	movs	r3, #0
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	469c      	mov	ip, r3
 800075c:	e799      	b.n	8000692 <__aeabi_fadd+0x8a>
 800075e:	21fe      	movs	r1, #254	; 0xfe
 8000760:	1c6a      	adds	r2, r5, #1
 8000762:	4211      	tst	r1, r2
 8000764:	d077      	beq.n	8000856 <__aeabi_fadd+0x24e>
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d0f5      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800076a:	0015      	movs	r5, r2
 800076c:	4446      	add	r6, r8
 800076e:	0870      	lsrs	r0, r6, #1
 8000770:	0743      	lsls	r3, r0, #29
 8000772:	d000      	beq.n	8000776 <__aeabi_fadd+0x16e>
 8000774:	e77e      	b.n	8000674 <__aeabi_fadd+0x6c>
 8000776:	08c3      	lsrs	r3, r0, #3
 8000778:	2dff      	cmp	r5, #255	; 0xff
 800077a:	d00e      	beq.n	800079a <__aeabi_fadd+0x192>
 800077c:	025b      	lsls	r3, r3, #9
 800077e:	0a5b      	lsrs	r3, r3, #9
 8000780:	469c      	mov	ip, r3
 8000782:	b2ea      	uxtb	r2, r5
 8000784:	e785      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000786:	2e00      	cmp	r6, #0
 8000788:	d007      	beq.n	800079a <__aeabi_fadd+0x192>
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	03d2      	lsls	r2, r2, #15
 800078e:	4213      	tst	r3, r2
 8000790:	d003      	beq.n	800079a <__aeabi_fadd+0x192>
 8000792:	4210      	tst	r0, r2
 8000794:	d101      	bne.n	800079a <__aeabi_fadd+0x192>
 8000796:	000c      	movs	r4, r1
 8000798:	0003      	movs	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0db      	beq.n	8000756 <__aeabi_fadd+0x14e>
 800079e:	2080      	movs	r0, #128	; 0x80
 80007a0:	03c0      	lsls	r0, r0, #15
 80007a2:	4318      	orrs	r0, r3
 80007a4:	0240      	lsls	r0, r0, #9
 80007a6:	0a43      	lsrs	r3, r0, #9
 80007a8:	469c      	mov	ip, r3
 80007aa:	22ff      	movs	r2, #255	; 0xff
 80007ac:	e771      	b.n	8000692 <__aeabi_fadd+0x8a>
 80007ae:	2900      	cmp	r1, #0
 80007b0:	d0d5      	beq.n	800075e <__aeabi_fadd+0x156>
 80007b2:	1b7a      	subs	r2, r7, r5
 80007b4:	2d00      	cmp	r5, #0
 80007b6:	d160      	bne.n	800087a <__aeabi_fadd+0x272>
 80007b8:	4643      	mov	r3, r8
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d024      	beq.n	8000808 <__aeabi_fadd+0x200>
 80007be:	1e53      	subs	r3, r2, #1
 80007c0:	2a01      	cmp	r2, #1
 80007c2:	d073      	beq.n	80008ac <__aeabi_fadd+0x2a4>
 80007c4:	2aff      	cmp	r2, #255	; 0xff
 80007c6:	d0e7      	beq.n	8000798 <__aeabi_fadd+0x190>
 80007c8:	001a      	movs	r2, r3
 80007ca:	2a1b      	cmp	r2, #27
 80007cc:	dc00      	bgt.n	80007d0 <__aeabi_fadd+0x1c8>
 80007ce:	e085      	b.n	80008dc <__aeabi_fadd+0x2d4>
 80007d0:	2001      	movs	r0, #1
 80007d2:	003d      	movs	r5, r7
 80007d4:	1980      	adds	r0, r0, r6
 80007d6:	e785      	b.n	80006e4 <__aeabi_fadd+0xdc>
 80007d8:	2320      	movs	r3, #32
 80007da:	003a      	movs	r2, r7
 80007dc:	1b45      	subs	r5, r0, r5
 80007de:	0038      	movs	r0, r7
 80007e0:	3501      	adds	r5, #1
 80007e2:	40ea      	lsrs	r2, r5
 80007e4:	1b5d      	subs	r5, r3, r5
 80007e6:	40a8      	lsls	r0, r5
 80007e8:	1e43      	subs	r3, r0, #1
 80007ea:	4198      	sbcs	r0, r3
 80007ec:	2500      	movs	r5, #0
 80007ee:	4310      	orrs	r0, r2
 80007f0:	e73e      	b.n	8000670 <__aeabi_fadd+0x68>
 80007f2:	2320      	movs	r3, #32
 80007f4:	0030      	movs	r0, r6
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	0031      	movs	r1, r6
 80007fa:	4098      	lsls	r0, r3
 80007fc:	40d1      	lsrs	r1, r2
 80007fe:	1e43      	subs	r3, r0, #1
 8000800:	4198      	sbcs	r0, r3
 8000802:	4308      	orrs	r0, r1
 8000804:	e722      	b.n	800064c <__aeabi_fadd+0x44>
 8000806:	000c      	movs	r4, r1
 8000808:	0003      	movs	r3, r0
 800080a:	0015      	movs	r5, r2
 800080c:	e7b4      	b.n	8000778 <__aeabi_fadd+0x170>
 800080e:	2fff      	cmp	r7, #255	; 0xff
 8000810:	d0c1      	beq.n	8000796 <__aeabi_fadd+0x18e>
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	4640      	mov	r0, r8
 8000816:	04db      	lsls	r3, r3, #19
 8000818:	4318      	orrs	r0, r3
 800081a:	4680      	mov	r8, r0
 800081c:	2a1b      	cmp	r2, #27
 800081e:	dd51      	ble.n	80008c4 <__aeabi_fadd+0x2bc>
 8000820:	2001      	movs	r0, #1
 8000822:	000c      	movs	r4, r1
 8000824:	003d      	movs	r5, r7
 8000826:	1a30      	subs	r0, r6, r0
 8000828:	e712      	b.n	8000650 <__aeabi_fadd+0x48>
 800082a:	4643      	mov	r3, r8
 800082c:	1b9f      	subs	r7, r3, r6
 800082e:	017b      	lsls	r3, r7, #5
 8000830:	d42b      	bmi.n	800088a <__aeabi_fadd+0x282>
 8000832:	2f00      	cmp	r7, #0
 8000834:	d000      	beq.n	8000838 <__aeabi_fadd+0x230>
 8000836:	e710      	b.n	800065a <__aeabi_fadd+0x52>
 8000838:	2300      	movs	r3, #0
 800083a:	2400      	movs	r4, #0
 800083c:	2200      	movs	r2, #0
 800083e:	469c      	mov	ip, r3
 8000840:	e727      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000842:	2320      	movs	r3, #32
 8000844:	0032      	movs	r2, r6
 8000846:	0030      	movs	r0, r6
 8000848:	40ca      	lsrs	r2, r1
 800084a:	1a59      	subs	r1, r3, r1
 800084c:	4088      	lsls	r0, r1
 800084e:	1e43      	subs	r3, r0, #1
 8000850:	4198      	sbcs	r0, r3
 8000852:	4310      	orrs	r0, r2
 8000854:	e745      	b.n	80006e2 <__aeabi_fadd+0xda>
 8000856:	2d00      	cmp	r5, #0
 8000858:	d14a      	bne.n	80008f0 <__aeabi_fadd+0x2e8>
 800085a:	4643      	mov	r3, r8
 800085c:	2b00      	cmp	r3, #0
 800085e:	d063      	beq.n	8000928 <__aeabi_fadd+0x320>
 8000860:	2200      	movs	r2, #0
 8000862:	2e00      	cmp	r6, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_fadd+0x260>
 8000866:	e714      	b.n	8000692 <__aeabi_fadd+0x8a>
 8000868:	0030      	movs	r0, r6
 800086a:	4440      	add	r0, r8
 800086c:	0143      	lsls	r3, r0, #5
 800086e:	d400      	bmi.n	8000872 <__aeabi_fadd+0x26a>
 8000870:	e77e      	b.n	8000770 <__aeabi_fadd+0x168>
 8000872:	4b32      	ldr	r3, [pc, #200]	; (800093c <__aeabi_fadd+0x334>)
 8000874:	3501      	adds	r5, #1
 8000876:	4018      	ands	r0, r3
 8000878:	e77a      	b.n	8000770 <__aeabi_fadd+0x168>
 800087a:	2fff      	cmp	r7, #255	; 0xff
 800087c:	d08c      	beq.n	8000798 <__aeabi_fadd+0x190>
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	4641      	mov	r1, r8
 8000882:	04db      	lsls	r3, r3, #19
 8000884:	4319      	orrs	r1, r3
 8000886:	4688      	mov	r8, r1
 8000888:	e79f      	b.n	80007ca <__aeabi_fadd+0x1c2>
 800088a:	4643      	mov	r3, r8
 800088c:	000c      	movs	r4, r1
 800088e:	1af7      	subs	r7, r6, r3
 8000890:	e6e3      	b.n	800065a <__aeabi_fadd+0x52>
 8000892:	4642      	mov	r2, r8
 8000894:	2a00      	cmp	r2, #0
 8000896:	d000      	beq.n	800089a <__aeabi_fadd+0x292>
 8000898:	e775      	b.n	8000786 <__aeabi_fadd+0x17e>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d000      	beq.n	80008a0 <__aeabi_fadd+0x298>
 800089e:	e77a      	b.n	8000796 <__aeabi_fadd+0x18e>
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	03db      	lsls	r3, r3, #15
 80008a4:	2400      	movs	r4, #0
 80008a6:	469c      	mov	ip, r3
 80008a8:	22ff      	movs	r2, #255	; 0xff
 80008aa:	e6f2      	b.n	8000692 <__aeabi_fadd+0x8a>
 80008ac:	0030      	movs	r0, r6
 80008ae:	4440      	add	r0, r8
 80008b0:	2501      	movs	r5, #1
 80008b2:	0143      	lsls	r3, r0, #5
 80008b4:	d400      	bmi.n	80008b8 <__aeabi_fadd+0x2b0>
 80008b6:	e75b      	b.n	8000770 <__aeabi_fadd+0x168>
 80008b8:	2502      	movs	r5, #2
 80008ba:	e718      	b.n	80006ee <__aeabi_fadd+0xe6>
 80008bc:	4643      	mov	r3, r8
 80008be:	2501      	movs	r5, #1
 80008c0:	1b98      	subs	r0, r3, r6
 80008c2:	e6c5      	b.n	8000650 <__aeabi_fadd+0x48>
 80008c4:	2320      	movs	r3, #32
 80008c6:	4644      	mov	r4, r8
 80008c8:	4640      	mov	r0, r8
 80008ca:	40d4      	lsrs	r4, r2
 80008cc:	1a9a      	subs	r2, r3, r2
 80008ce:	4090      	lsls	r0, r2
 80008d0:	1e43      	subs	r3, r0, #1
 80008d2:	4198      	sbcs	r0, r3
 80008d4:	4320      	orrs	r0, r4
 80008d6:	e7a4      	b.n	8000822 <__aeabi_fadd+0x21a>
 80008d8:	000d      	movs	r5, r1
 80008da:	e74d      	b.n	8000778 <__aeabi_fadd+0x170>
 80008dc:	2320      	movs	r3, #32
 80008de:	4641      	mov	r1, r8
 80008e0:	4640      	mov	r0, r8
 80008e2:	40d1      	lsrs	r1, r2
 80008e4:	1a9a      	subs	r2, r3, r2
 80008e6:	4090      	lsls	r0, r2
 80008e8:	1e43      	subs	r3, r0, #1
 80008ea:	4198      	sbcs	r0, r3
 80008ec:	4308      	orrs	r0, r1
 80008ee:	e770      	b.n	80007d2 <__aeabi_fadd+0x1ca>
 80008f0:	4642      	mov	r2, r8
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x2f0>
 80008f6:	e74f      	b.n	8000798 <__aeabi_fadd+0x190>
 80008f8:	2e00      	cmp	r6, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x2f6>
 80008fc:	e74d      	b.n	800079a <__aeabi_fadd+0x192>
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	03d2      	lsls	r2, r2, #15
 8000902:	4213      	tst	r3, r2
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x300>
 8000906:	e748      	b.n	800079a <__aeabi_fadd+0x192>
 8000908:	4210      	tst	r0, r2
 800090a:	d000      	beq.n	800090e <__aeabi_fadd+0x306>
 800090c:	e745      	b.n	800079a <__aeabi_fadd+0x192>
 800090e:	0003      	movs	r3, r0
 8000910:	e743      	b.n	800079a <__aeabi_fadd+0x192>
 8000912:	2e00      	cmp	r6, #0
 8000914:	d090      	beq.n	8000838 <__aeabi_fadd+0x230>
 8000916:	000c      	movs	r4, r1
 8000918:	4684      	mov	ip, r0
 800091a:	2200      	movs	r2, #0
 800091c:	e6b9      	b.n	8000692 <__aeabi_fadd+0x8a>
 800091e:	4643      	mov	r3, r8
 8000920:	000c      	movs	r4, r1
 8000922:	1af0      	subs	r0, r6, r3
 8000924:	3501      	adds	r5, #1
 8000926:	e693      	b.n	8000650 <__aeabi_fadd+0x48>
 8000928:	4684      	mov	ip, r0
 800092a:	2200      	movs	r2, #0
 800092c:	e6b1      	b.n	8000692 <__aeabi_fadd+0x8a>
 800092e:	2800      	cmp	r0, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_fadd+0x32c>
 8000932:	e71d      	b.n	8000770 <__aeabi_fadd+0x168>
 8000934:	2300      	movs	r3, #0
 8000936:	2400      	movs	r4, #0
 8000938:	469c      	mov	ip, r3
 800093a:	e6aa      	b.n	8000692 <__aeabi_fadd+0x8a>
 800093c:	fbffffff 	.word	0xfbffffff
 8000940:	7dffffff 	.word	0x7dffffff

08000944 <__eqsf2>:
 8000944:	b570      	push	{r4, r5, r6, lr}
 8000946:	0042      	lsls	r2, r0, #1
 8000948:	0245      	lsls	r5, r0, #9
 800094a:	024e      	lsls	r6, r1, #9
 800094c:	004c      	lsls	r4, r1, #1
 800094e:	0fc3      	lsrs	r3, r0, #31
 8000950:	0a6d      	lsrs	r5, r5, #9
 8000952:	2001      	movs	r0, #1
 8000954:	0e12      	lsrs	r2, r2, #24
 8000956:	0a76      	lsrs	r6, r6, #9
 8000958:	0e24      	lsrs	r4, r4, #24
 800095a:	0fc9      	lsrs	r1, r1, #31
 800095c:	2aff      	cmp	r2, #255	; 0xff
 800095e:	d006      	beq.n	800096e <__eqsf2+0x2a>
 8000960:	2cff      	cmp	r4, #255	; 0xff
 8000962:	d003      	beq.n	800096c <__eqsf2+0x28>
 8000964:	42a2      	cmp	r2, r4
 8000966:	d101      	bne.n	800096c <__eqsf2+0x28>
 8000968:	42b5      	cmp	r5, r6
 800096a:	d006      	beq.n	800097a <__eqsf2+0x36>
 800096c:	bd70      	pop	{r4, r5, r6, pc}
 800096e:	2d00      	cmp	r5, #0
 8000970:	d1fc      	bne.n	800096c <__eqsf2+0x28>
 8000972:	2cff      	cmp	r4, #255	; 0xff
 8000974:	d1fa      	bne.n	800096c <__eqsf2+0x28>
 8000976:	2e00      	cmp	r6, #0
 8000978:	d1f8      	bne.n	800096c <__eqsf2+0x28>
 800097a:	428b      	cmp	r3, r1
 800097c:	d006      	beq.n	800098c <__eqsf2+0x48>
 800097e:	2001      	movs	r0, #1
 8000980:	2a00      	cmp	r2, #0
 8000982:	d1f3      	bne.n	800096c <__eqsf2+0x28>
 8000984:	0028      	movs	r0, r5
 8000986:	1e43      	subs	r3, r0, #1
 8000988:	4198      	sbcs	r0, r3
 800098a:	e7ef      	b.n	800096c <__eqsf2+0x28>
 800098c:	2000      	movs	r0, #0
 800098e:	e7ed      	b.n	800096c <__eqsf2+0x28>

08000990 <__gesf2>:
 8000990:	b570      	push	{r4, r5, r6, lr}
 8000992:	0042      	lsls	r2, r0, #1
 8000994:	0245      	lsls	r5, r0, #9
 8000996:	024e      	lsls	r6, r1, #9
 8000998:	004c      	lsls	r4, r1, #1
 800099a:	0fc3      	lsrs	r3, r0, #31
 800099c:	0a6d      	lsrs	r5, r5, #9
 800099e:	0e12      	lsrs	r2, r2, #24
 80009a0:	0a76      	lsrs	r6, r6, #9
 80009a2:	0e24      	lsrs	r4, r4, #24
 80009a4:	0fc8      	lsrs	r0, r1, #31
 80009a6:	2aff      	cmp	r2, #255	; 0xff
 80009a8:	d01b      	beq.n	80009e2 <__gesf2+0x52>
 80009aa:	2cff      	cmp	r4, #255	; 0xff
 80009ac:	d00e      	beq.n	80009cc <__gesf2+0x3c>
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	d11b      	bne.n	80009ea <__gesf2+0x5a>
 80009b2:	2c00      	cmp	r4, #0
 80009b4:	d101      	bne.n	80009ba <__gesf2+0x2a>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d01c      	beq.n	80009f4 <__gesf2+0x64>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d00c      	beq.n	80009d8 <__gesf2+0x48>
 80009be:	4283      	cmp	r3, r0
 80009c0:	d01c      	beq.n	80009fc <__gesf2+0x6c>
 80009c2:	2102      	movs	r1, #2
 80009c4:	1e58      	subs	r0, r3, #1
 80009c6:	4008      	ands	r0, r1
 80009c8:	3801      	subs	r0, #1
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
 80009cc:	2e00      	cmp	r6, #0
 80009ce:	d122      	bne.n	8000a16 <__gesf2+0x86>
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d1f4      	bne.n	80009be <__gesf2+0x2e>
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d1f2      	bne.n	80009be <__gesf2+0x2e>
 80009d8:	2800      	cmp	r0, #0
 80009da:	d1f6      	bne.n	80009ca <__gesf2+0x3a>
 80009dc:	2001      	movs	r0, #1
 80009de:	4240      	negs	r0, r0
 80009e0:	e7f3      	b.n	80009ca <__gesf2+0x3a>
 80009e2:	2d00      	cmp	r5, #0
 80009e4:	d117      	bne.n	8000a16 <__gesf2+0x86>
 80009e6:	2cff      	cmp	r4, #255	; 0xff
 80009e8:	d0f0      	beq.n	80009cc <__gesf2+0x3c>
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	d1e7      	bne.n	80009be <__gesf2+0x2e>
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d1e5      	bne.n	80009be <__gesf2+0x2e>
 80009f2:	e7e6      	b.n	80009c2 <__gesf2+0x32>
 80009f4:	2000      	movs	r0, #0
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d0e7      	beq.n	80009ca <__gesf2+0x3a>
 80009fa:	e7e2      	b.n	80009c2 <__gesf2+0x32>
 80009fc:	42a2      	cmp	r2, r4
 80009fe:	dc05      	bgt.n	8000a0c <__gesf2+0x7c>
 8000a00:	dbea      	blt.n	80009d8 <__gesf2+0x48>
 8000a02:	42b5      	cmp	r5, r6
 8000a04:	d802      	bhi.n	8000a0c <__gesf2+0x7c>
 8000a06:	d3e7      	bcc.n	80009d8 <__gesf2+0x48>
 8000a08:	2000      	movs	r0, #0
 8000a0a:	e7de      	b.n	80009ca <__gesf2+0x3a>
 8000a0c:	4243      	negs	r3, r0
 8000a0e:	4158      	adcs	r0, r3
 8000a10:	0040      	lsls	r0, r0, #1
 8000a12:	3801      	subs	r0, #1
 8000a14:	e7d9      	b.n	80009ca <__gesf2+0x3a>
 8000a16:	2002      	movs	r0, #2
 8000a18:	4240      	negs	r0, r0
 8000a1a:	e7d6      	b.n	80009ca <__gesf2+0x3a>

08000a1c <__lesf2>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	0042      	lsls	r2, r0, #1
 8000a20:	0245      	lsls	r5, r0, #9
 8000a22:	024e      	lsls	r6, r1, #9
 8000a24:	004c      	lsls	r4, r1, #1
 8000a26:	0fc3      	lsrs	r3, r0, #31
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	0e12      	lsrs	r2, r2, #24
 8000a2c:	0a76      	lsrs	r6, r6, #9
 8000a2e:	0e24      	lsrs	r4, r4, #24
 8000a30:	0fc8      	lsrs	r0, r1, #31
 8000a32:	2aff      	cmp	r2, #255	; 0xff
 8000a34:	d00b      	beq.n	8000a4e <__lesf2+0x32>
 8000a36:	2cff      	cmp	r4, #255	; 0xff
 8000a38:	d00d      	beq.n	8000a56 <__lesf2+0x3a>
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	d11f      	bne.n	8000a7e <__lesf2+0x62>
 8000a3e:	2c00      	cmp	r4, #0
 8000a40:	d116      	bne.n	8000a70 <__lesf2+0x54>
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d114      	bne.n	8000a70 <__lesf2+0x54>
 8000a46:	2000      	movs	r0, #0
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d010      	beq.n	8000a6e <__lesf2+0x52>
 8000a4c:	e009      	b.n	8000a62 <__lesf2+0x46>
 8000a4e:	2d00      	cmp	r5, #0
 8000a50:	d10c      	bne.n	8000a6c <__lesf2+0x50>
 8000a52:	2cff      	cmp	r4, #255	; 0xff
 8000a54:	d113      	bne.n	8000a7e <__lesf2+0x62>
 8000a56:	2e00      	cmp	r6, #0
 8000a58:	d108      	bne.n	8000a6c <__lesf2+0x50>
 8000a5a:	2a00      	cmp	r2, #0
 8000a5c:	d008      	beq.n	8000a70 <__lesf2+0x54>
 8000a5e:	4283      	cmp	r3, r0
 8000a60:	d012      	beq.n	8000a88 <__lesf2+0x6c>
 8000a62:	2102      	movs	r1, #2
 8000a64:	1e58      	subs	r0, r3, #1
 8000a66:	4008      	ands	r0, r1
 8000a68:	3801      	subs	r0, #1
 8000a6a:	e000      	b.n	8000a6e <__lesf2+0x52>
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	2d00      	cmp	r5, #0
 8000a72:	d1f4      	bne.n	8000a5e <__lesf2+0x42>
 8000a74:	2800      	cmp	r0, #0
 8000a76:	d1fa      	bne.n	8000a6e <__lesf2+0x52>
 8000a78:	2001      	movs	r0, #1
 8000a7a:	4240      	negs	r0, r0
 8000a7c:	e7f7      	b.n	8000a6e <__lesf2+0x52>
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d1ed      	bne.n	8000a5e <__lesf2+0x42>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d1eb      	bne.n	8000a5e <__lesf2+0x42>
 8000a86:	e7ec      	b.n	8000a62 <__lesf2+0x46>
 8000a88:	42a2      	cmp	r2, r4
 8000a8a:	dc05      	bgt.n	8000a98 <__lesf2+0x7c>
 8000a8c:	dbf2      	blt.n	8000a74 <__lesf2+0x58>
 8000a8e:	42b5      	cmp	r5, r6
 8000a90:	d802      	bhi.n	8000a98 <__lesf2+0x7c>
 8000a92:	d3ef      	bcc.n	8000a74 <__lesf2+0x58>
 8000a94:	2000      	movs	r0, #0
 8000a96:	e7ea      	b.n	8000a6e <__lesf2+0x52>
 8000a98:	4243      	negs	r3, r0
 8000a9a:	4158      	adcs	r0, r3
 8000a9c:	0040      	lsls	r0, r0, #1
 8000a9e:	3801      	subs	r0, #1
 8000aa0:	e7e5      	b.n	8000a6e <__lesf2+0x52>
 8000aa2:	46c0      	nop			; (mov r8, r8)

08000aa4 <__aeabi_fcmpun>:
 8000aa4:	0243      	lsls	r3, r0, #9
 8000aa6:	024a      	lsls	r2, r1, #9
 8000aa8:	0040      	lsls	r0, r0, #1
 8000aaa:	0049      	lsls	r1, r1, #1
 8000aac:	0a5b      	lsrs	r3, r3, #9
 8000aae:	0a52      	lsrs	r2, r2, #9
 8000ab0:	0e09      	lsrs	r1, r1, #24
 8000ab2:	0e00      	lsrs	r0, r0, #24
 8000ab4:	28ff      	cmp	r0, #255	; 0xff
 8000ab6:	d006      	beq.n	8000ac6 <__aeabi_fcmpun+0x22>
 8000ab8:	2000      	movs	r0, #0
 8000aba:	29ff      	cmp	r1, #255	; 0xff
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_fcmpun+0x20>
 8000abe:	1e53      	subs	r3, r2, #1
 8000ac0:	419a      	sbcs	r2, r3
 8000ac2:	0010      	movs	r0, r2
 8000ac4:	4770      	bx	lr
 8000ac6:	38fe      	subs	r0, #254	; 0xfe
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1fb      	bne.n	8000ac4 <__aeabi_fcmpun+0x20>
 8000acc:	e7f4      	b.n	8000ab8 <__aeabi_fcmpun+0x14>
 8000ace:	46c0      	nop			; (mov r8, r8)

08000ad0 <__aeabi_f2iz>:
 8000ad0:	0241      	lsls	r1, r0, #9
 8000ad2:	0042      	lsls	r2, r0, #1
 8000ad4:	0fc3      	lsrs	r3, r0, #31
 8000ad6:	0a49      	lsrs	r1, r1, #9
 8000ad8:	2000      	movs	r0, #0
 8000ada:	0e12      	lsrs	r2, r2, #24
 8000adc:	2a7e      	cmp	r2, #126	; 0x7e
 8000ade:	dd03      	ble.n	8000ae8 <__aeabi_f2iz+0x18>
 8000ae0:	2a9d      	cmp	r2, #157	; 0x9d
 8000ae2:	dd02      	ble.n	8000aea <__aeabi_f2iz+0x1a>
 8000ae4:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <__aeabi_f2iz+0x3c>)
 8000ae6:	1898      	adds	r0, r3, r2
 8000ae8:	4770      	bx	lr
 8000aea:	2080      	movs	r0, #128	; 0x80
 8000aec:	0400      	lsls	r0, r0, #16
 8000aee:	4301      	orrs	r1, r0
 8000af0:	2a95      	cmp	r2, #149	; 0x95
 8000af2:	dc07      	bgt.n	8000b04 <__aeabi_f2iz+0x34>
 8000af4:	2096      	movs	r0, #150	; 0x96
 8000af6:	1a82      	subs	r2, r0, r2
 8000af8:	40d1      	lsrs	r1, r2
 8000afa:	4248      	negs	r0, r1
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1f3      	bne.n	8000ae8 <__aeabi_f2iz+0x18>
 8000b00:	0008      	movs	r0, r1
 8000b02:	e7f1      	b.n	8000ae8 <__aeabi_f2iz+0x18>
 8000b04:	3a96      	subs	r2, #150	; 0x96
 8000b06:	4091      	lsls	r1, r2
 8000b08:	e7f7      	b.n	8000afa <__aeabi_f2iz+0x2a>
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	7fffffff 	.word	0x7fffffff

08000b10 <__aeabi_i2f>:
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d013      	beq.n	8000b3e <__aeabi_i2f+0x2e>
 8000b16:	17c3      	asrs	r3, r0, #31
 8000b18:	18c6      	adds	r6, r0, r3
 8000b1a:	405e      	eors	r6, r3
 8000b1c:	0fc4      	lsrs	r4, r0, #31
 8000b1e:	0030      	movs	r0, r6
 8000b20:	f001 fefa 	bl	8002918 <__clzsi2>
 8000b24:	239e      	movs	r3, #158	; 0x9e
 8000b26:	0005      	movs	r5, r0
 8000b28:	1a1b      	subs	r3, r3, r0
 8000b2a:	2b96      	cmp	r3, #150	; 0x96
 8000b2c:	dc0f      	bgt.n	8000b4e <__aeabi_i2f+0x3e>
 8000b2e:	2808      	cmp	r0, #8
 8000b30:	dd01      	ble.n	8000b36 <__aeabi_i2f+0x26>
 8000b32:	3d08      	subs	r5, #8
 8000b34:	40ae      	lsls	r6, r5
 8000b36:	0276      	lsls	r6, r6, #9
 8000b38:	0a76      	lsrs	r6, r6, #9
 8000b3a:	b2d8      	uxtb	r0, r3
 8000b3c:	e002      	b.n	8000b44 <__aeabi_i2f+0x34>
 8000b3e:	2400      	movs	r4, #0
 8000b40:	2000      	movs	r0, #0
 8000b42:	2600      	movs	r6, #0
 8000b44:	05c0      	lsls	r0, r0, #23
 8000b46:	4330      	orrs	r0, r6
 8000b48:	07e4      	lsls	r4, r4, #31
 8000b4a:	4320      	orrs	r0, r4
 8000b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b4e:	2b99      	cmp	r3, #153	; 0x99
 8000b50:	dd0c      	ble.n	8000b6c <__aeabi_i2f+0x5c>
 8000b52:	2205      	movs	r2, #5
 8000b54:	0031      	movs	r1, r6
 8000b56:	1a12      	subs	r2, r2, r0
 8000b58:	40d1      	lsrs	r1, r2
 8000b5a:	000a      	movs	r2, r1
 8000b5c:	0001      	movs	r1, r0
 8000b5e:	0030      	movs	r0, r6
 8000b60:	311b      	adds	r1, #27
 8000b62:	4088      	lsls	r0, r1
 8000b64:	1e41      	subs	r1, r0, #1
 8000b66:	4188      	sbcs	r0, r1
 8000b68:	4302      	orrs	r2, r0
 8000b6a:	0016      	movs	r6, r2
 8000b6c:	2d05      	cmp	r5, #5
 8000b6e:	dc12      	bgt.n	8000b96 <__aeabi_i2f+0x86>
 8000b70:	0031      	movs	r1, r6
 8000b72:	4f0d      	ldr	r7, [pc, #52]	; (8000ba8 <__aeabi_i2f+0x98>)
 8000b74:	4039      	ands	r1, r7
 8000b76:	0772      	lsls	r2, r6, #29
 8000b78:	d009      	beq.n	8000b8e <__aeabi_i2f+0x7e>
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	4030      	ands	r0, r6
 8000b7e:	2804      	cmp	r0, #4
 8000b80:	d005      	beq.n	8000b8e <__aeabi_i2f+0x7e>
 8000b82:	3104      	adds	r1, #4
 8000b84:	014a      	lsls	r2, r1, #5
 8000b86:	d502      	bpl.n	8000b8e <__aeabi_i2f+0x7e>
 8000b88:	239f      	movs	r3, #159	; 0x9f
 8000b8a:	4039      	ands	r1, r7
 8000b8c:	1b5b      	subs	r3, r3, r5
 8000b8e:	0189      	lsls	r1, r1, #6
 8000b90:	0a4e      	lsrs	r6, r1, #9
 8000b92:	b2d8      	uxtb	r0, r3
 8000b94:	e7d6      	b.n	8000b44 <__aeabi_i2f+0x34>
 8000b96:	1f6a      	subs	r2, r5, #5
 8000b98:	4096      	lsls	r6, r2
 8000b9a:	0031      	movs	r1, r6
 8000b9c:	4f02      	ldr	r7, [pc, #8]	; (8000ba8 <__aeabi_i2f+0x98>)
 8000b9e:	4039      	ands	r1, r7
 8000ba0:	0772      	lsls	r2, r6, #29
 8000ba2:	d0f4      	beq.n	8000b8e <__aeabi_i2f+0x7e>
 8000ba4:	e7e9      	b.n	8000b7a <__aeabi_i2f+0x6a>
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	fbffffff 	.word	0xfbffffff

08000bac <__aeabi_dadd>:
 8000bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bae:	464f      	mov	r7, r9
 8000bb0:	4646      	mov	r6, r8
 8000bb2:	46d6      	mov	lr, sl
 8000bb4:	000d      	movs	r5, r1
 8000bb6:	0004      	movs	r4, r0
 8000bb8:	b5c0      	push	{r6, r7, lr}
 8000bba:	001f      	movs	r7, r3
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0328      	lsls	r0, r5, #12
 8000bc0:	0f62      	lsrs	r2, r4, #29
 8000bc2:	0a40      	lsrs	r0, r0, #9
 8000bc4:	4310      	orrs	r0, r2
 8000bc6:	007a      	lsls	r2, r7, #1
 8000bc8:	0d52      	lsrs	r2, r2, #21
 8000bca:	00e3      	lsls	r3, r4, #3
 8000bcc:	033c      	lsls	r4, r7, #12
 8000bce:	4691      	mov	r9, r2
 8000bd0:	0a64      	lsrs	r4, r4, #9
 8000bd2:	0ffa      	lsrs	r2, r7, #31
 8000bd4:	0f4f      	lsrs	r7, r1, #29
 8000bd6:	006e      	lsls	r6, r5, #1
 8000bd8:	4327      	orrs	r7, r4
 8000bda:	4692      	mov	sl, r2
 8000bdc:	46b8      	mov	r8, r7
 8000bde:	0d76      	lsrs	r6, r6, #21
 8000be0:	0fed      	lsrs	r5, r5, #31
 8000be2:	00c9      	lsls	r1, r1, #3
 8000be4:	4295      	cmp	r5, r2
 8000be6:	d100      	bne.n	8000bea <__aeabi_dadd+0x3e>
 8000be8:	e099      	b.n	8000d1e <__aeabi_dadd+0x172>
 8000bea:	464c      	mov	r4, r9
 8000bec:	1b34      	subs	r4, r6, r4
 8000bee:	46a4      	mov	ip, r4
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	dc00      	bgt.n	8000bf6 <__aeabi_dadd+0x4a>
 8000bf4:	e07c      	b.n	8000cf0 <__aeabi_dadd+0x144>
 8000bf6:	464a      	mov	r2, r9
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x52>
 8000bfc:	e0b8      	b.n	8000d70 <__aeabi_dadd+0x1c4>
 8000bfe:	4ac5      	ldr	r2, [pc, #788]	; (8000f14 <__aeabi_dadd+0x368>)
 8000c00:	4296      	cmp	r6, r2
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x5a>
 8000c04:	e11c      	b.n	8000e40 <__aeabi_dadd+0x294>
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	003c      	movs	r4, r7
 8000c0a:	0412      	lsls	r2, r2, #16
 8000c0c:	4314      	orrs	r4, r2
 8000c0e:	46a0      	mov	r8, r4
 8000c10:	4662      	mov	r2, ip
 8000c12:	2a38      	cmp	r2, #56	; 0x38
 8000c14:	dd00      	ble.n	8000c18 <__aeabi_dadd+0x6c>
 8000c16:	e161      	b.n	8000edc <__aeabi_dadd+0x330>
 8000c18:	2a1f      	cmp	r2, #31
 8000c1a:	dd00      	ble.n	8000c1e <__aeabi_dadd+0x72>
 8000c1c:	e1cc      	b.n	8000fb8 <__aeabi_dadd+0x40c>
 8000c1e:	4664      	mov	r4, ip
 8000c20:	2220      	movs	r2, #32
 8000c22:	1b12      	subs	r2, r2, r4
 8000c24:	4644      	mov	r4, r8
 8000c26:	4094      	lsls	r4, r2
 8000c28:	000f      	movs	r7, r1
 8000c2a:	46a1      	mov	r9, r4
 8000c2c:	4664      	mov	r4, ip
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	40e7      	lsrs	r7, r4
 8000c32:	464c      	mov	r4, r9
 8000c34:	1e4a      	subs	r2, r1, #1
 8000c36:	4191      	sbcs	r1, r2
 8000c38:	433c      	orrs	r4, r7
 8000c3a:	4642      	mov	r2, r8
 8000c3c:	4321      	orrs	r1, r4
 8000c3e:	4664      	mov	r4, ip
 8000c40:	40e2      	lsrs	r2, r4
 8000c42:	1a80      	subs	r0, r0, r2
 8000c44:	1a5c      	subs	r4, r3, r1
 8000c46:	42a3      	cmp	r3, r4
 8000c48:	419b      	sbcs	r3, r3
 8000c4a:	425f      	negs	r7, r3
 8000c4c:	1bc7      	subs	r7, r0, r7
 8000c4e:	023b      	lsls	r3, r7, #8
 8000c50:	d400      	bmi.n	8000c54 <__aeabi_dadd+0xa8>
 8000c52:	e0d0      	b.n	8000df6 <__aeabi_dadd+0x24a>
 8000c54:	027f      	lsls	r7, r7, #9
 8000c56:	0a7f      	lsrs	r7, r7, #9
 8000c58:	2f00      	cmp	r7, #0
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0xb2>
 8000c5c:	e0ff      	b.n	8000e5e <__aeabi_dadd+0x2b2>
 8000c5e:	0038      	movs	r0, r7
 8000c60:	f001 fe5a 	bl	8002918 <__clzsi2>
 8000c64:	0001      	movs	r1, r0
 8000c66:	3908      	subs	r1, #8
 8000c68:	2320      	movs	r3, #32
 8000c6a:	0022      	movs	r2, r4
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	408f      	lsls	r7, r1
 8000c70:	40da      	lsrs	r2, r3
 8000c72:	408c      	lsls	r4, r1
 8000c74:	4317      	orrs	r7, r2
 8000c76:	42b1      	cmp	r1, r6
 8000c78:	da00      	bge.n	8000c7c <__aeabi_dadd+0xd0>
 8000c7a:	e0ff      	b.n	8000e7c <__aeabi_dadd+0x2d0>
 8000c7c:	1b89      	subs	r1, r1, r6
 8000c7e:	1c4b      	adds	r3, r1, #1
 8000c80:	2b1f      	cmp	r3, #31
 8000c82:	dd00      	ble.n	8000c86 <__aeabi_dadd+0xda>
 8000c84:	e0a8      	b.n	8000dd8 <__aeabi_dadd+0x22c>
 8000c86:	2220      	movs	r2, #32
 8000c88:	0039      	movs	r1, r7
 8000c8a:	1ad2      	subs	r2, r2, r3
 8000c8c:	0020      	movs	r0, r4
 8000c8e:	4094      	lsls	r4, r2
 8000c90:	4091      	lsls	r1, r2
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	1e62      	subs	r2, r4, #1
 8000c96:	4194      	sbcs	r4, r2
 8000c98:	40df      	lsrs	r7, r3
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	4301      	orrs	r1, r0
 8000c9e:	430c      	orrs	r4, r1
 8000ca0:	0763      	lsls	r3, r4, #29
 8000ca2:	d009      	beq.n	8000cb8 <__aeabi_dadd+0x10c>
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	4023      	ands	r3, r4
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d005      	beq.n	8000cb8 <__aeabi_dadd+0x10c>
 8000cac:	1d23      	adds	r3, r4, #4
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	41a4      	sbcs	r4, r4
 8000cb2:	4264      	negs	r4, r4
 8000cb4:	193f      	adds	r7, r7, r4
 8000cb6:	001c      	movs	r4, r3
 8000cb8:	023b      	lsls	r3, r7, #8
 8000cba:	d400      	bmi.n	8000cbe <__aeabi_dadd+0x112>
 8000cbc:	e09e      	b.n	8000dfc <__aeabi_dadd+0x250>
 8000cbe:	4b95      	ldr	r3, [pc, #596]	; (8000f14 <__aeabi_dadd+0x368>)
 8000cc0:	3601      	adds	r6, #1
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_dadd+0x11c>
 8000cc6:	e0b7      	b.n	8000e38 <__aeabi_dadd+0x28c>
 8000cc8:	4a93      	ldr	r2, [pc, #588]	; (8000f18 <__aeabi_dadd+0x36c>)
 8000cca:	08e4      	lsrs	r4, r4, #3
 8000ccc:	4017      	ands	r7, r2
 8000cce:	077b      	lsls	r3, r7, #29
 8000cd0:	0571      	lsls	r1, r6, #21
 8000cd2:	027f      	lsls	r7, r7, #9
 8000cd4:	4323      	orrs	r3, r4
 8000cd6:	0b3f      	lsrs	r7, r7, #12
 8000cd8:	0d4a      	lsrs	r2, r1, #21
 8000cda:	0512      	lsls	r2, r2, #20
 8000cdc:	433a      	orrs	r2, r7
 8000cde:	07ed      	lsls	r5, r5, #31
 8000ce0:	432a      	orrs	r2, r5
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	bce0      	pop	{r5, r6, r7}
 8000ce8:	46ba      	mov	sl, r7
 8000cea:	46b1      	mov	r9, r6
 8000cec:	46a8      	mov	r8, r5
 8000cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf0:	2c00      	cmp	r4, #0
 8000cf2:	d04b      	beq.n	8000d8c <__aeabi_dadd+0x1e0>
 8000cf4:	464c      	mov	r4, r9
 8000cf6:	1ba4      	subs	r4, r4, r6
 8000cf8:	46a4      	mov	ip, r4
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_dadd+0x154>
 8000cfe:	e123      	b.n	8000f48 <__aeabi_dadd+0x39c>
 8000d00:	0004      	movs	r4, r0
 8000d02:	431c      	orrs	r4, r3
 8000d04:	d100      	bne.n	8000d08 <__aeabi_dadd+0x15c>
 8000d06:	e1af      	b.n	8001068 <__aeabi_dadd+0x4bc>
 8000d08:	4662      	mov	r2, ip
 8000d0a:	1e54      	subs	r4, r2, #1
 8000d0c:	2a01      	cmp	r2, #1
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_dadd+0x166>
 8000d10:	e215      	b.n	800113e <__aeabi_dadd+0x592>
 8000d12:	4d80      	ldr	r5, [pc, #512]	; (8000f14 <__aeabi_dadd+0x368>)
 8000d14:	45ac      	cmp	ip, r5
 8000d16:	d100      	bne.n	8000d1a <__aeabi_dadd+0x16e>
 8000d18:	e1c8      	b.n	80010ac <__aeabi_dadd+0x500>
 8000d1a:	46a4      	mov	ip, r4
 8000d1c:	e11b      	b.n	8000f56 <__aeabi_dadd+0x3aa>
 8000d1e:	464a      	mov	r2, r9
 8000d20:	1ab2      	subs	r2, r6, r2
 8000d22:	4694      	mov	ip, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	dc00      	bgt.n	8000d2a <__aeabi_dadd+0x17e>
 8000d28:	e0ac      	b.n	8000e84 <__aeabi_dadd+0x2d8>
 8000d2a:	464a      	mov	r2, r9
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	d043      	beq.n	8000db8 <__aeabi_dadd+0x20c>
 8000d30:	4a78      	ldr	r2, [pc, #480]	; (8000f14 <__aeabi_dadd+0x368>)
 8000d32:	4296      	cmp	r6, r2
 8000d34:	d100      	bne.n	8000d38 <__aeabi_dadd+0x18c>
 8000d36:	e1af      	b.n	8001098 <__aeabi_dadd+0x4ec>
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	003c      	movs	r4, r7
 8000d3c:	0412      	lsls	r2, r2, #16
 8000d3e:	4314      	orrs	r4, r2
 8000d40:	46a0      	mov	r8, r4
 8000d42:	4662      	mov	r2, ip
 8000d44:	2a38      	cmp	r2, #56	; 0x38
 8000d46:	dc67      	bgt.n	8000e18 <__aeabi_dadd+0x26c>
 8000d48:	2a1f      	cmp	r2, #31
 8000d4a:	dc00      	bgt.n	8000d4e <__aeabi_dadd+0x1a2>
 8000d4c:	e15f      	b.n	800100e <__aeabi_dadd+0x462>
 8000d4e:	4647      	mov	r7, r8
 8000d50:	3a20      	subs	r2, #32
 8000d52:	40d7      	lsrs	r7, r2
 8000d54:	4662      	mov	r2, ip
 8000d56:	2a20      	cmp	r2, #32
 8000d58:	d005      	beq.n	8000d66 <__aeabi_dadd+0x1ba>
 8000d5a:	4664      	mov	r4, ip
 8000d5c:	2240      	movs	r2, #64	; 0x40
 8000d5e:	1b12      	subs	r2, r2, r4
 8000d60:	4644      	mov	r4, r8
 8000d62:	4094      	lsls	r4, r2
 8000d64:	4321      	orrs	r1, r4
 8000d66:	1e4a      	subs	r2, r1, #1
 8000d68:	4191      	sbcs	r1, r2
 8000d6a:	000c      	movs	r4, r1
 8000d6c:	433c      	orrs	r4, r7
 8000d6e:	e057      	b.n	8000e20 <__aeabi_dadd+0x274>
 8000d70:	003a      	movs	r2, r7
 8000d72:	430a      	orrs	r2, r1
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dadd+0x1cc>
 8000d76:	e105      	b.n	8000f84 <__aeabi_dadd+0x3d8>
 8000d78:	0022      	movs	r2, r4
 8000d7a:	3a01      	subs	r2, #1
 8000d7c:	2c01      	cmp	r4, #1
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_dadd+0x1d6>
 8000d80:	e182      	b.n	8001088 <__aeabi_dadd+0x4dc>
 8000d82:	4c64      	ldr	r4, [pc, #400]	; (8000f14 <__aeabi_dadd+0x368>)
 8000d84:	45a4      	cmp	ip, r4
 8000d86:	d05b      	beq.n	8000e40 <__aeabi_dadd+0x294>
 8000d88:	4694      	mov	ip, r2
 8000d8a:	e741      	b.n	8000c10 <__aeabi_dadd+0x64>
 8000d8c:	4c63      	ldr	r4, [pc, #396]	; (8000f1c <__aeabi_dadd+0x370>)
 8000d8e:	1c77      	adds	r7, r6, #1
 8000d90:	4227      	tst	r7, r4
 8000d92:	d000      	beq.n	8000d96 <__aeabi_dadd+0x1ea>
 8000d94:	e0c4      	b.n	8000f20 <__aeabi_dadd+0x374>
 8000d96:	0004      	movs	r4, r0
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_dadd+0x1f4>
 8000d9e:	e169      	b.n	8001074 <__aeabi_dadd+0x4c8>
 8000da0:	2c00      	cmp	r4, #0
 8000da2:	d100      	bne.n	8000da6 <__aeabi_dadd+0x1fa>
 8000da4:	e1bf      	b.n	8001126 <__aeabi_dadd+0x57a>
 8000da6:	4644      	mov	r4, r8
 8000da8:	430c      	orrs	r4, r1
 8000daa:	d000      	beq.n	8000dae <__aeabi_dadd+0x202>
 8000dac:	e1d0      	b.n	8001150 <__aeabi_dadd+0x5a4>
 8000dae:	0742      	lsls	r2, r0, #29
 8000db0:	08db      	lsrs	r3, r3, #3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	e029      	b.n	8000e0c <__aeabi_dadd+0x260>
 8000db8:	003a      	movs	r2, r7
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_dadd+0x214>
 8000dbe:	e170      	b.n	80010a2 <__aeabi_dadd+0x4f6>
 8000dc0:	4662      	mov	r2, ip
 8000dc2:	4664      	mov	r4, ip
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	2c01      	cmp	r4, #1
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_dadd+0x220>
 8000dca:	e0e0      	b.n	8000f8e <__aeabi_dadd+0x3e2>
 8000dcc:	4c51      	ldr	r4, [pc, #324]	; (8000f14 <__aeabi_dadd+0x368>)
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_dadd+0x228>
 8000dd2:	e161      	b.n	8001098 <__aeabi_dadd+0x4ec>
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	e7b4      	b.n	8000d42 <__aeabi_dadd+0x196>
 8000dd8:	003a      	movs	r2, r7
 8000dda:	391f      	subs	r1, #31
 8000ddc:	40ca      	lsrs	r2, r1
 8000dde:	0011      	movs	r1, r2
 8000de0:	2b20      	cmp	r3, #32
 8000de2:	d003      	beq.n	8000dec <__aeabi_dadd+0x240>
 8000de4:	2240      	movs	r2, #64	; 0x40
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	409f      	lsls	r7, r3
 8000dea:	433c      	orrs	r4, r7
 8000dec:	1e63      	subs	r3, r4, #1
 8000dee:	419c      	sbcs	r4, r3
 8000df0:	2700      	movs	r7, #0
 8000df2:	2600      	movs	r6, #0
 8000df4:	430c      	orrs	r4, r1
 8000df6:	0763      	lsls	r3, r4, #29
 8000df8:	d000      	beq.n	8000dfc <__aeabi_dadd+0x250>
 8000dfa:	e753      	b.n	8000ca4 <__aeabi_dadd+0xf8>
 8000dfc:	46b4      	mov	ip, r6
 8000dfe:	08e4      	lsrs	r4, r4, #3
 8000e00:	077b      	lsls	r3, r7, #29
 8000e02:	4323      	orrs	r3, r4
 8000e04:	08f8      	lsrs	r0, r7, #3
 8000e06:	4a43      	ldr	r2, [pc, #268]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e08:	4594      	cmp	ip, r2
 8000e0a:	d01d      	beq.n	8000e48 <__aeabi_dadd+0x29c>
 8000e0c:	4662      	mov	r2, ip
 8000e0e:	0307      	lsls	r7, r0, #12
 8000e10:	0552      	lsls	r2, r2, #21
 8000e12:	0b3f      	lsrs	r7, r7, #12
 8000e14:	0d52      	lsrs	r2, r2, #21
 8000e16:	e760      	b.n	8000cda <__aeabi_dadd+0x12e>
 8000e18:	4644      	mov	r4, r8
 8000e1a:	430c      	orrs	r4, r1
 8000e1c:	1e62      	subs	r2, r4, #1
 8000e1e:	4194      	sbcs	r4, r2
 8000e20:	18e4      	adds	r4, r4, r3
 8000e22:	429c      	cmp	r4, r3
 8000e24:	419b      	sbcs	r3, r3
 8000e26:	425f      	negs	r7, r3
 8000e28:	183f      	adds	r7, r7, r0
 8000e2a:	023b      	lsls	r3, r7, #8
 8000e2c:	d5e3      	bpl.n	8000df6 <__aeabi_dadd+0x24a>
 8000e2e:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e30:	3601      	adds	r6, #1
 8000e32:	429e      	cmp	r6, r3
 8000e34:	d000      	beq.n	8000e38 <__aeabi_dadd+0x28c>
 8000e36:	e0b5      	b.n	8000fa4 <__aeabi_dadd+0x3f8>
 8000e38:	0032      	movs	r2, r6
 8000e3a:	2700      	movs	r7, #0
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e74c      	b.n	8000cda <__aeabi_dadd+0x12e>
 8000e40:	0742      	lsls	r2, r0, #29
 8000e42:	08db      	lsrs	r3, r3, #3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	08c0      	lsrs	r0, r0, #3
 8000e48:	001a      	movs	r2, r3
 8000e4a:	4302      	orrs	r2, r0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_dadd+0x2a4>
 8000e4e:	e1e1      	b.n	8001214 <__aeabi_dadd+0x668>
 8000e50:	2780      	movs	r7, #128	; 0x80
 8000e52:	033f      	lsls	r7, r7, #12
 8000e54:	4307      	orrs	r7, r0
 8000e56:	033f      	lsls	r7, r7, #12
 8000e58:	4a2e      	ldr	r2, [pc, #184]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e5a:	0b3f      	lsrs	r7, r7, #12
 8000e5c:	e73d      	b.n	8000cda <__aeabi_dadd+0x12e>
 8000e5e:	0020      	movs	r0, r4
 8000e60:	f001 fd5a 	bl	8002918 <__clzsi2>
 8000e64:	0001      	movs	r1, r0
 8000e66:	3118      	adds	r1, #24
 8000e68:	291f      	cmp	r1, #31
 8000e6a:	dc00      	bgt.n	8000e6e <__aeabi_dadd+0x2c2>
 8000e6c:	e6fc      	b.n	8000c68 <__aeabi_dadd+0xbc>
 8000e6e:	3808      	subs	r0, #8
 8000e70:	4084      	lsls	r4, r0
 8000e72:	0027      	movs	r7, r4
 8000e74:	2400      	movs	r4, #0
 8000e76:	42b1      	cmp	r1, r6
 8000e78:	db00      	blt.n	8000e7c <__aeabi_dadd+0x2d0>
 8000e7a:	e6ff      	b.n	8000c7c <__aeabi_dadd+0xd0>
 8000e7c:	4a26      	ldr	r2, [pc, #152]	; (8000f18 <__aeabi_dadd+0x36c>)
 8000e7e:	1a76      	subs	r6, r6, r1
 8000e80:	4017      	ands	r7, r2
 8000e82:	e70d      	b.n	8000ca0 <__aeabi_dadd+0xf4>
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d02f      	beq.n	8000ee8 <__aeabi_dadd+0x33c>
 8000e88:	464a      	mov	r2, r9
 8000e8a:	1b92      	subs	r2, r2, r6
 8000e8c:	4694      	mov	ip, r2
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d100      	bne.n	8000e94 <__aeabi_dadd+0x2e8>
 8000e92:	e0ad      	b.n	8000ff0 <__aeabi_dadd+0x444>
 8000e94:	4a1f      	ldr	r2, [pc, #124]	; (8000f14 <__aeabi_dadd+0x368>)
 8000e96:	4591      	cmp	r9, r2
 8000e98:	d100      	bne.n	8000e9c <__aeabi_dadd+0x2f0>
 8000e9a:	e10f      	b.n	80010bc <__aeabi_dadd+0x510>
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	0412      	lsls	r2, r2, #16
 8000ea0:	4310      	orrs	r0, r2
 8000ea2:	4662      	mov	r2, ip
 8000ea4:	2a38      	cmp	r2, #56	; 0x38
 8000ea6:	dd00      	ble.n	8000eaa <__aeabi_dadd+0x2fe>
 8000ea8:	e10f      	b.n	80010ca <__aeabi_dadd+0x51e>
 8000eaa:	2a1f      	cmp	r2, #31
 8000eac:	dd00      	ble.n	8000eb0 <__aeabi_dadd+0x304>
 8000eae:	e180      	b.n	80011b2 <__aeabi_dadd+0x606>
 8000eb0:	4664      	mov	r4, ip
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	001e      	movs	r6, r3
 8000eb6:	1b12      	subs	r2, r2, r4
 8000eb8:	4667      	mov	r7, ip
 8000eba:	0004      	movs	r4, r0
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	4094      	lsls	r4, r2
 8000ec0:	40fe      	lsrs	r6, r7
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	4193      	sbcs	r3, r2
 8000ec6:	40f8      	lsrs	r0, r7
 8000ec8:	4334      	orrs	r4, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	4480      	add	r8, r0
 8000ece:	1864      	adds	r4, r4, r1
 8000ed0:	428c      	cmp	r4, r1
 8000ed2:	41bf      	sbcs	r7, r7
 8000ed4:	427f      	negs	r7, r7
 8000ed6:	464e      	mov	r6, r9
 8000ed8:	4447      	add	r7, r8
 8000eda:	e7a6      	b.n	8000e2a <__aeabi_dadd+0x27e>
 8000edc:	4642      	mov	r2, r8
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	0011      	movs	r1, r2
 8000ee2:	1e4a      	subs	r2, r1, #1
 8000ee4:	4191      	sbcs	r1, r2
 8000ee6:	e6ad      	b.n	8000c44 <__aeabi_dadd+0x98>
 8000ee8:	4c0c      	ldr	r4, [pc, #48]	; (8000f1c <__aeabi_dadd+0x370>)
 8000eea:	1c72      	adds	r2, r6, #1
 8000eec:	4222      	tst	r2, r4
 8000eee:	d000      	beq.n	8000ef2 <__aeabi_dadd+0x346>
 8000ef0:	e0a1      	b.n	8001036 <__aeabi_dadd+0x48a>
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	d000      	beq.n	8000efc <__aeabi_dadd+0x350>
 8000efa:	e0fa      	b.n	80010f2 <__aeabi_dadd+0x546>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d100      	bne.n	8000f02 <__aeabi_dadd+0x356>
 8000f00:	e145      	b.n	800118e <__aeabi_dadd+0x5e2>
 8000f02:	003a      	movs	r2, r7
 8000f04:	430a      	orrs	r2, r1
 8000f06:	d000      	beq.n	8000f0a <__aeabi_dadd+0x35e>
 8000f08:	e146      	b.n	8001198 <__aeabi_dadd+0x5ec>
 8000f0a:	0742      	lsls	r2, r0, #29
 8000f0c:	08db      	lsrs	r3, r3, #3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	08c0      	lsrs	r0, r0, #3
 8000f12:	e77b      	b.n	8000e0c <__aeabi_dadd+0x260>
 8000f14:	000007ff 	.word	0x000007ff
 8000f18:	ff7fffff 	.word	0xff7fffff
 8000f1c:	000007fe 	.word	0x000007fe
 8000f20:	4647      	mov	r7, r8
 8000f22:	1a5c      	subs	r4, r3, r1
 8000f24:	1bc2      	subs	r2, r0, r7
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	41bf      	sbcs	r7, r7
 8000f2a:	427f      	negs	r7, r7
 8000f2c:	46b9      	mov	r9, r7
 8000f2e:	0017      	movs	r7, r2
 8000f30:	464a      	mov	r2, r9
 8000f32:	1abf      	subs	r7, r7, r2
 8000f34:	023a      	lsls	r2, r7, #8
 8000f36:	d500      	bpl.n	8000f3a <__aeabi_dadd+0x38e>
 8000f38:	e08d      	b.n	8001056 <__aeabi_dadd+0x4aa>
 8000f3a:	0023      	movs	r3, r4
 8000f3c:	433b      	orrs	r3, r7
 8000f3e:	d000      	beq.n	8000f42 <__aeabi_dadd+0x396>
 8000f40:	e68a      	b.n	8000c58 <__aeabi_dadd+0xac>
 8000f42:	2000      	movs	r0, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	e761      	b.n	8000e0c <__aeabi_dadd+0x260>
 8000f48:	4cb4      	ldr	r4, [pc, #720]	; (800121c <__aeabi_dadd+0x670>)
 8000f4a:	45a1      	cmp	r9, r4
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dadd+0x3a4>
 8000f4e:	e0ad      	b.n	80010ac <__aeabi_dadd+0x500>
 8000f50:	2480      	movs	r4, #128	; 0x80
 8000f52:	0424      	lsls	r4, r4, #16
 8000f54:	4320      	orrs	r0, r4
 8000f56:	4664      	mov	r4, ip
 8000f58:	2c38      	cmp	r4, #56	; 0x38
 8000f5a:	dc3d      	bgt.n	8000fd8 <__aeabi_dadd+0x42c>
 8000f5c:	4662      	mov	r2, ip
 8000f5e:	2c1f      	cmp	r4, #31
 8000f60:	dd00      	ble.n	8000f64 <__aeabi_dadd+0x3b8>
 8000f62:	e0b7      	b.n	80010d4 <__aeabi_dadd+0x528>
 8000f64:	2520      	movs	r5, #32
 8000f66:	001e      	movs	r6, r3
 8000f68:	1b2d      	subs	r5, r5, r4
 8000f6a:	0004      	movs	r4, r0
 8000f6c:	40ab      	lsls	r3, r5
 8000f6e:	40ac      	lsls	r4, r5
 8000f70:	40d6      	lsrs	r6, r2
 8000f72:	40d0      	lsrs	r0, r2
 8000f74:	4642      	mov	r2, r8
 8000f76:	1e5d      	subs	r5, r3, #1
 8000f78:	41ab      	sbcs	r3, r5
 8000f7a:	4334      	orrs	r4, r6
 8000f7c:	1a12      	subs	r2, r2, r0
 8000f7e:	4690      	mov	r8, r2
 8000f80:	4323      	orrs	r3, r4
 8000f82:	e02c      	b.n	8000fde <__aeabi_dadd+0x432>
 8000f84:	0742      	lsls	r2, r0, #29
 8000f86:	08db      	lsrs	r3, r3, #3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	08c0      	lsrs	r0, r0, #3
 8000f8c:	e73b      	b.n	8000e06 <__aeabi_dadd+0x25a>
 8000f8e:	185c      	adds	r4, r3, r1
 8000f90:	429c      	cmp	r4, r3
 8000f92:	419b      	sbcs	r3, r3
 8000f94:	4440      	add	r0, r8
 8000f96:	425b      	negs	r3, r3
 8000f98:	18c7      	adds	r7, r0, r3
 8000f9a:	2601      	movs	r6, #1
 8000f9c:	023b      	lsls	r3, r7, #8
 8000f9e:	d400      	bmi.n	8000fa2 <__aeabi_dadd+0x3f6>
 8000fa0:	e729      	b.n	8000df6 <__aeabi_dadd+0x24a>
 8000fa2:	2602      	movs	r6, #2
 8000fa4:	4a9e      	ldr	r2, [pc, #632]	; (8001220 <__aeabi_dadd+0x674>)
 8000fa6:	0863      	lsrs	r3, r4, #1
 8000fa8:	4017      	ands	r7, r2
 8000faa:	2201      	movs	r2, #1
 8000fac:	4014      	ands	r4, r2
 8000fae:	431c      	orrs	r4, r3
 8000fb0:	07fb      	lsls	r3, r7, #31
 8000fb2:	431c      	orrs	r4, r3
 8000fb4:	087f      	lsrs	r7, r7, #1
 8000fb6:	e673      	b.n	8000ca0 <__aeabi_dadd+0xf4>
 8000fb8:	4644      	mov	r4, r8
 8000fba:	3a20      	subs	r2, #32
 8000fbc:	40d4      	lsrs	r4, r2
 8000fbe:	4662      	mov	r2, ip
 8000fc0:	2a20      	cmp	r2, #32
 8000fc2:	d005      	beq.n	8000fd0 <__aeabi_dadd+0x424>
 8000fc4:	4667      	mov	r7, ip
 8000fc6:	2240      	movs	r2, #64	; 0x40
 8000fc8:	1bd2      	subs	r2, r2, r7
 8000fca:	4647      	mov	r7, r8
 8000fcc:	4097      	lsls	r7, r2
 8000fce:	4339      	orrs	r1, r7
 8000fd0:	1e4a      	subs	r2, r1, #1
 8000fd2:	4191      	sbcs	r1, r2
 8000fd4:	4321      	orrs	r1, r4
 8000fd6:	e635      	b.n	8000c44 <__aeabi_dadd+0x98>
 8000fd8:	4303      	orrs	r3, r0
 8000fda:	1e58      	subs	r0, r3, #1
 8000fdc:	4183      	sbcs	r3, r0
 8000fde:	1acc      	subs	r4, r1, r3
 8000fe0:	42a1      	cmp	r1, r4
 8000fe2:	41bf      	sbcs	r7, r7
 8000fe4:	4643      	mov	r3, r8
 8000fe6:	427f      	negs	r7, r7
 8000fe8:	4655      	mov	r5, sl
 8000fea:	464e      	mov	r6, r9
 8000fec:	1bdf      	subs	r7, r3, r7
 8000fee:	e62e      	b.n	8000c4e <__aeabi_dadd+0xa2>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_dadd+0x44c>
 8000ff6:	e0bd      	b.n	8001174 <__aeabi_dadd+0x5c8>
 8000ff8:	4662      	mov	r2, ip
 8000ffa:	4664      	mov	r4, ip
 8000ffc:	3a01      	subs	r2, #1
 8000ffe:	2c01      	cmp	r4, #1
 8001000:	d100      	bne.n	8001004 <__aeabi_dadd+0x458>
 8001002:	e0e5      	b.n	80011d0 <__aeabi_dadd+0x624>
 8001004:	4c85      	ldr	r4, [pc, #532]	; (800121c <__aeabi_dadd+0x670>)
 8001006:	45a4      	cmp	ip, r4
 8001008:	d058      	beq.n	80010bc <__aeabi_dadd+0x510>
 800100a:	4694      	mov	ip, r2
 800100c:	e749      	b.n	8000ea2 <__aeabi_dadd+0x2f6>
 800100e:	4664      	mov	r4, ip
 8001010:	2220      	movs	r2, #32
 8001012:	1b12      	subs	r2, r2, r4
 8001014:	4644      	mov	r4, r8
 8001016:	4094      	lsls	r4, r2
 8001018:	000f      	movs	r7, r1
 800101a:	46a1      	mov	r9, r4
 800101c:	4664      	mov	r4, ip
 800101e:	4091      	lsls	r1, r2
 8001020:	40e7      	lsrs	r7, r4
 8001022:	464c      	mov	r4, r9
 8001024:	1e4a      	subs	r2, r1, #1
 8001026:	4191      	sbcs	r1, r2
 8001028:	433c      	orrs	r4, r7
 800102a:	4642      	mov	r2, r8
 800102c:	430c      	orrs	r4, r1
 800102e:	4661      	mov	r1, ip
 8001030:	40ca      	lsrs	r2, r1
 8001032:	1880      	adds	r0, r0, r2
 8001034:	e6f4      	b.n	8000e20 <__aeabi_dadd+0x274>
 8001036:	4c79      	ldr	r4, [pc, #484]	; (800121c <__aeabi_dadd+0x670>)
 8001038:	42a2      	cmp	r2, r4
 800103a:	d100      	bne.n	800103e <__aeabi_dadd+0x492>
 800103c:	e6fd      	b.n	8000e3a <__aeabi_dadd+0x28e>
 800103e:	1859      	adds	r1, r3, r1
 8001040:	4299      	cmp	r1, r3
 8001042:	419b      	sbcs	r3, r3
 8001044:	4440      	add	r0, r8
 8001046:	425f      	negs	r7, r3
 8001048:	19c7      	adds	r7, r0, r7
 800104a:	07fc      	lsls	r4, r7, #31
 800104c:	0849      	lsrs	r1, r1, #1
 800104e:	0016      	movs	r6, r2
 8001050:	430c      	orrs	r4, r1
 8001052:	087f      	lsrs	r7, r7, #1
 8001054:	e6cf      	b.n	8000df6 <__aeabi_dadd+0x24a>
 8001056:	1acc      	subs	r4, r1, r3
 8001058:	42a1      	cmp	r1, r4
 800105a:	41bf      	sbcs	r7, r7
 800105c:	4643      	mov	r3, r8
 800105e:	427f      	negs	r7, r7
 8001060:	1a18      	subs	r0, r3, r0
 8001062:	4655      	mov	r5, sl
 8001064:	1bc7      	subs	r7, r0, r7
 8001066:	e5f7      	b.n	8000c58 <__aeabi_dadd+0xac>
 8001068:	08c9      	lsrs	r1, r1, #3
 800106a:	077b      	lsls	r3, r7, #29
 800106c:	4655      	mov	r5, sl
 800106e:	430b      	orrs	r3, r1
 8001070:	08f8      	lsrs	r0, r7, #3
 8001072:	e6c8      	b.n	8000e06 <__aeabi_dadd+0x25a>
 8001074:	2c00      	cmp	r4, #0
 8001076:	d000      	beq.n	800107a <__aeabi_dadd+0x4ce>
 8001078:	e081      	b.n	800117e <__aeabi_dadd+0x5d2>
 800107a:	4643      	mov	r3, r8
 800107c:	430b      	orrs	r3, r1
 800107e:	d115      	bne.n	80010ac <__aeabi_dadd+0x500>
 8001080:	2080      	movs	r0, #128	; 0x80
 8001082:	2500      	movs	r5, #0
 8001084:	0300      	lsls	r0, r0, #12
 8001086:	e6e3      	b.n	8000e50 <__aeabi_dadd+0x2a4>
 8001088:	1a5c      	subs	r4, r3, r1
 800108a:	42a3      	cmp	r3, r4
 800108c:	419b      	sbcs	r3, r3
 800108e:	1bc7      	subs	r7, r0, r7
 8001090:	425b      	negs	r3, r3
 8001092:	2601      	movs	r6, #1
 8001094:	1aff      	subs	r7, r7, r3
 8001096:	e5da      	b.n	8000c4e <__aeabi_dadd+0xa2>
 8001098:	0742      	lsls	r2, r0, #29
 800109a:	08db      	lsrs	r3, r3, #3
 800109c:	4313      	orrs	r3, r2
 800109e:	08c0      	lsrs	r0, r0, #3
 80010a0:	e6d2      	b.n	8000e48 <__aeabi_dadd+0x29c>
 80010a2:	0742      	lsls	r2, r0, #29
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	08c0      	lsrs	r0, r0, #3
 80010aa:	e6ac      	b.n	8000e06 <__aeabi_dadd+0x25a>
 80010ac:	4643      	mov	r3, r8
 80010ae:	4642      	mov	r2, r8
 80010b0:	08c9      	lsrs	r1, r1, #3
 80010b2:	075b      	lsls	r3, r3, #29
 80010b4:	4655      	mov	r5, sl
 80010b6:	430b      	orrs	r3, r1
 80010b8:	08d0      	lsrs	r0, r2, #3
 80010ba:	e6c5      	b.n	8000e48 <__aeabi_dadd+0x29c>
 80010bc:	4643      	mov	r3, r8
 80010be:	4642      	mov	r2, r8
 80010c0:	075b      	lsls	r3, r3, #29
 80010c2:	08c9      	lsrs	r1, r1, #3
 80010c4:	430b      	orrs	r3, r1
 80010c6:	08d0      	lsrs	r0, r2, #3
 80010c8:	e6be      	b.n	8000e48 <__aeabi_dadd+0x29c>
 80010ca:	4303      	orrs	r3, r0
 80010cc:	001c      	movs	r4, r3
 80010ce:	1e63      	subs	r3, r4, #1
 80010d0:	419c      	sbcs	r4, r3
 80010d2:	e6fc      	b.n	8000ece <__aeabi_dadd+0x322>
 80010d4:	0002      	movs	r2, r0
 80010d6:	3c20      	subs	r4, #32
 80010d8:	40e2      	lsrs	r2, r4
 80010da:	0014      	movs	r4, r2
 80010dc:	4662      	mov	r2, ip
 80010de:	2a20      	cmp	r2, #32
 80010e0:	d003      	beq.n	80010ea <__aeabi_dadd+0x53e>
 80010e2:	2540      	movs	r5, #64	; 0x40
 80010e4:	1aad      	subs	r5, r5, r2
 80010e6:	40a8      	lsls	r0, r5
 80010e8:	4303      	orrs	r3, r0
 80010ea:	1e58      	subs	r0, r3, #1
 80010ec:	4183      	sbcs	r3, r0
 80010ee:	4323      	orrs	r3, r4
 80010f0:	e775      	b.n	8000fde <__aeabi_dadd+0x432>
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	d0e2      	beq.n	80010bc <__aeabi_dadd+0x510>
 80010f6:	003a      	movs	r2, r7
 80010f8:	430a      	orrs	r2, r1
 80010fa:	d0cd      	beq.n	8001098 <__aeabi_dadd+0x4ec>
 80010fc:	0742      	lsls	r2, r0, #29
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	4313      	orrs	r3, r2
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	08c0      	lsrs	r0, r0, #3
 8001106:	0312      	lsls	r2, r2, #12
 8001108:	4210      	tst	r0, r2
 800110a:	d006      	beq.n	800111a <__aeabi_dadd+0x56e>
 800110c:	08fc      	lsrs	r4, r7, #3
 800110e:	4214      	tst	r4, r2
 8001110:	d103      	bne.n	800111a <__aeabi_dadd+0x56e>
 8001112:	0020      	movs	r0, r4
 8001114:	08cb      	lsrs	r3, r1, #3
 8001116:	077a      	lsls	r2, r7, #29
 8001118:	4313      	orrs	r3, r2
 800111a:	0f5a      	lsrs	r2, r3, #29
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	0752      	lsls	r2, r2, #29
 8001120:	08db      	lsrs	r3, r3, #3
 8001122:	4313      	orrs	r3, r2
 8001124:	e690      	b.n	8000e48 <__aeabi_dadd+0x29c>
 8001126:	4643      	mov	r3, r8
 8001128:	430b      	orrs	r3, r1
 800112a:	d100      	bne.n	800112e <__aeabi_dadd+0x582>
 800112c:	e709      	b.n	8000f42 <__aeabi_dadd+0x396>
 800112e:	4643      	mov	r3, r8
 8001130:	4642      	mov	r2, r8
 8001132:	08c9      	lsrs	r1, r1, #3
 8001134:	075b      	lsls	r3, r3, #29
 8001136:	4655      	mov	r5, sl
 8001138:	430b      	orrs	r3, r1
 800113a:	08d0      	lsrs	r0, r2, #3
 800113c:	e666      	b.n	8000e0c <__aeabi_dadd+0x260>
 800113e:	1acc      	subs	r4, r1, r3
 8001140:	42a1      	cmp	r1, r4
 8001142:	4189      	sbcs	r1, r1
 8001144:	1a3f      	subs	r7, r7, r0
 8001146:	4249      	negs	r1, r1
 8001148:	4655      	mov	r5, sl
 800114a:	2601      	movs	r6, #1
 800114c:	1a7f      	subs	r7, r7, r1
 800114e:	e57e      	b.n	8000c4e <__aeabi_dadd+0xa2>
 8001150:	4642      	mov	r2, r8
 8001152:	1a5c      	subs	r4, r3, r1
 8001154:	1a87      	subs	r7, r0, r2
 8001156:	42a3      	cmp	r3, r4
 8001158:	4192      	sbcs	r2, r2
 800115a:	4252      	negs	r2, r2
 800115c:	1abf      	subs	r7, r7, r2
 800115e:	023a      	lsls	r2, r7, #8
 8001160:	d53d      	bpl.n	80011de <__aeabi_dadd+0x632>
 8001162:	1acc      	subs	r4, r1, r3
 8001164:	42a1      	cmp	r1, r4
 8001166:	4189      	sbcs	r1, r1
 8001168:	4643      	mov	r3, r8
 800116a:	4249      	negs	r1, r1
 800116c:	1a1f      	subs	r7, r3, r0
 800116e:	4655      	mov	r5, sl
 8001170:	1a7f      	subs	r7, r7, r1
 8001172:	e595      	b.n	8000ca0 <__aeabi_dadd+0xf4>
 8001174:	077b      	lsls	r3, r7, #29
 8001176:	08c9      	lsrs	r1, r1, #3
 8001178:	430b      	orrs	r3, r1
 800117a:	08f8      	lsrs	r0, r7, #3
 800117c:	e643      	b.n	8000e06 <__aeabi_dadd+0x25a>
 800117e:	4644      	mov	r4, r8
 8001180:	08db      	lsrs	r3, r3, #3
 8001182:	430c      	orrs	r4, r1
 8001184:	d130      	bne.n	80011e8 <__aeabi_dadd+0x63c>
 8001186:	0742      	lsls	r2, r0, #29
 8001188:	4313      	orrs	r3, r2
 800118a:	08c0      	lsrs	r0, r0, #3
 800118c:	e65c      	b.n	8000e48 <__aeabi_dadd+0x29c>
 800118e:	077b      	lsls	r3, r7, #29
 8001190:	08c9      	lsrs	r1, r1, #3
 8001192:	430b      	orrs	r3, r1
 8001194:	08f8      	lsrs	r0, r7, #3
 8001196:	e639      	b.n	8000e0c <__aeabi_dadd+0x260>
 8001198:	185c      	adds	r4, r3, r1
 800119a:	429c      	cmp	r4, r3
 800119c:	419b      	sbcs	r3, r3
 800119e:	4440      	add	r0, r8
 80011a0:	425b      	negs	r3, r3
 80011a2:	18c7      	adds	r7, r0, r3
 80011a4:	023b      	lsls	r3, r7, #8
 80011a6:	d400      	bmi.n	80011aa <__aeabi_dadd+0x5fe>
 80011a8:	e625      	b.n	8000df6 <__aeabi_dadd+0x24a>
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <__aeabi_dadd+0x674>)
 80011ac:	2601      	movs	r6, #1
 80011ae:	401f      	ands	r7, r3
 80011b0:	e621      	b.n	8000df6 <__aeabi_dadd+0x24a>
 80011b2:	0004      	movs	r4, r0
 80011b4:	3a20      	subs	r2, #32
 80011b6:	40d4      	lsrs	r4, r2
 80011b8:	4662      	mov	r2, ip
 80011ba:	2a20      	cmp	r2, #32
 80011bc:	d004      	beq.n	80011c8 <__aeabi_dadd+0x61c>
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	4666      	mov	r6, ip
 80011c2:	1b92      	subs	r2, r2, r6
 80011c4:	4090      	lsls	r0, r2
 80011c6:	4303      	orrs	r3, r0
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	4193      	sbcs	r3, r2
 80011cc:	431c      	orrs	r4, r3
 80011ce:	e67e      	b.n	8000ece <__aeabi_dadd+0x322>
 80011d0:	185c      	adds	r4, r3, r1
 80011d2:	428c      	cmp	r4, r1
 80011d4:	4189      	sbcs	r1, r1
 80011d6:	4440      	add	r0, r8
 80011d8:	4249      	negs	r1, r1
 80011da:	1847      	adds	r7, r0, r1
 80011dc:	e6dd      	b.n	8000f9a <__aeabi_dadd+0x3ee>
 80011de:	0023      	movs	r3, r4
 80011e0:	433b      	orrs	r3, r7
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dadd+0x63a>
 80011e4:	e6ad      	b.n	8000f42 <__aeabi_dadd+0x396>
 80011e6:	e606      	b.n	8000df6 <__aeabi_dadd+0x24a>
 80011e8:	0744      	lsls	r4, r0, #29
 80011ea:	4323      	orrs	r3, r4
 80011ec:	2480      	movs	r4, #128	; 0x80
 80011ee:	08c0      	lsrs	r0, r0, #3
 80011f0:	0324      	lsls	r4, r4, #12
 80011f2:	4220      	tst	r0, r4
 80011f4:	d008      	beq.n	8001208 <__aeabi_dadd+0x65c>
 80011f6:	4642      	mov	r2, r8
 80011f8:	08d6      	lsrs	r6, r2, #3
 80011fa:	4226      	tst	r6, r4
 80011fc:	d104      	bne.n	8001208 <__aeabi_dadd+0x65c>
 80011fe:	4655      	mov	r5, sl
 8001200:	0030      	movs	r0, r6
 8001202:	08cb      	lsrs	r3, r1, #3
 8001204:	0751      	lsls	r1, r2, #29
 8001206:	430b      	orrs	r3, r1
 8001208:	0f5a      	lsrs	r2, r3, #29
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	0752      	lsls	r2, r2, #29
 8001210:	4313      	orrs	r3, r2
 8001212:	e619      	b.n	8000e48 <__aeabi_dadd+0x29c>
 8001214:	2300      	movs	r3, #0
 8001216:	4a01      	ldr	r2, [pc, #4]	; (800121c <__aeabi_dadd+0x670>)
 8001218:	001f      	movs	r7, r3
 800121a:	e55e      	b.n	8000cda <__aeabi_dadd+0x12e>
 800121c:	000007ff 	.word	0x000007ff
 8001220:	ff7fffff 	.word	0xff7fffff

08001224 <__aeabi_ddiv>:
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	4657      	mov	r7, sl
 8001228:	464e      	mov	r6, r9
 800122a:	4645      	mov	r5, r8
 800122c:	46de      	mov	lr, fp
 800122e:	b5e0      	push	{r5, r6, r7, lr}
 8001230:	4681      	mov	r9, r0
 8001232:	0005      	movs	r5, r0
 8001234:	030c      	lsls	r4, r1, #12
 8001236:	0048      	lsls	r0, r1, #1
 8001238:	4692      	mov	sl, r2
 800123a:	001f      	movs	r7, r3
 800123c:	b085      	sub	sp, #20
 800123e:	0b24      	lsrs	r4, r4, #12
 8001240:	0d40      	lsrs	r0, r0, #21
 8001242:	0fce      	lsrs	r6, r1, #31
 8001244:	2800      	cmp	r0, #0
 8001246:	d100      	bne.n	800124a <__aeabi_ddiv+0x26>
 8001248:	e156      	b.n	80014f8 <__aeabi_ddiv+0x2d4>
 800124a:	4bd4      	ldr	r3, [pc, #848]	; (800159c <__aeabi_ddiv+0x378>)
 800124c:	4298      	cmp	r0, r3
 800124e:	d100      	bne.n	8001252 <__aeabi_ddiv+0x2e>
 8001250:	e172      	b.n	8001538 <__aeabi_ddiv+0x314>
 8001252:	0f6b      	lsrs	r3, r5, #29
 8001254:	00e4      	lsls	r4, r4, #3
 8001256:	431c      	orrs	r4, r3
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	041b      	lsls	r3, r3, #16
 800125c:	4323      	orrs	r3, r4
 800125e:	4698      	mov	r8, r3
 8001260:	4bcf      	ldr	r3, [pc, #828]	; (80015a0 <__aeabi_ddiv+0x37c>)
 8001262:	00ed      	lsls	r5, r5, #3
 8001264:	469b      	mov	fp, r3
 8001266:	2300      	movs	r3, #0
 8001268:	4699      	mov	r9, r3
 800126a:	4483      	add	fp, r0
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	033c      	lsls	r4, r7, #12
 8001270:	007b      	lsls	r3, r7, #1
 8001272:	4650      	mov	r0, sl
 8001274:	0b24      	lsrs	r4, r4, #12
 8001276:	0d5b      	lsrs	r3, r3, #21
 8001278:	0fff      	lsrs	r7, r7, #31
 800127a:	2b00      	cmp	r3, #0
 800127c:	d100      	bne.n	8001280 <__aeabi_ddiv+0x5c>
 800127e:	e11f      	b.n	80014c0 <__aeabi_ddiv+0x29c>
 8001280:	4ac6      	ldr	r2, [pc, #792]	; (800159c <__aeabi_ddiv+0x378>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x64>
 8001286:	e162      	b.n	800154e <__aeabi_ddiv+0x32a>
 8001288:	49c5      	ldr	r1, [pc, #788]	; (80015a0 <__aeabi_ddiv+0x37c>)
 800128a:	0f42      	lsrs	r2, r0, #29
 800128c:	468c      	mov	ip, r1
 800128e:	00e4      	lsls	r4, r4, #3
 8001290:	4659      	mov	r1, fp
 8001292:	4314      	orrs	r4, r2
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	4463      	add	r3, ip
 8001298:	0412      	lsls	r2, r2, #16
 800129a:	1acb      	subs	r3, r1, r3
 800129c:	4314      	orrs	r4, r2
 800129e:	469b      	mov	fp, r3
 80012a0:	00c2      	lsls	r2, r0, #3
 80012a2:	2000      	movs	r0, #0
 80012a4:	0033      	movs	r3, r6
 80012a6:	407b      	eors	r3, r7
 80012a8:	469a      	mov	sl, r3
 80012aa:	464b      	mov	r3, r9
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d827      	bhi.n	8001300 <__aeabi_ddiv+0xdc>
 80012b0:	49bc      	ldr	r1, [pc, #752]	; (80015a4 <__aeabi_ddiv+0x380>)
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	58cb      	ldr	r3, [r1, r3]
 80012b6:	469f      	mov	pc, r3
 80012b8:	46b2      	mov	sl, r6
 80012ba:	9b00      	ldr	r3, [sp, #0]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d016      	beq.n	80012ee <__aeabi_ddiv+0xca>
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0xa2>
 80012c4:	e28e      	b.n	80017e4 <__aeabi_ddiv+0x5c0>
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d000      	beq.n	80012cc <__aeabi_ddiv+0xa8>
 80012ca:	e0d9      	b.n	8001480 <__aeabi_ddiv+0x25c>
 80012cc:	2300      	movs	r3, #0
 80012ce:	2400      	movs	r4, #0
 80012d0:	2500      	movs	r5, #0
 80012d2:	4652      	mov	r2, sl
 80012d4:	051b      	lsls	r3, r3, #20
 80012d6:	4323      	orrs	r3, r4
 80012d8:	07d2      	lsls	r2, r2, #31
 80012da:	4313      	orrs	r3, r2
 80012dc:	0028      	movs	r0, r5
 80012de:	0019      	movs	r1, r3
 80012e0:	b005      	add	sp, #20
 80012e2:	bcf0      	pop	{r4, r5, r6, r7}
 80012e4:	46bb      	mov	fp, r7
 80012e6:	46b2      	mov	sl, r6
 80012e8:	46a9      	mov	r9, r5
 80012ea:	46a0      	mov	r8, r4
 80012ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ee:	2400      	movs	r4, #0
 80012f0:	2500      	movs	r5, #0
 80012f2:	4baa      	ldr	r3, [pc, #680]	; (800159c <__aeabi_ddiv+0x378>)
 80012f4:	e7ed      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80012f6:	46ba      	mov	sl, r7
 80012f8:	46a0      	mov	r8, r4
 80012fa:	0015      	movs	r5, r2
 80012fc:	9000      	str	r0, [sp, #0]
 80012fe:	e7dc      	b.n	80012ba <__aeabi_ddiv+0x96>
 8001300:	4544      	cmp	r4, r8
 8001302:	d200      	bcs.n	8001306 <__aeabi_ddiv+0xe2>
 8001304:	e1c7      	b.n	8001696 <__aeabi_ddiv+0x472>
 8001306:	d100      	bne.n	800130a <__aeabi_ddiv+0xe6>
 8001308:	e1c2      	b.n	8001690 <__aeabi_ddiv+0x46c>
 800130a:	2301      	movs	r3, #1
 800130c:	425b      	negs	r3, r3
 800130e:	469c      	mov	ip, r3
 8001310:	002e      	movs	r6, r5
 8001312:	4640      	mov	r0, r8
 8001314:	2500      	movs	r5, #0
 8001316:	44e3      	add	fp, ip
 8001318:	0223      	lsls	r3, r4, #8
 800131a:	0e14      	lsrs	r4, r2, #24
 800131c:	431c      	orrs	r4, r3
 800131e:	0c1b      	lsrs	r3, r3, #16
 8001320:	4699      	mov	r9, r3
 8001322:	0423      	lsls	r3, r4, #16
 8001324:	0c1f      	lsrs	r7, r3, #16
 8001326:	0212      	lsls	r2, r2, #8
 8001328:	4649      	mov	r1, r9
 800132a:	9200      	str	r2, [sp, #0]
 800132c:	9701      	str	r7, [sp, #4]
 800132e:	f7fe ff93 	bl	8000258 <__aeabi_uidivmod>
 8001332:	0002      	movs	r2, r0
 8001334:	437a      	muls	r2, r7
 8001336:	040b      	lsls	r3, r1, #16
 8001338:	0c31      	lsrs	r1, r6, #16
 800133a:	4680      	mov	r8, r0
 800133c:	4319      	orrs	r1, r3
 800133e:	428a      	cmp	r2, r1
 8001340:	d907      	bls.n	8001352 <__aeabi_ddiv+0x12e>
 8001342:	2301      	movs	r3, #1
 8001344:	425b      	negs	r3, r3
 8001346:	469c      	mov	ip, r3
 8001348:	1909      	adds	r1, r1, r4
 800134a:	44e0      	add	r8, ip
 800134c:	428c      	cmp	r4, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x12e>
 8001350:	e207      	b.n	8001762 <__aeabi_ddiv+0x53e>
 8001352:	1a88      	subs	r0, r1, r2
 8001354:	4649      	mov	r1, r9
 8001356:	f7fe ff7f 	bl	8000258 <__aeabi_uidivmod>
 800135a:	0409      	lsls	r1, r1, #16
 800135c:	468c      	mov	ip, r1
 800135e:	0431      	lsls	r1, r6, #16
 8001360:	4666      	mov	r6, ip
 8001362:	9a01      	ldr	r2, [sp, #4]
 8001364:	0c09      	lsrs	r1, r1, #16
 8001366:	4342      	muls	r2, r0
 8001368:	0003      	movs	r3, r0
 800136a:	4331      	orrs	r1, r6
 800136c:	428a      	cmp	r2, r1
 800136e:	d904      	bls.n	800137a <__aeabi_ddiv+0x156>
 8001370:	1909      	adds	r1, r1, r4
 8001372:	3b01      	subs	r3, #1
 8001374:	428c      	cmp	r4, r1
 8001376:	d800      	bhi.n	800137a <__aeabi_ddiv+0x156>
 8001378:	e1ed      	b.n	8001756 <__aeabi_ddiv+0x532>
 800137a:	1a88      	subs	r0, r1, r2
 800137c:	4642      	mov	r2, r8
 800137e:	0412      	lsls	r2, r2, #16
 8001380:	431a      	orrs	r2, r3
 8001382:	4690      	mov	r8, r2
 8001384:	4641      	mov	r1, r8
 8001386:	9b00      	ldr	r3, [sp, #0]
 8001388:	040e      	lsls	r6, r1, #16
 800138a:	0c1b      	lsrs	r3, r3, #16
 800138c:	001f      	movs	r7, r3
 800138e:	9302      	str	r3, [sp, #8]
 8001390:	9b00      	ldr	r3, [sp, #0]
 8001392:	0c36      	lsrs	r6, r6, #16
 8001394:	041b      	lsls	r3, r3, #16
 8001396:	0c19      	lsrs	r1, r3, #16
 8001398:	000b      	movs	r3, r1
 800139a:	4373      	muls	r3, r6
 800139c:	0c12      	lsrs	r2, r2, #16
 800139e:	437e      	muls	r6, r7
 80013a0:	9103      	str	r1, [sp, #12]
 80013a2:	4351      	muls	r1, r2
 80013a4:	437a      	muls	r2, r7
 80013a6:	0c1f      	lsrs	r7, r3, #16
 80013a8:	46bc      	mov	ip, r7
 80013aa:	1876      	adds	r6, r6, r1
 80013ac:	4466      	add	r6, ip
 80013ae:	42b1      	cmp	r1, r6
 80013b0:	d903      	bls.n	80013ba <__aeabi_ddiv+0x196>
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	0249      	lsls	r1, r1, #9
 80013b6:	468c      	mov	ip, r1
 80013b8:	4462      	add	r2, ip
 80013ba:	0c31      	lsrs	r1, r6, #16
 80013bc:	188a      	adds	r2, r1, r2
 80013be:	0431      	lsls	r1, r6, #16
 80013c0:	041e      	lsls	r6, r3, #16
 80013c2:	0c36      	lsrs	r6, r6, #16
 80013c4:	198e      	adds	r6, r1, r6
 80013c6:	4290      	cmp	r0, r2
 80013c8:	d302      	bcc.n	80013d0 <__aeabi_ddiv+0x1ac>
 80013ca:	d112      	bne.n	80013f2 <__aeabi_ddiv+0x1ce>
 80013cc:	42b5      	cmp	r5, r6
 80013ce:	d210      	bcs.n	80013f2 <__aeabi_ddiv+0x1ce>
 80013d0:	4643      	mov	r3, r8
 80013d2:	1e59      	subs	r1, r3, #1
 80013d4:	9b00      	ldr	r3, [sp, #0]
 80013d6:	469c      	mov	ip, r3
 80013d8:	4465      	add	r5, ip
 80013da:	001f      	movs	r7, r3
 80013dc:	429d      	cmp	r5, r3
 80013de:	419b      	sbcs	r3, r3
 80013e0:	425b      	negs	r3, r3
 80013e2:	191b      	adds	r3, r3, r4
 80013e4:	18c0      	adds	r0, r0, r3
 80013e6:	4284      	cmp	r4, r0
 80013e8:	d200      	bcs.n	80013ec <__aeabi_ddiv+0x1c8>
 80013ea:	e1a0      	b.n	800172e <__aeabi_ddiv+0x50a>
 80013ec:	d100      	bne.n	80013f0 <__aeabi_ddiv+0x1cc>
 80013ee:	e19b      	b.n	8001728 <__aeabi_ddiv+0x504>
 80013f0:	4688      	mov	r8, r1
 80013f2:	1bae      	subs	r6, r5, r6
 80013f4:	42b5      	cmp	r5, r6
 80013f6:	41ad      	sbcs	r5, r5
 80013f8:	1a80      	subs	r0, r0, r2
 80013fa:	426d      	negs	r5, r5
 80013fc:	1b40      	subs	r0, r0, r5
 80013fe:	4284      	cmp	r4, r0
 8001400:	d100      	bne.n	8001404 <__aeabi_ddiv+0x1e0>
 8001402:	e1d5      	b.n	80017b0 <__aeabi_ddiv+0x58c>
 8001404:	4649      	mov	r1, r9
 8001406:	f7fe ff27 	bl	8000258 <__aeabi_uidivmod>
 800140a:	9a01      	ldr	r2, [sp, #4]
 800140c:	040b      	lsls	r3, r1, #16
 800140e:	4342      	muls	r2, r0
 8001410:	0c31      	lsrs	r1, r6, #16
 8001412:	0005      	movs	r5, r0
 8001414:	4319      	orrs	r1, r3
 8001416:	428a      	cmp	r2, r1
 8001418:	d900      	bls.n	800141c <__aeabi_ddiv+0x1f8>
 800141a:	e16c      	b.n	80016f6 <__aeabi_ddiv+0x4d2>
 800141c:	1a88      	subs	r0, r1, r2
 800141e:	4649      	mov	r1, r9
 8001420:	f7fe ff1a 	bl	8000258 <__aeabi_uidivmod>
 8001424:	9a01      	ldr	r2, [sp, #4]
 8001426:	0436      	lsls	r6, r6, #16
 8001428:	4342      	muls	r2, r0
 800142a:	0409      	lsls	r1, r1, #16
 800142c:	0c36      	lsrs	r6, r6, #16
 800142e:	0003      	movs	r3, r0
 8001430:	430e      	orrs	r6, r1
 8001432:	42b2      	cmp	r2, r6
 8001434:	d900      	bls.n	8001438 <__aeabi_ddiv+0x214>
 8001436:	e153      	b.n	80016e0 <__aeabi_ddiv+0x4bc>
 8001438:	9803      	ldr	r0, [sp, #12]
 800143a:	1ab6      	subs	r6, r6, r2
 800143c:	0002      	movs	r2, r0
 800143e:	042d      	lsls	r5, r5, #16
 8001440:	431d      	orrs	r5, r3
 8001442:	9f02      	ldr	r7, [sp, #8]
 8001444:	042b      	lsls	r3, r5, #16
 8001446:	0c1b      	lsrs	r3, r3, #16
 8001448:	435a      	muls	r2, r3
 800144a:	437b      	muls	r3, r7
 800144c:	469c      	mov	ip, r3
 800144e:	0c29      	lsrs	r1, r5, #16
 8001450:	4348      	muls	r0, r1
 8001452:	0c13      	lsrs	r3, r2, #16
 8001454:	4484      	add	ip, r0
 8001456:	4463      	add	r3, ip
 8001458:	4379      	muls	r1, r7
 800145a:	4298      	cmp	r0, r3
 800145c:	d903      	bls.n	8001466 <__aeabi_ddiv+0x242>
 800145e:	2080      	movs	r0, #128	; 0x80
 8001460:	0240      	lsls	r0, r0, #9
 8001462:	4684      	mov	ip, r0
 8001464:	4461      	add	r1, ip
 8001466:	0c18      	lsrs	r0, r3, #16
 8001468:	0412      	lsls	r2, r2, #16
 800146a:	041b      	lsls	r3, r3, #16
 800146c:	0c12      	lsrs	r2, r2, #16
 800146e:	1841      	adds	r1, r0, r1
 8001470:	189b      	adds	r3, r3, r2
 8001472:	428e      	cmp	r6, r1
 8001474:	d200      	bcs.n	8001478 <__aeabi_ddiv+0x254>
 8001476:	e0ff      	b.n	8001678 <__aeabi_ddiv+0x454>
 8001478:	d100      	bne.n	800147c <__aeabi_ddiv+0x258>
 800147a:	e0fa      	b.n	8001672 <__aeabi_ddiv+0x44e>
 800147c:	2301      	movs	r3, #1
 800147e:	431d      	orrs	r5, r3
 8001480:	4a49      	ldr	r2, [pc, #292]	; (80015a8 <__aeabi_ddiv+0x384>)
 8001482:	445a      	add	r2, fp
 8001484:	2a00      	cmp	r2, #0
 8001486:	dc00      	bgt.n	800148a <__aeabi_ddiv+0x266>
 8001488:	e0aa      	b.n	80015e0 <__aeabi_ddiv+0x3bc>
 800148a:	076b      	lsls	r3, r5, #29
 800148c:	d000      	beq.n	8001490 <__aeabi_ddiv+0x26c>
 800148e:	e13d      	b.n	800170c <__aeabi_ddiv+0x4e8>
 8001490:	08ed      	lsrs	r5, r5, #3
 8001492:	4643      	mov	r3, r8
 8001494:	01db      	lsls	r3, r3, #7
 8001496:	d506      	bpl.n	80014a6 <__aeabi_ddiv+0x282>
 8001498:	4642      	mov	r2, r8
 800149a:	4b44      	ldr	r3, [pc, #272]	; (80015ac <__aeabi_ddiv+0x388>)
 800149c:	401a      	ands	r2, r3
 800149e:	4690      	mov	r8, r2
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	00d2      	lsls	r2, r2, #3
 80014a4:	445a      	add	r2, fp
 80014a6:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <__aeabi_ddiv+0x38c>)
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dd00      	ble.n	80014ae <__aeabi_ddiv+0x28a>
 80014ac:	e71f      	b.n	80012ee <__aeabi_ddiv+0xca>
 80014ae:	4643      	mov	r3, r8
 80014b0:	075b      	lsls	r3, r3, #29
 80014b2:	431d      	orrs	r5, r3
 80014b4:	4643      	mov	r3, r8
 80014b6:	0552      	lsls	r2, r2, #21
 80014b8:	025c      	lsls	r4, r3, #9
 80014ba:	0b24      	lsrs	r4, r4, #12
 80014bc:	0d53      	lsrs	r3, r2, #21
 80014be:	e708      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80014c0:	4652      	mov	r2, sl
 80014c2:	4322      	orrs	r2, r4
 80014c4:	d100      	bne.n	80014c8 <__aeabi_ddiv+0x2a4>
 80014c6:	e07b      	b.n	80015c0 <__aeabi_ddiv+0x39c>
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d100      	bne.n	80014ce <__aeabi_ddiv+0x2aa>
 80014cc:	e0fa      	b.n	80016c4 <__aeabi_ddiv+0x4a0>
 80014ce:	0020      	movs	r0, r4
 80014d0:	f001 fa22 	bl	8002918 <__clzsi2>
 80014d4:	0002      	movs	r2, r0
 80014d6:	3a0b      	subs	r2, #11
 80014d8:	231d      	movs	r3, #29
 80014da:	0001      	movs	r1, r0
 80014dc:	1a9b      	subs	r3, r3, r2
 80014de:	4652      	mov	r2, sl
 80014e0:	3908      	subs	r1, #8
 80014e2:	40da      	lsrs	r2, r3
 80014e4:	408c      	lsls	r4, r1
 80014e6:	4314      	orrs	r4, r2
 80014e8:	4652      	mov	r2, sl
 80014ea:	408a      	lsls	r2, r1
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <__aeabi_ddiv+0x390>)
 80014ee:	4458      	add	r0, fp
 80014f0:	469b      	mov	fp, r3
 80014f2:	4483      	add	fp, r0
 80014f4:	2000      	movs	r0, #0
 80014f6:	e6d5      	b.n	80012a4 <__aeabi_ddiv+0x80>
 80014f8:	464b      	mov	r3, r9
 80014fa:	4323      	orrs	r3, r4
 80014fc:	4698      	mov	r8, r3
 80014fe:	d044      	beq.n	800158a <__aeabi_ddiv+0x366>
 8001500:	2c00      	cmp	r4, #0
 8001502:	d100      	bne.n	8001506 <__aeabi_ddiv+0x2e2>
 8001504:	e0ce      	b.n	80016a4 <__aeabi_ddiv+0x480>
 8001506:	0020      	movs	r0, r4
 8001508:	f001 fa06 	bl	8002918 <__clzsi2>
 800150c:	0001      	movs	r1, r0
 800150e:	0002      	movs	r2, r0
 8001510:	390b      	subs	r1, #11
 8001512:	231d      	movs	r3, #29
 8001514:	1a5b      	subs	r3, r3, r1
 8001516:	4649      	mov	r1, r9
 8001518:	0010      	movs	r0, r2
 800151a:	40d9      	lsrs	r1, r3
 800151c:	3808      	subs	r0, #8
 800151e:	4084      	lsls	r4, r0
 8001520:	000b      	movs	r3, r1
 8001522:	464d      	mov	r5, r9
 8001524:	4323      	orrs	r3, r4
 8001526:	4698      	mov	r8, r3
 8001528:	4085      	lsls	r5, r0
 800152a:	4823      	ldr	r0, [pc, #140]	; (80015b8 <__aeabi_ddiv+0x394>)
 800152c:	1a83      	subs	r3, r0, r2
 800152e:	469b      	mov	fp, r3
 8001530:	2300      	movs	r3, #0
 8001532:	4699      	mov	r9, r3
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	e69a      	b.n	800126e <__aeabi_ddiv+0x4a>
 8001538:	464b      	mov	r3, r9
 800153a:	4323      	orrs	r3, r4
 800153c:	4698      	mov	r8, r3
 800153e:	d11d      	bne.n	800157c <__aeabi_ddiv+0x358>
 8001540:	2308      	movs	r3, #8
 8001542:	4699      	mov	r9, r3
 8001544:	3b06      	subs	r3, #6
 8001546:	2500      	movs	r5, #0
 8001548:	4683      	mov	fp, r0
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	e68f      	b.n	800126e <__aeabi_ddiv+0x4a>
 800154e:	4652      	mov	r2, sl
 8001550:	4322      	orrs	r2, r4
 8001552:	d109      	bne.n	8001568 <__aeabi_ddiv+0x344>
 8001554:	2302      	movs	r3, #2
 8001556:	4649      	mov	r1, r9
 8001558:	4319      	orrs	r1, r3
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <__aeabi_ddiv+0x398>)
 800155c:	4689      	mov	r9, r1
 800155e:	469c      	mov	ip, r3
 8001560:	2400      	movs	r4, #0
 8001562:	2002      	movs	r0, #2
 8001564:	44e3      	add	fp, ip
 8001566:	e69d      	b.n	80012a4 <__aeabi_ddiv+0x80>
 8001568:	2303      	movs	r3, #3
 800156a:	464a      	mov	r2, r9
 800156c:	431a      	orrs	r2, r3
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <__aeabi_ddiv+0x398>)
 8001570:	4691      	mov	r9, r2
 8001572:	469c      	mov	ip, r3
 8001574:	4652      	mov	r2, sl
 8001576:	2003      	movs	r0, #3
 8001578:	44e3      	add	fp, ip
 800157a:	e693      	b.n	80012a4 <__aeabi_ddiv+0x80>
 800157c:	230c      	movs	r3, #12
 800157e:	4699      	mov	r9, r3
 8001580:	3b09      	subs	r3, #9
 8001582:	46a0      	mov	r8, r4
 8001584:	4683      	mov	fp, r0
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	e671      	b.n	800126e <__aeabi_ddiv+0x4a>
 800158a:	2304      	movs	r3, #4
 800158c:	4699      	mov	r9, r3
 800158e:	2300      	movs	r3, #0
 8001590:	469b      	mov	fp, r3
 8001592:	3301      	adds	r3, #1
 8001594:	2500      	movs	r5, #0
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	e669      	b.n	800126e <__aeabi_ddiv+0x4a>
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	000007ff 	.word	0x000007ff
 80015a0:	fffffc01 	.word	0xfffffc01
 80015a4:	080127e4 	.word	0x080127e4
 80015a8:	000003ff 	.word	0x000003ff
 80015ac:	feffffff 	.word	0xfeffffff
 80015b0:	000007fe 	.word	0x000007fe
 80015b4:	000003f3 	.word	0x000003f3
 80015b8:	fffffc0d 	.word	0xfffffc0d
 80015bc:	fffff801 	.word	0xfffff801
 80015c0:	4649      	mov	r1, r9
 80015c2:	2301      	movs	r3, #1
 80015c4:	4319      	orrs	r1, r3
 80015c6:	4689      	mov	r9, r1
 80015c8:	2400      	movs	r4, #0
 80015ca:	2001      	movs	r0, #1
 80015cc:	e66a      	b.n	80012a4 <__aeabi_ddiv+0x80>
 80015ce:	2300      	movs	r3, #0
 80015d0:	2480      	movs	r4, #128	; 0x80
 80015d2:	469a      	mov	sl, r3
 80015d4:	2500      	movs	r5, #0
 80015d6:	4b8a      	ldr	r3, [pc, #552]	; (8001800 <__aeabi_ddiv+0x5dc>)
 80015d8:	0324      	lsls	r4, r4, #12
 80015da:	e67a      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80015dc:	2501      	movs	r5, #1
 80015de:	426d      	negs	r5, r5
 80015e0:	2301      	movs	r3, #1
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	2b38      	cmp	r3, #56	; 0x38
 80015e6:	dd00      	ble.n	80015ea <__aeabi_ddiv+0x3c6>
 80015e8:	e670      	b.n	80012cc <__aeabi_ddiv+0xa8>
 80015ea:	2b1f      	cmp	r3, #31
 80015ec:	dc00      	bgt.n	80015f0 <__aeabi_ddiv+0x3cc>
 80015ee:	e0bf      	b.n	8001770 <__aeabi_ddiv+0x54c>
 80015f0:	211f      	movs	r1, #31
 80015f2:	4249      	negs	r1, r1
 80015f4:	1a8a      	subs	r2, r1, r2
 80015f6:	4641      	mov	r1, r8
 80015f8:	40d1      	lsrs	r1, r2
 80015fa:	000a      	movs	r2, r1
 80015fc:	2b20      	cmp	r3, #32
 80015fe:	d004      	beq.n	800160a <__aeabi_ddiv+0x3e6>
 8001600:	4641      	mov	r1, r8
 8001602:	4b80      	ldr	r3, [pc, #512]	; (8001804 <__aeabi_ddiv+0x5e0>)
 8001604:	445b      	add	r3, fp
 8001606:	4099      	lsls	r1, r3
 8001608:	430d      	orrs	r5, r1
 800160a:	1e6b      	subs	r3, r5, #1
 800160c:	419d      	sbcs	r5, r3
 800160e:	2307      	movs	r3, #7
 8001610:	432a      	orrs	r2, r5
 8001612:	001d      	movs	r5, r3
 8001614:	2400      	movs	r4, #0
 8001616:	4015      	ands	r5, r2
 8001618:	4213      	tst	r3, r2
 800161a:	d100      	bne.n	800161e <__aeabi_ddiv+0x3fa>
 800161c:	e0d4      	b.n	80017c8 <__aeabi_ddiv+0x5a4>
 800161e:	210f      	movs	r1, #15
 8001620:	2300      	movs	r3, #0
 8001622:	4011      	ands	r1, r2
 8001624:	2904      	cmp	r1, #4
 8001626:	d100      	bne.n	800162a <__aeabi_ddiv+0x406>
 8001628:	e0cb      	b.n	80017c2 <__aeabi_ddiv+0x59e>
 800162a:	1d11      	adds	r1, r2, #4
 800162c:	4291      	cmp	r1, r2
 800162e:	4192      	sbcs	r2, r2
 8001630:	4252      	negs	r2, r2
 8001632:	189b      	adds	r3, r3, r2
 8001634:	000a      	movs	r2, r1
 8001636:	0219      	lsls	r1, r3, #8
 8001638:	d400      	bmi.n	800163c <__aeabi_ddiv+0x418>
 800163a:	e0c2      	b.n	80017c2 <__aeabi_ddiv+0x59e>
 800163c:	2301      	movs	r3, #1
 800163e:	2400      	movs	r4, #0
 8001640:	2500      	movs	r5, #0
 8001642:	e646      	b.n	80012d2 <__aeabi_ddiv+0xae>
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	4641      	mov	r1, r8
 8001648:	031b      	lsls	r3, r3, #12
 800164a:	4219      	tst	r1, r3
 800164c:	d008      	beq.n	8001660 <__aeabi_ddiv+0x43c>
 800164e:	421c      	tst	r4, r3
 8001650:	d106      	bne.n	8001660 <__aeabi_ddiv+0x43c>
 8001652:	431c      	orrs	r4, r3
 8001654:	0324      	lsls	r4, r4, #12
 8001656:	46ba      	mov	sl, r7
 8001658:	0015      	movs	r5, r2
 800165a:	4b69      	ldr	r3, [pc, #420]	; (8001800 <__aeabi_ddiv+0x5dc>)
 800165c:	0b24      	lsrs	r4, r4, #12
 800165e:	e638      	b.n	80012d2 <__aeabi_ddiv+0xae>
 8001660:	2480      	movs	r4, #128	; 0x80
 8001662:	4643      	mov	r3, r8
 8001664:	0324      	lsls	r4, r4, #12
 8001666:	431c      	orrs	r4, r3
 8001668:	0324      	lsls	r4, r4, #12
 800166a:	46b2      	mov	sl, r6
 800166c:	4b64      	ldr	r3, [pc, #400]	; (8001800 <__aeabi_ddiv+0x5dc>)
 800166e:	0b24      	lsrs	r4, r4, #12
 8001670:	e62f      	b.n	80012d2 <__aeabi_ddiv+0xae>
 8001672:	2b00      	cmp	r3, #0
 8001674:	d100      	bne.n	8001678 <__aeabi_ddiv+0x454>
 8001676:	e703      	b.n	8001480 <__aeabi_ddiv+0x25c>
 8001678:	19a6      	adds	r6, r4, r6
 800167a:	1e68      	subs	r0, r5, #1
 800167c:	42a6      	cmp	r6, r4
 800167e:	d200      	bcs.n	8001682 <__aeabi_ddiv+0x45e>
 8001680:	e08d      	b.n	800179e <__aeabi_ddiv+0x57a>
 8001682:	428e      	cmp	r6, r1
 8001684:	d200      	bcs.n	8001688 <__aeabi_ddiv+0x464>
 8001686:	e0a3      	b.n	80017d0 <__aeabi_ddiv+0x5ac>
 8001688:	d100      	bne.n	800168c <__aeabi_ddiv+0x468>
 800168a:	e0b3      	b.n	80017f4 <__aeabi_ddiv+0x5d0>
 800168c:	0005      	movs	r5, r0
 800168e:	e6f5      	b.n	800147c <__aeabi_ddiv+0x258>
 8001690:	42aa      	cmp	r2, r5
 8001692:	d900      	bls.n	8001696 <__aeabi_ddiv+0x472>
 8001694:	e639      	b.n	800130a <__aeabi_ddiv+0xe6>
 8001696:	4643      	mov	r3, r8
 8001698:	07de      	lsls	r6, r3, #31
 800169a:	0858      	lsrs	r0, r3, #1
 800169c:	086b      	lsrs	r3, r5, #1
 800169e:	431e      	orrs	r6, r3
 80016a0:	07ed      	lsls	r5, r5, #31
 80016a2:	e639      	b.n	8001318 <__aeabi_ddiv+0xf4>
 80016a4:	4648      	mov	r0, r9
 80016a6:	f001 f937 	bl	8002918 <__clzsi2>
 80016aa:	0001      	movs	r1, r0
 80016ac:	0002      	movs	r2, r0
 80016ae:	3115      	adds	r1, #21
 80016b0:	3220      	adds	r2, #32
 80016b2:	291c      	cmp	r1, #28
 80016b4:	dc00      	bgt.n	80016b8 <__aeabi_ddiv+0x494>
 80016b6:	e72c      	b.n	8001512 <__aeabi_ddiv+0x2ee>
 80016b8:	464b      	mov	r3, r9
 80016ba:	3808      	subs	r0, #8
 80016bc:	4083      	lsls	r3, r0
 80016be:	2500      	movs	r5, #0
 80016c0:	4698      	mov	r8, r3
 80016c2:	e732      	b.n	800152a <__aeabi_ddiv+0x306>
 80016c4:	f001 f928 	bl	8002918 <__clzsi2>
 80016c8:	0003      	movs	r3, r0
 80016ca:	001a      	movs	r2, r3
 80016cc:	3215      	adds	r2, #21
 80016ce:	3020      	adds	r0, #32
 80016d0:	2a1c      	cmp	r2, #28
 80016d2:	dc00      	bgt.n	80016d6 <__aeabi_ddiv+0x4b2>
 80016d4:	e700      	b.n	80014d8 <__aeabi_ddiv+0x2b4>
 80016d6:	4654      	mov	r4, sl
 80016d8:	3b08      	subs	r3, #8
 80016da:	2200      	movs	r2, #0
 80016dc:	409c      	lsls	r4, r3
 80016de:	e705      	b.n	80014ec <__aeabi_ddiv+0x2c8>
 80016e0:	1936      	adds	r6, r6, r4
 80016e2:	3b01      	subs	r3, #1
 80016e4:	42b4      	cmp	r4, r6
 80016e6:	d900      	bls.n	80016ea <__aeabi_ddiv+0x4c6>
 80016e8:	e6a6      	b.n	8001438 <__aeabi_ddiv+0x214>
 80016ea:	42b2      	cmp	r2, r6
 80016ec:	d800      	bhi.n	80016f0 <__aeabi_ddiv+0x4cc>
 80016ee:	e6a3      	b.n	8001438 <__aeabi_ddiv+0x214>
 80016f0:	1e83      	subs	r3, r0, #2
 80016f2:	1936      	adds	r6, r6, r4
 80016f4:	e6a0      	b.n	8001438 <__aeabi_ddiv+0x214>
 80016f6:	1909      	adds	r1, r1, r4
 80016f8:	3d01      	subs	r5, #1
 80016fa:	428c      	cmp	r4, r1
 80016fc:	d900      	bls.n	8001700 <__aeabi_ddiv+0x4dc>
 80016fe:	e68d      	b.n	800141c <__aeabi_ddiv+0x1f8>
 8001700:	428a      	cmp	r2, r1
 8001702:	d800      	bhi.n	8001706 <__aeabi_ddiv+0x4e2>
 8001704:	e68a      	b.n	800141c <__aeabi_ddiv+0x1f8>
 8001706:	1e85      	subs	r5, r0, #2
 8001708:	1909      	adds	r1, r1, r4
 800170a:	e687      	b.n	800141c <__aeabi_ddiv+0x1f8>
 800170c:	230f      	movs	r3, #15
 800170e:	402b      	ands	r3, r5
 8001710:	2b04      	cmp	r3, #4
 8001712:	d100      	bne.n	8001716 <__aeabi_ddiv+0x4f2>
 8001714:	e6bc      	b.n	8001490 <__aeabi_ddiv+0x26c>
 8001716:	2305      	movs	r3, #5
 8001718:	425b      	negs	r3, r3
 800171a:	42ab      	cmp	r3, r5
 800171c:	419b      	sbcs	r3, r3
 800171e:	3504      	adds	r5, #4
 8001720:	425b      	negs	r3, r3
 8001722:	08ed      	lsrs	r5, r5, #3
 8001724:	4498      	add	r8, r3
 8001726:	e6b4      	b.n	8001492 <__aeabi_ddiv+0x26e>
 8001728:	42af      	cmp	r7, r5
 800172a:	d900      	bls.n	800172e <__aeabi_ddiv+0x50a>
 800172c:	e660      	b.n	80013f0 <__aeabi_ddiv+0x1cc>
 800172e:	4282      	cmp	r2, r0
 8001730:	d804      	bhi.n	800173c <__aeabi_ddiv+0x518>
 8001732:	d000      	beq.n	8001736 <__aeabi_ddiv+0x512>
 8001734:	e65c      	b.n	80013f0 <__aeabi_ddiv+0x1cc>
 8001736:	42ae      	cmp	r6, r5
 8001738:	d800      	bhi.n	800173c <__aeabi_ddiv+0x518>
 800173a:	e659      	b.n	80013f0 <__aeabi_ddiv+0x1cc>
 800173c:	2302      	movs	r3, #2
 800173e:	425b      	negs	r3, r3
 8001740:	469c      	mov	ip, r3
 8001742:	9b00      	ldr	r3, [sp, #0]
 8001744:	44e0      	add	r8, ip
 8001746:	469c      	mov	ip, r3
 8001748:	4465      	add	r5, ip
 800174a:	429d      	cmp	r5, r3
 800174c:	419b      	sbcs	r3, r3
 800174e:	425b      	negs	r3, r3
 8001750:	191b      	adds	r3, r3, r4
 8001752:	18c0      	adds	r0, r0, r3
 8001754:	e64d      	b.n	80013f2 <__aeabi_ddiv+0x1ce>
 8001756:	428a      	cmp	r2, r1
 8001758:	d800      	bhi.n	800175c <__aeabi_ddiv+0x538>
 800175a:	e60e      	b.n	800137a <__aeabi_ddiv+0x156>
 800175c:	1e83      	subs	r3, r0, #2
 800175e:	1909      	adds	r1, r1, r4
 8001760:	e60b      	b.n	800137a <__aeabi_ddiv+0x156>
 8001762:	428a      	cmp	r2, r1
 8001764:	d800      	bhi.n	8001768 <__aeabi_ddiv+0x544>
 8001766:	e5f4      	b.n	8001352 <__aeabi_ddiv+0x12e>
 8001768:	1e83      	subs	r3, r0, #2
 800176a:	4698      	mov	r8, r3
 800176c:	1909      	adds	r1, r1, r4
 800176e:	e5f0      	b.n	8001352 <__aeabi_ddiv+0x12e>
 8001770:	4925      	ldr	r1, [pc, #148]	; (8001808 <__aeabi_ddiv+0x5e4>)
 8001772:	0028      	movs	r0, r5
 8001774:	4459      	add	r1, fp
 8001776:	408d      	lsls	r5, r1
 8001778:	4642      	mov	r2, r8
 800177a:	408a      	lsls	r2, r1
 800177c:	1e69      	subs	r1, r5, #1
 800177e:	418d      	sbcs	r5, r1
 8001780:	4641      	mov	r1, r8
 8001782:	40d8      	lsrs	r0, r3
 8001784:	40d9      	lsrs	r1, r3
 8001786:	4302      	orrs	r2, r0
 8001788:	432a      	orrs	r2, r5
 800178a:	000b      	movs	r3, r1
 800178c:	0751      	lsls	r1, r2, #29
 800178e:	d100      	bne.n	8001792 <__aeabi_ddiv+0x56e>
 8001790:	e751      	b.n	8001636 <__aeabi_ddiv+0x412>
 8001792:	210f      	movs	r1, #15
 8001794:	4011      	ands	r1, r2
 8001796:	2904      	cmp	r1, #4
 8001798:	d000      	beq.n	800179c <__aeabi_ddiv+0x578>
 800179a:	e746      	b.n	800162a <__aeabi_ddiv+0x406>
 800179c:	e74b      	b.n	8001636 <__aeabi_ddiv+0x412>
 800179e:	0005      	movs	r5, r0
 80017a0:	428e      	cmp	r6, r1
 80017a2:	d000      	beq.n	80017a6 <__aeabi_ddiv+0x582>
 80017a4:	e66a      	b.n	800147c <__aeabi_ddiv+0x258>
 80017a6:	9a00      	ldr	r2, [sp, #0]
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d000      	beq.n	80017ae <__aeabi_ddiv+0x58a>
 80017ac:	e666      	b.n	800147c <__aeabi_ddiv+0x258>
 80017ae:	e667      	b.n	8001480 <__aeabi_ddiv+0x25c>
 80017b0:	4a16      	ldr	r2, [pc, #88]	; (800180c <__aeabi_ddiv+0x5e8>)
 80017b2:	445a      	add	r2, fp
 80017b4:	2a00      	cmp	r2, #0
 80017b6:	dc00      	bgt.n	80017ba <__aeabi_ddiv+0x596>
 80017b8:	e710      	b.n	80015dc <__aeabi_ddiv+0x3b8>
 80017ba:	2301      	movs	r3, #1
 80017bc:	2500      	movs	r5, #0
 80017be:	4498      	add	r8, r3
 80017c0:	e667      	b.n	8001492 <__aeabi_ddiv+0x26e>
 80017c2:	075d      	lsls	r5, r3, #29
 80017c4:	025b      	lsls	r3, r3, #9
 80017c6:	0b1c      	lsrs	r4, r3, #12
 80017c8:	08d2      	lsrs	r2, r2, #3
 80017ca:	2300      	movs	r3, #0
 80017cc:	4315      	orrs	r5, r2
 80017ce:	e580      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80017d0:	9800      	ldr	r0, [sp, #0]
 80017d2:	3d02      	subs	r5, #2
 80017d4:	0042      	lsls	r2, r0, #1
 80017d6:	4282      	cmp	r2, r0
 80017d8:	41bf      	sbcs	r7, r7
 80017da:	427f      	negs	r7, r7
 80017dc:	193c      	adds	r4, r7, r4
 80017de:	1936      	adds	r6, r6, r4
 80017e0:	9200      	str	r2, [sp, #0]
 80017e2:	e7dd      	b.n	80017a0 <__aeabi_ddiv+0x57c>
 80017e4:	2480      	movs	r4, #128	; 0x80
 80017e6:	4643      	mov	r3, r8
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	431c      	orrs	r4, r3
 80017ec:	0324      	lsls	r4, r4, #12
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__aeabi_ddiv+0x5dc>)
 80017f0:	0b24      	lsrs	r4, r4, #12
 80017f2:	e56e      	b.n	80012d2 <__aeabi_ddiv+0xae>
 80017f4:	9a00      	ldr	r2, [sp, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3ea      	bcc.n	80017d0 <__aeabi_ddiv+0x5ac>
 80017fa:	0005      	movs	r5, r0
 80017fc:	e7d3      	b.n	80017a6 <__aeabi_ddiv+0x582>
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	000007ff 	.word	0x000007ff
 8001804:	0000043e 	.word	0x0000043e
 8001808:	0000041e 	.word	0x0000041e
 800180c:	000003ff 	.word	0x000003ff

08001810 <__eqdf2>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	464e      	mov	r6, r9
 8001814:	4645      	mov	r5, r8
 8001816:	46de      	mov	lr, fp
 8001818:	4657      	mov	r7, sl
 800181a:	4690      	mov	r8, r2
 800181c:	b5e0      	push	{r5, r6, r7, lr}
 800181e:	0017      	movs	r7, r2
 8001820:	031a      	lsls	r2, r3, #12
 8001822:	0b12      	lsrs	r2, r2, #12
 8001824:	0005      	movs	r5, r0
 8001826:	4684      	mov	ip, r0
 8001828:	4819      	ldr	r0, [pc, #100]	; (8001890 <__eqdf2+0x80>)
 800182a:	030e      	lsls	r6, r1, #12
 800182c:	004c      	lsls	r4, r1, #1
 800182e:	4691      	mov	r9, r2
 8001830:	005a      	lsls	r2, r3, #1
 8001832:	0fdb      	lsrs	r3, r3, #31
 8001834:	469b      	mov	fp, r3
 8001836:	0b36      	lsrs	r6, r6, #12
 8001838:	0d64      	lsrs	r4, r4, #21
 800183a:	0fc9      	lsrs	r1, r1, #31
 800183c:	0d52      	lsrs	r2, r2, #21
 800183e:	4284      	cmp	r4, r0
 8001840:	d019      	beq.n	8001876 <__eqdf2+0x66>
 8001842:	4282      	cmp	r2, r0
 8001844:	d010      	beq.n	8001868 <__eqdf2+0x58>
 8001846:	2001      	movs	r0, #1
 8001848:	4294      	cmp	r4, r2
 800184a:	d10e      	bne.n	800186a <__eqdf2+0x5a>
 800184c:	454e      	cmp	r6, r9
 800184e:	d10c      	bne.n	800186a <__eqdf2+0x5a>
 8001850:	2001      	movs	r0, #1
 8001852:	45c4      	cmp	ip, r8
 8001854:	d109      	bne.n	800186a <__eqdf2+0x5a>
 8001856:	4559      	cmp	r1, fp
 8001858:	d017      	beq.n	800188a <__eqdf2+0x7a>
 800185a:	2c00      	cmp	r4, #0
 800185c:	d105      	bne.n	800186a <__eqdf2+0x5a>
 800185e:	0030      	movs	r0, r6
 8001860:	4328      	orrs	r0, r5
 8001862:	1e43      	subs	r3, r0, #1
 8001864:	4198      	sbcs	r0, r3
 8001866:	e000      	b.n	800186a <__eqdf2+0x5a>
 8001868:	2001      	movs	r0, #1
 800186a:	bcf0      	pop	{r4, r5, r6, r7}
 800186c:	46bb      	mov	fp, r7
 800186e:	46b2      	mov	sl, r6
 8001870:	46a9      	mov	r9, r5
 8001872:	46a0      	mov	r8, r4
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001876:	0033      	movs	r3, r6
 8001878:	2001      	movs	r0, #1
 800187a:	432b      	orrs	r3, r5
 800187c:	d1f5      	bne.n	800186a <__eqdf2+0x5a>
 800187e:	42a2      	cmp	r2, r4
 8001880:	d1f3      	bne.n	800186a <__eqdf2+0x5a>
 8001882:	464b      	mov	r3, r9
 8001884:	433b      	orrs	r3, r7
 8001886:	d1f0      	bne.n	800186a <__eqdf2+0x5a>
 8001888:	e7e2      	b.n	8001850 <__eqdf2+0x40>
 800188a:	2000      	movs	r0, #0
 800188c:	e7ed      	b.n	800186a <__eqdf2+0x5a>
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	000007ff 	.word	0x000007ff

08001894 <__gedf2>:
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	4647      	mov	r7, r8
 8001898:	46ce      	mov	lr, r9
 800189a:	0004      	movs	r4, r0
 800189c:	0018      	movs	r0, r3
 800189e:	0016      	movs	r6, r2
 80018a0:	031b      	lsls	r3, r3, #12
 80018a2:	0b1b      	lsrs	r3, r3, #12
 80018a4:	4d2d      	ldr	r5, [pc, #180]	; (800195c <__gedf2+0xc8>)
 80018a6:	004a      	lsls	r2, r1, #1
 80018a8:	4699      	mov	r9, r3
 80018aa:	b580      	push	{r7, lr}
 80018ac:	0043      	lsls	r3, r0, #1
 80018ae:	030f      	lsls	r7, r1, #12
 80018b0:	46a4      	mov	ip, r4
 80018b2:	46b0      	mov	r8, r6
 80018b4:	0b3f      	lsrs	r7, r7, #12
 80018b6:	0d52      	lsrs	r2, r2, #21
 80018b8:	0fc9      	lsrs	r1, r1, #31
 80018ba:	0d5b      	lsrs	r3, r3, #21
 80018bc:	0fc0      	lsrs	r0, r0, #31
 80018be:	42aa      	cmp	r2, r5
 80018c0:	d021      	beq.n	8001906 <__gedf2+0x72>
 80018c2:	42ab      	cmp	r3, r5
 80018c4:	d013      	beq.n	80018ee <__gedf2+0x5a>
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d122      	bne.n	8001910 <__gedf2+0x7c>
 80018ca:	433c      	orrs	r4, r7
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <__gedf2+0x42>
 80018d0:	464d      	mov	r5, r9
 80018d2:	432e      	orrs	r6, r5
 80018d4:	d022      	beq.n	800191c <__gedf2+0x88>
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d010      	beq.n	80018fc <__gedf2+0x68>
 80018da:	4281      	cmp	r1, r0
 80018dc:	d022      	beq.n	8001924 <__gedf2+0x90>
 80018de:	2002      	movs	r0, #2
 80018e0:	3901      	subs	r1, #1
 80018e2:	4008      	ands	r0, r1
 80018e4:	3801      	subs	r0, #1
 80018e6:	bcc0      	pop	{r6, r7}
 80018e8:	46b9      	mov	r9, r7
 80018ea:	46b0      	mov	r8, r6
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ee:	464d      	mov	r5, r9
 80018f0:	432e      	orrs	r6, r5
 80018f2:	d129      	bne.n	8001948 <__gedf2+0xb4>
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d1f0      	bne.n	80018da <__gedf2+0x46>
 80018f8:	433c      	orrs	r4, r7
 80018fa:	d1ee      	bne.n	80018da <__gedf2+0x46>
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d1f2      	bne.n	80018e6 <__gedf2+0x52>
 8001900:	2001      	movs	r0, #1
 8001902:	4240      	negs	r0, r0
 8001904:	e7ef      	b.n	80018e6 <__gedf2+0x52>
 8001906:	003d      	movs	r5, r7
 8001908:	4325      	orrs	r5, r4
 800190a:	d11d      	bne.n	8001948 <__gedf2+0xb4>
 800190c:	4293      	cmp	r3, r2
 800190e:	d0ee      	beq.n	80018ee <__gedf2+0x5a>
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e2      	bne.n	80018da <__gedf2+0x46>
 8001914:	464c      	mov	r4, r9
 8001916:	4326      	orrs	r6, r4
 8001918:	d1df      	bne.n	80018da <__gedf2+0x46>
 800191a:	e7e0      	b.n	80018de <__gedf2+0x4a>
 800191c:	2000      	movs	r0, #0
 800191e:	2c00      	cmp	r4, #0
 8001920:	d0e1      	beq.n	80018e6 <__gedf2+0x52>
 8001922:	e7dc      	b.n	80018de <__gedf2+0x4a>
 8001924:	429a      	cmp	r2, r3
 8001926:	dc0a      	bgt.n	800193e <__gedf2+0xaa>
 8001928:	dbe8      	blt.n	80018fc <__gedf2+0x68>
 800192a:	454f      	cmp	r7, r9
 800192c:	d8d7      	bhi.n	80018de <__gedf2+0x4a>
 800192e:	d00e      	beq.n	800194e <__gedf2+0xba>
 8001930:	2000      	movs	r0, #0
 8001932:	454f      	cmp	r7, r9
 8001934:	d2d7      	bcs.n	80018e6 <__gedf2+0x52>
 8001936:	2900      	cmp	r1, #0
 8001938:	d0e2      	beq.n	8001900 <__gedf2+0x6c>
 800193a:	0008      	movs	r0, r1
 800193c:	e7d3      	b.n	80018e6 <__gedf2+0x52>
 800193e:	4243      	negs	r3, r0
 8001940:	4158      	adcs	r0, r3
 8001942:	0040      	lsls	r0, r0, #1
 8001944:	3801      	subs	r0, #1
 8001946:	e7ce      	b.n	80018e6 <__gedf2+0x52>
 8001948:	2002      	movs	r0, #2
 800194a:	4240      	negs	r0, r0
 800194c:	e7cb      	b.n	80018e6 <__gedf2+0x52>
 800194e:	45c4      	cmp	ip, r8
 8001950:	d8c5      	bhi.n	80018de <__gedf2+0x4a>
 8001952:	2000      	movs	r0, #0
 8001954:	45c4      	cmp	ip, r8
 8001956:	d2c6      	bcs.n	80018e6 <__gedf2+0x52>
 8001958:	e7ed      	b.n	8001936 <__gedf2+0xa2>
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff

08001960 <__ledf2>:
 8001960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001962:	4647      	mov	r7, r8
 8001964:	46ce      	mov	lr, r9
 8001966:	0004      	movs	r4, r0
 8001968:	0018      	movs	r0, r3
 800196a:	0016      	movs	r6, r2
 800196c:	031b      	lsls	r3, r3, #12
 800196e:	0b1b      	lsrs	r3, r3, #12
 8001970:	4d2c      	ldr	r5, [pc, #176]	; (8001a24 <__ledf2+0xc4>)
 8001972:	004a      	lsls	r2, r1, #1
 8001974:	4699      	mov	r9, r3
 8001976:	b580      	push	{r7, lr}
 8001978:	0043      	lsls	r3, r0, #1
 800197a:	030f      	lsls	r7, r1, #12
 800197c:	46a4      	mov	ip, r4
 800197e:	46b0      	mov	r8, r6
 8001980:	0b3f      	lsrs	r7, r7, #12
 8001982:	0d52      	lsrs	r2, r2, #21
 8001984:	0fc9      	lsrs	r1, r1, #31
 8001986:	0d5b      	lsrs	r3, r3, #21
 8001988:	0fc0      	lsrs	r0, r0, #31
 800198a:	42aa      	cmp	r2, r5
 800198c:	d00d      	beq.n	80019aa <__ledf2+0x4a>
 800198e:	42ab      	cmp	r3, r5
 8001990:	d010      	beq.n	80019b4 <__ledf2+0x54>
 8001992:	2a00      	cmp	r2, #0
 8001994:	d127      	bne.n	80019e6 <__ledf2+0x86>
 8001996:	433c      	orrs	r4, r7
 8001998:	2b00      	cmp	r3, #0
 800199a:	d111      	bne.n	80019c0 <__ledf2+0x60>
 800199c:	464d      	mov	r5, r9
 800199e:	432e      	orrs	r6, r5
 80019a0:	d10e      	bne.n	80019c0 <__ledf2+0x60>
 80019a2:	2000      	movs	r0, #0
 80019a4:	2c00      	cmp	r4, #0
 80019a6:	d015      	beq.n	80019d4 <__ledf2+0x74>
 80019a8:	e00e      	b.n	80019c8 <__ledf2+0x68>
 80019aa:	003d      	movs	r5, r7
 80019ac:	4325      	orrs	r5, r4
 80019ae:	d110      	bne.n	80019d2 <__ledf2+0x72>
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d118      	bne.n	80019e6 <__ledf2+0x86>
 80019b4:	464d      	mov	r5, r9
 80019b6:	432e      	orrs	r6, r5
 80019b8:	d10b      	bne.n	80019d2 <__ledf2+0x72>
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	d102      	bne.n	80019c4 <__ledf2+0x64>
 80019be:	433c      	orrs	r4, r7
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	d00b      	beq.n	80019dc <__ledf2+0x7c>
 80019c4:	4281      	cmp	r1, r0
 80019c6:	d014      	beq.n	80019f2 <__ledf2+0x92>
 80019c8:	2002      	movs	r0, #2
 80019ca:	3901      	subs	r1, #1
 80019cc:	4008      	ands	r0, r1
 80019ce:	3801      	subs	r0, #1
 80019d0:	e000      	b.n	80019d4 <__ledf2+0x74>
 80019d2:	2002      	movs	r0, #2
 80019d4:	bcc0      	pop	{r6, r7}
 80019d6:	46b9      	mov	r9, r7
 80019d8:	46b0      	mov	r8, r6
 80019da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1f9      	bne.n	80019d4 <__ledf2+0x74>
 80019e0:	2001      	movs	r0, #1
 80019e2:	4240      	negs	r0, r0
 80019e4:	e7f6      	b.n	80019d4 <__ledf2+0x74>
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ec      	bne.n	80019c4 <__ledf2+0x64>
 80019ea:	464c      	mov	r4, r9
 80019ec:	4326      	orrs	r6, r4
 80019ee:	d1e9      	bne.n	80019c4 <__ledf2+0x64>
 80019f0:	e7ea      	b.n	80019c8 <__ledf2+0x68>
 80019f2:	429a      	cmp	r2, r3
 80019f4:	dd04      	ble.n	8001a00 <__ledf2+0xa0>
 80019f6:	4243      	negs	r3, r0
 80019f8:	4158      	adcs	r0, r3
 80019fa:	0040      	lsls	r0, r0, #1
 80019fc:	3801      	subs	r0, #1
 80019fe:	e7e9      	b.n	80019d4 <__ledf2+0x74>
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbeb      	blt.n	80019dc <__ledf2+0x7c>
 8001a04:	454f      	cmp	r7, r9
 8001a06:	d8df      	bhi.n	80019c8 <__ledf2+0x68>
 8001a08:	d006      	beq.n	8001a18 <__ledf2+0xb8>
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	454f      	cmp	r7, r9
 8001a0e:	d2e1      	bcs.n	80019d4 <__ledf2+0x74>
 8001a10:	2900      	cmp	r1, #0
 8001a12:	d0e5      	beq.n	80019e0 <__ledf2+0x80>
 8001a14:	0008      	movs	r0, r1
 8001a16:	e7dd      	b.n	80019d4 <__ledf2+0x74>
 8001a18:	45c4      	cmp	ip, r8
 8001a1a:	d8d5      	bhi.n	80019c8 <__ledf2+0x68>
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	45c4      	cmp	ip, r8
 8001a20:	d2d8      	bcs.n	80019d4 <__ledf2+0x74>
 8001a22:	e7f5      	b.n	8001a10 <__ledf2+0xb0>
 8001a24:	000007ff 	.word	0x000007ff

08001a28 <__aeabi_dmul>:
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	4657      	mov	r7, sl
 8001a2c:	464e      	mov	r6, r9
 8001a2e:	4645      	mov	r5, r8
 8001a30:	46de      	mov	lr, fp
 8001a32:	b5e0      	push	{r5, r6, r7, lr}
 8001a34:	4698      	mov	r8, r3
 8001a36:	030c      	lsls	r4, r1, #12
 8001a38:	004b      	lsls	r3, r1, #1
 8001a3a:	0006      	movs	r6, r0
 8001a3c:	4692      	mov	sl, r2
 8001a3e:	b087      	sub	sp, #28
 8001a40:	0b24      	lsrs	r4, r4, #12
 8001a42:	0d5b      	lsrs	r3, r3, #21
 8001a44:	0fcf      	lsrs	r7, r1, #31
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dmul+0x24>
 8001a4a:	e15c      	b.n	8001d06 <__aeabi_dmul+0x2de>
 8001a4c:	4ad9      	ldr	r2, [pc, #868]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dmul+0x2c>
 8001a52:	e175      	b.n	8001d40 <__aeabi_dmul+0x318>
 8001a54:	0f42      	lsrs	r2, r0, #29
 8001a56:	00e4      	lsls	r4, r4, #3
 8001a58:	4314      	orrs	r4, r2
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	0412      	lsls	r2, r2, #16
 8001a5e:	4314      	orrs	r4, r2
 8001a60:	4ad5      	ldr	r2, [pc, #852]	; (8001db8 <__aeabi_dmul+0x390>)
 8001a62:	00c5      	lsls	r5, r0, #3
 8001a64:	4694      	mov	ip, r2
 8001a66:	4463      	add	r3, ip
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	4699      	mov	r9, r3
 8001a6e:	469b      	mov	fp, r3
 8001a70:	4643      	mov	r3, r8
 8001a72:	4642      	mov	r2, r8
 8001a74:	031e      	lsls	r6, r3, #12
 8001a76:	0fd2      	lsrs	r2, r2, #31
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4650      	mov	r0, sl
 8001a7c:	4690      	mov	r8, r2
 8001a7e:	0b36      	lsrs	r6, r6, #12
 8001a80:	0d5b      	lsrs	r3, r3, #21
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dmul+0x5e>
 8001a84:	e120      	b.n	8001cc8 <__aeabi_dmul+0x2a0>
 8001a86:	4acb      	ldr	r2, [pc, #812]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dmul+0x66>
 8001a8c:	e162      	b.n	8001d54 <__aeabi_dmul+0x32c>
 8001a8e:	49ca      	ldr	r1, [pc, #808]	; (8001db8 <__aeabi_dmul+0x390>)
 8001a90:	0f42      	lsrs	r2, r0, #29
 8001a92:	468c      	mov	ip, r1
 8001a94:	9900      	ldr	r1, [sp, #0]
 8001a96:	4463      	add	r3, ip
 8001a98:	00f6      	lsls	r6, r6, #3
 8001a9a:	468c      	mov	ip, r1
 8001a9c:	4316      	orrs	r6, r2
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	449c      	add	ip, r3
 8001aa2:	0412      	lsls	r2, r2, #16
 8001aa4:	4663      	mov	r3, ip
 8001aa6:	4316      	orrs	r6, r2
 8001aa8:	00c2      	lsls	r2, r0, #3
 8001aaa:	2000      	movs	r0, #0
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	9900      	ldr	r1, [sp, #0]
 8001ab0:	4643      	mov	r3, r8
 8001ab2:	3101      	adds	r1, #1
 8001ab4:	468c      	mov	ip, r1
 8001ab6:	4649      	mov	r1, r9
 8001ab8:	407b      	eors	r3, r7
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	290f      	cmp	r1, #15
 8001abe:	d826      	bhi.n	8001b0e <__aeabi_dmul+0xe6>
 8001ac0:	4bbe      	ldr	r3, [pc, #760]	; (8001dbc <__aeabi_dmul+0x394>)
 8001ac2:	0089      	lsls	r1, r1, #2
 8001ac4:	5859      	ldr	r1, [r3, r1]
 8001ac6:	468f      	mov	pc, r1
 8001ac8:	4643      	mov	r3, r8
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	0034      	movs	r4, r6
 8001ace:	0015      	movs	r5, r2
 8001ad0:	4683      	mov	fp, r0
 8001ad2:	465b      	mov	r3, fp
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d016      	beq.n	8001b06 <__aeabi_dmul+0xde>
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d100      	bne.n	8001ade <__aeabi_dmul+0xb6>
 8001adc:	e203      	b.n	8001ee6 <__aeabi_dmul+0x4be>
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d000      	beq.n	8001ae4 <__aeabi_dmul+0xbc>
 8001ae2:	e0cd      	b.n	8001c80 <__aeabi_dmul+0x258>
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2400      	movs	r4, #0
 8001ae8:	2500      	movs	r5, #0
 8001aea:	9b01      	ldr	r3, [sp, #4]
 8001aec:	0512      	lsls	r2, r2, #20
 8001aee:	4322      	orrs	r2, r4
 8001af0:	07db      	lsls	r3, r3, #31
 8001af2:	431a      	orrs	r2, r3
 8001af4:	0028      	movs	r0, r5
 8001af6:	0011      	movs	r1, r2
 8001af8:	b007      	add	sp, #28
 8001afa:	bcf0      	pop	{r4, r5, r6, r7}
 8001afc:	46bb      	mov	fp, r7
 8001afe:	46b2      	mov	sl, r6
 8001b00:	46a9      	mov	r9, r5
 8001b02:	46a0      	mov	r8, r4
 8001b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b06:	2400      	movs	r4, #0
 8001b08:	2500      	movs	r5, #0
 8001b0a:	4aaa      	ldr	r2, [pc, #680]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001b0c:	e7ed      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001b0e:	0c28      	lsrs	r0, r5, #16
 8001b10:	042d      	lsls	r5, r5, #16
 8001b12:	0c2d      	lsrs	r5, r5, #16
 8001b14:	002b      	movs	r3, r5
 8001b16:	0c11      	lsrs	r1, r2, #16
 8001b18:	0412      	lsls	r2, r2, #16
 8001b1a:	0c12      	lsrs	r2, r2, #16
 8001b1c:	4353      	muls	r3, r2
 8001b1e:	4698      	mov	r8, r3
 8001b20:	0013      	movs	r3, r2
 8001b22:	002f      	movs	r7, r5
 8001b24:	4343      	muls	r3, r0
 8001b26:	4699      	mov	r9, r3
 8001b28:	434f      	muls	r7, r1
 8001b2a:	444f      	add	r7, r9
 8001b2c:	46bb      	mov	fp, r7
 8001b2e:	4647      	mov	r7, r8
 8001b30:	000b      	movs	r3, r1
 8001b32:	0c3f      	lsrs	r7, r7, #16
 8001b34:	46ba      	mov	sl, r7
 8001b36:	4343      	muls	r3, r0
 8001b38:	44da      	add	sl, fp
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	45d1      	cmp	r9, sl
 8001b3e:	d904      	bls.n	8001b4a <__aeabi_dmul+0x122>
 8001b40:	2780      	movs	r7, #128	; 0x80
 8001b42:	027f      	lsls	r7, r7, #9
 8001b44:	46b9      	mov	r9, r7
 8001b46:	444b      	add	r3, r9
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	0c1b      	lsrs	r3, r3, #16
 8001b4e:	469b      	mov	fp, r3
 8001b50:	4653      	mov	r3, sl
 8001b52:	041f      	lsls	r7, r3, #16
 8001b54:	4643      	mov	r3, r8
 8001b56:	041b      	lsls	r3, r3, #16
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	4698      	mov	r8, r3
 8001b5c:	003b      	movs	r3, r7
 8001b5e:	4443      	add	r3, r8
 8001b60:	9304      	str	r3, [sp, #16]
 8001b62:	0c33      	lsrs	r3, r6, #16
 8001b64:	0436      	lsls	r6, r6, #16
 8001b66:	0c36      	lsrs	r6, r6, #16
 8001b68:	4698      	mov	r8, r3
 8001b6a:	0033      	movs	r3, r6
 8001b6c:	4343      	muls	r3, r0
 8001b6e:	4699      	mov	r9, r3
 8001b70:	4643      	mov	r3, r8
 8001b72:	4343      	muls	r3, r0
 8001b74:	002f      	movs	r7, r5
 8001b76:	469a      	mov	sl, r3
 8001b78:	4643      	mov	r3, r8
 8001b7a:	4377      	muls	r7, r6
 8001b7c:	435d      	muls	r5, r3
 8001b7e:	0c38      	lsrs	r0, r7, #16
 8001b80:	444d      	add	r5, r9
 8001b82:	1945      	adds	r5, r0, r5
 8001b84:	45a9      	cmp	r9, r5
 8001b86:	d903      	bls.n	8001b90 <__aeabi_dmul+0x168>
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	025b      	lsls	r3, r3, #9
 8001b8c:	4699      	mov	r9, r3
 8001b8e:	44ca      	add	sl, r9
 8001b90:	043f      	lsls	r7, r7, #16
 8001b92:	0c28      	lsrs	r0, r5, #16
 8001b94:	0c3f      	lsrs	r7, r7, #16
 8001b96:	042d      	lsls	r5, r5, #16
 8001b98:	19ed      	adds	r5, r5, r7
 8001b9a:	0c27      	lsrs	r7, r4, #16
 8001b9c:	0424      	lsls	r4, r4, #16
 8001b9e:	0c24      	lsrs	r4, r4, #16
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	0020      	movs	r0, r4
 8001ba4:	4350      	muls	r0, r2
 8001ba6:	437a      	muls	r2, r7
 8001ba8:	4691      	mov	r9, r2
 8001baa:	003a      	movs	r2, r7
 8001bac:	4453      	add	r3, sl
 8001bae:	9305      	str	r3, [sp, #20]
 8001bb0:	0c03      	lsrs	r3, r0, #16
 8001bb2:	469a      	mov	sl, r3
 8001bb4:	434a      	muls	r2, r1
 8001bb6:	4361      	muls	r1, r4
 8001bb8:	4449      	add	r1, r9
 8001bba:	4451      	add	r1, sl
 8001bbc:	44ab      	add	fp, r5
 8001bbe:	4589      	cmp	r9, r1
 8001bc0:	d903      	bls.n	8001bca <__aeabi_dmul+0x1a2>
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	025b      	lsls	r3, r3, #9
 8001bc6:	4699      	mov	r9, r3
 8001bc8:	444a      	add	r2, r9
 8001bca:	0400      	lsls	r0, r0, #16
 8001bcc:	0c0b      	lsrs	r3, r1, #16
 8001bce:	0c00      	lsrs	r0, r0, #16
 8001bd0:	0409      	lsls	r1, r1, #16
 8001bd2:	1809      	adds	r1, r1, r0
 8001bd4:	0020      	movs	r0, r4
 8001bd6:	4699      	mov	r9, r3
 8001bd8:	4643      	mov	r3, r8
 8001bda:	4370      	muls	r0, r6
 8001bdc:	435c      	muls	r4, r3
 8001bde:	437e      	muls	r6, r7
 8001be0:	435f      	muls	r7, r3
 8001be2:	0c03      	lsrs	r3, r0, #16
 8001be4:	4698      	mov	r8, r3
 8001be6:	19a4      	adds	r4, r4, r6
 8001be8:	4444      	add	r4, r8
 8001bea:	444a      	add	r2, r9
 8001bec:	9703      	str	r7, [sp, #12]
 8001bee:	42a6      	cmp	r6, r4
 8001bf0:	d904      	bls.n	8001bfc <__aeabi_dmul+0x1d4>
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	4698      	mov	r8, r3
 8001bf8:	4447      	add	r7, r8
 8001bfa:	9703      	str	r7, [sp, #12]
 8001bfc:	0423      	lsls	r3, r4, #16
 8001bfe:	9e02      	ldr	r6, [sp, #8]
 8001c00:	469a      	mov	sl, r3
 8001c02:	9b05      	ldr	r3, [sp, #20]
 8001c04:	445e      	add	r6, fp
 8001c06:	4698      	mov	r8, r3
 8001c08:	42ae      	cmp	r6, r5
 8001c0a:	41ad      	sbcs	r5, r5
 8001c0c:	1876      	adds	r6, r6, r1
 8001c0e:	428e      	cmp	r6, r1
 8001c10:	4189      	sbcs	r1, r1
 8001c12:	0400      	lsls	r0, r0, #16
 8001c14:	0c00      	lsrs	r0, r0, #16
 8001c16:	4450      	add	r0, sl
 8001c18:	4440      	add	r0, r8
 8001c1a:	426d      	negs	r5, r5
 8001c1c:	1947      	adds	r7, r0, r5
 8001c1e:	46b8      	mov	r8, r7
 8001c20:	4693      	mov	fp, r2
 8001c22:	4249      	negs	r1, r1
 8001c24:	4689      	mov	r9, r1
 8001c26:	44c3      	add	fp, r8
 8001c28:	44d9      	add	r9, fp
 8001c2a:	4298      	cmp	r0, r3
 8001c2c:	4180      	sbcs	r0, r0
 8001c2e:	45a8      	cmp	r8, r5
 8001c30:	41ad      	sbcs	r5, r5
 8001c32:	4593      	cmp	fp, r2
 8001c34:	4192      	sbcs	r2, r2
 8001c36:	4589      	cmp	r9, r1
 8001c38:	4189      	sbcs	r1, r1
 8001c3a:	426d      	negs	r5, r5
 8001c3c:	4240      	negs	r0, r0
 8001c3e:	4328      	orrs	r0, r5
 8001c40:	0c24      	lsrs	r4, r4, #16
 8001c42:	4252      	negs	r2, r2
 8001c44:	4249      	negs	r1, r1
 8001c46:	430a      	orrs	r2, r1
 8001c48:	9b03      	ldr	r3, [sp, #12]
 8001c4a:	1900      	adds	r0, r0, r4
 8001c4c:	1880      	adds	r0, r0, r2
 8001c4e:	18c7      	adds	r7, r0, r3
 8001c50:	464b      	mov	r3, r9
 8001c52:	0ddc      	lsrs	r4, r3, #23
 8001c54:	9b04      	ldr	r3, [sp, #16]
 8001c56:	0275      	lsls	r5, r6, #9
 8001c58:	431d      	orrs	r5, r3
 8001c5a:	1e6a      	subs	r2, r5, #1
 8001c5c:	4195      	sbcs	r5, r2
 8001c5e:	464b      	mov	r3, r9
 8001c60:	0df6      	lsrs	r6, r6, #23
 8001c62:	027f      	lsls	r7, r7, #9
 8001c64:	4335      	orrs	r5, r6
 8001c66:	025a      	lsls	r2, r3, #9
 8001c68:	433c      	orrs	r4, r7
 8001c6a:	4315      	orrs	r5, r2
 8001c6c:	01fb      	lsls	r3, r7, #7
 8001c6e:	d400      	bmi.n	8001c72 <__aeabi_dmul+0x24a>
 8001c70:	e11c      	b.n	8001eac <__aeabi_dmul+0x484>
 8001c72:	2101      	movs	r1, #1
 8001c74:	086a      	lsrs	r2, r5, #1
 8001c76:	400d      	ands	r5, r1
 8001c78:	4315      	orrs	r5, r2
 8001c7a:	07e2      	lsls	r2, r4, #31
 8001c7c:	4315      	orrs	r5, r2
 8001c7e:	0864      	lsrs	r4, r4, #1
 8001c80:	494f      	ldr	r1, [pc, #316]	; (8001dc0 <__aeabi_dmul+0x398>)
 8001c82:	4461      	add	r1, ip
 8001c84:	2900      	cmp	r1, #0
 8001c86:	dc00      	bgt.n	8001c8a <__aeabi_dmul+0x262>
 8001c88:	e0b0      	b.n	8001dec <__aeabi_dmul+0x3c4>
 8001c8a:	076b      	lsls	r3, r5, #29
 8001c8c:	d009      	beq.n	8001ca2 <__aeabi_dmul+0x27a>
 8001c8e:	220f      	movs	r2, #15
 8001c90:	402a      	ands	r2, r5
 8001c92:	2a04      	cmp	r2, #4
 8001c94:	d005      	beq.n	8001ca2 <__aeabi_dmul+0x27a>
 8001c96:	1d2a      	adds	r2, r5, #4
 8001c98:	42aa      	cmp	r2, r5
 8001c9a:	41ad      	sbcs	r5, r5
 8001c9c:	426d      	negs	r5, r5
 8001c9e:	1964      	adds	r4, r4, r5
 8001ca0:	0015      	movs	r5, r2
 8001ca2:	01e3      	lsls	r3, r4, #7
 8001ca4:	d504      	bpl.n	8001cb0 <__aeabi_dmul+0x288>
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	4a46      	ldr	r2, [pc, #280]	; (8001dc4 <__aeabi_dmul+0x39c>)
 8001caa:	00c9      	lsls	r1, r1, #3
 8001cac:	4014      	ands	r4, r2
 8001cae:	4461      	add	r1, ip
 8001cb0:	4a45      	ldr	r2, [pc, #276]	; (8001dc8 <__aeabi_dmul+0x3a0>)
 8001cb2:	4291      	cmp	r1, r2
 8001cb4:	dd00      	ble.n	8001cb8 <__aeabi_dmul+0x290>
 8001cb6:	e726      	b.n	8001b06 <__aeabi_dmul+0xde>
 8001cb8:	0762      	lsls	r2, r4, #29
 8001cba:	08ed      	lsrs	r5, r5, #3
 8001cbc:	0264      	lsls	r4, r4, #9
 8001cbe:	0549      	lsls	r1, r1, #21
 8001cc0:	4315      	orrs	r5, r2
 8001cc2:	0b24      	lsrs	r4, r4, #12
 8001cc4:	0d4a      	lsrs	r2, r1, #21
 8001cc6:	e710      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001cc8:	4652      	mov	r2, sl
 8001cca:	4332      	orrs	r2, r6
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dmul+0x2a8>
 8001cce:	e07f      	b.n	8001dd0 <__aeabi_dmul+0x3a8>
 8001cd0:	2e00      	cmp	r6, #0
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_dmul+0x2ae>
 8001cd4:	e0dc      	b.n	8001e90 <__aeabi_dmul+0x468>
 8001cd6:	0030      	movs	r0, r6
 8001cd8:	f000 fe1e 	bl	8002918 <__clzsi2>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	3a0b      	subs	r2, #11
 8001ce0:	231d      	movs	r3, #29
 8001ce2:	0001      	movs	r1, r0
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	4652      	mov	r2, sl
 8001ce8:	3908      	subs	r1, #8
 8001cea:	40da      	lsrs	r2, r3
 8001cec:	408e      	lsls	r6, r1
 8001cee:	4316      	orrs	r6, r2
 8001cf0:	4652      	mov	r2, sl
 8001cf2:	408a      	lsls	r2, r1
 8001cf4:	9b00      	ldr	r3, [sp, #0]
 8001cf6:	4935      	ldr	r1, [pc, #212]	; (8001dcc <__aeabi_dmul+0x3a4>)
 8001cf8:	1a18      	subs	r0, r3, r0
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	468c      	mov	ip, r1
 8001cfe:	4463      	add	r3, ip
 8001d00:	2000      	movs	r0, #0
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	e6d3      	b.n	8001aae <__aeabi_dmul+0x86>
 8001d06:	0025      	movs	r5, r4
 8001d08:	4305      	orrs	r5, r0
 8001d0a:	d04a      	beq.n	8001da2 <__aeabi_dmul+0x37a>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dmul+0x2ea>
 8001d10:	e0b0      	b.n	8001e74 <__aeabi_dmul+0x44c>
 8001d12:	0020      	movs	r0, r4
 8001d14:	f000 fe00 	bl	8002918 <__clzsi2>
 8001d18:	0001      	movs	r1, r0
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	390b      	subs	r1, #11
 8001d1e:	231d      	movs	r3, #29
 8001d20:	0010      	movs	r0, r2
 8001d22:	1a5b      	subs	r3, r3, r1
 8001d24:	0031      	movs	r1, r6
 8001d26:	0035      	movs	r5, r6
 8001d28:	3808      	subs	r0, #8
 8001d2a:	4084      	lsls	r4, r0
 8001d2c:	40d9      	lsrs	r1, r3
 8001d2e:	4085      	lsls	r5, r0
 8001d30:	430c      	orrs	r4, r1
 8001d32:	4826      	ldr	r0, [pc, #152]	; (8001dcc <__aeabi_dmul+0x3a4>)
 8001d34:	1a83      	subs	r3, r0, r2
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4699      	mov	r9, r3
 8001d3c:	469b      	mov	fp, r3
 8001d3e:	e697      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001d40:	0005      	movs	r5, r0
 8001d42:	4325      	orrs	r5, r4
 8001d44:	d126      	bne.n	8001d94 <__aeabi_dmul+0x36c>
 8001d46:	2208      	movs	r2, #8
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	2400      	movs	r4, #0
 8001d4e:	4691      	mov	r9, r2
 8001d50:	469b      	mov	fp, r3
 8001d52:	e68d      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001d54:	4652      	mov	r2, sl
 8001d56:	9b00      	ldr	r3, [sp, #0]
 8001d58:	4332      	orrs	r2, r6
 8001d5a:	d110      	bne.n	8001d7e <__aeabi_dmul+0x356>
 8001d5c:	4915      	ldr	r1, [pc, #84]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001d5e:	2600      	movs	r6, #0
 8001d60:	468c      	mov	ip, r1
 8001d62:	4463      	add	r3, ip
 8001d64:	4649      	mov	r1, r9
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	4319      	orrs	r1, r3
 8001d6c:	4689      	mov	r9, r1
 8001d6e:	2002      	movs	r0, #2
 8001d70:	e69d      	b.n	8001aae <__aeabi_dmul+0x86>
 8001d72:	465b      	mov	r3, fp
 8001d74:	9701      	str	r7, [sp, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d000      	beq.n	8001d7c <__aeabi_dmul+0x354>
 8001d7a:	e6ad      	b.n	8001ad8 <__aeabi_dmul+0xb0>
 8001d7c:	e6c3      	b.n	8001b06 <__aeabi_dmul+0xde>
 8001d7e:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <__aeabi_dmul+0x38c>)
 8001d80:	2003      	movs	r0, #3
 8001d82:	4694      	mov	ip, r2
 8001d84:	4463      	add	r3, ip
 8001d86:	464a      	mov	r2, r9
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	4691      	mov	r9, r2
 8001d90:	4652      	mov	r2, sl
 8001d92:	e68c      	b.n	8001aae <__aeabi_dmul+0x86>
 8001d94:	220c      	movs	r2, #12
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2303      	movs	r3, #3
 8001d9a:	0005      	movs	r5, r0
 8001d9c:	4691      	mov	r9, r2
 8001d9e:	469b      	mov	fp, r3
 8001da0:	e666      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001da2:	2304      	movs	r3, #4
 8001da4:	4699      	mov	r9, r3
 8001da6:	2300      	movs	r3, #0
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	2400      	movs	r4, #0
 8001dae:	469b      	mov	fp, r3
 8001db0:	e65e      	b.n	8001a70 <__aeabi_dmul+0x48>
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	000007ff 	.word	0x000007ff
 8001db8:	fffffc01 	.word	0xfffffc01
 8001dbc:	08012824 	.word	0x08012824
 8001dc0:	000003ff 	.word	0x000003ff
 8001dc4:	feffffff 	.word	0xfeffffff
 8001dc8:	000007fe 	.word	0x000007fe
 8001dcc:	fffffc0d 	.word	0xfffffc0d
 8001dd0:	4649      	mov	r1, r9
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	4319      	orrs	r1, r3
 8001dd6:	4689      	mov	r9, r1
 8001dd8:	2600      	movs	r6, #0
 8001dda:	2001      	movs	r0, #1
 8001ddc:	e667      	b.n	8001aae <__aeabi_dmul+0x86>
 8001dde:	2300      	movs	r3, #0
 8001de0:	2480      	movs	r4, #128	; 0x80
 8001de2:	2500      	movs	r5, #0
 8001de4:	4a43      	ldr	r2, [pc, #268]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	0324      	lsls	r4, r4, #12
 8001dea:	e67e      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001dec:	2001      	movs	r0, #1
 8001dee:	1a40      	subs	r0, r0, r1
 8001df0:	2838      	cmp	r0, #56	; 0x38
 8001df2:	dd00      	ble.n	8001df6 <__aeabi_dmul+0x3ce>
 8001df4:	e676      	b.n	8001ae4 <__aeabi_dmul+0xbc>
 8001df6:	281f      	cmp	r0, #31
 8001df8:	dd5b      	ble.n	8001eb2 <__aeabi_dmul+0x48a>
 8001dfa:	221f      	movs	r2, #31
 8001dfc:	0023      	movs	r3, r4
 8001dfe:	4252      	negs	r2, r2
 8001e00:	1a51      	subs	r1, r2, r1
 8001e02:	40cb      	lsrs	r3, r1
 8001e04:	0019      	movs	r1, r3
 8001e06:	2820      	cmp	r0, #32
 8001e08:	d003      	beq.n	8001e12 <__aeabi_dmul+0x3ea>
 8001e0a:	4a3b      	ldr	r2, [pc, #236]	; (8001ef8 <__aeabi_dmul+0x4d0>)
 8001e0c:	4462      	add	r2, ip
 8001e0e:	4094      	lsls	r4, r2
 8001e10:	4325      	orrs	r5, r4
 8001e12:	1e6a      	subs	r2, r5, #1
 8001e14:	4195      	sbcs	r5, r2
 8001e16:	002a      	movs	r2, r5
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	2107      	movs	r1, #7
 8001e1c:	000d      	movs	r5, r1
 8001e1e:	2400      	movs	r4, #0
 8001e20:	4015      	ands	r5, r2
 8001e22:	4211      	tst	r1, r2
 8001e24:	d05b      	beq.n	8001ede <__aeabi_dmul+0x4b6>
 8001e26:	210f      	movs	r1, #15
 8001e28:	2400      	movs	r4, #0
 8001e2a:	4011      	ands	r1, r2
 8001e2c:	2904      	cmp	r1, #4
 8001e2e:	d053      	beq.n	8001ed8 <__aeabi_dmul+0x4b0>
 8001e30:	1d11      	adds	r1, r2, #4
 8001e32:	4291      	cmp	r1, r2
 8001e34:	4192      	sbcs	r2, r2
 8001e36:	4252      	negs	r2, r2
 8001e38:	18a4      	adds	r4, r4, r2
 8001e3a:	000a      	movs	r2, r1
 8001e3c:	0223      	lsls	r3, r4, #8
 8001e3e:	d54b      	bpl.n	8001ed8 <__aeabi_dmul+0x4b0>
 8001e40:	2201      	movs	r2, #1
 8001e42:	2400      	movs	r4, #0
 8001e44:	2500      	movs	r5, #0
 8001e46:	e650      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	031b      	lsls	r3, r3, #12
 8001e4c:	421c      	tst	r4, r3
 8001e4e:	d009      	beq.n	8001e64 <__aeabi_dmul+0x43c>
 8001e50:	421e      	tst	r6, r3
 8001e52:	d107      	bne.n	8001e64 <__aeabi_dmul+0x43c>
 8001e54:	4333      	orrs	r3, r6
 8001e56:	031c      	lsls	r4, r3, #12
 8001e58:	4643      	mov	r3, r8
 8001e5a:	0015      	movs	r5, r2
 8001e5c:	0b24      	lsrs	r4, r4, #12
 8001e5e:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	e642      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001e64:	2280      	movs	r2, #128	; 0x80
 8001e66:	0312      	lsls	r2, r2, #12
 8001e68:	4314      	orrs	r4, r2
 8001e6a:	0324      	lsls	r4, r4, #12
 8001e6c:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001e6e:	0b24      	lsrs	r4, r4, #12
 8001e70:	9701      	str	r7, [sp, #4]
 8001e72:	e63a      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001e74:	f000 fd50 	bl	8002918 <__clzsi2>
 8001e78:	0001      	movs	r1, r0
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	3115      	adds	r1, #21
 8001e7e:	3220      	adds	r2, #32
 8001e80:	291c      	cmp	r1, #28
 8001e82:	dc00      	bgt.n	8001e86 <__aeabi_dmul+0x45e>
 8001e84:	e74b      	b.n	8001d1e <__aeabi_dmul+0x2f6>
 8001e86:	0034      	movs	r4, r6
 8001e88:	3808      	subs	r0, #8
 8001e8a:	2500      	movs	r5, #0
 8001e8c:	4084      	lsls	r4, r0
 8001e8e:	e750      	b.n	8001d32 <__aeabi_dmul+0x30a>
 8001e90:	f000 fd42 	bl	8002918 <__clzsi2>
 8001e94:	0003      	movs	r3, r0
 8001e96:	001a      	movs	r2, r3
 8001e98:	3215      	adds	r2, #21
 8001e9a:	3020      	adds	r0, #32
 8001e9c:	2a1c      	cmp	r2, #28
 8001e9e:	dc00      	bgt.n	8001ea2 <__aeabi_dmul+0x47a>
 8001ea0:	e71e      	b.n	8001ce0 <__aeabi_dmul+0x2b8>
 8001ea2:	4656      	mov	r6, sl
 8001ea4:	3b08      	subs	r3, #8
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	409e      	lsls	r6, r3
 8001eaa:	e723      	b.n	8001cf4 <__aeabi_dmul+0x2cc>
 8001eac:	9b00      	ldr	r3, [sp, #0]
 8001eae:	469c      	mov	ip, r3
 8001eb0:	e6e6      	b.n	8001c80 <__aeabi_dmul+0x258>
 8001eb2:	4912      	ldr	r1, [pc, #72]	; (8001efc <__aeabi_dmul+0x4d4>)
 8001eb4:	0022      	movs	r2, r4
 8001eb6:	4461      	add	r1, ip
 8001eb8:	002e      	movs	r6, r5
 8001eba:	408d      	lsls	r5, r1
 8001ebc:	408a      	lsls	r2, r1
 8001ebe:	40c6      	lsrs	r6, r0
 8001ec0:	1e69      	subs	r1, r5, #1
 8001ec2:	418d      	sbcs	r5, r1
 8001ec4:	4332      	orrs	r2, r6
 8001ec6:	432a      	orrs	r2, r5
 8001ec8:	40c4      	lsrs	r4, r0
 8001eca:	0753      	lsls	r3, r2, #29
 8001ecc:	d0b6      	beq.n	8001e3c <__aeabi_dmul+0x414>
 8001ece:	210f      	movs	r1, #15
 8001ed0:	4011      	ands	r1, r2
 8001ed2:	2904      	cmp	r1, #4
 8001ed4:	d1ac      	bne.n	8001e30 <__aeabi_dmul+0x408>
 8001ed6:	e7b1      	b.n	8001e3c <__aeabi_dmul+0x414>
 8001ed8:	0765      	lsls	r5, r4, #29
 8001eda:	0264      	lsls	r4, r4, #9
 8001edc:	0b24      	lsrs	r4, r4, #12
 8001ede:	08d2      	lsrs	r2, r2, #3
 8001ee0:	4315      	orrs	r5, r2
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	e601      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001ee6:	2280      	movs	r2, #128	; 0x80
 8001ee8:	0312      	lsls	r2, r2, #12
 8001eea:	4314      	orrs	r4, r2
 8001eec:	0324      	lsls	r4, r4, #12
 8001eee:	4a01      	ldr	r2, [pc, #4]	; (8001ef4 <__aeabi_dmul+0x4cc>)
 8001ef0:	0b24      	lsrs	r4, r4, #12
 8001ef2:	e5fa      	b.n	8001aea <__aeabi_dmul+0xc2>
 8001ef4:	000007ff 	.word	0x000007ff
 8001ef8:	0000043e 	.word	0x0000043e
 8001efc:	0000041e 	.word	0x0000041e

08001f00 <__aeabi_dsub>:
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	4657      	mov	r7, sl
 8001f04:	464e      	mov	r6, r9
 8001f06:	4645      	mov	r5, r8
 8001f08:	46de      	mov	lr, fp
 8001f0a:	b5e0      	push	{r5, r6, r7, lr}
 8001f0c:	001e      	movs	r6, r3
 8001f0e:	0017      	movs	r7, r2
 8001f10:	004a      	lsls	r2, r1, #1
 8001f12:	030b      	lsls	r3, r1, #12
 8001f14:	0d52      	lsrs	r2, r2, #21
 8001f16:	0a5b      	lsrs	r3, r3, #9
 8001f18:	4690      	mov	r8, r2
 8001f1a:	0f42      	lsrs	r2, r0, #29
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	0fcd      	lsrs	r5, r1, #31
 8001f20:	4ccd      	ldr	r4, [pc, #820]	; (8002258 <__aeabi_dsub+0x358>)
 8001f22:	0331      	lsls	r1, r6, #12
 8001f24:	00c3      	lsls	r3, r0, #3
 8001f26:	4694      	mov	ip, r2
 8001f28:	0070      	lsls	r0, r6, #1
 8001f2a:	0f7a      	lsrs	r2, r7, #29
 8001f2c:	0a49      	lsrs	r1, r1, #9
 8001f2e:	00ff      	lsls	r7, r7, #3
 8001f30:	469a      	mov	sl, r3
 8001f32:	46b9      	mov	r9, r7
 8001f34:	0d40      	lsrs	r0, r0, #21
 8001f36:	0ff6      	lsrs	r6, r6, #31
 8001f38:	4311      	orrs	r1, r2
 8001f3a:	42a0      	cmp	r0, r4
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x40>
 8001f3e:	e0b1      	b.n	80020a4 <__aeabi_dsub+0x1a4>
 8001f40:	2201      	movs	r2, #1
 8001f42:	4056      	eors	r6, r2
 8001f44:	46b3      	mov	fp, r6
 8001f46:	42b5      	cmp	r5, r6
 8001f48:	d100      	bne.n	8001f4c <__aeabi_dsub+0x4c>
 8001f4a:	e088      	b.n	800205e <__aeabi_dsub+0x15e>
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	1a12      	subs	r2, r2, r0
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	dc00      	bgt.n	8001f56 <__aeabi_dsub+0x56>
 8001f54:	e0ae      	b.n	80020b4 <__aeabi_dsub+0x1b4>
 8001f56:	2800      	cmp	r0, #0
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dsub+0x5c>
 8001f5a:	e0c1      	b.n	80020e0 <__aeabi_dsub+0x1e0>
 8001f5c:	48be      	ldr	r0, [pc, #760]	; (8002258 <__aeabi_dsub+0x358>)
 8001f5e:	4580      	cmp	r8, r0
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x64>
 8001f62:	e151      	b.n	8002208 <__aeabi_dsub+0x308>
 8001f64:	2080      	movs	r0, #128	; 0x80
 8001f66:	0400      	lsls	r0, r0, #16
 8001f68:	4301      	orrs	r1, r0
 8001f6a:	2a38      	cmp	r2, #56	; 0x38
 8001f6c:	dd00      	ble.n	8001f70 <__aeabi_dsub+0x70>
 8001f6e:	e17b      	b.n	8002268 <__aeabi_dsub+0x368>
 8001f70:	2a1f      	cmp	r2, #31
 8001f72:	dd00      	ble.n	8001f76 <__aeabi_dsub+0x76>
 8001f74:	e1ee      	b.n	8002354 <__aeabi_dsub+0x454>
 8001f76:	2020      	movs	r0, #32
 8001f78:	003e      	movs	r6, r7
 8001f7a:	1a80      	subs	r0, r0, r2
 8001f7c:	000c      	movs	r4, r1
 8001f7e:	40d6      	lsrs	r6, r2
 8001f80:	40d1      	lsrs	r1, r2
 8001f82:	4087      	lsls	r7, r0
 8001f84:	4662      	mov	r2, ip
 8001f86:	4084      	lsls	r4, r0
 8001f88:	1a52      	subs	r2, r2, r1
 8001f8a:	1e78      	subs	r0, r7, #1
 8001f8c:	4187      	sbcs	r7, r0
 8001f8e:	4694      	mov	ip, r2
 8001f90:	4334      	orrs	r4, r6
 8001f92:	4327      	orrs	r7, r4
 8001f94:	1bdc      	subs	r4, r3, r7
 8001f96:	42a3      	cmp	r3, r4
 8001f98:	419b      	sbcs	r3, r3
 8001f9a:	4662      	mov	r2, ip
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	4699      	mov	r9, r3
 8001fa2:	464b      	mov	r3, r9
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	d400      	bmi.n	8001faa <__aeabi_dsub+0xaa>
 8001fa8:	e118      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8001faa:	464b      	mov	r3, r9
 8001fac:	0258      	lsls	r0, r3, #9
 8001fae:	0a43      	lsrs	r3, r0, #9
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0xba>
 8001fb8:	e137      	b.n	800222a <__aeabi_dsub+0x32a>
 8001fba:	4648      	mov	r0, r9
 8001fbc:	f000 fcac 	bl	8002918 <__clzsi2>
 8001fc0:	0001      	movs	r1, r0
 8001fc2:	3908      	subs	r1, #8
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	0022      	movs	r2, r4
 8001fc8:	4648      	mov	r0, r9
 8001fca:	1a5b      	subs	r3, r3, r1
 8001fcc:	40da      	lsrs	r2, r3
 8001fce:	4088      	lsls	r0, r1
 8001fd0:	408c      	lsls	r4, r1
 8001fd2:	4643      	mov	r3, r8
 8001fd4:	4310      	orrs	r0, r2
 8001fd6:	4588      	cmp	r8, r1
 8001fd8:	dd00      	ble.n	8001fdc <__aeabi_dsub+0xdc>
 8001fda:	e136      	b.n	800224a <__aeabi_dsub+0x34a>
 8001fdc:	1ac9      	subs	r1, r1, r3
 8001fde:	1c4b      	adds	r3, r1, #1
 8001fe0:	2b1f      	cmp	r3, #31
 8001fe2:	dd00      	ble.n	8001fe6 <__aeabi_dsub+0xe6>
 8001fe4:	e0ea      	b.n	80021bc <__aeabi_dsub+0x2bc>
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	0026      	movs	r6, r4
 8001fea:	1ad2      	subs	r2, r2, r3
 8001fec:	0001      	movs	r1, r0
 8001fee:	4094      	lsls	r4, r2
 8001ff0:	40de      	lsrs	r6, r3
 8001ff2:	40d8      	lsrs	r0, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	4091      	lsls	r1, r2
 8001ff8:	1e62      	subs	r2, r4, #1
 8001ffa:	4194      	sbcs	r4, r2
 8001ffc:	4681      	mov	r9, r0
 8001ffe:	4698      	mov	r8, r3
 8002000:	4331      	orrs	r1, r6
 8002002:	430c      	orrs	r4, r1
 8002004:	0763      	lsls	r3, r4, #29
 8002006:	d009      	beq.n	800201c <__aeabi_dsub+0x11c>
 8002008:	230f      	movs	r3, #15
 800200a:	4023      	ands	r3, r4
 800200c:	2b04      	cmp	r3, #4
 800200e:	d005      	beq.n	800201c <__aeabi_dsub+0x11c>
 8002010:	1d23      	adds	r3, r4, #4
 8002012:	42a3      	cmp	r3, r4
 8002014:	41a4      	sbcs	r4, r4
 8002016:	4264      	negs	r4, r4
 8002018:	44a1      	add	r9, r4
 800201a:	001c      	movs	r4, r3
 800201c:	464b      	mov	r3, r9
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	d400      	bmi.n	8002024 <__aeabi_dsub+0x124>
 8002022:	e0de      	b.n	80021e2 <__aeabi_dsub+0x2e2>
 8002024:	4641      	mov	r1, r8
 8002026:	4b8c      	ldr	r3, [pc, #560]	; (8002258 <__aeabi_dsub+0x358>)
 8002028:	3101      	adds	r1, #1
 800202a:	4299      	cmp	r1, r3
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x130>
 800202e:	e0e7      	b.n	8002200 <__aeabi_dsub+0x300>
 8002030:	464b      	mov	r3, r9
 8002032:	488a      	ldr	r0, [pc, #552]	; (800225c <__aeabi_dsub+0x35c>)
 8002034:	08e4      	lsrs	r4, r4, #3
 8002036:	4003      	ands	r3, r0
 8002038:	0018      	movs	r0, r3
 800203a:	0549      	lsls	r1, r1, #21
 800203c:	075b      	lsls	r3, r3, #29
 800203e:	0240      	lsls	r0, r0, #9
 8002040:	4323      	orrs	r3, r4
 8002042:	0d4a      	lsrs	r2, r1, #21
 8002044:	0b04      	lsrs	r4, r0, #12
 8002046:	0512      	lsls	r2, r2, #20
 8002048:	07ed      	lsls	r5, r5, #31
 800204a:	4322      	orrs	r2, r4
 800204c:	432a      	orrs	r2, r5
 800204e:	0018      	movs	r0, r3
 8002050:	0011      	movs	r1, r2
 8002052:	bcf0      	pop	{r4, r5, r6, r7}
 8002054:	46bb      	mov	fp, r7
 8002056:	46b2      	mov	sl, r6
 8002058:	46a9      	mov	r9, r5
 800205a:	46a0      	mov	r8, r4
 800205c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800205e:	4642      	mov	r2, r8
 8002060:	1a12      	subs	r2, r2, r0
 8002062:	2a00      	cmp	r2, #0
 8002064:	dd52      	ble.n	800210c <__aeabi_dsub+0x20c>
 8002066:	2800      	cmp	r0, #0
 8002068:	d100      	bne.n	800206c <__aeabi_dsub+0x16c>
 800206a:	e09c      	b.n	80021a6 <__aeabi_dsub+0x2a6>
 800206c:	45a0      	cmp	r8, r4
 800206e:	d100      	bne.n	8002072 <__aeabi_dsub+0x172>
 8002070:	e0ca      	b.n	8002208 <__aeabi_dsub+0x308>
 8002072:	2080      	movs	r0, #128	; 0x80
 8002074:	0400      	lsls	r0, r0, #16
 8002076:	4301      	orrs	r1, r0
 8002078:	2a38      	cmp	r2, #56	; 0x38
 800207a:	dd00      	ble.n	800207e <__aeabi_dsub+0x17e>
 800207c:	e149      	b.n	8002312 <__aeabi_dsub+0x412>
 800207e:	2a1f      	cmp	r2, #31
 8002080:	dc00      	bgt.n	8002084 <__aeabi_dsub+0x184>
 8002082:	e197      	b.n	80023b4 <__aeabi_dsub+0x4b4>
 8002084:	0010      	movs	r0, r2
 8002086:	000e      	movs	r6, r1
 8002088:	3820      	subs	r0, #32
 800208a:	40c6      	lsrs	r6, r0
 800208c:	2a20      	cmp	r2, #32
 800208e:	d004      	beq.n	800209a <__aeabi_dsub+0x19a>
 8002090:	2040      	movs	r0, #64	; 0x40
 8002092:	1a82      	subs	r2, r0, r2
 8002094:	4091      	lsls	r1, r2
 8002096:	430f      	orrs	r7, r1
 8002098:	46b9      	mov	r9, r7
 800209a:	464c      	mov	r4, r9
 800209c:	1e62      	subs	r2, r4, #1
 800209e:	4194      	sbcs	r4, r2
 80020a0:	4334      	orrs	r4, r6
 80020a2:	e13a      	b.n	800231a <__aeabi_dsub+0x41a>
 80020a4:	000a      	movs	r2, r1
 80020a6:	433a      	orrs	r2, r7
 80020a8:	d028      	beq.n	80020fc <__aeabi_dsub+0x1fc>
 80020aa:	46b3      	mov	fp, r6
 80020ac:	42b5      	cmp	r5, r6
 80020ae:	d02b      	beq.n	8002108 <__aeabi_dsub+0x208>
 80020b0:	4a6b      	ldr	r2, [pc, #428]	; (8002260 <__aeabi_dsub+0x360>)
 80020b2:	4442      	add	r2, r8
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d05d      	beq.n	8002174 <__aeabi_dsub+0x274>
 80020b8:	4642      	mov	r2, r8
 80020ba:	4644      	mov	r4, r8
 80020bc:	1a82      	subs	r2, r0, r2
 80020be:	2c00      	cmp	r4, #0
 80020c0:	d000      	beq.n	80020c4 <__aeabi_dsub+0x1c4>
 80020c2:	e0f5      	b.n	80022b0 <__aeabi_dsub+0x3b0>
 80020c4:	4665      	mov	r5, ip
 80020c6:	431d      	orrs	r5, r3
 80020c8:	d100      	bne.n	80020cc <__aeabi_dsub+0x1cc>
 80020ca:	e19c      	b.n	8002406 <__aeabi_dsub+0x506>
 80020cc:	1e55      	subs	r5, r2, #1
 80020ce:	2a01      	cmp	r2, #1
 80020d0:	d100      	bne.n	80020d4 <__aeabi_dsub+0x1d4>
 80020d2:	e1fb      	b.n	80024cc <__aeabi_dsub+0x5cc>
 80020d4:	4c60      	ldr	r4, [pc, #384]	; (8002258 <__aeabi_dsub+0x358>)
 80020d6:	42a2      	cmp	r2, r4
 80020d8:	d100      	bne.n	80020dc <__aeabi_dsub+0x1dc>
 80020da:	e1bd      	b.n	8002458 <__aeabi_dsub+0x558>
 80020dc:	002a      	movs	r2, r5
 80020de:	e0f0      	b.n	80022c2 <__aeabi_dsub+0x3c2>
 80020e0:	0008      	movs	r0, r1
 80020e2:	4338      	orrs	r0, r7
 80020e4:	d100      	bne.n	80020e8 <__aeabi_dsub+0x1e8>
 80020e6:	e0c3      	b.n	8002270 <__aeabi_dsub+0x370>
 80020e8:	1e50      	subs	r0, r2, #1
 80020ea:	2a01      	cmp	r2, #1
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dsub+0x1f0>
 80020ee:	e1a8      	b.n	8002442 <__aeabi_dsub+0x542>
 80020f0:	4c59      	ldr	r4, [pc, #356]	; (8002258 <__aeabi_dsub+0x358>)
 80020f2:	42a2      	cmp	r2, r4
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x1f8>
 80020f6:	e087      	b.n	8002208 <__aeabi_dsub+0x308>
 80020f8:	0002      	movs	r2, r0
 80020fa:	e736      	b.n	8001f6a <__aeabi_dsub+0x6a>
 80020fc:	2201      	movs	r2, #1
 80020fe:	4056      	eors	r6, r2
 8002100:	46b3      	mov	fp, r6
 8002102:	42b5      	cmp	r5, r6
 8002104:	d000      	beq.n	8002108 <__aeabi_dsub+0x208>
 8002106:	e721      	b.n	8001f4c <__aeabi_dsub+0x4c>
 8002108:	4a55      	ldr	r2, [pc, #340]	; (8002260 <__aeabi_dsub+0x360>)
 800210a:	4442      	add	r2, r8
 800210c:	2a00      	cmp	r2, #0
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x212>
 8002110:	e0b5      	b.n	800227e <__aeabi_dsub+0x37e>
 8002112:	4642      	mov	r2, r8
 8002114:	4644      	mov	r4, r8
 8002116:	1a82      	subs	r2, r0, r2
 8002118:	2c00      	cmp	r4, #0
 800211a:	d100      	bne.n	800211e <__aeabi_dsub+0x21e>
 800211c:	e138      	b.n	8002390 <__aeabi_dsub+0x490>
 800211e:	4e4e      	ldr	r6, [pc, #312]	; (8002258 <__aeabi_dsub+0x358>)
 8002120:	42b0      	cmp	r0, r6
 8002122:	d100      	bne.n	8002126 <__aeabi_dsub+0x226>
 8002124:	e1de      	b.n	80024e4 <__aeabi_dsub+0x5e4>
 8002126:	2680      	movs	r6, #128	; 0x80
 8002128:	4664      	mov	r4, ip
 800212a:	0436      	lsls	r6, r6, #16
 800212c:	4334      	orrs	r4, r6
 800212e:	46a4      	mov	ip, r4
 8002130:	2a38      	cmp	r2, #56	; 0x38
 8002132:	dd00      	ble.n	8002136 <__aeabi_dsub+0x236>
 8002134:	e196      	b.n	8002464 <__aeabi_dsub+0x564>
 8002136:	2a1f      	cmp	r2, #31
 8002138:	dd00      	ble.n	800213c <__aeabi_dsub+0x23c>
 800213a:	e224      	b.n	8002586 <__aeabi_dsub+0x686>
 800213c:	2620      	movs	r6, #32
 800213e:	1ab4      	subs	r4, r6, r2
 8002140:	46a2      	mov	sl, r4
 8002142:	4664      	mov	r4, ip
 8002144:	4656      	mov	r6, sl
 8002146:	40b4      	lsls	r4, r6
 8002148:	46a1      	mov	r9, r4
 800214a:	001c      	movs	r4, r3
 800214c:	464e      	mov	r6, r9
 800214e:	40d4      	lsrs	r4, r2
 8002150:	4326      	orrs	r6, r4
 8002152:	0034      	movs	r4, r6
 8002154:	4656      	mov	r6, sl
 8002156:	40b3      	lsls	r3, r6
 8002158:	1e5e      	subs	r6, r3, #1
 800215a:	41b3      	sbcs	r3, r6
 800215c:	431c      	orrs	r4, r3
 800215e:	4663      	mov	r3, ip
 8002160:	40d3      	lsrs	r3, r2
 8002162:	18c9      	adds	r1, r1, r3
 8002164:	19e4      	adds	r4, r4, r7
 8002166:	42bc      	cmp	r4, r7
 8002168:	41bf      	sbcs	r7, r7
 800216a:	427f      	negs	r7, r7
 800216c:	46b9      	mov	r9, r7
 800216e:	4680      	mov	r8, r0
 8002170:	4489      	add	r9, r1
 8002172:	e0d8      	b.n	8002326 <__aeabi_dsub+0x426>
 8002174:	4640      	mov	r0, r8
 8002176:	4c3b      	ldr	r4, [pc, #236]	; (8002264 <__aeabi_dsub+0x364>)
 8002178:	3001      	adds	r0, #1
 800217a:	4220      	tst	r0, r4
 800217c:	d000      	beq.n	8002180 <__aeabi_dsub+0x280>
 800217e:	e0b4      	b.n	80022ea <__aeabi_dsub+0x3ea>
 8002180:	4640      	mov	r0, r8
 8002182:	2800      	cmp	r0, #0
 8002184:	d000      	beq.n	8002188 <__aeabi_dsub+0x288>
 8002186:	e144      	b.n	8002412 <__aeabi_dsub+0x512>
 8002188:	4660      	mov	r0, ip
 800218a:	4318      	orrs	r0, r3
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x290>
 800218e:	e190      	b.n	80024b2 <__aeabi_dsub+0x5b2>
 8002190:	0008      	movs	r0, r1
 8002192:	4338      	orrs	r0, r7
 8002194:	d000      	beq.n	8002198 <__aeabi_dsub+0x298>
 8002196:	e1aa      	b.n	80024ee <__aeabi_dsub+0x5ee>
 8002198:	4661      	mov	r1, ip
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	0749      	lsls	r1, r1, #29
 800219e:	430b      	orrs	r3, r1
 80021a0:	4661      	mov	r1, ip
 80021a2:	08cc      	lsrs	r4, r1, #3
 80021a4:	e027      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 80021a6:	0008      	movs	r0, r1
 80021a8:	4338      	orrs	r0, r7
 80021aa:	d061      	beq.n	8002270 <__aeabi_dsub+0x370>
 80021ac:	1e50      	subs	r0, r2, #1
 80021ae:	2a01      	cmp	r2, #1
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x2b4>
 80021b2:	e139      	b.n	8002428 <__aeabi_dsub+0x528>
 80021b4:	42a2      	cmp	r2, r4
 80021b6:	d027      	beq.n	8002208 <__aeabi_dsub+0x308>
 80021b8:	0002      	movs	r2, r0
 80021ba:	e75d      	b.n	8002078 <__aeabi_dsub+0x178>
 80021bc:	0002      	movs	r2, r0
 80021be:	391f      	subs	r1, #31
 80021c0:	40ca      	lsrs	r2, r1
 80021c2:	0011      	movs	r1, r2
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d003      	beq.n	80021d0 <__aeabi_dsub+0x2d0>
 80021c8:	2240      	movs	r2, #64	; 0x40
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	4098      	lsls	r0, r3
 80021ce:	4304      	orrs	r4, r0
 80021d0:	1e63      	subs	r3, r4, #1
 80021d2:	419c      	sbcs	r4, r3
 80021d4:	2300      	movs	r3, #0
 80021d6:	4699      	mov	r9, r3
 80021d8:	4698      	mov	r8, r3
 80021da:	430c      	orrs	r4, r1
 80021dc:	0763      	lsls	r3, r4, #29
 80021de:	d000      	beq.n	80021e2 <__aeabi_dsub+0x2e2>
 80021e0:	e712      	b.n	8002008 <__aeabi_dsub+0x108>
 80021e2:	464b      	mov	r3, r9
 80021e4:	464a      	mov	r2, r9
 80021e6:	08e4      	lsrs	r4, r4, #3
 80021e8:	075b      	lsls	r3, r3, #29
 80021ea:	4323      	orrs	r3, r4
 80021ec:	08d4      	lsrs	r4, r2, #3
 80021ee:	4642      	mov	r2, r8
 80021f0:	4919      	ldr	r1, [pc, #100]	; (8002258 <__aeabi_dsub+0x358>)
 80021f2:	428a      	cmp	r2, r1
 80021f4:	d00e      	beq.n	8002214 <__aeabi_dsub+0x314>
 80021f6:	0324      	lsls	r4, r4, #12
 80021f8:	0552      	lsls	r2, r2, #21
 80021fa:	0b24      	lsrs	r4, r4, #12
 80021fc:	0d52      	lsrs	r2, r2, #21
 80021fe:	e722      	b.n	8002046 <__aeabi_dsub+0x146>
 8002200:	000a      	movs	r2, r1
 8002202:	2400      	movs	r4, #0
 8002204:	2300      	movs	r3, #0
 8002206:	e71e      	b.n	8002046 <__aeabi_dsub+0x146>
 8002208:	08db      	lsrs	r3, r3, #3
 800220a:	4662      	mov	r2, ip
 800220c:	0752      	lsls	r2, r2, #29
 800220e:	4313      	orrs	r3, r2
 8002210:	4662      	mov	r2, ip
 8002212:	08d4      	lsrs	r4, r2, #3
 8002214:	001a      	movs	r2, r3
 8002216:	4322      	orrs	r2, r4
 8002218:	d100      	bne.n	800221c <__aeabi_dsub+0x31c>
 800221a:	e1fc      	b.n	8002616 <__aeabi_dsub+0x716>
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	0312      	lsls	r2, r2, #12
 8002220:	4314      	orrs	r4, r2
 8002222:	0324      	lsls	r4, r4, #12
 8002224:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <__aeabi_dsub+0x358>)
 8002226:	0b24      	lsrs	r4, r4, #12
 8002228:	e70d      	b.n	8002046 <__aeabi_dsub+0x146>
 800222a:	0020      	movs	r0, r4
 800222c:	f000 fb74 	bl	8002918 <__clzsi2>
 8002230:	0001      	movs	r1, r0
 8002232:	3118      	adds	r1, #24
 8002234:	291f      	cmp	r1, #31
 8002236:	dc00      	bgt.n	800223a <__aeabi_dsub+0x33a>
 8002238:	e6c4      	b.n	8001fc4 <__aeabi_dsub+0xc4>
 800223a:	3808      	subs	r0, #8
 800223c:	4084      	lsls	r4, r0
 800223e:	4643      	mov	r3, r8
 8002240:	0020      	movs	r0, r4
 8002242:	2400      	movs	r4, #0
 8002244:	4588      	cmp	r8, r1
 8002246:	dc00      	bgt.n	800224a <__aeabi_dsub+0x34a>
 8002248:	e6c8      	b.n	8001fdc <__aeabi_dsub+0xdc>
 800224a:	4a04      	ldr	r2, [pc, #16]	; (800225c <__aeabi_dsub+0x35c>)
 800224c:	1a5b      	subs	r3, r3, r1
 800224e:	4010      	ands	r0, r2
 8002250:	4698      	mov	r8, r3
 8002252:	4681      	mov	r9, r0
 8002254:	e6d6      	b.n	8002004 <__aeabi_dsub+0x104>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	000007ff 	.word	0x000007ff
 800225c:	ff7fffff 	.word	0xff7fffff
 8002260:	fffff801 	.word	0xfffff801
 8002264:	000007fe 	.word	0x000007fe
 8002268:	430f      	orrs	r7, r1
 800226a:	1e7a      	subs	r2, r7, #1
 800226c:	4197      	sbcs	r7, r2
 800226e:	e691      	b.n	8001f94 <__aeabi_dsub+0x94>
 8002270:	4661      	mov	r1, ip
 8002272:	08db      	lsrs	r3, r3, #3
 8002274:	0749      	lsls	r1, r1, #29
 8002276:	430b      	orrs	r3, r1
 8002278:	4661      	mov	r1, ip
 800227a:	08cc      	lsrs	r4, r1, #3
 800227c:	e7b8      	b.n	80021f0 <__aeabi_dsub+0x2f0>
 800227e:	4640      	mov	r0, r8
 8002280:	4cd3      	ldr	r4, [pc, #844]	; (80025d0 <__aeabi_dsub+0x6d0>)
 8002282:	3001      	adds	r0, #1
 8002284:	4220      	tst	r0, r4
 8002286:	d000      	beq.n	800228a <__aeabi_dsub+0x38a>
 8002288:	e0a2      	b.n	80023d0 <__aeabi_dsub+0x4d0>
 800228a:	4640      	mov	r0, r8
 800228c:	2800      	cmp	r0, #0
 800228e:	d000      	beq.n	8002292 <__aeabi_dsub+0x392>
 8002290:	e101      	b.n	8002496 <__aeabi_dsub+0x596>
 8002292:	4660      	mov	r0, ip
 8002294:	4318      	orrs	r0, r3
 8002296:	d100      	bne.n	800229a <__aeabi_dsub+0x39a>
 8002298:	e15e      	b.n	8002558 <__aeabi_dsub+0x658>
 800229a:	0008      	movs	r0, r1
 800229c:	4338      	orrs	r0, r7
 800229e:	d000      	beq.n	80022a2 <__aeabi_dsub+0x3a2>
 80022a0:	e15f      	b.n	8002562 <__aeabi_dsub+0x662>
 80022a2:	4661      	mov	r1, ip
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	0749      	lsls	r1, r1, #29
 80022a8:	430b      	orrs	r3, r1
 80022aa:	4661      	mov	r1, ip
 80022ac:	08cc      	lsrs	r4, r1, #3
 80022ae:	e7a2      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 80022b0:	4dc8      	ldr	r5, [pc, #800]	; (80025d4 <__aeabi_dsub+0x6d4>)
 80022b2:	42a8      	cmp	r0, r5
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dsub+0x3b8>
 80022b6:	e0cf      	b.n	8002458 <__aeabi_dsub+0x558>
 80022b8:	2580      	movs	r5, #128	; 0x80
 80022ba:	4664      	mov	r4, ip
 80022bc:	042d      	lsls	r5, r5, #16
 80022be:	432c      	orrs	r4, r5
 80022c0:	46a4      	mov	ip, r4
 80022c2:	2a38      	cmp	r2, #56	; 0x38
 80022c4:	dc56      	bgt.n	8002374 <__aeabi_dsub+0x474>
 80022c6:	2a1f      	cmp	r2, #31
 80022c8:	dd00      	ble.n	80022cc <__aeabi_dsub+0x3cc>
 80022ca:	e0d1      	b.n	8002470 <__aeabi_dsub+0x570>
 80022cc:	2520      	movs	r5, #32
 80022ce:	001e      	movs	r6, r3
 80022d0:	1aad      	subs	r5, r5, r2
 80022d2:	4664      	mov	r4, ip
 80022d4:	40ab      	lsls	r3, r5
 80022d6:	40ac      	lsls	r4, r5
 80022d8:	40d6      	lsrs	r6, r2
 80022da:	1e5d      	subs	r5, r3, #1
 80022dc:	41ab      	sbcs	r3, r5
 80022de:	4334      	orrs	r4, r6
 80022e0:	4323      	orrs	r3, r4
 80022e2:	4664      	mov	r4, ip
 80022e4:	40d4      	lsrs	r4, r2
 80022e6:	1b09      	subs	r1, r1, r4
 80022e8:	e049      	b.n	800237e <__aeabi_dsub+0x47e>
 80022ea:	4660      	mov	r0, ip
 80022ec:	1bdc      	subs	r4, r3, r7
 80022ee:	1a46      	subs	r6, r0, r1
 80022f0:	42a3      	cmp	r3, r4
 80022f2:	4180      	sbcs	r0, r0
 80022f4:	4240      	negs	r0, r0
 80022f6:	4681      	mov	r9, r0
 80022f8:	0030      	movs	r0, r6
 80022fa:	464e      	mov	r6, r9
 80022fc:	1b80      	subs	r0, r0, r6
 80022fe:	4681      	mov	r9, r0
 8002300:	0200      	lsls	r0, r0, #8
 8002302:	d476      	bmi.n	80023f2 <__aeabi_dsub+0x4f2>
 8002304:	464b      	mov	r3, r9
 8002306:	4323      	orrs	r3, r4
 8002308:	d000      	beq.n	800230c <__aeabi_dsub+0x40c>
 800230a:	e652      	b.n	8001fb2 <__aeabi_dsub+0xb2>
 800230c:	2400      	movs	r4, #0
 800230e:	2500      	movs	r5, #0
 8002310:	e771      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 8002312:	4339      	orrs	r1, r7
 8002314:	000c      	movs	r4, r1
 8002316:	1e62      	subs	r2, r4, #1
 8002318:	4194      	sbcs	r4, r2
 800231a:	18e4      	adds	r4, r4, r3
 800231c:	429c      	cmp	r4, r3
 800231e:	419b      	sbcs	r3, r3
 8002320:	425b      	negs	r3, r3
 8002322:	4463      	add	r3, ip
 8002324:	4699      	mov	r9, r3
 8002326:	464b      	mov	r3, r9
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	d400      	bmi.n	800232e <__aeabi_dsub+0x42e>
 800232c:	e756      	b.n	80021dc <__aeabi_dsub+0x2dc>
 800232e:	2301      	movs	r3, #1
 8002330:	469c      	mov	ip, r3
 8002332:	4ba8      	ldr	r3, [pc, #672]	; (80025d4 <__aeabi_dsub+0x6d4>)
 8002334:	44e0      	add	r8, ip
 8002336:	4598      	cmp	r8, r3
 8002338:	d038      	beq.n	80023ac <__aeabi_dsub+0x4ac>
 800233a:	464b      	mov	r3, r9
 800233c:	48a6      	ldr	r0, [pc, #664]	; (80025d8 <__aeabi_dsub+0x6d8>)
 800233e:	2201      	movs	r2, #1
 8002340:	4003      	ands	r3, r0
 8002342:	0018      	movs	r0, r3
 8002344:	0863      	lsrs	r3, r4, #1
 8002346:	4014      	ands	r4, r2
 8002348:	431c      	orrs	r4, r3
 800234a:	07c3      	lsls	r3, r0, #31
 800234c:	431c      	orrs	r4, r3
 800234e:	0843      	lsrs	r3, r0, #1
 8002350:	4699      	mov	r9, r3
 8002352:	e657      	b.n	8002004 <__aeabi_dsub+0x104>
 8002354:	0010      	movs	r0, r2
 8002356:	000e      	movs	r6, r1
 8002358:	3820      	subs	r0, #32
 800235a:	40c6      	lsrs	r6, r0
 800235c:	2a20      	cmp	r2, #32
 800235e:	d004      	beq.n	800236a <__aeabi_dsub+0x46a>
 8002360:	2040      	movs	r0, #64	; 0x40
 8002362:	1a82      	subs	r2, r0, r2
 8002364:	4091      	lsls	r1, r2
 8002366:	430f      	orrs	r7, r1
 8002368:	46b9      	mov	r9, r7
 800236a:	464f      	mov	r7, r9
 800236c:	1e7a      	subs	r2, r7, #1
 800236e:	4197      	sbcs	r7, r2
 8002370:	4337      	orrs	r7, r6
 8002372:	e60f      	b.n	8001f94 <__aeabi_dsub+0x94>
 8002374:	4662      	mov	r2, ip
 8002376:	431a      	orrs	r2, r3
 8002378:	0013      	movs	r3, r2
 800237a:	1e5a      	subs	r2, r3, #1
 800237c:	4193      	sbcs	r3, r2
 800237e:	1afc      	subs	r4, r7, r3
 8002380:	42a7      	cmp	r7, r4
 8002382:	41bf      	sbcs	r7, r7
 8002384:	427f      	negs	r7, r7
 8002386:	1bcb      	subs	r3, r1, r7
 8002388:	4699      	mov	r9, r3
 800238a:	465d      	mov	r5, fp
 800238c:	4680      	mov	r8, r0
 800238e:	e608      	b.n	8001fa2 <__aeabi_dsub+0xa2>
 8002390:	4666      	mov	r6, ip
 8002392:	431e      	orrs	r6, r3
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x498>
 8002396:	e0be      	b.n	8002516 <__aeabi_dsub+0x616>
 8002398:	1e56      	subs	r6, r2, #1
 800239a:	2a01      	cmp	r2, #1
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x4a0>
 800239e:	e109      	b.n	80025b4 <__aeabi_dsub+0x6b4>
 80023a0:	4c8c      	ldr	r4, [pc, #560]	; (80025d4 <__aeabi_dsub+0x6d4>)
 80023a2:	42a2      	cmp	r2, r4
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x4a8>
 80023a6:	e119      	b.n	80025dc <__aeabi_dsub+0x6dc>
 80023a8:	0032      	movs	r2, r6
 80023aa:	e6c1      	b.n	8002130 <__aeabi_dsub+0x230>
 80023ac:	4642      	mov	r2, r8
 80023ae:	2400      	movs	r4, #0
 80023b0:	2300      	movs	r3, #0
 80023b2:	e648      	b.n	8002046 <__aeabi_dsub+0x146>
 80023b4:	2020      	movs	r0, #32
 80023b6:	000c      	movs	r4, r1
 80023b8:	1a80      	subs	r0, r0, r2
 80023ba:	003e      	movs	r6, r7
 80023bc:	4087      	lsls	r7, r0
 80023be:	4084      	lsls	r4, r0
 80023c0:	40d6      	lsrs	r6, r2
 80023c2:	1e78      	subs	r0, r7, #1
 80023c4:	4187      	sbcs	r7, r0
 80023c6:	40d1      	lsrs	r1, r2
 80023c8:	4334      	orrs	r4, r6
 80023ca:	433c      	orrs	r4, r7
 80023cc:	448c      	add	ip, r1
 80023ce:	e7a4      	b.n	800231a <__aeabi_dsub+0x41a>
 80023d0:	4a80      	ldr	r2, [pc, #512]	; (80025d4 <__aeabi_dsub+0x6d4>)
 80023d2:	4290      	cmp	r0, r2
 80023d4:	d100      	bne.n	80023d8 <__aeabi_dsub+0x4d8>
 80023d6:	e0e9      	b.n	80025ac <__aeabi_dsub+0x6ac>
 80023d8:	19df      	adds	r7, r3, r7
 80023da:	429f      	cmp	r7, r3
 80023dc:	419b      	sbcs	r3, r3
 80023de:	4461      	add	r1, ip
 80023e0:	425b      	negs	r3, r3
 80023e2:	18c9      	adds	r1, r1, r3
 80023e4:	07cc      	lsls	r4, r1, #31
 80023e6:	087f      	lsrs	r7, r7, #1
 80023e8:	084b      	lsrs	r3, r1, #1
 80023ea:	4699      	mov	r9, r3
 80023ec:	4680      	mov	r8, r0
 80023ee:	433c      	orrs	r4, r7
 80023f0:	e6f4      	b.n	80021dc <__aeabi_dsub+0x2dc>
 80023f2:	1afc      	subs	r4, r7, r3
 80023f4:	42a7      	cmp	r7, r4
 80023f6:	41bf      	sbcs	r7, r7
 80023f8:	4663      	mov	r3, ip
 80023fa:	427f      	negs	r7, r7
 80023fc:	1ac9      	subs	r1, r1, r3
 80023fe:	1bcb      	subs	r3, r1, r7
 8002400:	4699      	mov	r9, r3
 8002402:	465d      	mov	r5, fp
 8002404:	e5d5      	b.n	8001fb2 <__aeabi_dsub+0xb2>
 8002406:	08ff      	lsrs	r7, r7, #3
 8002408:	074b      	lsls	r3, r1, #29
 800240a:	465d      	mov	r5, fp
 800240c:	433b      	orrs	r3, r7
 800240e:	08cc      	lsrs	r4, r1, #3
 8002410:	e6ee      	b.n	80021f0 <__aeabi_dsub+0x2f0>
 8002412:	4662      	mov	r2, ip
 8002414:	431a      	orrs	r2, r3
 8002416:	d000      	beq.n	800241a <__aeabi_dsub+0x51a>
 8002418:	e082      	b.n	8002520 <__aeabi_dsub+0x620>
 800241a:	000b      	movs	r3, r1
 800241c:	433b      	orrs	r3, r7
 800241e:	d11b      	bne.n	8002458 <__aeabi_dsub+0x558>
 8002420:	2480      	movs	r4, #128	; 0x80
 8002422:	2500      	movs	r5, #0
 8002424:	0324      	lsls	r4, r4, #12
 8002426:	e6f9      	b.n	800221c <__aeabi_dsub+0x31c>
 8002428:	19dc      	adds	r4, r3, r7
 800242a:	429c      	cmp	r4, r3
 800242c:	419b      	sbcs	r3, r3
 800242e:	4461      	add	r1, ip
 8002430:	4689      	mov	r9, r1
 8002432:	425b      	negs	r3, r3
 8002434:	4499      	add	r9, r3
 8002436:	464b      	mov	r3, r9
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	d444      	bmi.n	80024c6 <__aeabi_dsub+0x5c6>
 800243c:	2301      	movs	r3, #1
 800243e:	4698      	mov	r8, r3
 8002440:	e6cc      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8002442:	1bdc      	subs	r4, r3, r7
 8002444:	4662      	mov	r2, ip
 8002446:	42a3      	cmp	r3, r4
 8002448:	419b      	sbcs	r3, r3
 800244a:	1a51      	subs	r1, r2, r1
 800244c:	425b      	negs	r3, r3
 800244e:	1acb      	subs	r3, r1, r3
 8002450:	4699      	mov	r9, r3
 8002452:	2301      	movs	r3, #1
 8002454:	4698      	mov	r8, r3
 8002456:	e5a4      	b.n	8001fa2 <__aeabi_dsub+0xa2>
 8002458:	08ff      	lsrs	r7, r7, #3
 800245a:	074b      	lsls	r3, r1, #29
 800245c:	465d      	mov	r5, fp
 800245e:	433b      	orrs	r3, r7
 8002460:	08cc      	lsrs	r4, r1, #3
 8002462:	e6d7      	b.n	8002214 <__aeabi_dsub+0x314>
 8002464:	4662      	mov	r2, ip
 8002466:	431a      	orrs	r2, r3
 8002468:	0014      	movs	r4, r2
 800246a:	1e63      	subs	r3, r4, #1
 800246c:	419c      	sbcs	r4, r3
 800246e:	e679      	b.n	8002164 <__aeabi_dsub+0x264>
 8002470:	0015      	movs	r5, r2
 8002472:	4664      	mov	r4, ip
 8002474:	3d20      	subs	r5, #32
 8002476:	40ec      	lsrs	r4, r5
 8002478:	46a0      	mov	r8, r4
 800247a:	2a20      	cmp	r2, #32
 800247c:	d005      	beq.n	800248a <__aeabi_dsub+0x58a>
 800247e:	2540      	movs	r5, #64	; 0x40
 8002480:	4664      	mov	r4, ip
 8002482:	1aaa      	subs	r2, r5, r2
 8002484:	4094      	lsls	r4, r2
 8002486:	4323      	orrs	r3, r4
 8002488:	469a      	mov	sl, r3
 800248a:	4654      	mov	r4, sl
 800248c:	1e63      	subs	r3, r4, #1
 800248e:	419c      	sbcs	r4, r3
 8002490:	4643      	mov	r3, r8
 8002492:	4323      	orrs	r3, r4
 8002494:	e773      	b.n	800237e <__aeabi_dsub+0x47e>
 8002496:	4662      	mov	r2, ip
 8002498:	431a      	orrs	r2, r3
 800249a:	d023      	beq.n	80024e4 <__aeabi_dsub+0x5e4>
 800249c:	000a      	movs	r2, r1
 800249e:	433a      	orrs	r2, r7
 80024a0:	d000      	beq.n	80024a4 <__aeabi_dsub+0x5a4>
 80024a2:	e0a0      	b.n	80025e6 <__aeabi_dsub+0x6e6>
 80024a4:	4662      	mov	r2, ip
 80024a6:	08db      	lsrs	r3, r3, #3
 80024a8:	0752      	lsls	r2, r2, #29
 80024aa:	4313      	orrs	r3, r2
 80024ac:	4662      	mov	r2, ip
 80024ae:	08d4      	lsrs	r4, r2, #3
 80024b0:	e6b0      	b.n	8002214 <__aeabi_dsub+0x314>
 80024b2:	000b      	movs	r3, r1
 80024b4:	433b      	orrs	r3, r7
 80024b6:	d100      	bne.n	80024ba <__aeabi_dsub+0x5ba>
 80024b8:	e728      	b.n	800230c <__aeabi_dsub+0x40c>
 80024ba:	08ff      	lsrs	r7, r7, #3
 80024bc:	074b      	lsls	r3, r1, #29
 80024be:	465d      	mov	r5, fp
 80024c0:	433b      	orrs	r3, r7
 80024c2:	08cc      	lsrs	r4, r1, #3
 80024c4:	e697      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 80024c6:	2302      	movs	r3, #2
 80024c8:	4698      	mov	r8, r3
 80024ca:	e736      	b.n	800233a <__aeabi_dsub+0x43a>
 80024cc:	1afc      	subs	r4, r7, r3
 80024ce:	42a7      	cmp	r7, r4
 80024d0:	41bf      	sbcs	r7, r7
 80024d2:	4663      	mov	r3, ip
 80024d4:	427f      	negs	r7, r7
 80024d6:	1ac9      	subs	r1, r1, r3
 80024d8:	1bcb      	subs	r3, r1, r7
 80024da:	4699      	mov	r9, r3
 80024dc:	2301      	movs	r3, #1
 80024de:	465d      	mov	r5, fp
 80024e0:	4698      	mov	r8, r3
 80024e2:	e55e      	b.n	8001fa2 <__aeabi_dsub+0xa2>
 80024e4:	074b      	lsls	r3, r1, #29
 80024e6:	08ff      	lsrs	r7, r7, #3
 80024e8:	433b      	orrs	r3, r7
 80024ea:	08cc      	lsrs	r4, r1, #3
 80024ec:	e692      	b.n	8002214 <__aeabi_dsub+0x314>
 80024ee:	1bdc      	subs	r4, r3, r7
 80024f0:	4660      	mov	r0, ip
 80024f2:	42a3      	cmp	r3, r4
 80024f4:	41b6      	sbcs	r6, r6
 80024f6:	1a40      	subs	r0, r0, r1
 80024f8:	4276      	negs	r6, r6
 80024fa:	1b80      	subs	r0, r0, r6
 80024fc:	4681      	mov	r9, r0
 80024fe:	0200      	lsls	r0, r0, #8
 8002500:	d560      	bpl.n	80025c4 <__aeabi_dsub+0x6c4>
 8002502:	1afc      	subs	r4, r7, r3
 8002504:	42a7      	cmp	r7, r4
 8002506:	41bf      	sbcs	r7, r7
 8002508:	4663      	mov	r3, ip
 800250a:	427f      	negs	r7, r7
 800250c:	1ac9      	subs	r1, r1, r3
 800250e:	1bcb      	subs	r3, r1, r7
 8002510:	4699      	mov	r9, r3
 8002512:	465d      	mov	r5, fp
 8002514:	e576      	b.n	8002004 <__aeabi_dsub+0x104>
 8002516:	08ff      	lsrs	r7, r7, #3
 8002518:	074b      	lsls	r3, r1, #29
 800251a:	433b      	orrs	r3, r7
 800251c:	08cc      	lsrs	r4, r1, #3
 800251e:	e667      	b.n	80021f0 <__aeabi_dsub+0x2f0>
 8002520:	000a      	movs	r2, r1
 8002522:	08db      	lsrs	r3, r3, #3
 8002524:	433a      	orrs	r2, r7
 8002526:	d100      	bne.n	800252a <__aeabi_dsub+0x62a>
 8002528:	e66f      	b.n	800220a <__aeabi_dsub+0x30a>
 800252a:	4662      	mov	r2, ip
 800252c:	0752      	lsls	r2, r2, #29
 800252e:	4313      	orrs	r3, r2
 8002530:	4662      	mov	r2, ip
 8002532:	08d4      	lsrs	r4, r2, #3
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	0312      	lsls	r2, r2, #12
 8002538:	4214      	tst	r4, r2
 800253a:	d007      	beq.n	800254c <__aeabi_dsub+0x64c>
 800253c:	08c8      	lsrs	r0, r1, #3
 800253e:	4210      	tst	r0, r2
 8002540:	d104      	bne.n	800254c <__aeabi_dsub+0x64c>
 8002542:	465d      	mov	r5, fp
 8002544:	0004      	movs	r4, r0
 8002546:	08fb      	lsrs	r3, r7, #3
 8002548:	0749      	lsls	r1, r1, #29
 800254a:	430b      	orrs	r3, r1
 800254c:	0f5a      	lsrs	r2, r3, #29
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	08db      	lsrs	r3, r3, #3
 8002552:	0752      	lsls	r2, r2, #29
 8002554:	4313      	orrs	r3, r2
 8002556:	e65d      	b.n	8002214 <__aeabi_dsub+0x314>
 8002558:	074b      	lsls	r3, r1, #29
 800255a:	08ff      	lsrs	r7, r7, #3
 800255c:	433b      	orrs	r3, r7
 800255e:	08cc      	lsrs	r4, r1, #3
 8002560:	e649      	b.n	80021f6 <__aeabi_dsub+0x2f6>
 8002562:	19dc      	adds	r4, r3, r7
 8002564:	429c      	cmp	r4, r3
 8002566:	419b      	sbcs	r3, r3
 8002568:	4461      	add	r1, ip
 800256a:	4689      	mov	r9, r1
 800256c:	425b      	negs	r3, r3
 800256e:	4499      	add	r9, r3
 8002570:	464b      	mov	r3, r9
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	d400      	bmi.n	8002578 <__aeabi_dsub+0x678>
 8002576:	e631      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8002578:	464a      	mov	r2, r9
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <__aeabi_dsub+0x6d8>)
 800257c:	401a      	ands	r2, r3
 800257e:	2301      	movs	r3, #1
 8002580:	4691      	mov	r9, r2
 8002582:	4698      	mov	r8, r3
 8002584:	e62a      	b.n	80021dc <__aeabi_dsub+0x2dc>
 8002586:	0016      	movs	r6, r2
 8002588:	4664      	mov	r4, ip
 800258a:	3e20      	subs	r6, #32
 800258c:	40f4      	lsrs	r4, r6
 800258e:	46a0      	mov	r8, r4
 8002590:	2a20      	cmp	r2, #32
 8002592:	d005      	beq.n	80025a0 <__aeabi_dsub+0x6a0>
 8002594:	2640      	movs	r6, #64	; 0x40
 8002596:	4664      	mov	r4, ip
 8002598:	1ab2      	subs	r2, r6, r2
 800259a:	4094      	lsls	r4, r2
 800259c:	4323      	orrs	r3, r4
 800259e:	469a      	mov	sl, r3
 80025a0:	4654      	mov	r4, sl
 80025a2:	1e63      	subs	r3, r4, #1
 80025a4:	419c      	sbcs	r4, r3
 80025a6:	4643      	mov	r3, r8
 80025a8:	431c      	orrs	r4, r3
 80025aa:	e5db      	b.n	8002164 <__aeabi_dsub+0x264>
 80025ac:	0002      	movs	r2, r0
 80025ae:	2400      	movs	r4, #0
 80025b0:	2300      	movs	r3, #0
 80025b2:	e548      	b.n	8002046 <__aeabi_dsub+0x146>
 80025b4:	19dc      	adds	r4, r3, r7
 80025b6:	42bc      	cmp	r4, r7
 80025b8:	41bf      	sbcs	r7, r7
 80025ba:	4461      	add	r1, ip
 80025bc:	4689      	mov	r9, r1
 80025be:	427f      	negs	r7, r7
 80025c0:	44b9      	add	r9, r7
 80025c2:	e738      	b.n	8002436 <__aeabi_dsub+0x536>
 80025c4:	464b      	mov	r3, r9
 80025c6:	4323      	orrs	r3, r4
 80025c8:	d100      	bne.n	80025cc <__aeabi_dsub+0x6cc>
 80025ca:	e69f      	b.n	800230c <__aeabi_dsub+0x40c>
 80025cc:	e606      	b.n	80021dc <__aeabi_dsub+0x2dc>
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	000007fe 	.word	0x000007fe
 80025d4:	000007ff 	.word	0x000007ff
 80025d8:	ff7fffff 	.word	0xff7fffff
 80025dc:	08ff      	lsrs	r7, r7, #3
 80025de:	074b      	lsls	r3, r1, #29
 80025e0:	433b      	orrs	r3, r7
 80025e2:	08cc      	lsrs	r4, r1, #3
 80025e4:	e616      	b.n	8002214 <__aeabi_dsub+0x314>
 80025e6:	4662      	mov	r2, ip
 80025e8:	08db      	lsrs	r3, r3, #3
 80025ea:	0752      	lsls	r2, r2, #29
 80025ec:	4313      	orrs	r3, r2
 80025ee:	4662      	mov	r2, ip
 80025f0:	08d4      	lsrs	r4, r2, #3
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	0312      	lsls	r2, r2, #12
 80025f6:	4214      	tst	r4, r2
 80025f8:	d007      	beq.n	800260a <__aeabi_dsub+0x70a>
 80025fa:	08c8      	lsrs	r0, r1, #3
 80025fc:	4210      	tst	r0, r2
 80025fe:	d104      	bne.n	800260a <__aeabi_dsub+0x70a>
 8002600:	465d      	mov	r5, fp
 8002602:	0004      	movs	r4, r0
 8002604:	08fb      	lsrs	r3, r7, #3
 8002606:	0749      	lsls	r1, r1, #29
 8002608:	430b      	orrs	r3, r1
 800260a:	0f5a      	lsrs	r2, r3, #29
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	0752      	lsls	r2, r2, #29
 8002610:	08db      	lsrs	r3, r3, #3
 8002612:	4313      	orrs	r3, r2
 8002614:	e5fe      	b.n	8002214 <__aeabi_dsub+0x314>
 8002616:	2300      	movs	r3, #0
 8002618:	4a01      	ldr	r2, [pc, #4]	; (8002620 <__aeabi_dsub+0x720>)
 800261a:	001c      	movs	r4, r3
 800261c:	e513      	b.n	8002046 <__aeabi_dsub+0x146>
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	000007ff 	.word	0x000007ff

08002624 <__aeabi_dcmpun>:
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	0005      	movs	r5, r0
 8002628:	480c      	ldr	r0, [pc, #48]	; (800265c <__aeabi_dcmpun+0x38>)
 800262a:	031c      	lsls	r4, r3, #12
 800262c:	0016      	movs	r6, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	030a      	lsls	r2, r1, #12
 8002632:	0049      	lsls	r1, r1, #1
 8002634:	0b12      	lsrs	r2, r2, #12
 8002636:	0d49      	lsrs	r1, r1, #21
 8002638:	0b24      	lsrs	r4, r4, #12
 800263a:	0d5b      	lsrs	r3, r3, #21
 800263c:	4281      	cmp	r1, r0
 800263e:	d008      	beq.n	8002652 <__aeabi_dcmpun+0x2e>
 8002640:	4a06      	ldr	r2, [pc, #24]	; (800265c <__aeabi_dcmpun+0x38>)
 8002642:	2000      	movs	r0, #0
 8002644:	4293      	cmp	r3, r2
 8002646:	d103      	bne.n	8002650 <__aeabi_dcmpun+0x2c>
 8002648:	0020      	movs	r0, r4
 800264a:	4330      	orrs	r0, r6
 800264c:	1e43      	subs	r3, r0, #1
 800264e:	4198      	sbcs	r0, r3
 8002650:	bd70      	pop	{r4, r5, r6, pc}
 8002652:	2001      	movs	r0, #1
 8002654:	432a      	orrs	r2, r5
 8002656:	d1fb      	bne.n	8002650 <__aeabi_dcmpun+0x2c>
 8002658:	e7f2      	b.n	8002640 <__aeabi_dcmpun+0x1c>
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	000007ff 	.word	0x000007ff

08002660 <__aeabi_d2iz>:
 8002660:	000a      	movs	r2, r1
 8002662:	b530      	push	{r4, r5, lr}
 8002664:	4c13      	ldr	r4, [pc, #76]	; (80026b4 <__aeabi_d2iz+0x54>)
 8002666:	0053      	lsls	r3, r2, #1
 8002668:	0309      	lsls	r1, r1, #12
 800266a:	0005      	movs	r5, r0
 800266c:	0b09      	lsrs	r1, r1, #12
 800266e:	2000      	movs	r0, #0
 8002670:	0d5b      	lsrs	r3, r3, #21
 8002672:	0fd2      	lsrs	r2, r2, #31
 8002674:	42a3      	cmp	r3, r4
 8002676:	dd04      	ble.n	8002682 <__aeabi_d2iz+0x22>
 8002678:	480f      	ldr	r0, [pc, #60]	; (80026b8 <__aeabi_d2iz+0x58>)
 800267a:	4283      	cmp	r3, r0
 800267c:	dd02      	ble.n	8002684 <__aeabi_d2iz+0x24>
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <__aeabi_d2iz+0x5c>)
 8002680:	18d0      	adds	r0, r2, r3
 8002682:	bd30      	pop	{r4, r5, pc}
 8002684:	2080      	movs	r0, #128	; 0x80
 8002686:	0340      	lsls	r0, r0, #13
 8002688:	4301      	orrs	r1, r0
 800268a:	480d      	ldr	r0, [pc, #52]	; (80026c0 <__aeabi_d2iz+0x60>)
 800268c:	1ac0      	subs	r0, r0, r3
 800268e:	281f      	cmp	r0, #31
 8002690:	dd08      	ble.n	80026a4 <__aeabi_d2iz+0x44>
 8002692:	480c      	ldr	r0, [pc, #48]	; (80026c4 <__aeabi_d2iz+0x64>)
 8002694:	1ac3      	subs	r3, r0, r3
 8002696:	40d9      	lsrs	r1, r3
 8002698:	000b      	movs	r3, r1
 800269a:	4258      	negs	r0, r3
 800269c:	2a00      	cmp	r2, #0
 800269e:	d1f0      	bne.n	8002682 <__aeabi_d2iz+0x22>
 80026a0:	0018      	movs	r0, r3
 80026a2:	e7ee      	b.n	8002682 <__aeabi_d2iz+0x22>
 80026a4:	4c08      	ldr	r4, [pc, #32]	; (80026c8 <__aeabi_d2iz+0x68>)
 80026a6:	40c5      	lsrs	r5, r0
 80026a8:	46a4      	mov	ip, r4
 80026aa:	4463      	add	r3, ip
 80026ac:	4099      	lsls	r1, r3
 80026ae:	000b      	movs	r3, r1
 80026b0:	432b      	orrs	r3, r5
 80026b2:	e7f2      	b.n	800269a <__aeabi_d2iz+0x3a>
 80026b4:	000003fe 	.word	0x000003fe
 80026b8:	0000041d 	.word	0x0000041d
 80026bc:	7fffffff 	.word	0x7fffffff
 80026c0:	00000433 	.word	0x00000433
 80026c4:	00000413 	.word	0x00000413
 80026c8:	fffffbed 	.word	0xfffffbed

080026cc <__aeabi_i2d>:
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d016      	beq.n	8002700 <__aeabi_i2d+0x34>
 80026d2:	17c3      	asrs	r3, r0, #31
 80026d4:	18c5      	adds	r5, r0, r3
 80026d6:	405d      	eors	r5, r3
 80026d8:	0fc4      	lsrs	r4, r0, #31
 80026da:	0028      	movs	r0, r5
 80026dc:	f000 f91c 	bl	8002918 <__clzsi2>
 80026e0:	4a11      	ldr	r2, [pc, #68]	; (8002728 <__aeabi_i2d+0x5c>)
 80026e2:	1a12      	subs	r2, r2, r0
 80026e4:	280a      	cmp	r0, #10
 80026e6:	dc16      	bgt.n	8002716 <__aeabi_i2d+0x4a>
 80026e8:	0003      	movs	r3, r0
 80026ea:	002e      	movs	r6, r5
 80026ec:	3315      	adds	r3, #21
 80026ee:	409e      	lsls	r6, r3
 80026f0:	230b      	movs	r3, #11
 80026f2:	1a18      	subs	r0, r3, r0
 80026f4:	40c5      	lsrs	r5, r0
 80026f6:	0552      	lsls	r2, r2, #21
 80026f8:	032d      	lsls	r5, r5, #12
 80026fa:	0b2d      	lsrs	r5, r5, #12
 80026fc:	0d53      	lsrs	r3, r2, #21
 80026fe:	e003      	b.n	8002708 <__aeabi_i2d+0x3c>
 8002700:	2400      	movs	r4, #0
 8002702:	2300      	movs	r3, #0
 8002704:	2500      	movs	r5, #0
 8002706:	2600      	movs	r6, #0
 8002708:	051b      	lsls	r3, r3, #20
 800270a:	432b      	orrs	r3, r5
 800270c:	07e4      	lsls	r4, r4, #31
 800270e:	4323      	orrs	r3, r4
 8002710:	0030      	movs	r0, r6
 8002712:	0019      	movs	r1, r3
 8002714:	bd70      	pop	{r4, r5, r6, pc}
 8002716:	380b      	subs	r0, #11
 8002718:	4085      	lsls	r5, r0
 800271a:	0552      	lsls	r2, r2, #21
 800271c:	032d      	lsls	r5, r5, #12
 800271e:	2600      	movs	r6, #0
 8002720:	0b2d      	lsrs	r5, r5, #12
 8002722:	0d53      	lsrs	r3, r2, #21
 8002724:	e7f0      	b.n	8002708 <__aeabi_i2d+0x3c>
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	0000041e 	.word	0x0000041e

0800272c <__aeabi_ui2d>:
 800272c:	b510      	push	{r4, lr}
 800272e:	1e04      	subs	r4, r0, #0
 8002730:	d010      	beq.n	8002754 <__aeabi_ui2d+0x28>
 8002732:	f000 f8f1 	bl	8002918 <__clzsi2>
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <__aeabi_ui2d+0x48>)
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	280a      	cmp	r0, #10
 800273c:	dc11      	bgt.n	8002762 <__aeabi_ui2d+0x36>
 800273e:	220b      	movs	r2, #11
 8002740:	0021      	movs	r1, r4
 8002742:	1a12      	subs	r2, r2, r0
 8002744:	40d1      	lsrs	r1, r2
 8002746:	3015      	adds	r0, #21
 8002748:	030a      	lsls	r2, r1, #12
 800274a:	055b      	lsls	r3, r3, #21
 800274c:	4084      	lsls	r4, r0
 800274e:	0b12      	lsrs	r2, r2, #12
 8002750:	0d5b      	lsrs	r3, r3, #21
 8002752:	e001      	b.n	8002758 <__aeabi_ui2d+0x2c>
 8002754:	2300      	movs	r3, #0
 8002756:	2200      	movs	r2, #0
 8002758:	051b      	lsls	r3, r3, #20
 800275a:	4313      	orrs	r3, r2
 800275c:	0020      	movs	r0, r4
 800275e:	0019      	movs	r1, r3
 8002760:	bd10      	pop	{r4, pc}
 8002762:	0022      	movs	r2, r4
 8002764:	380b      	subs	r0, #11
 8002766:	4082      	lsls	r2, r0
 8002768:	055b      	lsls	r3, r3, #21
 800276a:	0312      	lsls	r2, r2, #12
 800276c:	2400      	movs	r4, #0
 800276e:	0b12      	lsrs	r2, r2, #12
 8002770:	0d5b      	lsrs	r3, r3, #21
 8002772:	e7f1      	b.n	8002758 <__aeabi_ui2d+0x2c>
 8002774:	0000041e 	.word	0x0000041e

08002778 <__aeabi_f2d>:
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	0043      	lsls	r3, r0, #1
 800277c:	0246      	lsls	r6, r0, #9
 800277e:	0fc4      	lsrs	r4, r0, #31
 8002780:	20fe      	movs	r0, #254	; 0xfe
 8002782:	0e1b      	lsrs	r3, r3, #24
 8002784:	1c59      	adds	r1, r3, #1
 8002786:	0a75      	lsrs	r5, r6, #9
 8002788:	4208      	tst	r0, r1
 800278a:	d00c      	beq.n	80027a6 <__aeabi_f2d+0x2e>
 800278c:	22e0      	movs	r2, #224	; 0xe0
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	4694      	mov	ip, r2
 8002792:	076d      	lsls	r5, r5, #29
 8002794:	0b36      	lsrs	r6, r6, #12
 8002796:	4463      	add	r3, ip
 8002798:	051b      	lsls	r3, r3, #20
 800279a:	4333      	orrs	r3, r6
 800279c:	07e4      	lsls	r4, r4, #31
 800279e:	4323      	orrs	r3, r4
 80027a0:	0028      	movs	r0, r5
 80027a2:	0019      	movs	r1, r3
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d114      	bne.n	80027d4 <__aeabi_f2d+0x5c>
 80027aa:	2d00      	cmp	r5, #0
 80027ac:	d01b      	beq.n	80027e6 <__aeabi_f2d+0x6e>
 80027ae:	0028      	movs	r0, r5
 80027b0:	f000 f8b2 	bl	8002918 <__clzsi2>
 80027b4:	280a      	cmp	r0, #10
 80027b6:	dc1c      	bgt.n	80027f2 <__aeabi_f2d+0x7a>
 80027b8:	230b      	movs	r3, #11
 80027ba:	002e      	movs	r6, r5
 80027bc:	1a1b      	subs	r3, r3, r0
 80027be:	40de      	lsrs	r6, r3
 80027c0:	0003      	movs	r3, r0
 80027c2:	3315      	adds	r3, #21
 80027c4:	409d      	lsls	r5, r3
 80027c6:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <__aeabi_f2d+0x88>)
 80027c8:	0336      	lsls	r6, r6, #12
 80027ca:	1a12      	subs	r2, r2, r0
 80027cc:	0552      	lsls	r2, r2, #21
 80027ce:	0b36      	lsrs	r6, r6, #12
 80027d0:	0d53      	lsrs	r3, r2, #21
 80027d2:	e7e1      	b.n	8002798 <__aeabi_f2d+0x20>
 80027d4:	2d00      	cmp	r5, #0
 80027d6:	d009      	beq.n	80027ec <__aeabi_f2d+0x74>
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	0b36      	lsrs	r6, r6, #12
 80027dc:	0312      	lsls	r2, r2, #12
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <__aeabi_f2d+0x8c>)
 80027e0:	076d      	lsls	r5, r5, #29
 80027e2:	4316      	orrs	r6, r2
 80027e4:	e7d8      	b.n	8002798 <__aeabi_f2d+0x20>
 80027e6:	2300      	movs	r3, #0
 80027e8:	2600      	movs	r6, #0
 80027ea:	e7d5      	b.n	8002798 <__aeabi_f2d+0x20>
 80027ec:	2600      	movs	r6, #0
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <__aeabi_f2d+0x8c>)
 80027f0:	e7d2      	b.n	8002798 <__aeabi_f2d+0x20>
 80027f2:	0003      	movs	r3, r0
 80027f4:	3b0b      	subs	r3, #11
 80027f6:	409d      	lsls	r5, r3
 80027f8:	002e      	movs	r6, r5
 80027fa:	2500      	movs	r5, #0
 80027fc:	e7e3      	b.n	80027c6 <__aeabi_f2d+0x4e>
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	00000389 	.word	0x00000389
 8002804:	000007ff 	.word	0x000007ff

08002808 <__aeabi_d2f>:
 8002808:	0002      	movs	r2, r0
 800280a:	004b      	lsls	r3, r1, #1
 800280c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800280e:	0d5b      	lsrs	r3, r3, #21
 8002810:	030c      	lsls	r4, r1, #12
 8002812:	4e3d      	ldr	r6, [pc, #244]	; (8002908 <__aeabi_d2f+0x100>)
 8002814:	0a64      	lsrs	r4, r4, #9
 8002816:	0f40      	lsrs	r0, r0, #29
 8002818:	1c5f      	adds	r7, r3, #1
 800281a:	0fc9      	lsrs	r1, r1, #31
 800281c:	4304      	orrs	r4, r0
 800281e:	00d5      	lsls	r5, r2, #3
 8002820:	4237      	tst	r7, r6
 8002822:	d00a      	beq.n	800283a <__aeabi_d2f+0x32>
 8002824:	4839      	ldr	r0, [pc, #228]	; (800290c <__aeabi_d2f+0x104>)
 8002826:	181e      	adds	r6, r3, r0
 8002828:	2efe      	cmp	r6, #254	; 0xfe
 800282a:	dd16      	ble.n	800285a <__aeabi_d2f+0x52>
 800282c:	20ff      	movs	r0, #255	; 0xff
 800282e:	2400      	movs	r4, #0
 8002830:	05c0      	lsls	r0, r0, #23
 8002832:	4320      	orrs	r0, r4
 8002834:	07c9      	lsls	r1, r1, #31
 8002836:	4308      	orrs	r0, r1
 8002838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <__aeabi_d2f+0x44>
 800283e:	432c      	orrs	r4, r5
 8002840:	d026      	beq.n	8002890 <__aeabi_d2f+0x88>
 8002842:	2205      	movs	r2, #5
 8002844:	0192      	lsls	r2, r2, #6
 8002846:	0a54      	lsrs	r4, r2, #9
 8002848:	b2d8      	uxtb	r0, r3
 800284a:	e7f1      	b.n	8002830 <__aeabi_d2f+0x28>
 800284c:	4325      	orrs	r5, r4
 800284e:	d0ed      	beq.n	800282c <__aeabi_d2f+0x24>
 8002850:	2080      	movs	r0, #128	; 0x80
 8002852:	03c0      	lsls	r0, r0, #15
 8002854:	4304      	orrs	r4, r0
 8002856:	20ff      	movs	r0, #255	; 0xff
 8002858:	e7ea      	b.n	8002830 <__aeabi_d2f+0x28>
 800285a:	2e00      	cmp	r6, #0
 800285c:	dd1b      	ble.n	8002896 <__aeabi_d2f+0x8e>
 800285e:	0192      	lsls	r2, r2, #6
 8002860:	1e53      	subs	r3, r2, #1
 8002862:	419a      	sbcs	r2, r3
 8002864:	00e4      	lsls	r4, r4, #3
 8002866:	0f6d      	lsrs	r5, r5, #29
 8002868:	4322      	orrs	r2, r4
 800286a:	432a      	orrs	r2, r5
 800286c:	0753      	lsls	r3, r2, #29
 800286e:	d048      	beq.n	8002902 <__aeabi_d2f+0xfa>
 8002870:	230f      	movs	r3, #15
 8002872:	4013      	ands	r3, r2
 8002874:	2b04      	cmp	r3, #4
 8002876:	d000      	beq.n	800287a <__aeabi_d2f+0x72>
 8002878:	3204      	adds	r2, #4
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	04db      	lsls	r3, r3, #19
 800287e:	4013      	ands	r3, r2
 8002880:	d03f      	beq.n	8002902 <__aeabi_d2f+0xfa>
 8002882:	1c70      	adds	r0, r6, #1
 8002884:	2efe      	cmp	r6, #254	; 0xfe
 8002886:	d0d1      	beq.n	800282c <__aeabi_d2f+0x24>
 8002888:	0192      	lsls	r2, r2, #6
 800288a:	0a54      	lsrs	r4, r2, #9
 800288c:	b2c0      	uxtb	r0, r0
 800288e:	e7cf      	b.n	8002830 <__aeabi_d2f+0x28>
 8002890:	2000      	movs	r0, #0
 8002892:	2400      	movs	r4, #0
 8002894:	e7cc      	b.n	8002830 <__aeabi_d2f+0x28>
 8002896:	0032      	movs	r2, r6
 8002898:	3217      	adds	r2, #23
 800289a:	db22      	blt.n	80028e2 <__aeabi_d2f+0xda>
 800289c:	2080      	movs	r0, #128	; 0x80
 800289e:	0400      	lsls	r0, r0, #16
 80028a0:	4320      	orrs	r0, r4
 80028a2:	241e      	movs	r4, #30
 80028a4:	1ba4      	subs	r4, r4, r6
 80028a6:	2c1f      	cmp	r4, #31
 80028a8:	dd1d      	ble.n	80028e6 <__aeabi_d2f+0xde>
 80028aa:	2202      	movs	r2, #2
 80028ac:	4252      	negs	r2, r2
 80028ae:	1b96      	subs	r6, r2, r6
 80028b0:	0002      	movs	r2, r0
 80028b2:	40f2      	lsrs	r2, r6
 80028b4:	0016      	movs	r6, r2
 80028b6:	2c20      	cmp	r4, #32
 80028b8:	d004      	beq.n	80028c4 <__aeabi_d2f+0xbc>
 80028ba:	4a15      	ldr	r2, [pc, #84]	; (8002910 <__aeabi_d2f+0x108>)
 80028bc:	4694      	mov	ip, r2
 80028be:	4463      	add	r3, ip
 80028c0:	4098      	lsls	r0, r3
 80028c2:	4305      	orrs	r5, r0
 80028c4:	002a      	movs	r2, r5
 80028c6:	1e53      	subs	r3, r2, #1
 80028c8:	419a      	sbcs	r2, r3
 80028ca:	4332      	orrs	r2, r6
 80028cc:	2600      	movs	r6, #0
 80028ce:	0753      	lsls	r3, r2, #29
 80028d0:	d1ce      	bne.n	8002870 <__aeabi_d2f+0x68>
 80028d2:	2480      	movs	r4, #128	; 0x80
 80028d4:	0013      	movs	r3, r2
 80028d6:	04e4      	lsls	r4, r4, #19
 80028d8:	2001      	movs	r0, #1
 80028da:	4023      	ands	r3, r4
 80028dc:	4222      	tst	r2, r4
 80028de:	d1d3      	bne.n	8002888 <__aeabi_d2f+0x80>
 80028e0:	e7b0      	b.n	8002844 <__aeabi_d2f+0x3c>
 80028e2:	2300      	movs	r3, #0
 80028e4:	e7ad      	b.n	8002842 <__aeabi_d2f+0x3a>
 80028e6:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <__aeabi_d2f+0x10c>)
 80028e8:	4694      	mov	ip, r2
 80028ea:	002a      	movs	r2, r5
 80028ec:	40e2      	lsrs	r2, r4
 80028ee:	0014      	movs	r4, r2
 80028f0:	002a      	movs	r2, r5
 80028f2:	4463      	add	r3, ip
 80028f4:	409a      	lsls	r2, r3
 80028f6:	4098      	lsls	r0, r3
 80028f8:	1e55      	subs	r5, r2, #1
 80028fa:	41aa      	sbcs	r2, r5
 80028fc:	4302      	orrs	r2, r0
 80028fe:	4322      	orrs	r2, r4
 8002900:	e7e4      	b.n	80028cc <__aeabi_d2f+0xc4>
 8002902:	0033      	movs	r3, r6
 8002904:	e79e      	b.n	8002844 <__aeabi_d2f+0x3c>
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	000007fe 	.word	0x000007fe
 800290c:	fffffc80 	.word	0xfffffc80
 8002910:	fffffca2 	.word	0xfffffca2
 8002914:	fffffc82 	.word	0xfffffc82

08002918 <__clzsi2>:
 8002918:	211c      	movs	r1, #28
 800291a:	2301      	movs	r3, #1
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	4298      	cmp	r0, r3
 8002920:	d301      	bcc.n	8002926 <__clzsi2+0xe>
 8002922:	0c00      	lsrs	r0, r0, #16
 8002924:	3910      	subs	r1, #16
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	4298      	cmp	r0, r3
 800292a:	d301      	bcc.n	8002930 <__clzsi2+0x18>
 800292c:	0a00      	lsrs	r0, r0, #8
 800292e:	3908      	subs	r1, #8
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	4298      	cmp	r0, r3
 8002934:	d301      	bcc.n	800293a <__clzsi2+0x22>
 8002936:	0900      	lsrs	r0, r0, #4
 8002938:	3904      	subs	r1, #4
 800293a:	a202      	add	r2, pc, #8	; (adr r2, 8002944 <__clzsi2+0x2c>)
 800293c:	5c10      	ldrb	r0, [r2, r0]
 800293e:	1840      	adds	r0, r0, r1
 8002940:	4770      	bx	lr
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	02020304 	.word	0x02020304
 8002948:	01010101 	.word	0x01010101
	...

08002954 <hex2int>:
//}



uint8_t hex2int(char ch)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	0002      	movs	r2, r0
 800295c:	1dfb      	adds	r3, r7, #7
 800295e:	701a      	strb	r2, [r3, #0]
	if (ch >= '0' && ch <= '9')
 8002960:	1dfb      	adds	r3, r7, #7
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b2f      	cmp	r3, #47	; 0x2f
 8002966:	d908      	bls.n	800297a <hex2int+0x26>
 8002968:	1dfb      	adds	r3, r7, #7
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b39      	cmp	r3, #57	; 0x39
 800296e:	d804      	bhi.n	800297a <hex2int+0x26>
		return ch - '0';
 8002970:	1dfb      	adds	r3, r7, #7
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	3b30      	subs	r3, #48	; 0x30
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e01a      	b.n	80029b0 <hex2int+0x5c>
	if (ch >= 'A' && ch <= 'F')
 800297a:	1dfb      	adds	r3, r7, #7
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	d908      	bls.n	8002994 <hex2int+0x40>
 8002982:	1dfb      	adds	r3, r7, #7
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b46      	cmp	r3, #70	; 0x46
 8002988:	d804      	bhi.n	8002994 <hex2int+0x40>
		return ch - 'A' + 10;
 800298a:	1dfb      	adds	r3, r7, #7
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	3b37      	subs	r3, #55	; 0x37
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e00d      	b.n	80029b0 <hex2int+0x5c>
	if (ch >= 'a' && ch <= 'f')
 8002994:	1dfb      	adds	r3, r7, #7
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b60      	cmp	r3, #96	; 0x60
 800299a:	d908      	bls.n	80029ae <hex2int+0x5a>
 800299c:	1dfb      	adds	r3, r7, #7
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b66      	cmp	r3, #102	; 0x66
 80029a2:	d804      	bhi.n	80029ae <hex2int+0x5a>
		return ch - 'a' + 10;
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	3b57      	subs	r3, #87	; 0x57
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	e000      	b.n	80029b0 <hex2int+0x5c>
	return -1;
 80029ae:	23ff      	movs	r3, #255	; 0xff
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b002      	add	sp, #8
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <nmea_parser>:
		crc ^= nmea_data[i];
	}
	return crc;
}
uint8_t* nmea_parser(char *NR,uint8_t responseLenght,uint8_t *checkSum ,uint8_t *rCheckSum)
{
 80029b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ba:	b0c1      	sub	sp, #260	; 0x104
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6178      	str	r0, [r7, #20]
 80029c0:	60fa      	str	r2, [r7, #12]
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	200b      	movs	r0, #11
 80029c6:	2608      	movs	r6, #8
 80029c8:	1983      	adds	r3, r0, r6
 80029ca:	19db      	adds	r3, r3, r7
 80029cc:	1c0a      	adds	r2, r1, #0
 80029ce:	701a      	strb	r2, [r3, #0]
	char (*nmeaResponse)[responseLenght];
 80029d0:	0031      	movs	r1, r6
 80029d2:	1843      	adds	r3, r0, r1
 80029d4:	19db      	adds	r3, r3, r7
 80029d6:	781e      	ldrb	r6, [r3, #0]
 80029d8:	0033      	movs	r3, r6
 80029da:	3b01      	subs	r3, #1
 80029dc:	22d0      	movs	r2, #208	; 0xd0
 80029de:	1852      	adds	r2, r2, r1
 80029e0:	19d2      	adds	r2, r2, r7
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	603e      	str	r6, [r7, #0]
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	6839      	ldr	r1, [r7, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	000b      	movs	r3, r1
 80029f0:	0f5b      	lsrs	r3, r3, #29
 80029f2:	0010      	movs	r0, r2
 80029f4:	00c5      	lsls	r5, r0, #3
 80029f6:	431d      	orrs	r5, r3
 80029f8:	000b      	movs	r3, r1
 80029fa:	00dc      	lsls	r4, r3, #3
	uint8_t gnssCRC = 0;
 80029fc:	23f5      	movs	r3, #245	; 0xf5
 80029fe:	2008      	movs	r0, #8
 8002a00:	181b      	adds	r3, r3, r0
 8002a02:	19db      	adds	r3, r3, r7
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
	nmeaResponse=NR;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	21cc      	movs	r1, #204	; 0xcc
 8002a0c:	180a      	adds	r2, r1, r0
 8002a0e:	19d2      	adds	r2, r2, r7
 8002a10:	6013      	str	r3, [r2, #0]
	uint8_t QOG = 0xC0;
 8002a12:	23cb      	movs	r3, #203	; 0xcb
 8002a14:	181b      	adds	r3, r3, r0
 8002a16:	19db      	adds	r3, r3, r7
 8002a18:	22c0      	movs	r2, #192	; 0xc0
 8002a1a:	701a      	strb	r2, [r3, #0]
	uint16_t courseStatus = 0x0;
 8002a1c:	23f6      	movs	r3, #246	; 0xf6
 8002a1e:	181b      	adds	r3, r3, r0
 8002a20:	19db      	adds	r3, r3, r7
 8002a22:	2200      	movs	r2, #0
 8002a24:	801a      	strh	r2, [r3, #0]
	static uint8_t GPSInformation[18] = {0};


	char *p1;
	char *p2;
	p1 = strstr(nmeaResponse[GNGGA],"$GNGGA");
 8002a26:	0032      	movs	r2, r6
 8002a28:	000c      	movs	r4, r1
 8002a2a:	180b      	adds	r3, r1, r0
 8002a2c:	19db      	adds	r3, r3, r7
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	189b      	adds	r3, r3, r2
 8002a32:	4ad2      	ldr	r2, [pc, #840]	; (8002d7c <nmea_parser+0x3c4>)
 8002a34:	0011      	movs	r1, r2
 8002a36:	0018      	movs	r0, r3
 8002a38:	f00b fbe5 	bl	800e206 <strstr>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	25c4      	movs	r5, #196	; 0xc4
 8002a40:	2008      	movs	r0, #8
 8002a42:	182a      	adds	r2, r5, r0
 8002a44:	19d2      	adds	r2, r2, r7
 8002a46:	6013      	str	r3, [r2, #0]
	p2 = strstr(nmeaResponse[GNRMC],"$GNRMC");
 8002a48:	4acd      	ldr	r2, [pc, #820]	; (8002d80 <nmea_parser+0x3c8>)
 8002a4a:	1823      	adds	r3, r4, r0
 8002a4c:	19db      	adds	r3, r3, r7
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0011      	movs	r1, r2
 8002a52:	0018      	movs	r0, r3
 8002a54:	f00b fbd7 	bl	800e206 <strstr>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	22c0      	movs	r2, #192	; 0xc0
 8002a5c:	2008      	movs	r0, #8
 8002a5e:	1811      	adds	r1, r2, r0
 8002a60:	19c9      	adds	r1, r1, r7
 8002a62:	600b      	str	r3, [r1, #0]

	if(p1 != NULL && p2 != NULL){
 8002a64:	0001      	movs	r1, r0
 8002a66:	186b      	adds	r3, r5, r1
 8002a68:	19db      	adds	r3, r3, r7
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <nmea_parser+0xbc>
 8002a70:	f000 fe98 	bl	80037a4 <nmea_parser+0xdec>
 8002a74:	1853      	adds	r3, r2, r1
 8002a76:	19db      	adds	r3, r3, r7
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <nmea_parser+0xca>
 8002a7e:	f000 fe91 	bl	80037a4 <nmea_parser+0xdec>


		for(uint8_t sen=0;sen<2;sen++){
 8002a82:	23f4      	movs	r3, #244	; 0xf4
 8002a84:	185b      	adds	r3, r3, r1
 8002a86:	19db      	adds	r3, r3, r7
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	e0d9      	b.n	8002c42 <nmea_parser+0x28a>
			uint8_t recvCrc=0;
 8002a8e:	23bf      	movs	r3, #191	; 0xbf
 8002a90:	2108      	movs	r1, #8
 8002a92:	185b      	adds	r3, r3, r1
 8002a94:	19db      	adds	r3, r3, r7
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
			char rawData[100];
			memset(rawData,0,sizeof(rawData));
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	000c      	movs	r4, r1
 8002a9e:	1853      	adds	r3, r2, r1
 8002aa0:	19db      	adds	r3, r3, r7
 8002aa2:	2264      	movs	r2, #100	; 0x64
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f00b fb55 	bl	800e156 <memset>

			char *ind1;
			char *ind2;
			ind1=strchr(nmeaResponse[sen],'$');
 8002aac:	25f4      	movs	r5, #244	; 0xf4
 8002aae:	0021      	movs	r1, r4
 8002ab0:	186b      	adds	r3, r5, r1
 8002ab2:	19db      	adds	r3, r3, r7
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	0032      	movs	r2, r6
 8002ab8:	4353      	muls	r3, r2
 8002aba:	22cc      	movs	r2, #204	; 0xcc
 8002abc:	1850      	adds	r0, r2, r1
 8002abe:	19c1      	adds	r1, r0, r7
 8002ac0:	680a      	ldr	r2, [r1, #0]
 8002ac2:	18d3      	adds	r3, r2, r3
 8002ac4:	2124      	movs	r1, #36	; 0x24
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f00b fb7b 	bl	800e1c2 <strchr>
 8002acc:	0003      	movs	r3, r0
 8002ace:	24b8      	movs	r4, #184	; 0xb8
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	18a1      	adds	r1, r4, r2
 8002ad4:	19c9      	adds	r1, r1, r7
 8002ad6:	600b      	str	r3, [r1, #0]
			ind2=strchr(nmeaResponse[sen],'*');
 8002ad8:	0011      	movs	r1, r2
 8002ada:	186b      	adds	r3, r5, r1
 8002adc:	19db      	adds	r3, r3, r7
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	0032      	movs	r2, r6
 8002ae2:	4353      	muls	r3, r2
 8002ae4:	22cc      	movs	r2, #204	; 0xcc
 8002ae6:	000d      	movs	r5, r1
 8002ae8:	1852      	adds	r2, r2, r1
 8002aea:	19d2      	adds	r2, r2, r7
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	18d3      	adds	r3, r2, r3
 8002af0:	212a      	movs	r1, #42	; 0x2a
 8002af2:	0018      	movs	r0, r3
 8002af4:	f00b fb65 	bl	800e1c2 <strchr>
 8002af8:	0003      	movs	r3, r0
 8002afa:	21b4      	movs	r1, #180	; 0xb4
 8002afc:	194a      	adds	r2, r1, r5
 8002afe:	19d2      	adds	r2, r2, r7
 8002b00:	6013      	str	r3, [r2, #0]

			if(ind1!=NULL && ind2!=NULL){
 8002b02:	1963      	adds	r3, r4, r5
 8002b04:	19da      	adds	r2, r3, r7
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d100      	bne.n	8002b0e <nmea_parser+0x156>
 8002b0c:	e08a      	b.n	8002c24 <nmea_parser+0x26c>
 8002b0e:	194b      	adds	r3, r1, r5
 8002b10:	19da      	adds	r2, r3, r7
 8002b12:	6813      	ldr	r3, [r2, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d100      	bne.n	8002b1a <nmea_parser+0x162>
 8002b18:	e084      	b.n	8002c24 <nmea_parser+0x26c>
				uint8_t len = ind2-ind1;
 8002b1a:	194b      	adds	r3, r1, r5
 8002b1c:	19da      	adds	r2, r3, r7
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	1963      	adds	r3, r4, r5
 8002b22:	19d8      	adds	r0, r3, r7
 8002b24:	6803      	ldr	r3, [r0, #0]
 8002b26:	1ad2      	subs	r2, r2, r3
 8002b28:	20b3      	movs	r0, #179	; 0xb3
 8002b2a:	002c      	movs	r4, r5
 8002b2c:	1903      	adds	r3, r0, r4
 8002b2e:	19db      	adds	r3, r3, r7
 8002b30:	701a      	strb	r2, [r3, #0]
				gnssCRC = 0;
 8002b32:	22f5      	movs	r2, #245	; 0xf5
 8002b34:	0020      	movs	r0, r4
 8002b36:	1813      	adds	r3, r2, r0
 8002b38:	19db      	adds	r3, r3, r7
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
				recvCrc = hex2int(*(ind2+2)) | hex2int(*(ind2+1)) <<4;
 8002b3e:	000d      	movs	r5, r1
 8002b40:	180b      	adds	r3, r1, r0
 8002b42:	19da      	adds	r2, r3, r7
 8002b44:	6813      	ldr	r3, [r2, #0]
 8002b46:	3302      	adds	r3, #2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f7ff ff02 	bl	8002954 <hex2int>
 8002b50:	0003      	movs	r3, r0
 8002b52:	b25c      	sxtb	r4, r3
 8002b54:	2108      	movs	r1, #8
 8002b56:	186b      	adds	r3, r5, r1
 8002b58:	19da      	adds	r2, r3, r7
 8002b5a:	6813      	ldr	r3, [r2, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f7ff fef7 	bl	8002954 <hex2int>
 8002b66:	0003      	movs	r3, r0
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	4323      	orrs	r3, r4
 8002b6e:	b25a      	sxtb	r2, r3
 8002b70:	23bf      	movs	r3, #191	; 0xbf
 8002b72:	2108      	movs	r1, #8
 8002b74:	185b      	adds	r3, r3, r1
 8002b76:	19db      	adds	r3, r3, r7
 8002b78:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<len-1;i++){
 8002b7a:	23f3      	movs	r3, #243	; 0xf3
 8002b7c:	185b      	adds	r3, r3, r1
 8002b7e:	19db      	adds	r3, r3, r7
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e02b      	b.n	8002bde <nmea_parser+0x226>
					rawData[i]=*(ind1+1+i);
 8002b86:	20f3      	movs	r0, #243	; 0xf3
 8002b88:	2108      	movs	r1, #8
 8002b8a:	1843      	adds	r3, r0, r1
 8002b8c:	19db      	adds	r3, r3, r7
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	22b8      	movs	r2, #184	; 0xb8
 8002b94:	1852      	adds	r2, r2, r1
 8002b96:	19d2      	adds	r2, r2, r7
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	18d2      	adds	r2, r2, r3
 8002b9c:	000d      	movs	r5, r1
 8002b9e:	1943      	adds	r3, r0, r5
 8002ba0:	19db      	adds	r3, r3, r7
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	7811      	ldrb	r1, [r2, #0]
 8002ba6:	2410      	movs	r4, #16
 8002ba8:	1962      	adds	r2, r4, r5
 8002baa:	19d2      	adds	r2, r2, r7
 8002bac:	54d1      	strb	r1, [r2, r3]
					gnssCRC ^= rawData[i];
 8002bae:	0029      	movs	r1, r5
 8002bb0:	1843      	adds	r3, r0, r1
 8002bb2:	19db      	adds	r3, r3, r7
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	000d      	movs	r5, r1
 8002bb8:	1862      	adds	r2, r4, r1
 8002bba:	19d2      	adds	r2, r2, r7
 8002bbc:	5cd1      	ldrb	r1, [r2, r3]
 8002bbe:	22f5      	movs	r2, #245	; 0xf5
 8002bc0:	002c      	movs	r4, r5
 8002bc2:	1913      	adds	r3, r2, r4
 8002bc4:	19db      	adds	r3, r3, r7
 8002bc6:	1912      	adds	r2, r2, r4
 8002bc8:	19d2      	adds	r2, r2, r7
 8002bca:	7812      	ldrb	r2, [r2, #0]
 8002bcc:	404a      	eors	r2, r1
 8002bce:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<len-1;i++){
 8002bd0:	1903      	adds	r3, r0, r4
 8002bd2:	19db      	adds	r3, r3, r7
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	1903      	adds	r3, r0, r4
 8002bd8:	19db      	adds	r3, r3, r7
 8002bda:	3201      	adds	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	23f3      	movs	r3, #243	; 0xf3
 8002be0:	2008      	movs	r0, #8
 8002be2:	181b      	adds	r3, r3, r0
 8002be4:	19db      	adds	r3, r3, r7
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	23b3      	movs	r3, #179	; 0xb3
 8002bea:	181b      	adds	r3, r3, r0
 8002bec:	19db      	adds	r3, r3, r7
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	dbc7      	blt.n	8002b86 <nmea_parser+0x1ce>

				}
				*checkSum = gnssCRC;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	21f5      	movs	r1, #245	; 0xf5
 8002bfa:	0004      	movs	r4, r0
 8002bfc:	190a      	adds	r2, r1, r4
 8002bfe:	19d2      	adds	r2, r2, r7
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	701a      	strb	r2, [r3, #0]
				*rCheckSum = recvCrc;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	20bf      	movs	r0, #191	; 0xbf
 8002c08:	1902      	adds	r2, r0, r4
 8002c0a:	19d2      	adds	r2, r2, r7
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	701a      	strb	r2, [r3, #0]
			if(ind1!=NULL && ind2!=NULL){
 8002c10:	46c0      	nop			; (mov r8, r8)
			}
			else{
				return NULL;
			}
			if(recvCrc != gnssCRC){
 8002c12:	1903      	adds	r3, r0, r4
 8002c14:	19da      	adds	r2, r3, r7
 8002c16:	190b      	adds	r3, r1, r4
 8002c18:	19db      	adds	r3, r3, r7
 8002c1a:	7812      	ldrb	r2, [r2, #0]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d006      	beq.n	8002c30 <nmea_parser+0x278>
 8002c22:	e002      	b.n	8002c2a <nmea_parser+0x272>
				return NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f000 fdc1 	bl	80037ac <nmea_parser+0xdf4>
				return NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f000 fdbe 	bl	80037ac <nmea_parser+0xdf4>
		for(uint8_t sen=0;sen<2;sen++){
 8002c30:	21f4      	movs	r1, #244	; 0xf4
 8002c32:	2008      	movs	r0, #8
 8002c34:	180b      	adds	r3, r1, r0
 8002c36:	19db      	adds	r3, r3, r7
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	180b      	adds	r3, r1, r0
 8002c3c:	19db      	adds	r3, r3, r7
 8002c3e:	3201      	adds	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	23f4      	movs	r3, #244	; 0xf4
 8002c44:	2108      	movs	r1, #8
 8002c46:	185b      	adds	r3, r3, r1
 8002c48:	19db      	adds	r3, r3, r7
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d800      	bhi.n	8002c52 <nmea_parser+0x29a>
 8002c50:	e71d      	b.n	8002a8e <nmea_parser+0xd6>
		// }

		//data is valid. go on
		uint8_t GNGGAComma[15];
		uint8_t GNRMCComma[15];
		memset(GNGGAComma, 0, sizeof(GNGGAComma)); // for automatically-allocated arrays
 8002c52:	23a4      	movs	r3, #164	; 0xa4
 8002c54:	000c      	movs	r4, r1
 8002c56:	191b      	adds	r3, r3, r4
 8002c58:	19db      	adds	r3, r3, r7
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f00b fa79 	bl	800e156 <memset>
		memset(GNRMCComma, 0, sizeof(GNRMCComma)); // for automatically-allocated arrays
 8002c64:	2394      	movs	r3, #148	; 0x94
 8002c66:	191b      	adds	r3, r3, r4
 8002c68:	19db      	adds	r3, r3, r7
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f00b fa71 	bl	800e156 <memset>


		uint8_t GNGGACInd=0;
 8002c74:	23f2      	movs	r3, #242	; 0xf2
 8002c76:	0021      	movs	r1, r4
 8002c78:	185b      	adds	r3, r3, r1
 8002c7a:	19db      	adds	r3, r3, r7
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
		uint8_t GNRMCCInd=0;
 8002c80:	23f1      	movs	r3, #241	; 0xf1
 8002c82:	185b      	adds	r3, r3, r1
 8002c84:	19db      	adds	r3, r3, r7
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
		uint32_t latitude;
		uint32_t longitude;
		uint8_t tempDataIndex = 0;
 8002c8a:	23e7      	movs	r3, #231	; 0xe7
 8002c8c:	185b      	adds	r3, r3, r1
 8002c8e:	19db      	adds	r3, r3, r7
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]




		//-------store all parameter's comma
		for(uint8_t i=0;i<responseLenght;i++ ){
 8002c94:	23e6      	movs	r3, #230	; 0xe6
 8002c96:	185b      	adds	r3, r3, r1
 8002c98:	19db      	adds	r3, r3, r7
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e048      	b.n	8002d32 <nmea_parser+0x37a>
			if(nmeaResponse[GNGGA][i]==44){
 8002ca0:	0032      	movs	r2, r6
 8002ca2:	23cc      	movs	r3, #204	; 0xcc
 8002ca4:	2408      	movs	r4, #8
 8002ca6:	191b      	adds	r3, r3, r4
 8002ca8:	19db      	adds	r3, r3, r7
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	189a      	adds	r2, r3, r2
 8002cae:	21e6      	movs	r1, #230	; 0xe6
 8002cb0:	190b      	adds	r3, r1, r4
 8002cb2:	19db      	adds	r3, r3, r7
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	2b2c      	cmp	r3, #44	; 0x2c
 8002cba:	d112      	bne.n	8002ce2 <nmea_parser+0x32a>
				GNGGAComma[GNGGACInd]=i;
 8002cbc:	20f2      	movs	r0, #242	; 0xf2
 8002cbe:	1903      	adds	r3, r0, r4
 8002cc0:	19db      	adds	r3, r3, r7
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	22a4      	movs	r2, #164	; 0xa4
 8002cc6:	1912      	adds	r2, r2, r4
 8002cc8:	19d2      	adds	r2, r2, r7
 8002cca:	1909      	adds	r1, r1, r4
 8002ccc:	19c9      	adds	r1, r1, r7
 8002cce:	7809      	ldrb	r1, [r1, #0]
 8002cd0:	54d1      	strb	r1, [r2, r3]
				GNGGACInd++;
 8002cd2:	0021      	movs	r1, r4
 8002cd4:	1843      	adds	r3, r0, r1
 8002cd6:	19db      	adds	r3, r3, r7
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	1843      	adds	r3, r0, r1
 8002cdc:	19db      	adds	r3, r3, r7
 8002cde:	3201      	adds	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]
			}
			if(nmeaResponse[GNRMC][i]==44){
 8002ce2:	21e6      	movs	r1, #230	; 0xe6
 8002ce4:	2408      	movs	r4, #8
 8002ce6:	190b      	adds	r3, r1, r4
 8002ce8:	19db      	adds	r3, r3, r7
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	22cc      	movs	r2, #204	; 0xcc
 8002cee:	1912      	adds	r2, r2, r4
 8002cf0:	19d2      	adds	r2, r2, r7
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	5cd3      	ldrb	r3, [r2, r3]
 8002cf6:	2b2c      	cmp	r3, #44	; 0x2c
 8002cf8:	d112      	bne.n	8002d20 <nmea_parser+0x368>
				GNRMCComma[GNRMCCInd]=i;
 8002cfa:	20f1      	movs	r0, #241	; 0xf1
 8002cfc:	1903      	adds	r3, r0, r4
 8002cfe:	19db      	adds	r3, r3, r7
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2294      	movs	r2, #148	; 0x94
 8002d04:	1912      	adds	r2, r2, r4
 8002d06:	19d2      	adds	r2, r2, r7
 8002d08:	1909      	adds	r1, r1, r4
 8002d0a:	19c9      	adds	r1, r1, r7
 8002d0c:	7809      	ldrb	r1, [r1, #0]
 8002d0e:	54d1      	strb	r1, [r2, r3]
				GNRMCCInd++;
 8002d10:	0021      	movs	r1, r4
 8002d12:	1843      	adds	r3, r0, r1
 8002d14:	19db      	adds	r3, r3, r7
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	1843      	adds	r3, r0, r1
 8002d1a:	19db      	adds	r3, r3, r7
 8002d1c:	3201      	adds	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<responseLenght;i++ ){
 8002d20:	21e6      	movs	r1, #230	; 0xe6
 8002d22:	2008      	movs	r0, #8
 8002d24:	180b      	adds	r3, r1, r0
 8002d26:	19db      	adds	r3, r3, r7
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	180b      	adds	r3, r1, r0
 8002d2c:	19db      	adds	r3, r3, r7
 8002d2e:	3201      	adds	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	23e6      	movs	r3, #230	; 0xe6
 8002d34:	2108      	movs	r1, #8
 8002d36:	185b      	adds	r3, r3, r1
 8002d38:	19da      	adds	r2, r3, r7
 8002d3a:	230b      	movs	r3, #11
 8002d3c:	185b      	adds	r3, r3, r1
 8002d3e:	19db      	adds	r3, r3, r7
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d3ab      	bcc.n	8002ca0 <nmea_parser+0x2e8>
			}
		}

		//------------------------Time and date Stamp------------------------------------
		memset(tempData,0,sizeof(tempData));
 8002d48:	2384      	movs	r3, #132	; 0x84
 8002d4a:	000c      	movs	r4, r1
 8002d4c:	185b      	adds	r3, r3, r1
 8002d4e:	19db      	adds	r3, r3, r7
 8002d50:	220f      	movs	r2, #15
 8002d52:	2100      	movs	r1, #0
 8002d54:	0018      	movs	r0, r3
 8002d56:	f00b f9fe 	bl	800e156 <memset>
		tempDataIndex = 0;
 8002d5a:	23e7      	movs	r3, #231	; 0xe7
 8002d5c:	0021      	movs	r1, r4
 8002d5e:	185b      	adds	r3, r3, r1
 8002d60:	19db      	adds	r3, r3, r7
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[8]+1;x<GNRMCComma[9];x++){
 8002d66:	2394      	movs	r3, #148	; 0x94
 8002d68:	185b      	adds	r3, r3, r1
 8002d6a:	19db      	adds	r3, r3, r7
 8002d6c:	7a1a      	ldrb	r2, [r3, #8]
 8002d6e:	23e5      	movs	r3, #229	; 0xe5
 8002d70:	185b      	adds	r3, r3, r1
 8002d72:	19db      	adds	r3, r3, r7
 8002d74:	3201      	adds	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
 8002d78:	e025      	b.n	8002dc6 <nmea_parser+0x40e>
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	080125f0 	.word	0x080125f0
 8002d80:	080125f8 	.word	0x080125f8
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8002d84:	20e5      	movs	r0, #229	; 0xe5
 8002d86:	2508      	movs	r5, #8
 8002d88:	1943      	adds	r3, r0, r5
 8002d8a:	19db      	adds	r3, r3, r7
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	24e7      	movs	r4, #231	; 0xe7
 8002d90:	1963      	adds	r3, r4, r5
 8002d92:	19db      	adds	r3, r3, r7
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	21cc      	movs	r1, #204	; 0xcc
 8002d98:	1949      	adds	r1, r1, r5
 8002d9a:	19c9      	adds	r1, r1, r7
 8002d9c:	6809      	ldr	r1, [r1, #0]
 8002d9e:	5c89      	ldrb	r1, [r1, r2]
 8002da0:	2284      	movs	r2, #132	; 0x84
 8002da2:	1952      	adds	r2, r2, r5
 8002da4:	19d2      	adds	r2, r2, r7
 8002da6:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8002da8:	0029      	movs	r1, r5
 8002daa:	1863      	adds	r3, r4, r1
 8002dac:	19db      	adds	r3, r3, r7
 8002dae:	781a      	ldrb	r2, [r3, #0]
 8002db0:	1863      	adds	r3, r4, r1
 8002db2:	19db      	adds	r3, r3, r7
 8002db4:	3201      	adds	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[8]+1;x<GNRMCComma[9];x++){
 8002db8:	1843      	adds	r3, r0, r1
 8002dba:	19db      	adds	r3, r3, r7
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	1843      	adds	r3, r0, r1
 8002dc0:	19db      	adds	r3, r3, r7
 8002dc2:	3201      	adds	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	2394      	movs	r3, #148	; 0x94
 8002dc8:	2008      	movs	r0, #8
 8002dca:	181b      	adds	r3, r3, r0
 8002dcc:	19db      	adds	r3, r3, r7
 8002dce:	7a5b      	ldrb	r3, [r3, #9]
 8002dd0:	22e5      	movs	r2, #229	; 0xe5
 8002dd2:	1812      	adds	r2, r2, r0
 8002dd4:	19d2      	adds	r2, r2, r7
 8002dd6:	7812      	ldrb	r2, [r2, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d3d3      	bcc.n	8002d84 <nmea_parser+0x3cc>
		}
		char tempData2[4];

		//Year (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002ddc:	2480      	movs	r4, #128	; 0x80
 8002dde:	1823      	adds	r3, r4, r0
 8002de0:	19db      	adds	r3, r3, r7
 8002de2:	2204      	movs	r2, #4
 8002de4:	2100      	movs	r1, #0
 8002de6:	0018      	movs	r0, r3
 8002de8:	f00b f9b5 	bl	800e156 <memset>
		tempData2[0]=tempData[4];
 8002dec:	2584      	movs	r5, #132	; 0x84
 8002dee:	2008      	movs	r0, #8
 8002df0:	182b      	adds	r3, r5, r0
 8002df2:	19db      	adds	r3, r3, r7
 8002df4:	791a      	ldrb	r2, [r3, #4]
 8002df6:	0021      	movs	r1, r4
 8002df8:	180b      	adds	r3, r1, r0
 8002dfa:	19db      	adds	r3, r3, r7
 8002dfc:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[5];
 8002dfe:	182b      	adds	r3, r5, r0
 8002e00:	19db      	adds	r3, r3, r7
 8002e02:	795a      	ldrb	r2, [r3, #5]
 8002e04:	000c      	movs	r4, r1
 8002e06:	1823      	adds	r3, r4, r0
 8002e08:	19db      	adds	r3, r3, r7
 8002e0a:	705a      	strb	r2, [r3, #1]
		GPSInformation[0] = (uint8_t)atoi(tempData2);
 8002e0c:	1823      	adds	r3, r4, r0
 8002e0e:	19db      	adds	r3, r3, r7
 8002e10:	0018      	movs	r0, r3
 8002e12:	f00b f941 	bl	800e098 <atoi>
 8002e16:	0003      	movs	r3, r0
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4bd8      	ldr	r3, [pc, #864]	; (800317c <nmea_parser+0x7c4>)
 8002e1c:	701a      	strb	r2, [r3, #0]

		//month (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002e1e:	2008      	movs	r0, #8
 8002e20:	1823      	adds	r3, r4, r0
 8002e22:	19db      	adds	r3, r3, r7
 8002e24:	2204      	movs	r2, #4
 8002e26:	2100      	movs	r1, #0
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f00b f994 	bl	800e156 <memset>
		tempData2[0]=tempData[2];
 8002e2e:	2008      	movs	r0, #8
 8002e30:	182b      	adds	r3, r5, r0
 8002e32:	19db      	adds	r3, r3, r7
 8002e34:	789a      	ldrb	r2, [r3, #2]
 8002e36:	0021      	movs	r1, r4
 8002e38:	180b      	adds	r3, r1, r0
 8002e3a:	19db      	adds	r3, r3, r7
 8002e3c:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[3];
 8002e3e:	182b      	adds	r3, r5, r0
 8002e40:	19db      	adds	r3, r3, r7
 8002e42:	78da      	ldrb	r2, [r3, #3]
 8002e44:	000c      	movs	r4, r1
 8002e46:	1823      	adds	r3, r4, r0
 8002e48:	19db      	adds	r3, r3, r7
 8002e4a:	705a      	strb	r2, [r3, #1]
		GPSInformation[1] = atoi(tempData2);
 8002e4c:	1823      	adds	r3, r4, r0
 8002e4e:	19db      	adds	r3, r3, r7
 8002e50:	0018      	movs	r0, r3
 8002e52:	f00b f921 	bl	800e098 <atoi>
 8002e56:	0003      	movs	r3, r0
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4bc8      	ldr	r3, [pc, #800]	; (800317c <nmea_parser+0x7c4>)
 8002e5c:	705a      	strb	r2, [r3, #1]
		//day (1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002e5e:	2008      	movs	r0, #8
 8002e60:	1823      	adds	r3, r4, r0
 8002e62:	19db      	adds	r3, r3, r7
 8002e64:	2204      	movs	r2, #4
 8002e66:	2100      	movs	r1, #0
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f00b f974 	bl	800e156 <memset>
		tempData2[0]=tempData[0];
 8002e6e:	2008      	movs	r0, #8
 8002e70:	182b      	adds	r3, r5, r0
 8002e72:	19db      	adds	r3, r3, r7
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	0021      	movs	r1, r4
 8002e78:	0004      	movs	r4, r0
 8002e7a:	190b      	adds	r3, r1, r4
 8002e7c:	19db      	adds	r3, r3, r7
 8002e7e:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8002e80:	192b      	adds	r3, r5, r4
 8002e82:	19db      	adds	r3, r3, r7
 8002e84:	785a      	ldrb	r2, [r3, #1]
 8002e86:	190b      	adds	r3, r1, r4
 8002e88:	19db      	adds	r3, r3, r7
 8002e8a:	705a      	strb	r2, [r3, #1]
		GPSInformation[2] = atoi(tempData2);
 8002e8c:	190b      	adds	r3, r1, r4
 8002e8e:	19db      	adds	r3, r3, r7
 8002e90:	0018      	movs	r0, r3
 8002e92:	f00b f901 	bl	800e098 <atoi>
 8002e96:	0003      	movs	r3, r0
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4bb8      	ldr	r3, [pc, #736]	; (800317c <nmea_parser+0x7c4>)
 8002e9c:	709a      	strb	r2, [r3, #2]

		memset(tempData,0,sizeof(tempData));
 8002e9e:	192b      	adds	r3, r5, r4
 8002ea0:	19db      	adds	r3, r3, r7
 8002ea2:	220f      	movs	r2, #15
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f00b f955 	bl	800e156 <memset>
		tempDataIndex = 0;
 8002eac:	22e7      	movs	r2, #231	; 0xe7
 8002eae:	1913      	adds	r3, r2, r4
 8002eb0:	19db      	adds	r3, r3, r7
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[0]+1;x<GNRMCComma[1]-4;x++){
 8002eb6:	2394      	movs	r3, #148	; 0x94
 8002eb8:	191b      	adds	r3, r3, r4
 8002eba:	19db      	adds	r3, r3, r7
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	23e4      	movs	r3, #228	; 0xe4
 8002ec0:	191b      	adds	r3, r3, r4
 8002ec2:	19db      	adds	r3, r3, r7
 8002ec4:	3201      	adds	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e020      	b.n	8002f0c <nmea_parser+0x554>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8002eca:	20e4      	movs	r0, #228	; 0xe4
 8002ecc:	2508      	movs	r5, #8
 8002ece:	1943      	adds	r3, r0, r5
 8002ed0:	19db      	adds	r3, r3, r7
 8002ed2:	781a      	ldrb	r2, [r3, #0]
 8002ed4:	24e7      	movs	r4, #231	; 0xe7
 8002ed6:	1963      	adds	r3, r4, r5
 8002ed8:	19db      	adds	r3, r3, r7
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	21cc      	movs	r1, #204	; 0xcc
 8002ede:	1949      	adds	r1, r1, r5
 8002ee0:	19c9      	adds	r1, r1, r7
 8002ee2:	6809      	ldr	r1, [r1, #0]
 8002ee4:	5c89      	ldrb	r1, [r1, r2]
 8002ee6:	2284      	movs	r2, #132	; 0x84
 8002ee8:	1952      	adds	r2, r2, r5
 8002eea:	19d2      	adds	r2, r2, r7
 8002eec:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8002eee:	0029      	movs	r1, r5
 8002ef0:	1863      	adds	r3, r4, r1
 8002ef2:	19db      	adds	r3, r3, r7
 8002ef4:	781a      	ldrb	r2, [r3, #0]
 8002ef6:	1863      	adds	r3, r4, r1
 8002ef8:	19db      	adds	r3, r3, r7
 8002efa:	3201      	adds	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[0]+1;x<GNRMCComma[1]-4;x++){
 8002efe:	1843      	adds	r3, r0, r1
 8002f00:	19db      	adds	r3, r3, r7
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	1843      	adds	r3, r0, r1
 8002f06:	19db      	adds	r3, r3, r7
 8002f08:	3201      	adds	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	23e4      	movs	r3, #228	; 0xe4
 8002f0e:	2108      	movs	r1, #8
 8002f10:	185b      	adds	r3, r3, r1
 8002f12:	19db      	adds	r3, r3, r7
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	2394      	movs	r3, #148	; 0x94
 8002f18:	185b      	adds	r3, r3, r1
 8002f1a:	19db      	adds	r3, r3, r7
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	3b04      	subs	r3, #4
 8002f20:	429a      	cmp	r2, r3
 8002f22:	dbd2      	blt.n	8002eca <nmea_parser+0x512>
		}
		//hour(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002f24:	2480      	movs	r4, #128	; 0x80
 8002f26:	1863      	adds	r3, r4, r1
 8002f28:	19db      	adds	r3, r3, r7
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f00b f911 	bl	800e156 <memset>
		tempData2[0]=tempData[0];
 8002f34:	2584      	movs	r5, #132	; 0x84
 8002f36:	2008      	movs	r0, #8
 8002f38:	182b      	adds	r3, r5, r0
 8002f3a:	19db      	adds	r3, r3, r7
 8002f3c:	781a      	ldrb	r2, [r3, #0]
 8002f3e:	0021      	movs	r1, r4
 8002f40:	180b      	adds	r3, r1, r0
 8002f42:	19db      	adds	r3, r3, r7
 8002f44:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8002f46:	182b      	adds	r3, r5, r0
 8002f48:	19db      	adds	r3, r3, r7
 8002f4a:	785a      	ldrb	r2, [r3, #1]
 8002f4c:	000c      	movs	r4, r1
 8002f4e:	1823      	adds	r3, r4, r0
 8002f50:	19db      	adds	r3, r3, r7
 8002f52:	705a      	strb	r2, [r3, #1]
		GPSInformation[3] = (uint8_t)atoi(tempData2);
 8002f54:	1823      	adds	r3, r4, r0
 8002f56:	19db      	adds	r3, r3, r7
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f00b f89d 	bl	800e098 <atoi>
 8002f5e:	0003      	movs	r3, r0
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4b86      	ldr	r3, [pc, #536]	; (800317c <nmea_parser+0x7c4>)
 8002f64:	70da      	strb	r2, [r3, #3]
		//minutes(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002f66:	2008      	movs	r0, #8
 8002f68:	1823      	adds	r3, r4, r0
 8002f6a:	19db      	adds	r3, r3, r7
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	2100      	movs	r1, #0
 8002f70:	0018      	movs	r0, r3
 8002f72:	f00b f8f0 	bl	800e156 <memset>
		tempData2[0]=tempData[2];
 8002f76:	2008      	movs	r0, #8
 8002f78:	182b      	adds	r3, r5, r0
 8002f7a:	19db      	adds	r3, r3, r7
 8002f7c:	789a      	ldrb	r2, [r3, #2]
 8002f7e:	0021      	movs	r1, r4
 8002f80:	180b      	adds	r3, r1, r0
 8002f82:	19db      	adds	r3, r3, r7
 8002f84:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[3];
 8002f86:	182b      	adds	r3, r5, r0
 8002f88:	19db      	adds	r3, r3, r7
 8002f8a:	78da      	ldrb	r2, [r3, #3]
 8002f8c:	000c      	movs	r4, r1
 8002f8e:	1823      	adds	r3, r4, r0
 8002f90:	19db      	adds	r3, r3, r7
 8002f92:	705a      	strb	r2, [r3, #1]
		GPSInformation[4] = (uint8_t)atoi(tempData2);
 8002f94:	1823      	adds	r3, r4, r0
 8002f96:	19db      	adds	r3, r3, r7
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f00b f87d 	bl	800e098 <atoi>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4b76      	ldr	r3, [pc, #472]	; (800317c <nmea_parser+0x7c4>)
 8002fa4:	711a      	strb	r2, [r3, #4]
		//seconds(1 byte)
		memset(tempData2,0,sizeof(tempData2));
 8002fa6:	2008      	movs	r0, #8
 8002fa8:	1823      	adds	r3, r4, r0
 8002faa:	19db      	adds	r3, r3, r7
 8002fac:	2204      	movs	r2, #4
 8002fae:	2100      	movs	r1, #0
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f00b f8d0 	bl	800e156 <memset>
		tempData2[0]=tempData[4];
 8002fb6:	2008      	movs	r0, #8
 8002fb8:	182b      	adds	r3, r5, r0
 8002fba:	19db      	adds	r3, r3, r7
 8002fbc:	791a      	ldrb	r2, [r3, #4]
 8002fbe:	0021      	movs	r1, r4
 8002fc0:	0004      	movs	r4, r0
 8002fc2:	190b      	adds	r3, r1, r4
 8002fc4:	19db      	adds	r3, r3, r7
 8002fc6:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[5];
 8002fc8:	192b      	adds	r3, r5, r4
 8002fca:	19db      	adds	r3, r3, r7
 8002fcc:	795a      	ldrb	r2, [r3, #5]
 8002fce:	190b      	adds	r3, r1, r4
 8002fd0:	19db      	adds	r3, r3, r7
 8002fd2:	705a      	strb	r2, [r3, #1]
		GPSInformation[5] = (uint8_t)atoi(tempData2);
 8002fd4:	190b      	adds	r3, r1, r4
 8002fd6:	19db      	adds	r3, r3, r7
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f00b f85d 	bl	800e098 <atoi>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4b66      	ldr	r3, [pc, #408]	; (800317c <nmea_parser+0x7c4>)
 8002fe4:	715a      	strb	r2, [r3, #5]
		//--------------------------------time/date stamp end-------------------------------------------------

		//-----Quantity of GPS information satellites(1 byte, left 4 bit for gps info len, right 4 bit for qty of sats)
		memset(tempData,0,sizeof(tempData));
 8002fe6:	192b      	adds	r3, r5, r4
 8002fe8:	19db      	adds	r3, r3, r7
 8002fea:	220f      	movs	r2, #15
 8002fec:	2100      	movs	r1, #0
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f00b f8b1 	bl	800e156 <memset>
		tempDataIndex = 0;
 8002ff4:	23e7      	movs	r3, #231	; 0xe7
 8002ff6:	191b      	adds	r3, r3, r4
 8002ff8:	19db      	adds	r3, r3, r7
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNGGAComma[6]+1;x<GNGGAComma[7];x++){
 8002ffe:	23a4      	movs	r3, #164	; 0xa4
 8003000:	191b      	adds	r3, r3, r4
 8003002:	19db      	adds	r3, r3, r7
 8003004:	799a      	ldrb	r2, [r3, #6]
 8003006:	23e3      	movs	r3, #227	; 0xe3
 8003008:	191b      	adds	r3, r3, r4
 800300a:	19db      	adds	r3, r3, r7
 800300c:	3201      	adds	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
 8003010:	e022      	b.n	8003058 <nmea_parser+0x6a0>
			tempData[tempDataIndex] = nmeaResponse[GNGGA][x];
 8003012:	0032      	movs	r2, r6
 8003014:	23cc      	movs	r3, #204	; 0xcc
 8003016:	2508      	movs	r5, #8
 8003018:	195b      	adds	r3, r3, r5
 800301a:	19db      	adds	r3, r3, r7
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	1899      	adds	r1, r3, r2
 8003020:	20e3      	movs	r0, #227	; 0xe3
 8003022:	1943      	adds	r3, r0, r5
 8003024:	19db      	adds	r3, r3, r7
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	24e7      	movs	r4, #231	; 0xe7
 800302a:	1963      	adds	r3, r4, r5
 800302c:	19db      	adds	r3, r3, r7
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	5c89      	ldrb	r1, [r1, r2]
 8003032:	2284      	movs	r2, #132	; 0x84
 8003034:	1952      	adds	r2, r2, r5
 8003036:	19d2      	adds	r2, r2, r7
 8003038:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 800303a:	0029      	movs	r1, r5
 800303c:	1863      	adds	r3, r4, r1
 800303e:	19db      	adds	r3, r3, r7
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	1863      	adds	r3, r4, r1
 8003044:	19db      	adds	r3, r3, r7
 8003046:	3201      	adds	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNGGAComma[6]+1;x<GNGGAComma[7];x++){
 800304a:	1843      	adds	r3, r0, r1
 800304c:	19db      	adds	r3, r3, r7
 800304e:	781a      	ldrb	r2, [r3, #0]
 8003050:	1843      	adds	r3, r0, r1
 8003052:	19db      	adds	r3, r3, r7
 8003054:	3201      	adds	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	23a4      	movs	r3, #164	; 0xa4
 800305a:	2508      	movs	r5, #8
 800305c:	195b      	adds	r3, r3, r5
 800305e:	19db      	adds	r3, r3, r7
 8003060:	79db      	ldrb	r3, [r3, #7]
 8003062:	22e3      	movs	r2, #227	; 0xe3
 8003064:	1952      	adds	r2, r2, r5
 8003066:	19d2      	adds	r2, r2, r7
 8003068:	7812      	ldrb	r2, [r2, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d3d1      	bcc.n	8003012 <nmea_parser+0x65a>
		}
		QOG |= (atoi(tempData));
 800306e:	2484      	movs	r4, #132	; 0x84
 8003070:	1963      	adds	r3, r4, r5
 8003072:	19db      	adds	r3, r3, r7
 8003074:	0018      	movs	r0, r3
 8003076:	f00b f80f 	bl	800e098 <atoi>
 800307a:	0003      	movs	r3, r0
 800307c:	b25a      	sxtb	r2, r3
 800307e:	21cb      	movs	r1, #203	; 0xcb
 8003080:	0028      	movs	r0, r5
 8003082:	180b      	adds	r3, r1, r0
 8003084:	19db      	adds	r3, r3, r7
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b25b      	sxtb	r3, r3
 800308a:	4313      	orrs	r3, r2
 800308c:	b25a      	sxtb	r2, r3
 800308e:	180b      	adds	r3, r1, r0
 8003090:	19db      	adds	r3, r3, r7
 8003092:	701a      	strb	r2, [r3, #0]
		GPSInformation[6] = QOG;
 8003094:	4b39      	ldr	r3, [pc, #228]	; (800317c <nmea_parser+0x7c4>)
 8003096:	180a      	adds	r2, r1, r0
 8003098:	19d2      	adds	r2, r2, r7
 800309a:	7812      	ldrb	r2, [r2, #0]
 800309c:	719a      	strb	r2, [r3, #6]
		//-------------------------------------QOG END------------------------------------------------------


		//------------------------------------latitude (4 bytes)--------------------------------------
		// char *ptr1;
		memset(tempData,0,sizeof(tempData));
 800309e:	0005      	movs	r5, r0
 80030a0:	1823      	adds	r3, r4, r0
 80030a2:	19db      	adds	r3, r3, r7
 80030a4:	220f      	movs	r2, #15
 80030a6:	2100      	movs	r1, #0
 80030a8:	0018      	movs	r0, r3
 80030aa:	f00b f854 	bl	800e156 <memset>
		memset(tempData2,0,sizeof(tempData2));
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	002c      	movs	r4, r5
 80030b2:	191b      	adds	r3, r3, r4
 80030b4:	19db      	adds	r3, r3, r7
 80030b6:	2204      	movs	r2, #4
 80030b8:	2100      	movs	r1, #0
 80030ba:	0018      	movs	r0, r3
 80030bc:	f00b f84b 	bl	800e156 <memset>
		tempDataIndex = 0;
 80030c0:	23e7      	movs	r3, #231	; 0xe7
 80030c2:	0021      	movs	r1, r4
 80030c4:	185b      	adds	r3, r3, r1
 80030c6:	19db      	adds	r3, r3, r7
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[2]+1;x<GNRMCComma[3];x++){
 80030cc:	2394      	movs	r3, #148	; 0x94
 80030ce:	185b      	adds	r3, r3, r1
 80030d0:	19db      	adds	r3, r3, r7
 80030d2:	789a      	ldrb	r2, [r3, #2]
 80030d4:	23e2      	movs	r3, #226	; 0xe2
 80030d6:	185b      	adds	r3, r3, r1
 80030d8:	19db      	adds	r3, r3, r7
 80030da:	3201      	adds	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e020      	b.n	8003122 <nmea_parser+0x76a>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 80030e0:	20e2      	movs	r0, #226	; 0xe2
 80030e2:	2508      	movs	r5, #8
 80030e4:	1943      	adds	r3, r0, r5
 80030e6:	19db      	adds	r3, r3, r7
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	24e7      	movs	r4, #231	; 0xe7
 80030ec:	1963      	adds	r3, r4, r5
 80030ee:	19db      	adds	r3, r3, r7
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	21cc      	movs	r1, #204	; 0xcc
 80030f4:	1949      	adds	r1, r1, r5
 80030f6:	19c9      	adds	r1, r1, r7
 80030f8:	6809      	ldr	r1, [r1, #0]
 80030fa:	5c89      	ldrb	r1, [r1, r2]
 80030fc:	2284      	movs	r2, #132	; 0x84
 80030fe:	1952      	adds	r2, r2, r5
 8003100:	19d2      	adds	r2, r2, r7
 8003102:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003104:	0029      	movs	r1, r5
 8003106:	1863      	adds	r3, r4, r1
 8003108:	19db      	adds	r3, r3, r7
 800310a:	781a      	ldrb	r2, [r3, #0]
 800310c:	1863      	adds	r3, r4, r1
 800310e:	19db      	adds	r3, r3, r7
 8003110:	3201      	adds	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[2]+1;x<GNRMCComma[3];x++){
 8003114:	1843      	adds	r3, r0, r1
 8003116:	19db      	adds	r3, r3, r7
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	1843      	adds	r3, r0, r1
 800311c:	19db      	adds	r3, r3, r7
 800311e:	3201      	adds	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	2394      	movs	r3, #148	; 0x94
 8003124:	2408      	movs	r4, #8
 8003126:	191b      	adds	r3, r3, r4
 8003128:	19db      	adds	r3, r3, r7
 800312a:	78db      	ldrb	r3, [r3, #3]
 800312c:	22e2      	movs	r2, #226	; 0xe2
 800312e:	1912      	adds	r2, r2, r4
 8003130:	19d2      	adds	r2, r2, r7
 8003132:	7812      	ldrb	r2, [r2, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d3d3      	bcc.n	80030e0 <nmea_parser+0x728>
		}
		tempData2[0]=tempData[0];
 8003138:	2184      	movs	r1, #132	; 0x84
 800313a:	190b      	adds	r3, r1, r4
 800313c:	19db      	adds	r3, r3, r7
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	2080      	movs	r0, #128	; 0x80
 8003142:	1903      	adds	r3, r0, r4
 8003144:	19db      	adds	r3, r3, r7
 8003146:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 8003148:	190b      	adds	r3, r1, r4
 800314a:	19db      	adds	r3, r3, r7
 800314c:	785a      	ldrb	r2, [r3, #1]
 800314e:	0021      	movs	r1, r4
 8003150:	1843      	adds	r3, r0, r1
 8003152:	19db      	adds	r3, r3, r7
 8003154:	705a      	strb	r2, [r3, #1]
		uint8_t t1=2;
 8003156:	23e1      	movs	r3, #225	; 0xe1
 8003158:	185b      	adds	r3, r3, r1
 800315a:	19db      	adds	r3, r3, r7
 800315c:	2202      	movs	r2, #2
 800315e:	701a      	strb	r2, [r3, #0]
		uint8_t t2=0;
 8003160:	23e0      	movs	r3, #224	; 0xe0
 8003162:	185b      	adds	r3, r3, r1
 8003164:	19db      	adds	r3, r3, r7
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
		char tB[9];
		memset(tB,0,sizeof(tB));
 800316a:	2374      	movs	r3, #116	; 0x74
 800316c:	185b      	adds	r3, r3, r1
 800316e:	19db      	adds	r3, r3, r7
 8003170:	2209      	movs	r2, #9
 8003172:	2100      	movs	r1, #0
 8003174:	0018      	movs	r0, r3
 8003176:	f00a ffee 	bl	800e156 <memset>
		while(tempData[t1]!=NULL){
 800317a:	e02f      	b.n	80031dc <nmea_parser+0x824>
 800317c:	200002d0 	.word	0x200002d0
			if(tempData[t1]!='.'){
 8003180:	21e1      	movs	r1, #225	; 0xe1
 8003182:	2008      	movs	r0, #8
 8003184:	180b      	adds	r3, r1, r0
 8003186:	19db      	adds	r3, r3, r7
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2484      	movs	r4, #132	; 0x84
 800318c:	1822      	adds	r2, r4, r0
 800318e:	19d2      	adds	r2, r2, r7
 8003190:	5cd3      	ldrb	r3, [r2, r3]
 8003192:	2b2e      	cmp	r3, #46	; 0x2e
 8003194:	d019      	beq.n	80031ca <nmea_parser+0x812>
				tB[t2]=tempData[t1];
 8003196:	0005      	movs	r5, r0
 8003198:	180b      	adds	r3, r1, r0
 800319a:	19db      	adds	r3, r3, r7
 800319c:	781a      	ldrb	r2, [r3, #0]
 800319e:	20e0      	movs	r0, #224	; 0xe0
 80031a0:	0029      	movs	r1, r5
 80031a2:	1843      	adds	r3, r0, r1
 80031a4:	19db      	adds	r3, r3, r7
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	000d      	movs	r5, r1
 80031aa:	1861      	adds	r1, r4, r1
 80031ac:	19c9      	adds	r1, r1, r7
 80031ae:	5c89      	ldrb	r1, [r1, r2]
 80031b0:	2274      	movs	r2, #116	; 0x74
 80031b2:	002c      	movs	r4, r5
 80031b4:	1912      	adds	r2, r2, r4
 80031b6:	19d2      	adds	r2, r2, r7
 80031b8:	54d1      	strb	r1, [r2, r3]
				t2++;
 80031ba:	0021      	movs	r1, r4
 80031bc:	1843      	adds	r3, r0, r1
 80031be:	19db      	adds	r3, r3, r7
 80031c0:	781a      	ldrb	r2, [r3, #0]
 80031c2:	1843      	adds	r3, r0, r1
 80031c4:	19db      	adds	r3, r3, r7
 80031c6:	3201      	adds	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
			}
			t1++;
 80031ca:	21e1      	movs	r1, #225	; 0xe1
 80031cc:	2008      	movs	r0, #8
 80031ce:	180b      	adds	r3, r1, r0
 80031d0:	19db      	adds	r3, r3, r7
 80031d2:	781a      	ldrb	r2, [r3, #0]
 80031d4:	180b      	adds	r3, r1, r0
 80031d6:	19db      	adds	r3, r3, r7
 80031d8:	3201      	adds	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 80031dc:	23e1      	movs	r3, #225	; 0xe1
 80031de:	2008      	movs	r0, #8
 80031e0:	181b      	adds	r3, r3, r0
 80031e2:	19db      	adds	r3, r3, r7
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2284      	movs	r2, #132	; 0x84
 80031e8:	1812      	adds	r2, r2, r0
 80031ea:	19d2      	adds	r2, r2, r7
 80031ec:	5cd3      	ldrb	r3, [r2, r3]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1c6      	bne.n	8003180 <nmea_parser+0x7c8>
		}
		latitude=atoi(tB);
 80031f2:	2374      	movs	r3, #116	; 0x74
 80031f4:	0004      	movs	r4, r0
 80031f6:	181b      	adds	r3, r3, r0
 80031f8:	19db      	adds	r3, r3, r7
 80031fa:	0018      	movs	r0, r3
 80031fc:	f00a ff4c 	bl	800e098 <atoi>
 8003200:	0003      	movs	r3, r0
 8003202:	22ec      	movs	r2, #236	; 0xec
 8003204:	0020      	movs	r0, r4
 8003206:	1811      	adds	r1, r2, r0
 8003208:	19c9      	adds	r1, r1, r7
 800320a:	600b      	str	r3, [r1, #0]
		if(t2==4){
 800320c:	23e0      	movs	r3, #224	; 0xe0
 800320e:	181b      	adds	r3, r3, r0
 8003210:	19db      	adds	r3, r3, r7
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b04      	cmp	r3, #4
 8003216:	d109      	bne.n	800322c <nmea_parser+0x874>
			latitude*=100;
 8003218:	0011      	movs	r1, r2
 800321a:	1813      	adds	r3, r2, r0
 800321c:	19db      	adds	r3, r3, r7
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2264      	movs	r2, #100	; 0x64
 8003222:	4353      	muls	r3, r2
 8003224:	180a      	adds	r2, r1, r0
 8003226:	19d2      	adds	r2, r2, r7
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e011      	b.n	8003250 <nmea_parser+0x898>
		}
		else if(t2==5){
 800322c:	23e0      	movs	r3, #224	; 0xe0
 800322e:	2008      	movs	r0, #8
 8003230:	181b      	adds	r3, r3, r0
 8003232:	19db      	adds	r3, r3, r7
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b05      	cmp	r3, #5
 8003238:	d10a      	bne.n	8003250 <nmea_parser+0x898>
			latitude*=10;
 800323a:	21ec      	movs	r1, #236	; 0xec
 800323c:	180b      	adds	r3, r1, r0
 800323e:	19db      	adds	r3, r3, r7
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	0013      	movs	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	189b      	adds	r3, r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	180a      	adds	r2, r1, r0
 800324c:	19d2      	adds	r2, r2, r7
 800324e:	6013      	str	r3, [r2, #0]
		}

		latitude=latitude*3;
 8003250:	24ec      	movs	r4, #236	; 0xec
 8003252:	2008      	movs	r0, #8
 8003254:	1823      	adds	r3, r4, r0
 8003256:	19db      	adds	r3, r3, r7
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	0013      	movs	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	189b      	adds	r3, r3, r2
 8003260:	1822      	adds	r2, r4, r0
 8003262:	19d2      	adds	r2, r2, r7
 8003264:	6013      	str	r3, [r2, #0]

		latitude+= (atoi(tempData2)*60*30000);
 8003266:	2580      	movs	r5, #128	; 0x80
 8003268:	182b      	adds	r3, r5, r0
 800326a:	19db      	adds	r3, r3, r7
 800326c:	0018      	movs	r0, r3
 800326e:	f00a ff13 	bl	800e098 <atoi>
 8003272:	0003      	movs	r3, r0
 8003274:	4aae      	ldr	r2, [pc, #696]	; (8003530 <nmea_parser+0xb78>)
 8003276:	4353      	muls	r3, r2
 8003278:	001a      	movs	r2, r3
 800327a:	2008      	movs	r0, #8
 800327c:	1823      	adds	r3, r4, r0
 800327e:	19db      	adds	r3, r3, r7
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	189b      	adds	r3, r3, r2
 8003284:	0021      	movs	r1, r4
 8003286:	180a      	adds	r2, r1, r0
 8003288:	19d2      	adds	r2, r2, r7
 800328a:	6013      	str	r3, [r2, #0]

		GPSInformation[7] = latitude>>24;
 800328c:	180b      	adds	r3, r1, r0
 800328e:	19db      	adds	r3, r3, r7
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	0e1b      	lsrs	r3, r3, #24
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4ba7      	ldr	r3, [pc, #668]	; (8003534 <nmea_parser+0xb7c>)
 8003298:	71da      	strb	r2, [r3, #7]
		GPSInformation[8] = latitude>>16;
 800329a:	180b      	adds	r3, r1, r0
 800329c:	19db      	adds	r3, r3, r7
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4ba3      	ldr	r3, [pc, #652]	; (8003534 <nmea_parser+0xb7c>)
 80032a6:	721a      	strb	r2, [r3, #8]
		GPSInformation[9] = latitude>>8;
 80032a8:	180b      	adds	r3, r1, r0
 80032aa:	19db      	adds	r3, r3, r7
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4ba0      	ldr	r3, [pc, #640]	; (8003534 <nmea_parser+0xb7c>)
 80032b4:	725a      	strb	r2, [r3, #9]
		GPSInformation[10] = latitude;
 80032b6:	180b      	adds	r3, r1, r0
 80032b8:	19db      	adds	r3, r3, r7
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4b9d      	ldr	r3, [pc, #628]	; (8003534 <nmea_parser+0xb7c>)
 80032c0:	729a      	strb	r2, [r3, #10]



		//------------------------------------longitude (4 bytes)--------------------------------------
		// char *ptr2;
		memset(tempData,0,sizeof(tempData));
 80032c2:	2384      	movs	r3, #132	; 0x84
 80032c4:	0004      	movs	r4, r0
 80032c6:	191b      	adds	r3, r3, r4
 80032c8:	19db      	adds	r3, r3, r7
 80032ca:	220f      	movs	r2, #15
 80032cc:	2100      	movs	r1, #0
 80032ce:	0018      	movs	r0, r3
 80032d0:	f00a ff41 	bl	800e156 <memset>
		memset(tempData2,0,sizeof(tempData2));
 80032d4:	192b      	adds	r3, r5, r4
 80032d6:	19db      	adds	r3, r3, r7
 80032d8:	2204      	movs	r2, #4
 80032da:	2100      	movs	r1, #0
 80032dc:	0018      	movs	r0, r3
 80032de:	f00a ff3a 	bl	800e156 <memset>
		tempDataIndex = 0;
 80032e2:	23e7      	movs	r3, #231	; 0xe7
 80032e4:	0020      	movs	r0, r4
 80032e6:	181b      	adds	r3, r3, r0
 80032e8:	19db      	adds	r3, r3, r7
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[4]+1;x<GNRMCComma[5];x++){
 80032ee:	2394      	movs	r3, #148	; 0x94
 80032f0:	181b      	adds	r3, r3, r0
 80032f2:	19db      	adds	r3, r3, r7
 80032f4:	791a      	ldrb	r2, [r3, #4]
 80032f6:	23df      	movs	r3, #223	; 0xdf
 80032f8:	181b      	adds	r3, r3, r0
 80032fa:	19db      	adds	r3, r3, r7
 80032fc:	3201      	adds	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	e020      	b.n	8003344 <nmea_parser+0x98c>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003302:	20df      	movs	r0, #223	; 0xdf
 8003304:	2508      	movs	r5, #8
 8003306:	1943      	adds	r3, r0, r5
 8003308:	19db      	adds	r3, r3, r7
 800330a:	781a      	ldrb	r2, [r3, #0]
 800330c:	24e7      	movs	r4, #231	; 0xe7
 800330e:	1963      	adds	r3, r4, r5
 8003310:	19db      	adds	r3, r3, r7
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	21cc      	movs	r1, #204	; 0xcc
 8003316:	1949      	adds	r1, r1, r5
 8003318:	19c9      	adds	r1, r1, r7
 800331a:	6809      	ldr	r1, [r1, #0]
 800331c:	5c89      	ldrb	r1, [r1, r2]
 800331e:	2284      	movs	r2, #132	; 0x84
 8003320:	1952      	adds	r2, r2, r5
 8003322:	19d2      	adds	r2, r2, r7
 8003324:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 8003326:	0029      	movs	r1, r5
 8003328:	1863      	adds	r3, r4, r1
 800332a:	19db      	adds	r3, r3, r7
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	1863      	adds	r3, r4, r1
 8003330:	19db      	adds	r3, r3, r7
 8003332:	3201      	adds	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[4]+1;x<GNRMCComma[5];x++){
 8003336:	1843      	adds	r3, r0, r1
 8003338:	19db      	adds	r3, r3, r7
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	1843      	adds	r3, r0, r1
 800333e:	19db      	adds	r3, r3, r7
 8003340:	3201      	adds	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	2394      	movs	r3, #148	; 0x94
 8003346:	2408      	movs	r4, #8
 8003348:	191b      	adds	r3, r3, r4
 800334a:	19db      	adds	r3, r3, r7
 800334c:	795b      	ldrb	r3, [r3, #5]
 800334e:	22df      	movs	r2, #223	; 0xdf
 8003350:	1912      	adds	r2, r2, r4
 8003352:	19d2      	adds	r2, r2, r7
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d3d3      	bcc.n	8003302 <nmea_parser+0x94a>
		}

		tempData2[0]=tempData[0];
 800335a:	2184      	movs	r1, #132	; 0x84
 800335c:	190b      	adds	r3, r1, r4
 800335e:	19db      	adds	r3, r3, r7
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	2080      	movs	r0, #128	; 0x80
 8003364:	1903      	adds	r3, r0, r4
 8003366:	19db      	adds	r3, r3, r7
 8003368:	701a      	strb	r2, [r3, #0]
		tempData2[1]=tempData[1];
 800336a:	190b      	adds	r3, r1, r4
 800336c:	19db      	adds	r3, r3, r7
 800336e:	785a      	ldrb	r2, [r3, #1]
 8003370:	1903      	adds	r3, r0, r4
 8003372:	19db      	adds	r3, r3, r7
 8003374:	705a      	strb	r2, [r3, #1]
		tempData2[2]=tempData[2];
 8003376:	190b      	adds	r3, r1, r4
 8003378:	19db      	adds	r3, r3, r7
 800337a:	789a      	ldrb	r2, [r3, #2]
 800337c:	0021      	movs	r1, r4
 800337e:	1843      	adds	r3, r0, r1
 8003380:	19db      	adds	r3, r3, r7
 8003382:	709a      	strb	r2, [r3, #2]
		memset(tB,0,sizeof(tB));
 8003384:	2374      	movs	r3, #116	; 0x74
 8003386:	000c      	movs	r4, r1
 8003388:	185b      	adds	r3, r3, r1
 800338a:	19db      	adds	r3, r3, r7
 800338c:	2209      	movs	r2, #9
 800338e:	2100      	movs	r1, #0
 8003390:	0018      	movs	r0, r3
 8003392:	f00a fee0 	bl	800e156 <memset>
		t1=3;
 8003396:	23e1      	movs	r3, #225	; 0xe1
 8003398:	0021      	movs	r1, r4
 800339a:	185b      	adds	r3, r3, r1
 800339c:	19db      	adds	r3, r3, r7
 800339e:	2203      	movs	r2, #3
 80033a0:	701a      	strb	r2, [r3, #0]
		t2=0;
 80033a2:	23e0      	movs	r3, #224	; 0xe0
 80033a4:	185b      	adds	r3, r3, r1
 80033a6:	19db      	adds	r3, r3, r7
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 80033ac:	e02d      	b.n	800340a <nmea_parser+0xa52>
			if(tempData[t1]!='.'){
 80033ae:	21e1      	movs	r1, #225	; 0xe1
 80033b0:	2008      	movs	r0, #8
 80033b2:	180b      	adds	r3, r1, r0
 80033b4:	19db      	adds	r3, r3, r7
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2484      	movs	r4, #132	; 0x84
 80033ba:	1822      	adds	r2, r4, r0
 80033bc:	19d2      	adds	r2, r2, r7
 80033be:	5cd3      	ldrb	r3, [r2, r3]
 80033c0:	2b2e      	cmp	r3, #46	; 0x2e
 80033c2:	d019      	beq.n	80033f8 <nmea_parser+0xa40>
				tB[t2]=tempData[t1];
 80033c4:	0005      	movs	r5, r0
 80033c6:	180b      	adds	r3, r1, r0
 80033c8:	19db      	adds	r3, r3, r7
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	20e0      	movs	r0, #224	; 0xe0
 80033ce:	0029      	movs	r1, r5
 80033d0:	1843      	adds	r3, r0, r1
 80033d2:	19db      	adds	r3, r3, r7
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	000d      	movs	r5, r1
 80033d8:	1861      	adds	r1, r4, r1
 80033da:	19c9      	adds	r1, r1, r7
 80033dc:	5c89      	ldrb	r1, [r1, r2]
 80033de:	2274      	movs	r2, #116	; 0x74
 80033e0:	002c      	movs	r4, r5
 80033e2:	1912      	adds	r2, r2, r4
 80033e4:	19d2      	adds	r2, r2, r7
 80033e6:	54d1      	strb	r1, [r2, r3]
				t2++;
 80033e8:	0021      	movs	r1, r4
 80033ea:	1843      	adds	r3, r0, r1
 80033ec:	19db      	adds	r3, r3, r7
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	1843      	adds	r3, r0, r1
 80033f2:	19db      	adds	r3, r3, r7
 80033f4:	3201      	adds	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
			}
			t1++;
 80033f8:	21e1      	movs	r1, #225	; 0xe1
 80033fa:	2008      	movs	r0, #8
 80033fc:	180b      	adds	r3, r1, r0
 80033fe:	19db      	adds	r3, r3, r7
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	180b      	adds	r3, r1, r0
 8003404:	19db      	adds	r3, r3, r7
 8003406:	3201      	adds	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
		while(tempData[t1]!=NULL){
 800340a:	23e1      	movs	r3, #225	; 0xe1
 800340c:	2008      	movs	r0, #8
 800340e:	181b      	adds	r3, r3, r0
 8003410:	19db      	adds	r3, r3, r7
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2284      	movs	r2, #132	; 0x84
 8003416:	1812      	adds	r2, r2, r0
 8003418:	19d2      	adds	r2, r2, r7
 800341a:	5cd3      	ldrb	r3, [r2, r3]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1c6      	bne.n	80033ae <nmea_parser+0x9f6>
		}
		longitude=atoi(tB);
 8003420:	2374      	movs	r3, #116	; 0x74
 8003422:	0004      	movs	r4, r0
 8003424:	181b      	adds	r3, r3, r0
 8003426:	19db      	adds	r3, r3, r7
 8003428:	0018      	movs	r0, r3
 800342a:	f00a fe35 	bl	800e098 <atoi>
 800342e:	0003      	movs	r3, r0
 8003430:	22e8      	movs	r2, #232	; 0xe8
 8003432:	0020      	movs	r0, r4
 8003434:	1811      	adds	r1, r2, r0
 8003436:	19c9      	adds	r1, r1, r7
 8003438:	600b      	str	r3, [r1, #0]
		if(t2==4){
 800343a:	23e0      	movs	r3, #224	; 0xe0
 800343c:	181b      	adds	r3, r3, r0
 800343e:	19db      	adds	r3, r3, r7
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b04      	cmp	r3, #4
 8003444:	d109      	bne.n	800345a <nmea_parser+0xaa2>
			longitude*=100;
 8003446:	0011      	movs	r1, r2
 8003448:	1813      	adds	r3, r2, r0
 800344a:	19db      	adds	r3, r3, r7
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2264      	movs	r2, #100	; 0x64
 8003450:	4353      	muls	r3, r2
 8003452:	180a      	adds	r2, r1, r0
 8003454:	19d2      	adds	r2, r2, r7
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	e011      	b.n	800347e <nmea_parser+0xac6>
		}
		else if(t2==5){
 800345a:	23e0      	movs	r3, #224	; 0xe0
 800345c:	2008      	movs	r0, #8
 800345e:	181b      	adds	r3, r3, r0
 8003460:	19db      	adds	r3, r3, r7
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b05      	cmp	r3, #5
 8003466:	d10a      	bne.n	800347e <nmea_parser+0xac6>
			longitude*=10;
 8003468:	21e8      	movs	r1, #232	; 0xe8
 800346a:	180b      	adds	r3, r1, r0
 800346c:	19db      	adds	r3, r3, r7
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	0013      	movs	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	189b      	adds	r3, r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	180a      	adds	r2, r1, r0
 800347a:	19d2      	adds	r2, r2, r7
 800347c:	6013      	str	r3, [r2, #0]
		}
		longitude=longitude*3;
 800347e:	24e8      	movs	r4, #232	; 0xe8
 8003480:	2008      	movs	r0, #8
 8003482:	1823      	adds	r3, r4, r0
 8003484:	19db      	adds	r3, r3, r7
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	0013      	movs	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	189b      	adds	r3, r3, r2
 800348e:	1822      	adds	r2, r4, r0
 8003490:	19d2      	adds	r2, r2, r7
 8003492:	6013      	str	r3, [r2, #0]
		longitude+= (atoi(tempData2)*60*30000);
 8003494:	2580      	movs	r5, #128	; 0x80
 8003496:	182b      	adds	r3, r5, r0
 8003498:	19db      	adds	r3, r3, r7
 800349a:	0018      	movs	r0, r3
 800349c:	f00a fdfc 	bl	800e098 <atoi>
 80034a0:	0003      	movs	r3, r0
 80034a2:	4a23      	ldr	r2, [pc, #140]	; (8003530 <nmea_parser+0xb78>)
 80034a4:	4353      	muls	r3, r2
 80034a6:	001a      	movs	r2, r3
 80034a8:	2008      	movs	r0, #8
 80034aa:	1823      	adds	r3, r4, r0
 80034ac:	19db      	adds	r3, r3, r7
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	0021      	movs	r1, r4
 80034b4:	180a      	adds	r2, r1, r0
 80034b6:	19d2      	adds	r2, r2, r7
 80034b8:	6013      	str	r3, [r2, #0]
		GPSInformation[11] = longitude>>24;
 80034ba:	180b      	adds	r3, r1, r0
 80034bc:	19db      	adds	r3, r3, r7
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0e1b      	lsrs	r3, r3, #24
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <nmea_parser+0xb7c>)
 80034c6:	72da      	strb	r2, [r3, #11]
		GPSInformation[12] = longitude>>16;
 80034c8:	180b      	adds	r3, r1, r0
 80034ca:	19db      	adds	r3, r3, r7
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4b18      	ldr	r3, [pc, #96]	; (8003534 <nmea_parser+0xb7c>)
 80034d4:	731a      	strb	r2, [r3, #12]
		GPSInformation[13] = longitude>>8;
 80034d6:	180b      	adds	r3, r1, r0
 80034d8:	19db      	adds	r3, r3, r7
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	4b14      	ldr	r3, [pc, #80]	; (8003534 <nmea_parser+0xb7c>)
 80034e2:	735a      	strb	r2, [r3, #13]
		GPSInformation[14] = longitude;
 80034e4:	180b      	adds	r3, r1, r0
 80034e6:	19db      	adds	r3, r3, r7
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <nmea_parser+0xb7c>)
 80034ee:	739a      	strb	r2, [r3, #14]
		//------------------------------------longitude end--------------------------------------



		//----------------------------------speed----------------------------------------------------
		memset(tempData,0,sizeof(tempData));
 80034f0:	2384      	movs	r3, #132	; 0x84
 80034f2:	0004      	movs	r4, r0
 80034f4:	191b      	adds	r3, r3, r4
 80034f6:	19db      	adds	r3, r3, r7
 80034f8:	220f      	movs	r2, #15
 80034fa:	2100      	movs	r1, #0
 80034fc:	0018      	movs	r0, r3
 80034fe:	f00a fe2a 	bl	800e156 <memset>
		memset(tempData2,0,sizeof(tempData2));
 8003502:	192b      	adds	r3, r5, r4
 8003504:	19db      	adds	r3, r3, r7
 8003506:	2204      	movs	r2, #4
 8003508:	2100      	movs	r1, #0
 800350a:	0018      	movs	r0, r3
 800350c:	f00a fe23 	bl	800e156 <memset>
		tempDataIndex = 0;
 8003510:	23e7      	movs	r3, #231	; 0xe7
 8003512:	0020      	movs	r0, r4
 8003514:	181b      	adds	r3, r3, r0
 8003516:	19db      	adds	r3, r3, r7
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
		float speedinf;
		for(uint8_t x =GNRMCComma[6]+1;x<GNRMCComma[7];x++){
 800351c:	2394      	movs	r3, #148	; 0x94
 800351e:	181b      	adds	r3, r3, r0
 8003520:	19db      	adds	r3, r3, r7
 8003522:	799a      	ldrb	r2, [r3, #6]
 8003524:	23d7      	movs	r3, #215	; 0xd7
 8003526:	181b      	adds	r3, r3, r0
 8003528:	19db      	adds	r3, r3, r7
 800352a:	3201      	adds	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e024      	b.n	800357a <nmea_parser+0xbc2>
 8003530:	001b7740 	.word	0x001b7740
 8003534:	200002d0 	.word	0x200002d0
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003538:	20d7      	movs	r0, #215	; 0xd7
 800353a:	2508      	movs	r5, #8
 800353c:	1943      	adds	r3, r0, r5
 800353e:	19db      	adds	r3, r3, r7
 8003540:	781a      	ldrb	r2, [r3, #0]
 8003542:	24e7      	movs	r4, #231	; 0xe7
 8003544:	1963      	adds	r3, r4, r5
 8003546:	19db      	adds	r3, r3, r7
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	21cc      	movs	r1, #204	; 0xcc
 800354c:	1949      	adds	r1, r1, r5
 800354e:	19c9      	adds	r1, r1, r7
 8003550:	6809      	ldr	r1, [r1, #0]
 8003552:	5c89      	ldrb	r1, [r1, r2]
 8003554:	2284      	movs	r2, #132	; 0x84
 8003556:	1952      	adds	r2, r2, r5
 8003558:	19d2      	adds	r2, r2, r7
 800355a:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 800355c:	0029      	movs	r1, r5
 800355e:	1863      	adds	r3, r4, r1
 8003560:	19db      	adds	r3, r3, r7
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	1863      	adds	r3, r4, r1
 8003566:	19db      	adds	r3, r3, r7
 8003568:	3201      	adds	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[6]+1;x<GNRMCComma[7];x++){
 800356c:	1843      	adds	r3, r0, r1
 800356e:	19db      	adds	r3, r3, r7
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	1843      	adds	r3, r0, r1
 8003574:	19db      	adds	r3, r3, r7
 8003576:	3201      	adds	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
 800357a:	2394      	movs	r3, #148	; 0x94
 800357c:	2508      	movs	r5, #8
 800357e:	195b      	adds	r3, r3, r5
 8003580:	19db      	adds	r3, r3, r7
 8003582:	79db      	ldrb	r3, [r3, #7]
 8003584:	22d7      	movs	r2, #215	; 0xd7
 8003586:	1952      	adds	r2, r2, r5
 8003588:	19d2      	adds	r2, r2, r7
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d3d3      	bcc.n	8003538 <nmea_parser+0xb80>
		}

		speedinf = strtof(tempData,NULL);
 8003590:	2384      	movs	r3, #132	; 0x84
 8003592:	195b      	adds	r3, r3, r5
 8003594:	19db      	adds	r3, r3, r7
 8003596:	2100      	movs	r1, #0
 8003598:	0018      	movs	r0, r3
 800359a:	f00b fc77 	bl	800ee8c <strtof>
 800359e:	1c03      	adds	r3, r0, #0
 80035a0:	24d8      	movs	r4, #216	; 0xd8
 80035a2:	1962      	adds	r2, r4, r5
 80035a4:	19d2      	adds	r2, r2, r7
 80035a6:	6013      	str	r3, [r2, #0]
		speedinf= speedinf * 1.85;
 80035a8:	1963      	adds	r3, r4, r5
 80035aa:	19db      	adds	r3, r3, r7
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	f7ff f8e3 	bl	8002778 <__aeabi_f2d>
 80035b2:	4a80      	ldr	r2, [pc, #512]	; (80037b4 <nmea_parser+0xdfc>)
 80035b4:	4b80      	ldr	r3, [pc, #512]	; (80037b8 <nmea_parser+0xe00>)
 80035b6:	f7fe fa37 	bl	8001a28 <__aeabi_dmul>
 80035ba:	0002      	movs	r2, r0
 80035bc:	000b      	movs	r3, r1
 80035be:	0010      	movs	r0, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	f7ff f921 	bl	8002808 <__aeabi_d2f>
 80035c6:	1c03      	adds	r3, r0, #0
 80035c8:	1962      	adds	r2, r4, r5
 80035ca:	19d2      	adds	r2, r2, r7
 80035cc:	6013      	str	r3, [r2, #0]
		if(speedinf>255){
 80035ce:	497b      	ldr	r1, [pc, #492]	; (80037bc <nmea_parser+0xe04>)
 80035d0:	1963      	adds	r3, r4, r5
 80035d2:	19db      	adds	r3, r3, r7
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	f7fc ff93 	bl	8000500 <__aeabi_fcmpgt>
 80035da:	1e03      	subs	r3, r0, #0
 80035dc:	d003      	beq.n	80035e6 <nmea_parser+0xc2e>
			speedinf=255;
 80035de:	4b77      	ldr	r3, [pc, #476]	; (80037bc <nmea_parser+0xe04>)
 80035e0:	1962      	adds	r2, r4, r5
 80035e2:	19d2      	adds	r2, r2, r7
 80035e4:	6013      	str	r3, [r2, #0]
		}
		if(speedinf<1){
 80035e6:	21fe      	movs	r1, #254	; 0xfe
 80035e8:	0589      	lsls	r1, r1, #22
 80035ea:	24d8      	movs	r4, #216	; 0xd8
 80035ec:	2508      	movs	r5, #8
 80035ee:	1963      	adds	r3, r4, r5
 80035f0:	19db      	adds	r3, r3, r7
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	f7fc ff70 	bl	80004d8 <__aeabi_fcmplt>
 80035f8:	1e03      	subs	r3, r0, #0
 80035fa:	d003      	beq.n	8003604 <nmea_parser+0xc4c>
			speedinf=0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	1962      	adds	r2, r4, r5
 8003600:	19d2      	adds	r2, r2, r7
 8003602:	6013      	str	r3, [r2, #0]

		}

		GPSInformation[15] = (int)speedinf;
 8003604:	23d8      	movs	r3, #216	; 0xd8
 8003606:	2408      	movs	r4, #8
 8003608:	191b      	adds	r3, r3, r4
 800360a:	19db      	adds	r3, r3, r7
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	f7fd fa5f 	bl	8000ad0 <__aeabi_f2iz>
 8003612:	0003      	movs	r3, r0
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4b6a      	ldr	r3, [pc, #424]	; (80037c0 <nmea_parser+0xe08>)
 8003618:	73da      	strb	r2, [r3, #15]



		//------------------------------Coursestatus block(2 byte)--------------------------------
		//Byte1, bit 4(gps position bit)
		if (nmeaResponse[GNRMC][GNRMCComma[1]+1] == 'A'){
 800361a:	2394      	movs	r3, #148	; 0x94
 800361c:	191b      	adds	r3, r3, r4
 800361e:	19db      	adds	r3, r3, r7
 8003620:	785b      	ldrb	r3, [r3, #1]
 8003622:	3301      	adds	r3, #1
 8003624:	22cc      	movs	r2, #204	; 0xcc
 8003626:	1912      	adds	r2, r2, r4
 8003628:	19d2      	adds	r2, r2, r7
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	5cd3      	ldrb	r3, [r2, r3]
 800362e:	2b41      	cmp	r3, #65	; 0x41
 8003630:	d109      	bne.n	8003646 <nmea_parser+0xc8e>
			courseStatus |= 0x1000;
 8003632:	22f6      	movs	r2, #246	; 0xf6
 8003634:	1913      	adds	r3, r2, r4
 8003636:	19db      	adds	r3, r3, r7
 8003638:	1912      	adds	r2, r2, r4
 800363a:	19d2      	adds	r2, r2, r7
 800363c:	8812      	ldrh	r2, [r2, #0]
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	0149      	lsls	r1, r1, #5
 8003642:	430a      	orrs	r2, r1
 8003644:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 5(realtime differential)
		if (nmeaResponse[GNGGA][GNGGAComma[5]+1] != '1'){
 8003646:	0032      	movs	r2, r6
 8003648:	23cc      	movs	r3, #204	; 0xcc
 800364a:	2108      	movs	r1, #8
 800364c:	185b      	adds	r3, r3, r1
 800364e:	19db      	adds	r3, r3, r7
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	189a      	adds	r2, r3, r2
 8003654:	23a4      	movs	r3, #164	; 0xa4
 8003656:	185b      	adds	r3, r3, r1
 8003658:	19db      	adds	r3, r3, r7
 800365a:	795b      	ldrb	r3, [r3, #5]
 800365c:	3301      	adds	r3, #1
 800365e:	5cd3      	ldrb	r3, [r2, r3]
 8003660:	2b31      	cmp	r3, #49	; 0x31
 8003662:	d009      	beq.n	8003678 <nmea_parser+0xcc0>
			courseStatus |= 0x2000;
 8003664:	22f6      	movs	r2, #246	; 0xf6
 8003666:	1853      	adds	r3, r2, r1
 8003668:	19db      	adds	r3, r3, r7
 800366a:	1852      	adds	r2, r2, r1
 800366c:	19d2      	adds	r2, r2, r7
 800366e:	8812      	ldrh	r2, [r2, #0]
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	0189      	lsls	r1, r1, #6
 8003674:	430a      	orrs	r2, r1
 8003676:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 3(East/West bit)
		if(nmeaResponse[GNRMC][GNRMCComma[5]+1] == 'W' ){
 8003678:	2394      	movs	r3, #148	; 0x94
 800367a:	2108      	movs	r1, #8
 800367c:	185b      	adds	r3, r3, r1
 800367e:	19db      	adds	r3, r3, r7
 8003680:	795b      	ldrb	r3, [r3, #5]
 8003682:	3301      	adds	r3, #1
 8003684:	22cc      	movs	r2, #204	; 0xcc
 8003686:	1852      	adds	r2, r2, r1
 8003688:	19d2      	adds	r2, r2, r7
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	5cd3      	ldrb	r3, [r2, r3]
 800368e:	2b57      	cmp	r3, #87	; 0x57
 8003690:	d109      	bne.n	80036a6 <nmea_parser+0xcee>
			courseStatus |= 0x800;
 8003692:	22f6      	movs	r2, #246	; 0xf6
 8003694:	1853      	adds	r3, r2, r1
 8003696:	19db      	adds	r3, r3, r7
 8003698:	1852      	adds	r2, r2, r1
 800369a:	19d2      	adds	r2, r2, r7
 800369c:	8812      	ldrh	r2, [r2, #0]
 800369e:	2180      	movs	r1, #128	; 0x80
 80036a0:	0109      	lsls	r1, r1, #4
 80036a2:	430a      	orrs	r2, r1
 80036a4:	801a      	strh	r2, [r3, #0]
		}
		//Byte1, bit 2(North/South bit)
		if(nmeaResponse[GNRMC][GNRMCComma[3]+1] == 'N' ){
 80036a6:	2394      	movs	r3, #148	; 0x94
 80036a8:	2108      	movs	r1, #8
 80036aa:	185b      	adds	r3, r3, r1
 80036ac:	19db      	adds	r3, r3, r7
 80036ae:	78db      	ldrb	r3, [r3, #3]
 80036b0:	3301      	adds	r3, #1
 80036b2:	22cc      	movs	r2, #204	; 0xcc
 80036b4:	1852      	adds	r2, r2, r1
 80036b6:	19d2      	adds	r2, r2, r7
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	2b4e      	cmp	r3, #78	; 0x4e
 80036be:	d109      	bne.n	80036d4 <nmea_parser+0xd1c>
			courseStatus |= 0x400;
 80036c0:	22f6      	movs	r2, #246	; 0xf6
 80036c2:	1853      	adds	r3, r2, r1
 80036c4:	19db      	adds	r3, r3, r7
 80036c6:	1852      	adds	r2, r2, r1
 80036c8:	19d2      	adds	r2, r2, r7
 80036ca:	8812      	ldrh	r2, [r2, #0]
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	00c9      	lsls	r1, r1, #3
 80036d0:	430a      	orrs	r2, r1
 80036d2:	801a      	strh	r2, [r3, #0]
		}

		//Course
		memset(tempData,0,sizeof(tempData));
 80036d4:	2384      	movs	r3, #132	; 0x84
 80036d6:	2408      	movs	r4, #8
 80036d8:	191b      	adds	r3, r3, r4
 80036da:	19db      	adds	r3, r3, r7
 80036dc:	220f      	movs	r2, #15
 80036de:	2100      	movs	r1, #0
 80036e0:	0018      	movs	r0, r3
 80036e2:	f00a fd38 	bl	800e156 <memset>
		tempDataIndex = 0;
 80036e6:	23e7      	movs	r3, #231	; 0xe7
 80036e8:	0021      	movs	r1, r4
 80036ea:	185b      	adds	r3, r3, r1
 80036ec:	19db      	adds	r3, r3, r7
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[7]+1;x<GNRMCComma[8];x++){
 80036f2:	2394      	movs	r3, #148	; 0x94
 80036f4:	185b      	adds	r3, r3, r1
 80036f6:	19db      	adds	r3, r3, r7
 80036f8:	79da      	ldrb	r2, [r3, #7]
 80036fa:	23d6      	movs	r3, #214	; 0xd6
 80036fc:	185b      	adds	r3, r3, r1
 80036fe:	19db      	adds	r3, r3, r7
 8003700:	3201      	adds	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e020      	b.n	8003748 <nmea_parser+0xd90>
			tempData[tempDataIndex]= nmeaResponse[GNRMC][x];
 8003706:	20d6      	movs	r0, #214	; 0xd6
 8003708:	2508      	movs	r5, #8
 800370a:	1943      	adds	r3, r0, r5
 800370c:	19db      	adds	r3, r3, r7
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	24e7      	movs	r4, #231	; 0xe7
 8003712:	1963      	adds	r3, r4, r5
 8003714:	19db      	adds	r3, r3, r7
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	21cc      	movs	r1, #204	; 0xcc
 800371a:	1949      	adds	r1, r1, r5
 800371c:	19c9      	adds	r1, r1, r7
 800371e:	6809      	ldr	r1, [r1, #0]
 8003720:	5c89      	ldrb	r1, [r1, r2]
 8003722:	2284      	movs	r2, #132	; 0x84
 8003724:	1952      	adds	r2, r2, r5
 8003726:	19d2      	adds	r2, r2, r7
 8003728:	54d1      	strb	r1, [r2, r3]
			tempDataIndex++;
 800372a:	0029      	movs	r1, r5
 800372c:	1863      	adds	r3, r4, r1
 800372e:	19db      	adds	r3, r3, r7
 8003730:	781a      	ldrb	r2, [r3, #0]
 8003732:	1863      	adds	r3, r4, r1
 8003734:	19db      	adds	r3, r3, r7
 8003736:	3201      	adds	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
		for(uint8_t x =GNRMCComma[7]+1;x<GNRMCComma[8];x++){
 800373a:	1843      	adds	r3, r0, r1
 800373c:	19db      	adds	r3, r3, r7
 800373e:	781a      	ldrb	r2, [r3, #0]
 8003740:	1843      	adds	r3, r0, r1
 8003742:	19db      	adds	r3, r3, r7
 8003744:	3201      	adds	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	2394      	movs	r3, #148	; 0x94
 800374a:	2408      	movs	r4, #8
 800374c:	191b      	adds	r3, r3, r4
 800374e:	19db      	adds	r3, r3, r7
 8003750:	7a1b      	ldrb	r3, [r3, #8]
 8003752:	22d6      	movs	r2, #214	; 0xd6
 8003754:	1912      	adds	r2, r2, r4
 8003756:	19d2      	adds	r2, r2, r7
 8003758:	7812      	ldrb	r2, [r2, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d3d3      	bcc.n	8003706 <nmea_parser+0xd4e>
		}
		courseStatus |= atoi(tempData);
 800375e:	2384      	movs	r3, #132	; 0x84
 8003760:	191b      	adds	r3, r3, r4
 8003762:	19db      	adds	r3, r3, r7
 8003764:	0018      	movs	r0, r3
 8003766:	f00a fc97 	bl	800e098 <atoi>
 800376a:	0003      	movs	r3, r0
 800376c:	b21a      	sxth	r2, r3
 800376e:	21f6      	movs	r1, #246	; 0xf6
 8003770:	190b      	adds	r3, r1, r4
 8003772:	19db      	adds	r3, r3, r7
 8003774:	2000      	movs	r0, #0
 8003776:	5e1b      	ldrsh	r3, [r3, r0]
 8003778:	4313      	orrs	r3, r2
 800377a:	b21a      	sxth	r2, r3
 800377c:	0020      	movs	r0, r4
 800377e:	180b      	adds	r3, r1, r0
 8003780:	19db      	adds	r3, r3, r7
 8003782:	801a      	strh	r2, [r3, #0]
		GPSInformation[16]= courseStatus>>8;
 8003784:	180b      	adds	r3, r1, r0
 8003786:	19db      	adds	r3, r3, r7
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	b29b      	uxth	r3, r3
 800378e:	b2da      	uxtb	r2, r3
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <nmea_parser+0xe08>)
 8003792:	741a      	strb	r2, [r3, #16]
		GPSInformation[17]= courseStatus;
 8003794:	180b      	adds	r3, r1, r0
 8003796:	19db      	adds	r3, r3, r7
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	b2da      	uxtb	r2, r3
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <nmea_parser+0xe08>)
 800379e:	745a      	strb	r2, [r3, #17]
		//------------------------------Course Status Block END------------------------------------

		return GPSInformation;
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <nmea_parser+0xe08>)
 80037a2:	e003      	b.n	80037ac <nmea_parser+0xdf4>
	}
	else{
		*checkSum = 55;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2237      	movs	r2, #55	; 0x37
 80037a8:	701a      	strb	r2, [r3, #0]
		return NULL;
 80037aa:	2300      	movs	r3, #0
	}

}
 80037ac:	0018      	movs	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b041      	add	sp, #260	; 0x104
 80037b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b4:	9999999a 	.word	0x9999999a
 80037b8:	3ffd9999 	.word	0x3ffd9999
 80037bc:	437f0000 	.word	0x437f0000
 80037c0:	200002d0 	.word	0x200002d0

080037c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037c8:	f3bf 8f4f 	dsb	sy
}
 80037cc:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <__NVIC_SystemReset+0x1c>)
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <__NVIC_SystemReset+0x20>)
 80037d2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80037d4:	f3bf 8f4f 	dsb	sy
}
 80037d8:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	e7fd      	b.n	80037da <__NVIC_SystemReset+0x16>
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	e000ed00 	.word	0xe000ed00
 80037e4:	05fa0004 	.word	0x05fa0004

080037e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b0c5      	sub	sp, #276	; 0x114
 80037ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037ee:	f005 fa93 	bl	8008d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037f2:	f000 faeb 	bl	8003dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037f6:	f000 fd8d 	bl	8004314 <MX_GPIO_Init>
  MX_SPI1_Init();
 80037fa:	f000 fb41 	bl	8003e80 <MX_SPI1_Init>
  MX_TIM3_Init();
 80037fe:	f000 fb7d 	bl	8003efc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003802:	f000 fc83 	bl	800410c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003806:	f000 fccf 	bl	80041a8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800380a:	f000 fd1b 	bl	8004244 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800380e:	f000 fd4d 	bl	80042ac <MX_USART4_UART_Init>
  MX_TIM17_Init();
 8003812:	f000 fc51 	bl	80040b8 <MX_TIM17_Init>
  MX_TIM14_Init();
 8003816:	f000 fc29 	bl	800406c <MX_TIM14_Init>
  MX_TIM6_Init();
 800381a:	f000 fbeb 	bl	8003ff4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);//watchDog Timer
 800381e:	4bd2      	ldr	r3, [pc, #840]	; (8003b68 <main+0x380>)
 8003820:	0018      	movs	r0, r3
 8003822:	f007 fd37 	bl	800b294 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);//AT PORT
 8003826:	4bd1      	ldr	r3, [pc, #836]	; (8003b6c <main+0x384>)
 8003828:	0018      	movs	r0, r3
 800382a:	f007 fd33 	bl	800b294 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, GNSS_BUFFER, 1);
 800382e:	49d0      	ldr	r1, [pc, #832]	; (8003b70 <main+0x388>)
 8003830:	4bd0      	ldr	r3, [pc, #832]	; (8003b74 <main+0x38c>)
 8003832:	2201      	movs	r2, #1
 8003834:	0018      	movs	r0, r3
 8003836:	f008 fdcf 	bl	800c3d8 <HAL_UART_Receive_IT>
  W25qxx_Init();
 800383a:	f004 fe99 	bl	8008570 <W25qxx_Init>


	//INPUT CAPTURE--------------------------------------
  HAL_TIM_Base_Start_IT(&htim3);//input capture timer starts
 800383e:	4bce      	ldr	r3, [pc, #824]	; (8003b78 <main+0x390>)
 8003840:	0018      	movs	r0, r3
 8003842:	f007 fd27 	bl	800b294 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);///GNS PORT
 8003846:	4bcd      	ldr	r3, [pc, #820]	; (8003b7c <main+0x394>)
 8003848:	0018      	movs	r0, r3
 800384a:	f007 fd23 	bl	800b294 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 800384e:	49cc      	ldr	r1, [pc, #816]	; (8003b80 <main+0x398>)
 8003850:	4bcc      	ldr	r3, [pc, #816]	; (8003b84 <main+0x39c>)
 8003852:	2201      	movs	r2, #1
 8003854:	0018      	movs	r0, r3
 8003856:	f008 fdbf 	bl	800c3d8 <HAL_UART_Receive_IT>



  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 800385a:	4bcb      	ldr	r3, [pc, #812]	; (8003b88 <main+0x3a0>)
 800385c:	2201      	movs	r2, #1
 800385e:	2104      	movs	r1, #4
 8003860:	0018      	movs	r0, r3
 8003862:	f005 fe2e 	bl	80094c2 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8003866:	23fa      	movs	r3, #250	; 0xfa
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	0018      	movs	r0, r3
 800386c:	f005 fada 	bl	8008e24 <HAL_Delay>
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8003870:	4bc5      	ldr	r3, [pc, #788]	; (8003b88 <main+0x3a0>)
 8003872:	2200      	movs	r2, #0
 8003874:	2104      	movs	r1, #4
 8003876:	0018      	movs	r0, r3
 8003878:	f005 fe23 	bl	80094c2 <HAL_GPIO_WritePin>


	//ROM INTEGRITY------------------------------------------------------------------------------------------------------------------------------
//	W25qxx_EraseSector(0);
//	W25qxx_EraseSector(1);
	W25qxx_ReadByte(&isFlash, 0);
 800387c:	4bc3      	ldr	r3, [pc, #780]	; (8003b8c <main+0x3a4>)
 800387e:	2100      	movs	r1, #0
 8003880:	0018      	movs	r0, r3
 8003882:	f005 f889 	bl	8008998 <W25qxx_ReadByte>
	W25qxx_ReadByte(&isFlash1, LASTPAGE_ADD);
 8003886:	4bc2      	ldr	r3, [pc, #776]	; (8003b90 <main+0x3a8>)
 8003888:	21fa      	movs	r1, #250	; 0xfa
 800388a:	0018      	movs	r0, r3
 800388c:	f005 f884 	bl	8008998 <W25qxx_ReadByte>
	if (isFlash != 1 || isFlash1 !=1 ) {
 8003890:	4bbe      	ldr	r3, [pc, #760]	; (8003b8c <main+0x3a4>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d103      	bne.n	80038a0 <main+0xb8>
 8003898:	4bbd      	ldr	r3, [pc, #756]	; (8003b90 <main+0x3a8>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d00f      	beq.n	80038c0 <main+0xd8>
		StartN = 0;
 80038a0:	4bbc      	ldr	r3, [pc, #752]	; (8003b94 <main+0x3ac>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	801a      	strh	r2, [r3, #0]
		EndN = 0;
 80038a6:	4bbc      	ldr	r3, [pc, #752]	; (8003b98 <main+0x3b0>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	801a      	strh	r2, [r3, #0]
		StartSec = 1;
 80038ac:	4bbb      	ldr	r3, [pc, #748]	; (8003b9c <main+0x3b4>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	801a      	strh	r2, [r3, #0]
		EndSec = 1;
 80038b2:	4bbb      	ldr	r3, [pc, #748]	; (8003ba0 <main+0x3b8>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	801a      	strh	r2, [r3, #0]
		W25qxx_EraseSector(1);
 80038b8:	2001      	movs	r0, #1
 80038ba:	f004 ff13 	bl	80086e4 <W25qxx_EraseSector>
 80038be:	e10a      	b.n	8003ad6 <main+0x2ee>

	} else {
		//reading from ROM
		uint8_t configPage[LASTPAGE_ADD+2];
		memset(configPage, 0, sizeof(configPage));
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	22fc      	movs	r2, #252	; 0xfc
 80038c4:	2100      	movs	r1, #0
 80038c6:	0018      	movs	r0, r3
 80038c8:	f00a fc45 	bl	800e156 <memset>
		W25qxx_ReadBytes(configPage, 0, LASTPAGE_ADD+2);
 80038cc:	1d3b      	adds	r3, r7, #4
 80038ce:	22fc      	movs	r2, #252	; 0xfc
 80038d0:	2100      	movs	r1, #0
 80038d2:	0018      	movs	r0, r3
 80038d4:	f005 f8b6 	bl	8008a44 <W25qxx_ReadBytes>

		StartSec = configPage[1];
 80038d8:	4bb2      	ldr	r3, [pc, #712]	; (8003ba4 <main+0x3bc>)
 80038da:	2184      	movs	r1, #132	; 0x84
 80038dc:	0049      	lsls	r1, r1, #1
 80038de:	185b      	adds	r3, r3, r1
 80038e0:	19db      	adds	r3, r3, r7
 80038e2:	785b      	ldrb	r3, [r3, #1]
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	4bad      	ldr	r3, [pc, #692]	; (8003b9c <main+0x3b4>)
 80038e8:	801a      	strh	r2, [r3, #0]
		StartSec = StartSec << 8 | configPage[2];
 80038ea:	4bac      	ldr	r3, [pc, #688]	; (8003b9c <main+0x3b4>)
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	b21a      	sxth	r2, r3
 80038f4:	4bab      	ldr	r3, [pc, #684]	; (8003ba4 <main+0x3bc>)
 80038f6:	185b      	adds	r3, r3, r1
 80038f8:	19db      	adds	r3, r3, r7
 80038fa:	789b      	ldrb	r3, [r3, #2]
 80038fc:	b21b      	sxth	r3, r3
 80038fe:	4313      	orrs	r3, r2
 8003900:	b21b      	sxth	r3, r3
 8003902:	b29a      	uxth	r2, r3
 8003904:	4ba5      	ldr	r3, [pc, #660]	; (8003b9c <main+0x3b4>)
 8003906:	801a      	strh	r2, [r3, #0]

		StartN = configPage[3];
 8003908:	4ba6      	ldr	r3, [pc, #664]	; (8003ba4 <main+0x3bc>)
 800390a:	185b      	adds	r3, r3, r1
 800390c:	19db      	adds	r3, r3, r7
 800390e:	78db      	ldrb	r3, [r3, #3]
 8003910:	b29a      	uxth	r2, r3
 8003912:	4ba0      	ldr	r3, [pc, #640]	; (8003b94 <main+0x3ac>)
 8003914:	801a      	strh	r2, [r3, #0]
		StartN = StartN << 8 | configPage[4];
 8003916:	4b9f      	ldr	r3, [pc, #636]	; (8003b94 <main+0x3ac>)
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	b21a      	sxth	r2, r3
 8003920:	4ba0      	ldr	r3, [pc, #640]	; (8003ba4 <main+0x3bc>)
 8003922:	185b      	adds	r3, r3, r1
 8003924:	19db      	adds	r3, r3, r7
 8003926:	791b      	ldrb	r3, [r3, #4]
 8003928:	b21b      	sxth	r3, r3
 800392a:	4313      	orrs	r3, r2
 800392c:	b21b      	sxth	r3, r3
 800392e:	b29a      	uxth	r2, r3
 8003930:	4b98      	ldr	r3, [pc, #608]	; (8003b94 <main+0x3ac>)
 8003932:	801a      	strh	r2, [r3, #0]

		EndSec = configPage[5];
 8003934:	4b9b      	ldr	r3, [pc, #620]	; (8003ba4 <main+0x3bc>)
 8003936:	185b      	adds	r3, r3, r1
 8003938:	19db      	adds	r3, r3, r7
 800393a:	795b      	ldrb	r3, [r3, #5]
 800393c:	b29a      	uxth	r2, r3
 800393e:	4b98      	ldr	r3, [pc, #608]	; (8003ba0 <main+0x3b8>)
 8003940:	801a      	strh	r2, [r3, #0]
		EndSec = EndSec << 8 | configPage[6];
 8003942:	4b97      	ldr	r3, [pc, #604]	; (8003ba0 <main+0x3b8>)
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	b21a      	sxth	r2, r3
 800394c:	4b95      	ldr	r3, [pc, #596]	; (8003ba4 <main+0x3bc>)
 800394e:	185b      	adds	r3, r3, r1
 8003950:	19db      	adds	r3, r3, r7
 8003952:	799b      	ldrb	r3, [r3, #6]
 8003954:	b21b      	sxth	r3, r3
 8003956:	4313      	orrs	r3, r2
 8003958:	b21b      	sxth	r3, r3
 800395a:	b29a      	uxth	r2, r3
 800395c:	4b90      	ldr	r3, [pc, #576]	; (8003ba0 <main+0x3b8>)
 800395e:	801a      	strh	r2, [r3, #0]

		EndN = configPage[7];
 8003960:	4b90      	ldr	r3, [pc, #576]	; (8003ba4 <main+0x3bc>)
 8003962:	185b      	adds	r3, r3, r1
 8003964:	19db      	adds	r3, r3, r7
 8003966:	79db      	ldrb	r3, [r3, #7]
 8003968:	b29a      	uxth	r2, r3
 800396a:	4b8b      	ldr	r3, [pc, #556]	; (8003b98 <main+0x3b0>)
 800396c:	801a      	strh	r2, [r3, #0]
		EndN = EndN << 8 | configPage[8];
 800396e:	4b8a      	ldr	r3, [pc, #552]	; (8003b98 <main+0x3b0>)
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	b29b      	uxth	r3, r3
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	b21a      	sxth	r2, r3
 8003978:	4b8a      	ldr	r3, [pc, #552]	; (8003ba4 <main+0x3bc>)
 800397a:	185b      	adds	r3, r3, r1
 800397c:	19db      	adds	r3, r3, r7
 800397e:	7a1b      	ldrb	r3, [r3, #8]
 8003980:	b21b      	sxth	r3, r3
 8003982:	4313      	orrs	r3, r2
 8003984:	b21b      	sxth	r3, r3
 8003986:	b29a      	uxth	r2, r3
 8003988:	4b83      	ldr	r3, [pc, #524]	; (8003b98 <main+0x3b0>)
 800398a:	801a      	strh	r2, [r3, #0]

		cPin[0] = configPage[CP1_ADD];
 800398c:	4b85      	ldr	r3, [pc, #532]	; (8003ba4 <main+0x3bc>)
 800398e:	185b      	adds	r3, r3, r1
 8003990:	19db      	adds	r3, r3, r7
 8003992:	7a5a      	ldrb	r2, [r3, #9]
 8003994:	4b84      	ldr	r3, [pc, #528]	; (8003ba8 <main+0x3c0>)
 8003996:	701a      	strb	r2, [r3, #0]
		cPin[1] = configPage[CP2_ADD];
 8003998:	4b82      	ldr	r3, [pc, #520]	; (8003ba4 <main+0x3bc>)
 800399a:	185b      	adds	r3, r3, r1
 800399c:	19db      	adds	r3, r3, r7
 800399e:	7a9a      	ldrb	r2, [r3, #10]
 80039a0:	4b81      	ldr	r3, [pc, #516]	; (8003ba8 <main+0x3c0>)
 80039a2:	705a      	strb	r2, [r3, #1]
		cPin[2] = configPage[CP3_ADD];
 80039a4:	4b7f      	ldr	r3, [pc, #508]	; (8003ba4 <main+0x3bc>)
 80039a6:	185b      	adds	r3, r3, r1
 80039a8:	19db      	adds	r3, r3, r7
 80039aa:	7ada      	ldrb	r2, [r3, #11]
 80039ac:	4b7e      	ldr	r3, [pc, #504]	; (8003ba8 <main+0x3c0>)
 80039ae:	709a      	strb	r2, [r3, #2]
		cPin[3] = configPage[CP4_ADD];
 80039b0:	4b7c      	ldr	r3, [pc, #496]	; (8003ba4 <main+0x3bc>)
 80039b2:	185b      	adds	r3, r3, r1
 80039b4:	19db      	adds	r3, r3, r7
 80039b6:	7b1a      	ldrb	r2, [r3, #12]
 80039b8:	4b7b      	ldr	r3, [pc, #492]	; (8003ba8 <main+0x3c0>)
 80039ba:	70da      	strb	r2, [r3, #3]

		for (uint8_t te = 0; te < 10; te++) {
 80039bc:	2308      	movs	r3, #8
 80039be:	33ff      	adds	r3, #255	; 0xff
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]
 80039c6:	e014      	b.n	80039f2 <main+0x20a>
			validSender[te] = configPage[te + VALIDSENSTART_ADD];
 80039c8:	2008      	movs	r0, #8
 80039ca:	30ff      	adds	r0, #255	; 0xff
 80039cc:	183b      	adds	r3, r7, r0
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	330d      	adds	r3, #13
 80039d2:	001a      	movs	r2, r3
 80039d4:	183b      	adds	r3, r7, r0
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	4972      	ldr	r1, [pc, #456]	; (8003ba4 <main+0x3bc>)
 80039da:	2484      	movs	r4, #132	; 0x84
 80039dc:	0064      	lsls	r4, r4, #1
 80039de:	1909      	adds	r1, r1, r4
 80039e0:	19c9      	adds	r1, r1, r7
 80039e2:	5c89      	ldrb	r1, [r1, r2]
 80039e4:	4a71      	ldr	r2, [pc, #452]	; (8003bac <main+0x3c4>)
 80039e6:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 10; te++) {
 80039e8:	183b      	adds	r3, r7, r0
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	183b      	adds	r3, r7, r0
 80039ee:	3201      	adds	r2, #1
 80039f0:	701a      	strb	r2, [r3, #0]
 80039f2:	2308      	movs	r3, #8
 80039f4:	33ff      	adds	r3, #255	; 0xff
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b09      	cmp	r3, #9
 80039fc:	d9e4      	bls.n	80039c8 <main+0x1e0>
		}
		for (uint8_t te = 0; te < 50; te++) {
 80039fe:	1dfb      	adds	r3, r7, #7
 8003a00:	33ff      	adds	r3, #255	; 0xff
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e016      	b.n	8003a36 <main+0x24e>
			domainAdd[te] = configPage[te + DOMAINSTART_ADD];
 8003a08:	1dfb      	adds	r3, r7, #7
 8003a0a:	33ff      	adds	r3, #255	; 0xff
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	3317      	adds	r3, #23
 8003a10:	001a      	movs	r2, r3
 8003a12:	1dfb      	adds	r3, r7, #7
 8003a14:	33ff      	adds	r3, #255	; 0xff
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	4962      	ldr	r1, [pc, #392]	; (8003ba4 <main+0x3bc>)
 8003a1a:	2084      	movs	r0, #132	; 0x84
 8003a1c:	0040      	lsls	r0, r0, #1
 8003a1e:	1809      	adds	r1, r1, r0
 8003a20:	19c9      	adds	r1, r1, r7
 8003a22:	5c89      	ldrb	r1, [r1, r2]
 8003a24:	4a62      	ldr	r2, [pc, #392]	; (8003bb0 <main+0x3c8>)
 8003a26:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 50; te++) {
 8003a28:	1dfb      	adds	r3, r7, #7
 8003a2a:	33ff      	adds	r3, #255	; 0xff
 8003a2c:	781a      	ldrb	r2, [r3, #0]
 8003a2e:	1dfb      	adds	r3, r7, #7
 8003a30:	33ff      	adds	r3, #255	; 0xff
 8003a32:	3201      	adds	r2, #1
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	1dfb      	adds	r3, r7, #7
 8003a38:	33ff      	adds	r3, #255	; 0xff
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b31      	cmp	r3, #49	; 0x31
 8003a3e:	d9e3      	bls.n	8003a08 <main+0x220>
		}
		for (uint8_t te = 0; te < 6; te++) {
 8003a40:	1dbb      	adds	r3, r7, #6
 8003a42:	33ff      	adds	r3, #255	; 0xff
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e016      	b.n	8003a78 <main+0x290>
			portAdd[te] = configPage[te + PORTSTART_ADD];
 8003a4a:	1dbb      	adds	r3, r7, #6
 8003a4c:	33ff      	adds	r3, #255	; 0xff
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	3349      	adds	r3, #73	; 0x49
 8003a52:	001a      	movs	r2, r3
 8003a54:	1dbb      	adds	r3, r7, #6
 8003a56:	33ff      	adds	r3, #255	; 0xff
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	4952      	ldr	r1, [pc, #328]	; (8003ba4 <main+0x3bc>)
 8003a5c:	2084      	movs	r0, #132	; 0x84
 8003a5e:	0040      	lsls	r0, r0, #1
 8003a60:	1809      	adds	r1, r1, r0
 8003a62:	19c9      	adds	r1, r1, r7
 8003a64:	5c89      	ldrb	r1, [r1, r2]
 8003a66:	4a53      	ldr	r2, [pc, #332]	; (8003bb4 <main+0x3cc>)
 8003a68:	54d1      	strb	r1, [r2, r3]
		for (uint8_t te = 0; te < 6; te++) {
 8003a6a:	1dbb      	adds	r3, r7, #6
 8003a6c:	33ff      	adds	r3, #255	; 0xff
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	1dbb      	adds	r3, r7, #6
 8003a72:	33ff      	adds	r3, #255	; 0xff
 8003a74:	3201      	adds	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	1dbb      	adds	r3, r7, #6
 8003a7a:	33ff      	adds	r3, #255	; 0xff
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d9e3      	bls.n	8003a4a <main+0x262>
		}
		locationDataIntervalA = configPage[LDIA_ADD];
 8003a82:	4b48      	ldr	r3, [pc, #288]	; (8003ba4 <main+0x3bc>)
 8003a84:	2184      	movs	r1, #132	; 0x84
 8003a86:	0049      	lsls	r1, r1, #1
 8003a88:	185b      	adds	r3, r3, r1
 8003a8a:	19db      	adds	r3, r3, r7
 8003a8c:	224f      	movs	r2, #79	; 0x4f
 8003a8e:	5c9a      	ldrb	r2, [r3, r2]
 8003a90:	4b49      	ldr	r3, [pc, #292]	; (8003bb8 <main+0x3d0>)
 8003a92:	701a      	strb	r2, [r3, #0]
		locationDataIntervalB = configPage[LDIB_ADD];
 8003a94:	4b43      	ldr	r3, [pc, #268]	; (8003ba4 <main+0x3bc>)
 8003a96:	185b      	adds	r3, r3, r1
 8003a98:	19db      	adds	r3, r3, r7
 8003a9a:	2250      	movs	r2, #80	; 0x50
 8003a9c:	5c9a      	ldrb	r2, [r3, r2]
 8003a9e:	4b47      	ldr	r3, [pc, #284]	; (8003bbc <main+0x3d4>)
 8003aa0:	701a      	strb	r2, [r3, #0]
		isAutoRst = configPage[AUTORST_ADD];
 8003aa2:	4b40      	ldr	r3, [pc, #256]	; (8003ba4 <main+0x3bc>)
 8003aa4:	185b      	adds	r3, r3, r1
 8003aa6:	19db      	adds	r3, r3, r7
 8003aa8:	2251      	movs	r2, #81	; 0x51
 8003aaa:	5c9a      	ldrb	r2, [r3, r2]
 8003aac:	4b44      	ldr	r3, [pc, #272]	; (8003bc0 <main+0x3d8>)
 8003aae:	701a      	strb	r2, [r3, #0]
		if(isAutoRst==0){
 8003ab0:	4b43      	ldr	r3, [pc, #268]	; (8003bc0 <main+0x3d8>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10e      	bne.n	8003ad6 <main+0x2ee>
			StartN = 0;
 8003ab8:	4b36      	ldr	r3, [pc, #216]	; (8003b94 <main+0x3ac>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	801a      	strh	r2, [r3, #0]
			EndN = 0;
 8003abe:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <main+0x3b0>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	801a      	strh	r2, [r3, #0]
			StartSec = 1;
 8003ac4:	4b35      	ldr	r3, [pc, #212]	; (8003b9c <main+0x3b4>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	801a      	strh	r2, [r3, #0]
			EndSec = 1;
 8003aca:	4b35      	ldr	r3, [pc, #212]	; (8003ba0 <main+0x3b8>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	801a      	strh	r2, [r3, #0]
			W25qxx_EraseSector(1);
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f004 fe07 	bl	80086e4 <W25qxx_EraseSector>
		}
	}
	save_to_flash(0);
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f002 f910 	bl	8005cfc <save_to_flash>




	//-------------------check if tracker has registered any mobile number?-------------
	isSMSActive=0;
 8003adc:	4b39      	ldr	r3, [pc, #228]	; (8003bc4 <main+0x3dc>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	701a      	strb	r2, [r3, #0]
	for(uint8_t a=0;a<6;a++){
 8003ae2:	1d7b      	adds	r3, r7, #5
 8003ae4:	33ff      	adds	r3, #255	; 0xff
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	e011      	b.n	8003b10 <main+0x328>
		if(validSender[a]!=0){
 8003aec:	1d7b      	adds	r3, r7, #5
 8003aee:	33ff      	adds	r3, #255	; 0xff
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	4a2e      	ldr	r2, [pc, #184]	; (8003bac <main+0x3c4>)
 8003af4:	5cd3      	ldrb	r3, [r2, r3]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <main+0x31a>
			isSMSActive=1;
 8003afa:	4b32      	ldr	r3, [pc, #200]	; (8003bc4 <main+0x3dc>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
			break;
 8003b00:	e00b      	b.n	8003b1a <main+0x332>
	for(uint8_t a=0;a<6;a++){
 8003b02:	1d7b      	adds	r3, r7, #5
 8003b04:	33ff      	adds	r3, #255	; 0xff
 8003b06:	781a      	ldrb	r2, [r3, #0]
 8003b08:	1d7b      	adds	r3, r7, #5
 8003b0a:	33ff      	adds	r3, #255	; 0xff
 8003b0c:	3201      	adds	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	1d7b      	adds	r3, r7, #5
 8003b12:	33ff      	adds	r3, #255	; 0xff
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b05      	cmp	r3, #5
 8003b18:	d9e8      	bls.n	8003aec <main+0x304>
		}
	}
	//----------------------------------------------------------------------------------


	HAL_GPIO_WritePin(PWR_KEY_GPIO_Port, PWR_KEY_Pin, 1);
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	019b      	lsls	r3, r3, #6
 8003b1e:	481a      	ldr	r0, [pc, #104]	; (8003b88 <main+0x3a0>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	0019      	movs	r1, r3
 8003b24:	f005 fccd 	bl	80094c2 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8003b28:	23fa      	movs	r3, #250	; 0xfa
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f005 f979 	bl	8008e24 <HAL_Delay>
	HAL_GPIO_WritePin(PWR_KEY_GPIO_Port, PWR_KEY_Pin, 0);
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	019b      	lsls	r3, r3, #6
 8003b36:	4814      	ldr	r0, [pc, #80]	; (8003b88 <main+0x3a0>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	f005 fcc1 	bl	80094c2 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8003b40:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <main+0x3e0>)
 8003b42:	0018      	movs	r0, r3
 8003b44:	f005 f96e 	bl	8008e24 <HAL_Delay>
	quectel_init();
 8003b48:	f002 fb06 	bl	8006158 <quectel_init>

//	INPUT CAPTURE------
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <main+0x390>)
 8003b4e:	2100      	movs	r1, #0
 8003b50:	0018      	movs	r0, r3
 8003b52:	f007 fc83 	bl	800b45c <HAL_TIM_IC_Start_IT>
//	HAL_TIM_IC_Start_DMA(&htim3, TIM_CHANNEL_1, vals, NUMVAL);
	ab=1;
 8003b56:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <main+0x3e4>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 8003b5c:	e09e      	b.n	8003c9c <main+0x4b4>
			stats = 1;
 8003b5e:	4b1c      	ldr	r3, [pc, #112]	; (8003bd0 <main+0x3e8>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	701a      	strb	r2, [r3, #0]
			while (isReg == 0) {
 8003b64:	e058      	b.n	8003c18 <main+0x430>
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	200003e0 	.word	0x200003e0
 8003b6c:	20000394 	.word	0x20000394
 8003b70:	200006f0 	.word	0x200006f0
 8003b74:	2000050c 	.word	0x2000050c
 8003b78:	20000348 	.word	0x20000348
 8003b7c:	2000042c 	.word	0x2000042c
 8003b80:	200006ec 	.word	0x200006ec
 8003b84:	20000478 	.word	0x20000478
 8003b88:	50000400 	.word	0x50000400
 8003b8c:	200006e4 	.word	0x200006e4
 8003b90:	200006e5 	.word	0x200006e5
 8003b94:	20000cac 	.word	0x20000cac
 8003b98:	20000cae 	.word	0x20000cae
 8003b9c:	20000cb0 	.word	0x20000cb0
 8003ba0:	20000cb2 	.word	0x20000cb2
 8003ba4:	fffffefc 	.word	0xfffffefc
 8003ba8:	20000010 	.word	0x20000010
 8003bac:	20000004 	.word	0x20000004
 8003bb0:	20000034 	.word	0x20000034
 8003bb4:	2000002c 	.word	0x2000002c
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	20000001 	.word	0x20000001
 8003bc0:	200006e6 	.word	0x200006e6
 8003bc4:	200006e0 	.word	0x200006e0
 8003bc8:	00001388 	.word	0x00001388
 8003bcc:	20000cb6 	.word	0x20000cb6
 8003bd0:	20000cb5 	.word	0x20000cb5
				stats = 2;
 8003bd4:	4b70      	ldr	r3, [pc, #448]	; (8003d98 <main+0x5b0>)
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	701a      	strb	r2, [r3, #0]
				// HAL_UART_Transmit(&huart4, "at+creg",
				// sizeof("at+creg"), 100);
				send_command("AT+CREG?\r\n", 3, 3, 5, 1);
 8003bda:	4870      	ldr	r0, [pc, #448]	; (8003d9c <main+0x5b4>)
 8003bdc:	2301      	movs	r3, #1
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2305      	movs	r3, #5
 8003be2:	2203      	movs	r2, #3
 8003be4:	2103      	movs	r1, #3
 8003be6:	f002 fa07 	bl	8005ff8 <send_command>
				if (!isReg) {
 8003bea:	4b6d      	ldr	r3, [pc, #436]	; (8003da0 <main+0x5b8>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d112      	bne.n	8003c18 <main+0x430>
					HAL_Delay(10000);
 8003bf2:	4b6c      	ldr	r3, [pc, #432]	; (8003da4 <main+0x5bc>)
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f005 f915 	bl	8008e24 <HAL_Delay>
					stats = 3;
 8003bfa:	4b67      	ldr	r3, [pc, #412]	; (8003d98 <main+0x5b0>)
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	701a      	strb	r2, [r3, #0]
					rebootCounter++;
 8003c00:	4b69      	ldr	r3, [pc, #420]	; (8003da8 <main+0x5c0>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	3301      	adds	r3, #1
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	4b67      	ldr	r3, [pc, #412]	; (8003da8 <main+0x5c0>)
 8003c0a:	701a      	strb	r2, [r3, #0]
					if (rebootCounter > mainCount) {
 8003c0c:	4b66      	ldr	r3, [pc, #408]	; (8003da8 <main+0x5c0>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b78      	cmp	r3, #120	; 0x78
 8003c12:	d901      	bls.n	8003c18 <main+0x430>
						rebootsystem();
 8003c14:	f002 f86a 	bl	8005cec <rebootsystem>
			while (isReg == 0) {
 8003c18:	4b61      	ldr	r3, [pc, #388]	; (8003da0 <main+0x5b8>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0d9      	beq.n	8003bd4 <main+0x3ec>
					}
				}
			}
			if (estabilish_tcp() == 1) {
 8003c20:	f002 faea 	bl	80061f8 <estabilish_tcp>
 8003c24:	0003      	movs	r3, r0
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d11c      	bne.n	8003c64 <main+0x47c>
				stats = 4;
 8003c2a:	4b5b      	ldr	r3, [pc, #364]	; (8003d98 <main+0x5b0>)
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	701a      	strb	r2, [r3, #0]
				// HAL_UART_Transmit(&huart4, "Loginpacket sending",
				// sizeof("loginpacket sending"), 100);
				send_login_packet();
 8003c30:	f002 fcb4 	bl	800659c <send_login_packet>
				HAL_Delay(5000);
 8003c34:	4b5d      	ldr	r3, [pc, #372]	; (8003dac <main+0x5c4>)
 8003c36:	0018      	movs	r0, r3
 8003c38:	f005 f8f4 	bl	8008e24 <HAL_Delay>
				if (isLoggedIn == 0) {
 8003c3c:	4b5c      	ldr	r3, [pc, #368]	; (8003db0 <main+0x5c8>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d12a      	bne.n	8003c9c <main+0x4b4>
					// HAL_UART_Transmit(&huart4, "Loginpacket sending",
					// sizeof("loginpacket sending"), 100);
					send_login_packet();
 8003c46:	f002 fca9 	bl	800659c <send_login_packet>
					HAL_Delay(5000);
 8003c4a:	4b58      	ldr	r3, [pc, #352]	; (8003dac <main+0x5c4>)
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f005 f8e9 	bl	8008e24 <HAL_Delay>
					if (isLoggedIn == 0) {
 8003c52:	4b57      	ldr	r3, [pc, #348]	; (8003db0 <main+0x5c8>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d11f      	bne.n	8003c9c <main+0x4b4>
						isTcpOpen = 0;
 8003c5c:	4b55      	ldr	r3, [pc, #340]	; (8003db4 <main+0x5cc>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e01b      	b.n	8003c9c <main+0x4b4>
					}
				}
			}
			else {
				stats = 5;
 8003c64:	4b4c      	ldr	r3, [pc, #304]	; (8003d98 <main+0x5b0>)
 8003c66:	2205      	movs	r2, #5
 8003c68:	701a      	strb	r2, [r3, #0]
				recTimeA = 0;
 8003c6a:	4b53      	ldr	r3, [pc, #332]	; (8003db8 <main+0x5d0>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	701a      	strb	r2, [r3, #0]
				while (recTimeA < rTime) { //18 to 180
 8003c70:	e00e      	b.n	8003c90 <main+0x4a8>
					HAL_Delay(1000);
 8003c72:	23fa      	movs	r3, #250	; 0xfa
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	0018      	movs	r0, r3
 8003c78:	f005 f8d4 	bl	8008e24 <HAL_Delay>
					recTimeA++;
 8003c7c:	4b4e      	ldr	r3, [pc, #312]	; (8003db8 <main+0x5d0>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	4b4c      	ldr	r3, [pc, #304]	; (8003db8 <main+0x5d0>)
 8003c86:	701a      	strb	r2, [r3, #0]
					where_api_handler();
 8003c88:	f002 fbb4 	bl	80063f4 <where_api_handler>
					alarm_sender();
 8003c8c:	f002 fbd4 	bl	8006438 <alarm_sender>
				while (recTimeA < rTime) { //18 to 180
 8003c90:	4b49      	ldr	r3, [pc, #292]	; (8003db8 <main+0x5d0>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2bb3      	cmp	r3, #179	; 0xb3
 8003c96:	d9ec      	bls.n	8003c72 <main+0x48a>
				}
				//SEND LOCATION VIA SMS
				//--------------------------------------------------------------------------
				send_location_packet_via_sms();
 8003c98:	f003 fc4e 	bl	8007538 <send_location_packet_via_sms>
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 8003c9c:	4b45      	ldr	r3, [pc, #276]	; (8003db4 <main+0x5cc>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d15f      	bne.n	8003d66 <main+0x57e>
 8003ca6:	4b42      	ldr	r3, [pc, #264]	; (8003db0 <main+0x5c8>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d100      	bne.n	8003cb2 <main+0x4ca>
 8003cb0:	e755      	b.n	8003b5e <main+0x376>
				//--------------------------------------------------------
			}
		}
		while (isTcpOpen == 1 && isLoggedIn == 1 && isDataMode == 1) {
 8003cb2:	e058      	b.n	8003d66 <main+0x57e>
			stats = 7;
 8003cb4:	4b38      	ldr	r3, [pc, #224]	; (8003d98 <main+0x5b0>)
 8003cb6:	2207      	movs	r2, #7
 8003cb8:	701a      	strb	r2, [r3, #0]
			uint8_t tempDelayCounter=0;
 8003cba:	1d3b      	adds	r3, r7, #4
 8003cbc:	33ff      	adds	r3, #255	; 0xff
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
			while(isAlarm == 0){
 8003cc2:	e017      	b.n	8003cf4 <main+0x50c>
				tempDelayCounter++;
 8003cc4:	1d3b      	adds	r3, r7, #4
 8003cc6:	33ff      	adds	r3, #255	; 0xff
 8003cc8:	781a      	ldrb	r2, [r3, #0]
 8003cca:	1d3b      	adds	r3, r7, #4
 8003ccc:	33ff      	adds	r3, #255	; 0xff
 8003cce:	3201      	adds	r2, #1
 8003cd0:	701a      	strb	r2, [r3, #0]
				if(tempDelayCounter>locationDataIntervalA){
 8003cd2:	4b3a      	ldr	r3, [pc, #232]	; (8003dbc <main+0x5d4>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	1d3a      	adds	r2, r7, #4
 8003cd8:	32ff      	adds	r2, #255	; 0xff
 8003cda:	7812      	ldrb	r2, [r2, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d904      	bls.n	8003cea <main+0x502>
					tempDelayCounter=0;
 8003ce0:	1d3b      	adds	r3, r7, #4
 8003ce2:	33ff      	adds	r3, #255	; 0xff
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
					break;
 8003ce8:	e009      	b.n	8003cfe <main+0x516>
				}
				else{
					HAL_Delay(1000);
 8003cea:	23fa      	movs	r3, #250	; 0xfa
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f005 f898 	bl	8008e24 <HAL_Delay>
			while(isAlarm == 0){
 8003cf4:	4b32      	ldr	r3, [pc, #200]	; (8003dc0 <main+0x5d8>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0e2      	beq.n	8003cc4 <main+0x4dc>
				}
			}
			HAL_Delay(1000);
 8003cfe:	23fa      	movs	r3, #250	; 0xfa
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	0018      	movs	r0, r3
 8003d04:	f005 f88e 	bl	8008e24 <HAL_Delay>
//			HAL_Delay(locationDataIntervalA*1000);
			heartBeatTimer++;
 8003d08:	4b2e      	ldr	r3, [pc, #184]	; (8003dc4 <main+0x5dc>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	4b2c      	ldr	r3, [pc, #176]	; (8003dc4 <main+0x5dc>)
 8003d12:	701a      	strb	r2, [r3, #0]
			if (heartBeatTimer > 36) {
 8003d14:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <main+0x5dc>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b24      	cmp	r3, #36	; 0x24
 8003d1a:	d90e      	bls.n	8003d3a <main+0x552>
				stats = 8;
 8003d1c:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <main+0x5b0>)
 8003d1e:	2208      	movs	r2, #8
 8003d20:	701a      	strb	r2, [r3, #0]
				isLoggedIn = 0;
 8003d22:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <main+0x5c8>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
				send_hb_packet();
 8003d28:	f003 f84a 	bl	8006dc0 <send_hb_packet>
				HAL_Delay(10000);
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <main+0x5bc>)
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f005 f878 	bl	8008e24 <HAL_Delay>
				heartBeatTimer = 0;
 8003d34:	4b23      	ldr	r3, [pc, #140]	; (8003dc4 <main+0x5dc>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
			}
			if (isDataMode == 1 && isLoggedIn == 1 && isTcpOpen == 1) {
 8003d3a:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <main+0x5e0>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d110      	bne.n	8003d66 <main+0x57e>
 8003d44:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <main+0x5c8>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d10b      	bne.n	8003d66 <main+0x57e>
 8003d4e:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <main+0x5cc>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d106      	bne.n	8003d66 <main+0x57e>
				stats = 8;
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <main+0x5b0>)
 8003d5a:	2208      	movs	r2, #8
 8003d5c:	701a      	strb	r2, [r3, #0]
				incoming_msg_handler();
 8003d5e:	f002 fbb9 	bl	80064d4 <incoming_msg_handler>
				send_data_packet();
 8003d62:	f002 fc9d 	bl	80066a0 <send_data_packet>
		while (isTcpOpen == 1 && isLoggedIn == 1 && isDataMode == 1) {
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <main+0x5cc>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d109      	bne.n	8003d84 <main+0x59c>
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <main+0x5c8>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d104      	bne.n	8003d84 <main+0x59c>
 8003d7a:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <main+0x5e0>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d097      	beq.n	8003cb4 <main+0x4cc>
			}

		}
		isTcpOpen = 0;
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <main+0x5cc>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	701a      	strb	r2, [r3, #0]
		isLoggedIn = 0;
 8003d8a:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <main+0x5c8>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
		isDataMode = 0;
 8003d90:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <main+0x5e0>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	701a      	strb	r2, [r3, #0]
		while (isTcpOpen == 0 && isLoggedIn == 0) {
 8003d96:	e781      	b.n	8003c9c <main+0x4b4>
 8003d98:	20000cb5 	.word	0x20000cb5
 8003d9c:	08012600 	.word	0x08012600
 8003da0:	200009c5 	.word	0x200009c5
 8003da4:	00002710 	.word	0x00002710
 8003da8:	200006eb 	.word	0x200006eb
 8003dac:	00001388 	.word	0x00001388
 8003db0:	200009c7 	.word	0x200009c7
 8003db4:	200009c4 	.word	0x200009c4
 8003db8:	200006e7 	.word	0x200006e7
 8003dbc:	20000000 	.word	0x20000000
 8003dc0:	200006d0 	.word	0x200006d0
 8003dc4:	200006ea 	.word	0x200006ea
 8003dc8:	20000826 	.word	0x20000826

08003dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dcc:	b590      	push	{r4, r7, lr}
 8003dce:	b093      	sub	sp, #76	; 0x4c
 8003dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dd2:	2414      	movs	r4, #20
 8003dd4:	193b      	adds	r3, r7, r4
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	2334      	movs	r3, #52	; 0x34
 8003dda:	001a      	movs	r2, r3
 8003ddc:	2100      	movs	r1, #0
 8003dde:	f00a f9ba 	bl	800e156 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	0018      	movs	r0, r3
 8003de6:	2310      	movs	r3, #16
 8003de8:	001a      	movs	r2, r3
 8003dea:	2100      	movs	r1, #0
 8003dec:	f00a f9b3 	bl	800e156 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003df0:	2380      	movs	r3, #128	; 0x80
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	0018      	movs	r0, r3
 8003df6:	f005 fb9d 	bl	8009534 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003dfa:	193b      	adds	r3, r7, r4
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e00:	193b      	adds	r3, r7, r4
 8003e02:	2280      	movs	r2, #128	; 0x80
 8003e04:	0052      	lsls	r2, r2, #1
 8003e06:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003e08:	0021      	movs	r1, r4
 8003e0a:	187b      	adds	r3, r7, r1
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e10:	187b      	adds	r3, r7, r1
 8003e12:	2240      	movs	r2, #64	; 0x40
 8003e14:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e16:	187b      	adds	r3, r7, r1
 8003e18:	2202      	movs	r2, #2
 8003e1a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e1c:	187b      	adds	r3, r7, r1
 8003e1e:	2202      	movs	r2, #2
 8003e20:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003e22:	187b      	adds	r3, r7, r1
 8003e24:	2200      	movs	r2, #0
 8003e26:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003e28:	187b      	adds	r3, r7, r1
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	2280      	movs	r2, #128	; 0x80
 8003e32:	0292      	lsls	r2, r2, #10
 8003e34:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003e36:	187b      	adds	r3, r7, r1
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	0592      	lsls	r2, r2, #22
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e3e:	187b      	adds	r3, r7, r1
 8003e40:	0018      	movs	r0, r3
 8003e42:	f005 fbc3 	bl	80095cc <HAL_RCC_OscConfig>
 8003e46:	1e03      	subs	r3, r0, #0
 8003e48:	d001      	beq.n	8003e4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003e4a:	f003 fe97 	bl	8007b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e4e:	1d3b      	adds	r3, r7, #4
 8003e50:	2207      	movs	r2, #7
 8003e52:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e54:	1d3b      	adds	r3, r7, #4
 8003e56:	2202      	movs	r2, #2
 8003e58:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e5a:	1d3b      	adds	r3, r7, #4
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e60:	1d3b      	adds	r3, r7, #4
 8003e62:	2200      	movs	r2, #0
 8003e64:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e66:	1d3b      	adds	r3, r7, #4
 8003e68:	2102      	movs	r1, #2
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f005 febe 	bl	8009bec <HAL_RCC_ClockConfig>
 8003e70:	1e03      	subs	r3, r0, #0
 8003e72:	d001      	beq.n	8003e78 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003e74:	f003 fe82 	bl	8007b7c <Error_Handler>
  }
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b013      	add	sp, #76	; 0x4c
 8003e7e:	bd90      	pop	{r4, r7, pc}

08003e80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003e84:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <MX_SPI1_Init+0x74>)
 8003e86:	4a1c      	ldr	r2, [pc, #112]	; (8003ef8 <MX_SPI1_Init+0x78>)
 8003e88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ef4 <MX_SPI1_Init+0x74>)
 8003e8c:	2282      	movs	r2, #130	; 0x82
 8003e8e:	0052      	lsls	r2, r2, #1
 8003e90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e92:	4b18      	ldr	r3, [pc, #96]	; (8003ef4 <MX_SPI1_Init+0x74>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e98:	4b16      	ldr	r3, [pc, #88]	; (8003ef4 <MX_SPI1_Init+0x74>)
 8003e9a:	22e0      	movs	r2, #224	; 0xe0
 8003e9c:	00d2      	lsls	r2, r2, #3
 8003e9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ea0:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <MX_SPI1_Init+0x74>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ea6:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <MX_SPI1_Init+0x74>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003eac:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <MX_SPI1_Init+0x74>)
 8003eae:	2280      	movs	r2, #128	; 0x80
 8003eb0:	0092      	lsls	r2, r2, #2
 8003eb2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <MX_SPI1_Init+0x74>)
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <MX_SPI1_Init+0x74>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	; (8003ef4 <MX_SPI1_Init+0x74>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <MX_SPI1_Init+0x74>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003ecc:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <MX_SPI1_Init+0x74>)
 8003ece:	2207      	movs	r2, #7
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <MX_SPI1_Init+0x74>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <MX_SPI1_Init+0x74>)
 8003eda:	2208      	movs	r2, #8
 8003edc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <MX_SPI1_Init+0x74>)
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f006 f961 	bl	800a1a8 <HAL_SPI_Init>
 8003ee6:	1e03      	subs	r3, r0, #0
 8003ee8:	d001      	beq.n	8003eee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003eea:	f003 fe47 	bl	8007b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	200002e4 	.word	0x200002e4
 8003ef8:	40013000 	.word	0x40013000

08003efc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08c      	sub	sp, #48	; 0x30
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f02:	2320      	movs	r3, #32
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	0018      	movs	r0, r3
 8003f08:	2310      	movs	r3, #16
 8003f0a:	001a      	movs	r2, r3
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	f00a f922 	bl	800e156 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f12:	2314      	movs	r3, #20
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	0018      	movs	r0, r3
 8003f18:	230c      	movs	r3, #12
 8003f1a:	001a      	movs	r2, r3
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	f00a f91a 	bl	800e156 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003f22:	1d3b      	adds	r3, r7, #4
 8003f24:	0018      	movs	r0, r3
 8003f26:	2310      	movs	r3, #16
 8003f28:	001a      	movs	r2, r3
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	f00a f913 	bl	800e156 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f30:	4b2e      	ldr	r3, [pc, #184]	; (8003fec <MX_TIM3_Init+0xf0>)
 8003f32:	4a2f      	ldr	r2, [pc, #188]	; (8003ff0 <MX_TIM3_Init+0xf4>)
 8003f34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000;
 8003f36:	4b2d      	ldr	r3, [pc, #180]	; (8003fec <MX_TIM3_Init+0xf0>)
 8003f38:	22fa      	movs	r2, #250	; 0xfa
 8003f3a:	0212      	lsls	r2, r2, #8
 8003f3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f3e:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <MX_TIM3_Init+0xf0>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8003f44:	4b29      	ldr	r3, [pc, #164]	; (8003fec <MX_TIM3_Init+0xf0>)
 8003f46:	22fa      	movs	r2, #250	; 0xfa
 8003f48:	0092      	lsls	r2, r2, #2
 8003f4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f4c:	4b27      	ldr	r3, [pc, #156]	; (8003fec <MX_TIM3_Init+0xf0>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f52:	4b26      	ldr	r3, [pc, #152]	; (8003fec <MX_TIM3_Init+0xf0>)
 8003f54:	2280      	movs	r2, #128	; 0x80
 8003f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f58:	4b24      	ldr	r3, [pc, #144]	; (8003fec <MX_TIM3_Init+0xf0>)
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f007 f942 	bl	800b1e4 <HAL_TIM_Base_Init>
 8003f60:	1e03      	subs	r3, r0, #0
 8003f62:	d001      	beq.n	8003f68 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8003f64:	f003 fe0a 	bl	8007b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f68:	2120      	movs	r1, #32
 8003f6a:	187b      	adds	r3, r7, r1
 8003f6c:	2280      	movs	r2, #128	; 0x80
 8003f6e:	0152      	lsls	r2, r2, #5
 8003f70:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f72:	187a      	adds	r2, r7, r1
 8003f74:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <MX_TIM3_Init+0xf0>)
 8003f76:	0011      	movs	r1, r2
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f007 fd77 	bl	800ba6c <HAL_TIM_ConfigClockSource>
 8003f7e:	1e03      	subs	r3, r0, #0
 8003f80:	d001      	beq.n	8003f86 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003f82:	f003 fdfb 	bl	8007b7c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003f86:	4b19      	ldr	r3, [pc, #100]	; (8003fec <MX_TIM3_Init+0xf0>)
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f007 fa07 	bl	800b39c <HAL_TIM_IC_Init>
 8003f8e:	1e03      	subs	r3, r0, #0
 8003f90:	d001      	beq.n	8003f96 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003f92:	f003 fdf3 	bl	8007b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f96:	2114      	movs	r1, #20
 8003f98:	187b      	adds	r3, r7, r1
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f9e:	187b      	adds	r3, r7, r1
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fa4:	187a      	adds	r2, r7, r1
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <MX_TIM3_Init+0xf0>)
 8003fa8:	0011      	movs	r1, r2
 8003faa:	0018      	movs	r0, r3
 8003fac:	f008 f8a2 	bl	800c0f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003fb0:	1e03      	subs	r3, r0, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8003fb4:	f003 fde2 	bl	8007b7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	220a      	movs	r2, #10
 8003fbc:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003fbe:	1d3b      	adds	r3, r7, #4
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8003fca:	1d3b      	adds	r3, r7, #4
 8003fcc:	2200      	movs	r2, #0
 8003fce:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003fd0:	1d39      	adds	r1, r7, #4
 8003fd2:	4b06      	ldr	r3, [pc, #24]	; (8003fec <MX_TIM3_Init+0xf0>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f007 fca4 	bl	800b924 <HAL_TIM_IC_ConfigChannel>
 8003fdc:	1e03      	subs	r3, r0, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8003fe0:	f003 fdcc 	bl	8007b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b00c      	add	sp, #48	; 0x30
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000348 	.word	0x20000348
 8003ff0:	40000400 	.word	0x40000400

08003ff4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	230c      	movs	r3, #12
 8004000:	001a      	movs	r2, r3
 8004002:	2100      	movs	r1, #0
 8004004:	f00a f8a7 	bl	800e156 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004008:	4b15      	ldr	r3, [pc, #84]	; (8004060 <MX_TIM6_Init+0x6c>)
 800400a:	4a16      	ldr	r2, [pc, #88]	; (8004064 <MX_TIM6_Init+0x70>)
 800400c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 6400;
 800400e:	4b14      	ldr	r3, [pc, #80]	; (8004060 <MX_TIM6_Init+0x6c>)
 8004010:	22c8      	movs	r2, #200	; 0xc8
 8004012:	0152      	lsls	r2, r2, #5
 8004014:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004016:	4b12      	ldr	r3, [pc, #72]	; (8004060 <MX_TIM6_Init+0x6c>)
 8004018:	2200      	movs	r2, #0
 800401a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800401c:	4b10      	ldr	r3, [pc, #64]	; (8004060 <MX_TIM6_Init+0x6c>)
 800401e:	4a12      	ldr	r2, [pc, #72]	; (8004068 <MX_TIM6_Init+0x74>)
 8004020:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <MX_TIM6_Init+0x6c>)
 8004024:	2280      	movs	r2, #128	; 0x80
 8004026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004028:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <MX_TIM6_Init+0x6c>)
 800402a:	0018      	movs	r0, r3
 800402c:	f007 f8da 	bl	800b1e4 <HAL_TIM_Base_Init>
 8004030:	1e03      	subs	r3, r0, #0
 8004032:	d001      	beq.n	8004038 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8004034:	f003 fda2 	bl	8007b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004038:	1d3b      	adds	r3, r7, #4
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800403e:	1d3b      	adds	r3, r7, #4
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004044:	1d3a      	adds	r2, r7, #4
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <MX_TIM6_Init+0x6c>)
 8004048:	0011      	movs	r1, r2
 800404a:	0018      	movs	r0, r3
 800404c:	f008 f852 	bl	800c0f4 <HAL_TIMEx_MasterConfigSynchronization>
 8004050:	1e03      	subs	r3, r0, #0
 8004052:	d001      	beq.n	8004058 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8004054:	f003 fd92 	bl	8007b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004058:	46c0      	nop			; (mov r8, r8)
 800405a:	46bd      	mov	sp, r7
 800405c:	b004      	add	sp, #16
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000394 	.word	0x20000394
 8004064:	40001000 	.word	0x40001000
 8004068:	000003e7 	.word	0x000003e7

0800406c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004070:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <MX_TIM14_Init+0x40>)
 8004072:	4a0f      	ldr	r2, [pc, #60]	; (80040b0 <MX_TIM14_Init+0x44>)
 8004074:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 6400;
 8004076:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <MX_TIM14_Init+0x40>)
 8004078:	22c8      	movs	r2, #200	; 0xc8
 800407a:	0152      	lsls	r2, r2, #5
 800407c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800407e:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <MX_TIM14_Init+0x40>)
 8004080:	2200      	movs	r2, #0
 8004082:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <MX_TIM14_Init+0x40>)
 8004086:	4a0b      	ldr	r2, [pc, #44]	; (80040b4 <MX_TIM14_Init+0x48>)
 8004088:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <MX_TIM14_Init+0x40>)
 800408c:	2200      	movs	r2, #0
 800408e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <MX_TIM14_Init+0x40>)
 8004092:	2280      	movs	r2, #128	; 0x80
 8004094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <MX_TIM14_Init+0x40>)
 8004098:	0018      	movs	r0, r3
 800409a:	f007 f8a3 	bl	800b1e4 <HAL_TIM_Base_Init>
 800409e:	1e03      	subs	r3, r0, #0
 80040a0:	d001      	beq.n	80040a6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80040a2:	f003 fd6b 	bl	8007b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	200003e0 	.word	0x200003e0
 80040b0:	40002000 	.word	0x40002000
 80040b4:	0000270f 	.word	0x0000270f

080040b8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <MX_TIM17_Init+0x48>)
 80040be:	4a11      	ldr	r2, [pc, #68]	; (8004104 <MX_TIM17_Init+0x4c>)
 80040c0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6400;
 80040c2:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <MX_TIM17_Init+0x48>)
 80040c4:	22c8      	movs	r2, #200	; 0xc8
 80040c6:	0152      	lsls	r2, r2, #5
 80040c8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ca:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <MX_TIM17_Init+0x48>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4000-1;
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <MX_TIM17_Init+0x48>)
 80040d2:	4a0d      	ldr	r2, [pc, #52]	; (8004108 <MX_TIM17_Init+0x50>)
 80040d4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <MX_TIM17_Init+0x48>)
 80040d8:	2200      	movs	r2, #0
 80040da:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <MX_TIM17_Init+0x48>)
 80040de:	2200      	movs	r2, #0
 80040e0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040e2:	4b07      	ldr	r3, [pc, #28]	; (8004100 <MX_TIM17_Init+0x48>)
 80040e4:	2280      	movs	r2, #128	; 0x80
 80040e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <MX_TIM17_Init+0x48>)
 80040ea:	0018      	movs	r0, r3
 80040ec:	f007 f87a 	bl	800b1e4 <HAL_TIM_Base_Init>
 80040f0:	1e03      	subs	r3, r0, #0
 80040f2:	d001      	beq.n	80040f8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80040f4:	f003 fd42 	bl	8007b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80040f8:	46c0      	nop			; (mov r8, r8)
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	2000042c 	.word	0x2000042c
 8004104:	40014800 	.word	0x40014800
 8004108:	00000f9f 	.word	0x00000f9f

0800410c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004110:	4b23      	ldr	r3, [pc, #140]	; (80041a0 <MX_USART1_UART_Init+0x94>)
 8004112:	4a24      	ldr	r2, [pc, #144]	; (80041a4 <MX_USART1_UART_Init+0x98>)
 8004114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004116:	4b22      	ldr	r3, [pc, #136]	; (80041a0 <MX_USART1_UART_Init+0x94>)
 8004118:	2296      	movs	r2, #150	; 0x96
 800411a:	0192      	lsls	r2, r2, #6
 800411c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800411e:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <MX_USART1_UART_Init+0x94>)
 8004120:	2200      	movs	r2, #0
 8004122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004124:	4b1e      	ldr	r3, [pc, #120]	; (80041a0 <MX_USART1_UART_Init+0x94>)
 8004126:	2200      	movs	r2, #0
 8004128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800412a:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <MX_USART1_UART_Init+0x94>)
 800412c:	2200      	movs	r2, #0
 800412e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004130:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <MX_USART1_UART_Init+0x94>)
 8004132:	220c      	movs	r2, #12
 8004134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004136:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <MX_USART1_UART_Init+0x94>)
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800413c:	4b18      	ldr	r3, [pc, #96]	; (80041a0 <MX_USART1_UART_Init+0x94>)
 800413e:	2200      	movs	r2, #0
 8004140:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004142:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <MX_USART1_UART_Init+0x94>)
 8004144:	2200      	movs	r2, #0
 8004146:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004148:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <MX_USART1_UART_Init+0x94>)
 800414a:	2200      	movs	r2, #0
 800414c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800414e:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <MX_USART1_UART_Init+0x94>)
 8004150:	2200      	movs	r2, #0
 8004152:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <MX_USART1_UART_Init+0x94>)
 8004156:	0018      	movs	r0, r3
 8004158:	f008 f84c 	bl	800c1f4 <HAL_UART_Init>
 800415c:	1e03      	subs	r3, r0, #0
 800415e:	d001      	beq.n	8004164 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004160:	f003 fd0c 	bl	8007b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004164:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <MX_USART1_UART_Init+0x94>)
 8004166:	2100      	movs	r1, #0
 8004168:	0018      	movs	r0, r3
 800416a:	f009 feb5 	bl	800ded8 <HAL_UARTEx_SetTxFifoThreshold>
 800416e:	1e03      	subs	r3, r0, #0
 8004170:	d001      	beq.n	8004176 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004172:	f003 fd03 	bl	8007b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <MX_USART1_UART_Init+0x94>)
 8004178:	2100      	movs	r1, #0
 800417a:	0018      	movs	r0, r3
 800417c:	f009 feec 	bl	800df58 <HAL_UARTEx_SetRxFifoThreshold>
 8004180:	1e03      	subs	r3, r0, #0
 8004182:	d001      	beq.n	8004188 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004184:	f003 fcfa 	bl	8007b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <MX_USART1_UART_Init+0x94>)
 800418a:	0018      	movs	r0, r3
 800418c:	f009 fe6a 	bl	800de64 <HAL_UARTEx_DisableFifoMode>
 8004190:	1e03      	subs	r3, r0, #0
 8004192:	d001      	beq.n	8004198 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004194:	f003 fcf2 	bl	8007b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	20000478 	.word	0x20000478
 80041a4:	40013800 	.word	0x40013800

080041a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80041ac:	4b23      	ldr	r3, [pc, #140]	; (800423c <MX_USART2_UART_Init+0x94>)
 80041ae:	4a24      	ldr	r2, [pc, #144]	; (8004240 <MX_USART2_UART_Init+0x98>)
 80041b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80041b2:	4b22      	ldr	r3, [pc, #136]	; (800423c <MX_USART2_UART_Init+0x94>)
 80041b4:	22e1      	movs	r2, #225	; 0xe1
 80041b6:	0252      	lsls	r2, r2, #9
 80041b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80041ba:	4b20      	ldr	r3, [pc, #128]	; (800423c <MX_USART2_UART_Init+0x94>)
 80041bc:	2200      	movs	r2, #0
 80041be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80041c0:	4b1e      	ldr	r3, [pc, #120]	; (800423c <MX_USART2_UART_Init+0x94>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80041c6:	4b1d      	ldr	r3, [pc, #116]	; (800423c <MX_USART2_UART_Init+0x94>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80041cc:	4b1b      	ldr	r3, [pc, #108]	; (800423c <MX_USART2_UART_Init+0x94>)
 80041ce:	220c      	movs	r2, #12
 80041d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041d2:	4b1a      	ldr	r3, [pc, #104]	; (800423c <MX_USART2_UART_Init+0x94>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80041d8:	4b18      	ldr	r3, [pc, #96]	; (800423c <MX_USART2_UART_Init+0x94>)
 80041da:	2200      	movs	r2, #0
 80041dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041de:	4b17      	ldr	r3, [pc, #92]	; (800423c <MX_USART2_UART_Init+0x94>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041e4:	4b15      	ldr	r3, [pc, #84]	; (800423c <MX_USART2_UART_Init+0x94>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041ea:	4b14      	ldr	r3, [pc, #80]	; (800423c <MX_USART2_UART_Init+0x94>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80041f0:	4b12      	ldr	r3, [pc, #72]	; (800423c <MX_USART2_UART_Init+0x94>)
 80041f2:	0018      	movs	r0, r3
 80041f4:	f007 fffe 	bl	800c1f4 <HAL_UART_Init>
 80041f8:	1e03      	subs	r3, r0, #0
 80041fa:	d001      	beq.n	8004200 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80041fc:	f003 fcbe 	bl	8007b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004200:	4b0e      	ldr	r3, [pc, #56]	; (800423c <MX_USART2_UART_Init+0x94>)
 8004202:	2100      	movs	r1, #0
 8004204:	0018      	movs	r0, r3
 8004206:	f009 fe67 	bl	800ded8 <HAL_UARTEx_SetTxFifoThreshold>
 800420a:	1e03      	subs	r3, r0, #0
 800420c:	d001      	beq.n	8004212 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800420e:	f003 fcb5 	bl	8007b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <MX_USART2_UART_Init+0x94>)
 8004214:	2100      	movs	r1, #0
 8004216:	0018      	movs	r0, r3
 8004218:	f009 fe9e 	bl	800df58 <HAL_UARTEx_SetRxFifoThreshold>
 800421c:	1e03      	subs	r3, r0, #0
 800421e:	d001      	beq.n	8004224 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004220:	f003 fcac 	bl	8007b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004224:	4b05      	ldr	r3, [pc, #20]	; (800423c <MX_USART2_UART_Init+0x94>)
 8004226:	0018      	movs	r0, r3
 8004228:	f009 fe1c 	bl	800de64 <HAL_UARTEx_DisableFifoMode>
 800422c:	1e03      	subs	r3, r0, #0
 800422e:	d001      	beq.n	8004234 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004230:	f003 fca4 	bl	8007b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004234:	46c0      	nop			; (mov r8, r8)
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	2000050c 	.word	0x2000050c
 8004240:	40004400 	.word	0x40004400

08004244 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004248:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <MX_USART3_UART_Init+0x60>)
 800424a:	4a17      	ldr	r2, [pc, #92]	; (80042a8 <MX_USART3_UART_Init+0x64>)
 800424c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800424e:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <MX_USART3_UART_Init+0x60>)
 8004250:	22e1      	movs	r2, #225	; 0xe1
 8004252:	0252      	lsls	r2, r2, #9
 8004254:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004256:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <MX_USART3_UART_Init+0x60>)
 8004258:	2200      	movs	r2, #0
 800425a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800425c:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <MX_USART3_UART_Init+0x60>)
 800425e:	2200      	movs	r2, #0
 8004260:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004262:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <MX_USART3_UART_Init+0x60>)
 8004264:	2200      	movs	r2, #0
 8004266:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004268:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <MX_USART3_UART_Init+0x60>)
 800426a:	220c      	movs	r2, #12
 800426c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <MX_USART3_UART_Init+0x60>)
 8004270:	2200      	movs	r2, #0
 8004272:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <MX_USART3_UART_Init+0x60>)
 8004276:	2200      	movs	r2, #0
 8004278:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800427a:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <MX_USART3_UART_Init+0x60>)
 800427c:	2200      	movs	r2, #0
 800427e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004280:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <MX_USART3_UART_Init+0x60>)
 8004282:	2200      	movs	r2, #0
 8004284:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004286:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <MX_USART3_UART_Init+0x60>)
 8004288:	2200      	movs	r2, #0
 800428a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <MX_USART3_UART_Init+0x60>)
 800428e:	0018      	movs	r0, r3
 8004290:	f007 ffb0 	bl	800c1f4 <HAL_UART_Init>
 8004294:	1e03      	subs	r3, r0, #0
 8004296:	d001      	beq.n	800429c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004298:	f003 fc70 	bl	8007b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800429c:	46c0      	nop			; (mov r8, r8)
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	200005a0 	.word	0x200005a0
 80042a8:	40004800 	.word	0x40004800

080042ac <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80042b0:	4b16      	ldr	r3, [pc, #88]	; (800430c <MX_USART4_UART_Init+0x60>)
 80042b2:	4a17      	ldr	r2, [pc, #92]	; (8004310 <MX_USART4_UART_Init+0x64>)
 80042b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80042b6:	4b15      	ldr	r3, [pc, #84]	; (800430c <MX_USART4_UART_Init+0x60>)
 80042b8:	22e1      	movs	r2, #225	; 0xe1
 80042ba:	0252      	lsls	r2, r2, #9
 80042bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <MX_USART4_UART_Init+0x60>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80042c4:	4b11      	ldr	r3, [pc, #68]	; (800430c <MX_USART4_UART_Init+0x60>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80042ca:	4b10      	ldr	r3, [pc, #64]	; (800430c <MX_USART4_UART_Init+0x60>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80042d0:	4b0e      	ldr	r3, [pc, #56]	; (800430c <MX_USART4_UART_Init+0x60>)
 80042d2:	220c      	movs	r2, #12
 80042d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <MX_USART4_UART_Init+0x60>)
 80042d8:	2200      	movs	r2, #0
 80042da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <MX_USART4_UART_Init+0x60>)
 80042de:	2200      	movs	r2, #0
 80042e0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <MX_USART4_UART_Init+0x60>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80042e8:	4b08      	ldr	r3, [pc, #32]	; (800430c <MX_USART4_UART_Init+0x60>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <MX_USART4_UART_Init+0x60>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <MX_USART4_UART_Init+0x60>)
 80042f6:	0018      	movs	r0, r3
 80042f8:	f007 ff7c 	bl	800c1f4 <HAL_UART_Init>
 80042fc:	1e03      	subs	r3, r0, #0
 80042fe:	d001      	beq.n	8004304 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8004300:	f003 fc3c 	bl	8007b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	20000634 	.word	0x20000634
 8004310:	40004c00 	.word	0x40004c00

08004314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b08b      	sub	sp, #44	; 0x2c
 8004318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800431a:	2414      	movs	r4, #20
 800431c:	193b      	adds	r3, r7, r4
 800431e:	0018      	movs	r0, r3
 8004320:	2314      	movs	r3, #20
 8004322:	001a      	movs	r2, r3
 8004324:	2100      	movs	r1, #0
 8004326:	f009 ff16 	bl	800e156 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800432a:	4b59      	ldr	r3, [pc, #356]	; (8004490 <MX_GPIO_Init+0x17c>)
 800432c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432e:	4b58      	ldr	r3, [pc, #352]	; (8004490 <MX_GPIO_Init+0x17c>)
 8004330:	2120      	movs	r1, #32
 8004332:	430a      	orrs	r2, r1
 8004334:	635a      	str	r2, [r3, #52]	; 0x34
 8004336:	4b56      	ldr	r3, [pc, #344]	; (8004490 <MX_GPIO_Init+0x17c>)
 8004338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433a:	2220      	movs	r2, #32
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004342:	4b53      	ldr	r3, [pc, #332]	; (8004490 <MX_GPIO_Init+0x17c>)
 8004344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004346:	4b52      	ldr	r3, [pc, #328]	; (8004490 <MX_GPIO_Init+0x17c>)
 8004348:	2101      	movs	r1, #1
 800434a:	430a      	orrs	r2, r1
 800434c:	635a      	str	r2, [r3, #52]	; 0x34
 800434e:	4b50      	ldr	r3, [pc, #320]	; (8004490 <MX_GPIO_Init+0x17c>)
 8004350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004352:	2201      	movs	r2, #1
 8004354:	4013      	ands	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800435a:	4b4d      	ldr	r3, [pc, #308]	; (8004490 <MX_GPIO_Init+0x17c>)
 800435c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800435e:	4b4c      	ldr	r3, [pc, #304]	; (8004490 <MX_GPIO_Init+0x17c>)
 8004360:	2102      	movs	r1, #2
 8004362:	430a      	orrs	r2, r1
 8004364:	635a      	str	r2, [r3, #52]	; 0x34
 8004366:	4b4a      	ldr	r3, [pc, #296]	; (8004490 <MX_GPIO_Init+0x17c>)
 8004368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436a:	2202      	movs	r2, #2
 800436c:	4013      	ands	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004372:	4b47      	ldr	r3, [pc, #284]	; (8004490 <MX_GPIO_Init+0x17c>)
 8004374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004376:	4b46      	ldr	r3, [pc, #280]	; (8004490 <MX_GPIO_Init+0x17c>)
 8004378:	2104      	movs	r1, #4
 800437a:	430a      	orrs	r2, r1
 800437c:	635a      	str	r2, [r3, #52]	; 0x34
 800437e:	4b44      	ldr	r3, [pc, #272]	; (8004490 <MX_GPIO_Init+0x17c>)
 8004380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004382:	2204      	movs	r2, #4
 8004384:	4013      	ands	r3, r2
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800438a:	4b41      	ldr	r3, [pc, #260]	; (8004490 <MX_GPIO_Init+0x17c>)
 800438c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800438e:	4b40      	ldr	r3, [pc, #256]	; (8004490 <MX_GPIO_Init+0x17c>)
 8004390:	2108      	movs	r1, #8
 8004392:	430a      	orrs	r2, r1
 8004394:	635a      	str	r2, [r3, #52]	; 0x34
 8004396:	4b3e      	ldr	r3, [pc, #248]	; (8004490 <MX_GPIO_Init+0x17c>)
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439a:	2208      	movs	r2, #8
 800439c:	4013      	ands	r3, r2
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WD_GPIO_Port, WD_Pin, GPIO_PIN_RESET);
 80043a2:	23a0      	movs	r3, #160	; 0xa0
 80043a4:	05db      	lsls	r3, r3, #23
 80043a6:	2200      	movs	r2, #0
 80043a8:	2110      	movs	r1, #16
 80043aa:	0018      	movs	r0, r3
 80043ac:	f005 f889 	bl	80094c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|LED_2_Pin|DCD_Pin|LED_1_Pin
 80043b0:	4938      	ldr	r1, [pc, #224]	; (8004494 <MX_GPIO_Init+0x180>)
 80043b2:	4b39      	ldr	r3, [pc, #228]	; (8004498 <MX_GPIO_Init+0x184>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	0018      	movs	r0, r3
 80043b8:	f005 f883 	bl	80094c2 <HAL_GPIO_WritePin>
                          |PWR_KEY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_CTRL_GPIO_Port, G_CTRL_Pin, GPIO_PIN_SET);
 80043bc:	4b37      	ldr	r3, [pc, #220]	; (800449c <MX_GPIO_Init+0x188>)
 80043be:	2201      	movs	r2, #1
 80043c0:	2102      	movs	r1, #2
 80043c2:	0018      	movs	r0, r3
 80043c4:	f005 f87d 	bl	80094c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Q_CTRL_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 80043c8:	4b34      	ldr	r3, [pc, #208]	; (800449c <MX_GPIO_Init+0x188>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	210c      	movs	r1, #12
 80043ce:	0018      	movs	r0, r3
 80043d0:	f005 f877 	bl	80094c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WD_Pin */
  GPIO_InitStruct.Pin = WD_Pin;
 80043d4:	193b      	adds	r3, r7, r4
 80043d6:	2210      	movs	r2, #16
 80043d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043da:	193b      	adds	r3, r7, r4
 80043dc:	2201      	movs	r2, #1
 80043de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e0:	193b      	adds	r3, r7, r4
 80043e2:	2200      	movs	r2, #0
 80043e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e6:	193b      	adds	r3, r7, r4
 80043e8:	2200      	movs	r2, #0
 80043ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(WD_GPIO_Port, &GPIO_InitStruct);
 80043ec:	193a      	adds	r2, r7, r4
 80043ee:	23a0      	movs	r3, #160	; 0xa0
 80043f0:	05db      	lsls	r3, r3, #23
 80043f2:	0011      	movs	r1, r2
 80043f4:	0018      	movs	r0, r3
 80043f6:	f004 fee3 	bl	80091c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT_1_Pin LED_2_Pin DCD_Pin LED_1_Pin
                           PWR_KEY_Pin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|LED_2_Pin|DCD_Pin|LED_1_Pin
 80043fa:	193b      	adds	r3, r7, r4
 80043fc:	4a25      	ldr	r2, [pc, #148]	; (8004494 <MX_GPIO_Init+0x180>)
 80043fe:	601a      	str	r2, [r3, #0]
                          |PWR_KEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004400:	193b      	adds	r3, r7, r4
 8004402:	2201      	movs	r2, #1
 8004404:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004406:	193b      	adds	r3, r7, r4
 8004408:	2200      	movs	r2, #0
 800440a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440c:	193b      	adds	r3, r7, r4
 800440e:	2200      	movs	r2, #0
 8004410:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004412:	193b      	adds	r3, r7, r4
 8004414:	4a20      	ldr	r2, [pc, #128]	; (8004498 <MX_GPIO_Init+0x184>)
 8004416:	0019      	movs	r1, r3
 8004418:	0010      	movs	r0, r2
 800441a:	f004 fed1 	bl	80091c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DTR_Pin */
  GPIO_InitStruct.Pin = DTR_Pin;
 800441e:	0021      	movs	r1, r4
 8004420:	187b      	adds	r3, r7, r1
 8004422:	2280      	movs	r2, #128	; 0x80
 8004424:	00d2      	lsls	r2, r2, #3
 8004426:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004428:	000c      	movs	r4, r1
 800442a:	193b      	adds	r3, r7, r4
 800442c:	2200      	movs	r2, #0
 800442e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004430:	193b      	adds	r3, r7, r4
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DTR_GPIO_Port, &GPIO_InitStruct);
 8004436:	193b      	adds	r3, r7, r4
 8004438:	4a17      	ldr	r2, [pc, #92]	; (8004498 <MX_GPIO_Init+0x184>)
 800443a:	0019      	movs	r1, r3
 800443c:	0010      	movs	r0, r2
 800443e:	f004 febf 	bl	80091c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_1_Pin */
  GPIO_InitStruct.Pin = INPUT_1_Pin;
 8004442:	193b      	adds	r3, r7, r4
 8004444:	2280      	movs	r2, #128	; 0x80
 8004446:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004448:	193b      	adds	r3, r7, r4
 800444a:	2200      	movs	r2, #0
 800444c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800444e:	193b      	adds	r3, r7, r4
 8004450:	2201      	movs	r2, #1
 8004452:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INPUT_1_GPIO_Port, &GPIO_InitStruct);
 8004454:	193b      	adds	r3, r7, r4
 8004456:	4a12      	ldr	r2, [pc, #72]	; (80044a0 <MX_GPIO_Init+0x18c>)
 8004458:	0019      	movs	r1, r3
 800445a:	0010      	movs	r0, r2
 800445c:	f004 feb0 	bl	80091c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_CTRL_Pin Q_CTRL_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = G_CTRL_Pin|Q_CTRL_Pin|FLASH_CS_Pin;
 8004460:	0021      	movs	r1, r4
 8004462:	187b      	adds	r3, r7, r1
 8004464:	220e      	movs	r2, #14
 8004466:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004468:	187b      	adds	r3, r7, r1
 800446a:	2201      	movs	r2, #1
 800446c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446e:	187b      	adds	r3, r7, r1
 8004470:	2200      	movs	r2, #0
 8004472:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004474:	187b      	adds	r3, r7, r1
 8004476:	2200      	movs	r2, #0
 8004478:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800447a:	187b      	adds	r3, r7, r1
 800447c:	4a07      	ldr	r2, [pc, #28]	; (800449c <MX_GPIO_Init+0x188>)
 800447e:	0019      	movs	r1, r3
 8004480:	0010      	movs	r0, r2
 8004482:	f004 fe9d 	bl	80091c0 <HAL_GPIO_Init>

}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	46bd      	mov	sp, r7
 800448a:	b00b      	add	sp, #44	; 0x2c
 800448c:	bd90      	pop	{r4, r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	40021000 	.word	0x40021000
 8004494:	00003806 	.word	0x00003806
 8004498:	50000400 	.word	0x50000400
 800449c:	50000c00 	.word	0x50000c00
 80044a0:	50000800 	.word	0x50000800

080044a4 <HAL_UART_ErrorCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a12      	ldr	r2, [pc, #72]	; (80044fc <HAL_UART_ErrorCallback+0x58>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d10c      	bne.n	80044d0 <HAL_UART_ErrorCallback+0x2c>
		if(huart->ErrorCode != HAL_UART_ERROR_NONE){
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2290      	movs	r2, #144	; 0x90
 80044ba:	589b      	ldr	r3, [r3, r2]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <HAL_UART_ErrorCallback+0x2c>
			MX_USART2_UART_Init();
 80044c0:	f7ff fe72 	bl	80041a8 <MX_USART2_UART_Init>
			HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 80044c4:	490e      	ldr	r1, [pc, #56]	; (8004500 <HAL_UART_ErrorCallback+0x5c>)
 80044c6:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <HAL_UART_ErrorCallback+0x60>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	0018      	movs	r0, r3
 80044cc:	f007 ff84 	bl	800c3d8 <HAL_UART_Receive_IT>
		}
	}
	if (huart->Instance == USART1) {
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a0c      	ldr	r2, [pc, #48]	; (8004508 <HAL_UART_ErrorCallback+0x64>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d10c      	bne.n	80044f4 <HAL_UART_ErrorCallback+0x50>
		if(huart->ErrorCode != HAL_UART_ERROR_NONE){
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2290      	movs	r2, #144	; 0x90
 80044de:	589b      	ldr	r3, [r3, r2]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <HAL_UART_ErrorCallback+0x50>
			MX_USART1_UART_Init();
 80044e4:	f7ff fe12 	bl	800410c <MX_USART1_UART_Init>
			HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 80044e8:	4908      	ldr	r1, [pc, #32]	; (800450c <HAL_UART_ErrorCallback+0x68>)
 80044ea:	4b09      	ldr	r3, [pc, #36]	; (8004510 <HAL_UART_ErrorCallback+0x6c>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	0018      	movs	r0, r3
 80044f0:	f007 ff72 	bl	800c3d8 <HAL_UART_Receive_IT>
		}
	}
}
 80044f4:	46c0      	nop			; (mov r8, r8)
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b002      	add	sp, #8
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40004400 	.word	0x40004400
 8004500:	200006f0 	.word	0x200006f0
 8004504:	2000050c 	.word	0x2000050c
 8004508:	40013800 	.word	0x40013800
 800450c:	200006ec 	.word	0x200006ec
 8004510:	20000478 	.word	0x20000478

08004514 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004514:	b590      	push	{r4, r7, lr}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]

	//------------------------------------------------------------------
	if (huart == &GNSS_PORT) {
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	4b5a      	ldr	r3, [pc, #360]	; (8004688 <HAL_UART_RxCpltCallback+0x174>)
 8004520:	429a      	cmp	r2, r3
 8004522:	d152      	bne.n	80045ca <HAL_UART_RxCpltCallback+0xb6>
		// Incoming data from GNSS, receiving single byte
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 8004524:	4959      	ldr	r1, [pc, #356]	; (800468c <HAL_UART_RxCpltCallback+0x178>)
 8004526:	4b58      	ldr	r3, [pc, #352]	; (8004688 <HAL_UART_RxCpltCallback+0x174>)
 8004528:	2201      	movs	r2, #1
 800452a:	0018      	movs	r0, r3
 800452c:	f007 ff54 	bl	800c3d8 <HAL_UART_Receive_IT>
		if (isGNSSTimStart == 0) {
 8004530:	4b57      	ldr	r3, [pc, #348]	; (8004690 <HAL_UART_RxCpltCallback+0x17c>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d106      	bne.n	8004546 <HAL_UART_RxCpltCallback+0x32>
			isGNSSTimStart = 1;
 8004538:	4b55      	ldr	r3, [pc, #340]	; (8004690 <HAL_UART_RxCpltCallback+0x17c>)
 800453a:	2201      	movs	r2, #1
 800453c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim17);
 800453e:	4b55      	ldr	r3, [pc, #340]	; (8004694 <HAL_UART_RxCpltCallback+0x180>)
 8004540:	0018      	movs	r0, r3
 8004542:	f006 fea7 	bl	800b294 <HAL_TIM_Base_Start_IT>
		}
		TIM17->CNT &= 0x0;
 8004546:	4b54      	ldr	r3, [pc, #336]	; (8004698 <HAL_UART_RxCpltCallback+0x184>)
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	4b53      	ldr	r3, [pc, #332]	; (8004698 <HAL_UART_RxCpltCallback+0x184>)
 800454c:	2200      	movs	r2, #0
 800454e:	625a      	str	r2, [r3, #36]	; 0x24
		if(GNSS_BUFFER[0] != NULL){
 8004550:	4b4e      	ldr	r3, [pc, #312]	; (800468c <HAL_UART_RxCpltCallback+0x178>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d038      	beq.n	80045ca <HAL_UART_RxCpltCallback+0xb6>
			nmeaResponse[nmeaLC][nmeaCC] = GNSS_BUFFER[0];
 8004558:	4b50      	ldr	r3, [pc, #320]	; (800469c <HAL_UART_RxCpltCallback+0x188>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	0019      	movs	r1, r3
 8004560:	4b4f      	ldr	r3, [pc, #316]	; (80046a0 <HAL_UART_RxCpltCallback+0x18c>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	0018      	movs	r0, r3
 8004568:	4b48      	ldr	r3, [pc, #288]	; (800468c <HAL_UART_RxCpltCallback+0x178>)
 800456a:	781c      	ldrb	r4, [r3, #0]
 800456c:	4a4d      	ldr	r2, [pc, #308]	; (80046a4 <HAL_UART_RxCpltCallback+0x190>)
 800456e:	000b      	movs	r3, r1
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	185b      	adds	r3, r3, r1
 8004574:	0119      	lsls	r1, r3, #4
 8004576:	185b      	adds	r3, r3, r1
 8004578:	18d3      	adds	r3, r2, r3
 800457a:	1c22      	adds	r2, r4, #0
 800457c:	541a      	strb	r2, [r3, r0]
			if (GNSS_BUFFER[0] == '\n') {
 800457e:	4b43      	ldr	r3, [pc, #268]	; (800468c <HAL_UART_RxCpltCallback+0x178>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b0a      	cmp	r3, #10
 8004584:	d112      	bne.n	80045ac <HAL_UART_RxCpltCallback+0x98>
				nmeaLC++;
 8004586:	4b45      	ldr	r3, [pc, #276]	; (800469c <HAL_UART_RxCpltCallback+0x188>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	3301      	adds	r3, #1
 800458e:	b2da      	uxtb	r2, r3
 8004590:	4b42      	ldr	r3, [pc, #264]	; (800469c <HAL_UART_RxCpltCallback+0x188>)
 8004592:	701a      	strb	r2, [r3, #0]
				if (nmeaLC > NMEA_MAX_LINES - 1) {
 8004594:	4b41      	ldr	r3, [pc, #260]	; (800469c <HAL_UART_RxCpltCallback+0x188>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b03      	cmp	r3, #3
 800459c:	d902      	bls.n	80045a4 <HAL_UART_RxCpltCallback+0x90>
					nmeaLC = NMEA_MAX_LINES -1;
 800459e:	4b3f      	ldr	r3, [pc, #252]	; (800469c <HAL_UART_RxCpltCallback+0x188>)
 80045a0:	2203      	movs	r2, #3
 80045a2:	701a      	strb	r2, [r3, #0]
				}
				nmeaCC = 0;
 80045a4:	4b3e      	ldr	r3, [pc, #248]	; (80046a0 <HAL_UART_RxCpltCallback+0x18c>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	701a      	strb	r2, [r3, #0]
 80045aa:	e00e      	b.n	80045ca <HAL_UART_RxCpltCallback+0xb6>
			} else {
				nmeaCC++;
 80045ac:	4b3c      	ldr	r3, [pc, #240]	; (80046a0 <HAL_UART_RxCpltCallback+0x18c>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	3301      	adds	r3, #1
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	4b3a      	ldr	r3, [pc, #232]	; (80046a0 <HAL_UART_RxCpltCallback+0x18c>)
 80045b8:	701a      	strb	r2, [r3, #0]
				if (nmeaCC > NMEA_MAX_CHARS - 1) {
 80045ba:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <HAL_UART_RxCpltCallback+0x18c>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b54      	cmp	r3, #84	; 0x54
 80045c2:	d902      	bls.n	80045ca <HAL_UART_RxCpltCallback+0xb6>
					nmeaCC = 0;
 80045c4:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <HAL_UART_RxCpltCallback+0x18c>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]

		}
	}
	//------------------------------------------------------------------

	if (huart == &AT_PORT) {
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <HAL_UART_RxCpltCallback+0x194>)
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d155      	bne.n	800467e <HAL_UART_RxCpltCallback+0x16a>
		recResponse = 1;
 80045d2:	4b36      	ldr	r3, [pc, #216]	; (80046ac <HAL_UART_RxCpltCallback+0x198>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	701a      	strb	r2, [r3, #0]
		if (isStart == 0) {
 80045d8:	4b35      	ldr	r3, [pc, #212]	; (80046b0 <HAL_UART_RxCpltCallback+0x19c>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10b      	bne.n	80045fa <HAL_UART_RxCpltCallback+0xe6>
			isStart = 1;
 80045e2:	4b33      	ldr	r3, [pc, #204]	; (80046b0 <HAL_UART_RxCpltCallback+0x19c>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
			FIX_TIMER_TRIGGER(&htim6);
 80045e8:	4b32      	ldr	r3, [pc, #200]	; (80046b4 <HAL_UART_RxCpltCallback+0x1a0>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2202      	movs	r2, #2
 80045ee:	4252      	negs	r2, r2
 80045f0:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim6);
 80045f2:	4b30      	ldr	r3, [pc, #192]	; (80046b4 <HAL_UART_RxCpltCallback+0x1a0>)
 80045f4:	0018      	movs	r0, r3
 80045f6:	f006 fe4d 	bl	800b294 <HAL_TIM_Base_Start_IT>
		}
		TIM16->CNT &= 0x0;
 80045fa:	4b2f      	ldr	r3, [pc, #188]	; (80046b8 <HAL_UART_RxCpltCallback+0x1a4>)
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	4b2e      	ldr	r3, [pc, #184]	; (80046b8 <HAL_UART_RxCpltCallback+0x1a4>)
 8004600:	2200      	movs	r2, #0
 8004602:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_UART_Receive_IT(&AT_PORT, AT_BUFFER, 1);
 8004604:	492d      	ldr	r1, [pc, #180]	; (80046bc <HAL_UART_RxCpltCallback+0x1a8>)
 8004606:	4b28      	ldr	r3, [pc, #160]	; (80046a8 <HAL_UART_RxCpltCallback+0x194>)
 8004608:	2201      	movs	r2, #1
 800460a:	0018      	movs	r0, r3
 800460c:	f007 fee4 	bl	800c3d8 <HAL_UART_Receive_IT>
		if (AT_BUFFER[0] == '\n') {
 8004610:	4b2a      	ldr	r3, [pc, #168]	; (80046bc <HAL_UART_RxCpltCallback+0x1a8>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b0a      	cmp	r3, #10
 8004616:	d113      	bne.n	8004640 <HAL_UART_RxCpltCallback+0x12c>
			if (lineCount > RESPONSE_MAX_LINE - 2) {
 8004618:	4b29      	ldr	r3, [pc, #164]	; (80046c0 <HAL_UART_RxCpltCallback+0x1ac>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b04      	cmp	r3, #4
 8004620:	d903      	bls.n	800462a <HAL_UART_RxCpltCallback+0x116>
				lineCount = 0;
 8004622:	4b27      	ldr	r3, [pc, #156]	; (80046c0 <HAL_UART_RxCpltCallback+0x1ac>)
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
 8004628:	e006      	b.n	8004638 <HAL_UART_RxCpltCallback+0x124>
			} else {
				lineCount++;
 800462a:	4b25      	ldr	r3, [pc, #148]	; (80046c0 <HAL_UART_RxCpltCallback+0x1ac>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	3301      	adds	r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <HAL_UART_RxCpltCallback+0x1ac>)
 8004636:	701a      	strb	r2, [r3, #0]
			}
			charCount = 0;
 8004638:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <HAL_UART_RxCpltCallback+0x1b0>)
 800463a:	2200      	movs	r2, #0
 800463c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//-----------------------------------------------------------------------------

}
 800463e:	e01e      	b.n	800467e <HAL_UART_RxCpltCallback+0x16a>
			responseBuffer[lineCount][charCount] = AT_BUFFER[0];
 8004640:	4b1f      	ldr	r3, [pc, #124]	; (80046c0 <HAL_UART_RxCpltCallback+0x1ac>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	001c      	movs	r4, r3
 8004648:	4b1e      	ldr	r3, [pc, #120]	; (80046c4 <HAL_UART_RxCpltCallback+0x1b0>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	0019      	movs	r1, r3
 8004650:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <HAL_UART_RxCpltCallback+0x1a8>)
 8004652:	7818      	ldrb	r0, [r3, #0]
 8004654:	4a1c      	ldr	r2, [pc, #112]	; (80046c8 <HAL_UART_RxCpltCallback+0x1b4>)
 8004656:	2332      	movs	r3, #50	; 0x32
 8004658:	4363      	muls	r3, r4
 800465a:	18d3      	adds	r3, r2, r3
 800465c:	1c02      	adds	r2, r0, #0
 800465e:	545a      	strb	r2, [r3, r1]
			charCount++;
 8004660:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <HAL_UART_RxCpltCallback+0x1b0>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	3301      	adds	r3, #1
 8004668:	b2da      	uxtb	r2, r3
 800466a:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <HAL_UART_RxCpltCallback+0x1b0>)
 800466c:	701a      	strb	r2, [r3, #0]
			if (lineCount > RESPONSE_MAX_CHAR - 2) {
 800466e:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <HAL_UART_RxCpltCallback+0x1ac>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b30      	cmp	r3, #48	; 0x30
 8004676:	d902      	bls.n	800467e <HAL_UART_RxCpltCallback+0x16a>
				charCount = 0;
 8004678:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <HAL_UART_RxCpltCallback+0x1b0>)
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	b003      	add	sp, #12
 8004684:	bd90      	pop	{r4, r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	2000050c 	.word	0x2000050c
 800468c:	200006f0 	.word	0x200006f0
 8004690:	2000082a 	.word	0x2000082a
 8004694:	2000042c 	.word	0x2000042c
 8004698:	40014800 	.word	0x40014800
 800469c:	20000822 	.word	0x20000822
 80046a0:	20000823 	.word	0x20000823
 80046a4:	20000870 	.word	0x20000870
 80046a8:	20000478 	.word	0x20000478
 80046ac:	2000082d 	.word	0x2000082d
 80046b0:	20000824 	.word	0x20000824
 80046b4:	20000394 	.word	0x20000394
 80046b8:	40014400 	.word	0x40014400
 80046bc:	200006ec 	.word	0x200006ec
 80046c0:	20000820 	.word	0x20000820
 80046c4:	20000821 	.word	0x20000821
 80046c8:	200006f4 	.word	0x200006f4

080046cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80046cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ce:	46c6      	mov	lr, r8
 80046d0:	b500      	push	{lr}
 80046d2:	b0ce      	sub	sp, #312	; 0x138
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	61f8      	str	r0, [r7, #28]

	if (htim == &htim14) {
 80046d8:	69fa      	ldr	r2, [r7, #28]
 80046da:	4baf      	ldr	r3, [pc, #700]	; (8004998 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80046dc:	429a      	cmp	r2, r3
 80046de:	d14c      	bne.n	800477a <HAL_TIM_PeriodElapsedCallback+0xae>
		//watchdog timer

		//check acc input for 2 seconds, and raise flag if its on otherwise off.
		if(HAL_GPIO_ReadPin(INPUT_1_GPIO_Port, INPUT_1_Pin)){
 80046e0:	4bae      	ldr	r3, [pc, #696]	; (800499c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80046e2:	2180      	movs	r1, #128	; 0x80
 80046e4:	0018      	movs	r0, r3
 80046e6:	f004 fecf 	bl	8009488 <HAL_GPIO_ReadPin>
 80046ea:	1e03      	subs	r3, r0, #0
 80046ec:	d015      	beq.n	800471a <HAL_TIM_PeriodElapsedCallback+0x4e>
			accInputHigh++;
 80046ee:	4bac      	ldr	r3, [pc, #688]	; (80049a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	3301      	adds	r3, #1
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	4ba9      	ldr	r3, [pc, #676]	; (80049a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80046fa:	701a      	strb	r2, [r3, #0]
			accInputLow=0;
 80046fc:	4ba9      	ldr	r3, [pc, #676]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80046fe:	2200      	movs	r2, #0
 8004700:	701a      	strb	r2, [r3, #0]
			if(accInputHigh > MAX_INPUT_COUNTS){
 8004702:	4ba7      	ldr	r3, [pc, #668]	; (80049a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d91b      	bls.n	8004744 <HAL_TIM_PeriodElapsedCallback+0x78>
				accInputHigh =0;
 800470c:	4ba4      	ldr	r3, [pc, #656]	; (80049a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800470e:	2200      	movs	r2, #0
 8004710:	701a      	strb	r2, [r3, #0]
				accInputState = 1;
 8004712:	4ba5      	ldr	r3, [pc, #660]	; (80049a8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004714:	2201      	movs	r2, #1
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	e014      	b.n	8004744 <HAL_TIM_PeriodElapsedCallback+0x78>
				}
			}
		else{
			accInputLow++;
 800471a:	4ba2      	ldr	r3, [pc, #648]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	3301      	adds	r3, #1
 8004722:	b2da      	uxtb	r2, r3
 8004724:	4b9f      	ldr	r3, [pc, #636]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004726:	701a      	strb	r2, [r3, #0]
			accInputHigh=0;
 8004728:	4b9d      	ldr	r3, [pc, #628]	; (80049a0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
			if(accInputLow > MAX_INPUT_COUNTS){
 800472e:	4b9d      	ldr	r3, [pc, #628]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d905      	bls.n	8004744 <HAL_TIM_PeriodElapsedCallback+0x78>
				accInputLow =0;
 8004738:	4b9a      	ldr	r3, [pc, #616]	; (80049a4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800473a:	2200      	movs	r2, #0
 800473c:	701a      	strb	r2, [r3, #0]
				accInputState = 0;
 800473e:	4b9a      	ldr	r3, [pc, #616]	; (80049a8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
			}
		}
		if(accInputState != accInputStatex){
 8004744:	4b98      	ldr	r3, [pc, #608]	; (80049a8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	b2da      	uxtb	r2, r3
 800474a:	4b98      	ldr	r3, [pc, #608]	; (80049ac <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	429a      	cmp	r2, r3
 8004752:	d007      	beq.n	8004764 <HAL_TIM_PeriodElapsedCallback+0x98>
			isAlarm = 1;
 8004754:	4b96      	ldr	r3, [pc, #600]	; (80049b0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8004756:	2201      	movs	r2, #1
 8004758:	701a      	strb	r2, [r3, #0]
			accInputStatex=accInputState;
 800475a:	4b93      	ldr	r3, [pc, #588]	; (80049a8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	b2da      	uxtb	r2, r3
 8004760:	4b92      	ldr	r3, [pc, #584]	; (80049ac <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004762:	701a      	strb	r2, [r3, #0]
		}
		//---------------------------------------------------------------------------

		HAL_GPIO_TogglePin(WD_GPIO_Port, WD_Pin);
 8004764:	23a0      	movs	r3, #160	; 0xa0
 8004766:	05db      	lsls	r3, r3, #23
 8004768:	2110      	movs	r1, #16
 800476a:	0018      	movs	r0, r3
 800476c:	f004 fec6 	bl	80094fc <HAL_GPIO_TogglePin>
		hangCounter++;
 8004770:	4b90      	ldr	r3, [pc, #576]	; (80049b4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	4b8f      	ldr	r3, [pc, #572]	; (80049b4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8004778:	601a      	str	r2, [r3, #0]
		if(hangCounter>25){
			//if system hangs for more than 10 seconds.
//			NVIC_SystemReset();
		}
	}
	if (htim == &htim6) {
 800477a:	69fa      	ldr	r2, [r7, #28]
 800477c:	4b8e      	ldr	r3, [pc, #568]	; (80049b8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800477e:	429a      	cmp	r2, r3
 8004780:	d001      	beq.n	8004786 <HAL_TIM_PeriodElapsedCallback+0xba>
 8004782:	f001 f98f 	bl	8005aa4 <HAL_TIM_PeriodElapsedCallback+0x13d8>
//		HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
//		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
		// AT PORT TIMER
		char tResponse = '0';
 8004786:	2320      	movs	r3, #32
 8004788:	33ff      	adds	r3, #255	; 0xff
 800478a:	2018      	movs	r0, #24
 800478c:	181b      	adds	r3, r3, r0
 800478e:	19db      	adds	r3, r3, r7
 8004790:	2230      	movs	r2, #48	; 0x30
 8004792:	701a      	strb	r2, [r3, #0]
		//todo
		//---- server response check
		if (responseBuffer[0][0] == 0x78 && responseBuffer[0][1] == 0x78) {
 8004794:	4b89      	ldr	r3, [pc, #548]	; (80049bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b78      	cmp	r3, #120	; 0x78
 800479a:	d000      	beq.n	800479e <HAL_TIM_PeriodElapsedCallback+0xd2>
 800479c:	e0cc      	b.n	8004938 <HAL_TIM_PeriodElapsedCallback+0x26c>
 800479e:	4b87      	ldr	r3, [pc, #540]	; (80049bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80047a0:	785b      	ldrb	r3, [r3, #1]
 80047a2:	2b78      	cmp	r3, #120	; 0x78
 80047a4:	d000      	beq.n	80047a8 <HAL_TIM_PeriodElapsedCallback+0xdc>
 80047a6:	e0c7      	b.n	8004938 <HAL_TIM_PeriodElapsedCallback+0x26c>
 80047a8:	466b      	mov	r3, sp
 80047aa:	4698      	mov	r8, r3
			// HAL_UART_Transmit(&huart4, "Res rec server",
			// sizeof("Res rec server"), 100);
			uint8_t c = responseBuffer[0][2];
 80047ac:	21f3      	movs	r1, #243	; 0xf3
 80047ae:	180b      	adds	r3, r1, r0
 80047b0:	19db      	adds	r3, r3, r7
 80047b2:	4a82      	ldr	r2, [pc, #520]	; (80049bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80047b4:	7892      	ldrb	r2, [r2, #2]
 80047b6:	701a      	strb	r2, [r3, #0]
			uint8_t tempCrcData[c - 1];
 80047b8:	180b      	adds	r3, r1, r0
 80047ba:	19db      	adds	r3, r3, r7
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	3b01      	subs	r3, #1
 80047c0:	1e5a      	subs	r2, r3, #1
 80047c2:	21ec      	movs	r1, #236	; 0xec
 80047c4:	1809      	adds	r1, r1, r0
 80047c6:	19c9      	adds	r1, r1, r7
 80047c8:	600a      	str	r2, [r1, #0]
 80047ca:	001a      	movs	r2, r3
 80047cc:	60ba      	str	r2, [r7, #8]
 80047ce:	2200      	movs	r2, #0
 80047d0:	60fa      	str	r2, [r7, #12]
 80047d2:	68b8      	ldr	r0, [r7, #8]
 80047d4:	68f9      	ldr	r1, [r7, #12]
 80047d6:	0002      	movs	r2, r0
 80047d8:	0f52      	lsrs	r2, r2, #29
 80047da:	000e      	movs	r6, r1
 80047dc:	00f6      	lsls	r6, r6, #3
 80047de:	617e      	str	r6, [r7, #20]
 80047e0:	697e      	ldr	r6, [r7, #20]
 80047e2:	4316      	orrs	r6, r2
 80047e4:	617e      	str	r6, [r7, #20]
 80047e6:	0002      	movs	r2, r0
 80047e8:	00d2      	lsls	r2, r2, #3
 80047ea:	613a      	str	r2, [r7, #16]
 80047ec:	001a      	movs	r2, r3
 80047ee:	603a      	str	r2, [r7, #0]
 80047f0:	2200      	movs	r2, #0
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	6838      	ldr	r0, [r7, #0]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	0002      	movs	r2, r0
 80047fa:	0f52      	lsrs	r2, r2, #29
 80047fc:	000e      	movs	r6, r1
 80047fe:	00f5      	lsls	r5, r6, #3
 8004800:	4315      	orrs	r5, r2
 8004802:	0002      	movs	r2, r0
 8004804:	00d4      	lsls	r4, r2, #3
 8004806:	001a      	movs	r2, r3
 8004808:	3207      	adds	r2, #7
 800480a:	08d2      	lsrs	r2, r2, #3
 800480c:	00d2      	lsls	r2, r2, #3
 800480e:	4669      	mov	r1, sp
 8004810:	1a8a      	subs	r2, r1, r2
 8004812:	4695      	mov	sp, r2
 8004814:	466a      	mov	r2, sp
 8004816:	3200      	adds	r2, #0
 8004818:	21e8      	movs	r1, #232	; 0xe8
 800481a:	2018      	movs	r0, #24
 800481c:	1809      	adds	r1, r1, r0
 800481e:	19c9      	adds	r1, r1, r7
 8004820:	600a      	str	r2, [r1, #0]
			uint16_t crcResult = 0;
 8004822:	22e6      	movs	r2, #230	; 0xe6
 8004824:	1812      	adds	r2, r2, r0
 8004826:	19d2      	adds	r2, r2, r7
 8004828:	2100      	movs	r1, #0
 800482a:	8011      	strh	r1, [r2, #0]
			for (uint8_t i = 2; i < c + 1; i++) {
 800482c:	228f      	movs	r2, #143	; 0x8f
 800482e:	0052      	lsls	r2, r2, #1
 8004830:	1812      	adds	r2, r2, r0
 8004832:	19d2      	adds	r2, r2, r7
 8004834:	2102      	movs	r1, #2
 8004836:	7011      	strb	r1, [r2, #0]
 8004838:	e017      	b.n	800486a <HAL_TIM_PeriodElapsedCallback+0x19e>
				tempCrcData[i - 2] = responseBuffer[0][i];
 800483a:	248f      	movs	r4, #143	; 0x8f
 800483c:	0064      	lsls	r4, r4, #1
 800483e:	2518      	movs	r5, #24
 8004840:	1962      	adds	r2, r4, r5
 8004842:	19d2      	adds	r2, r2, r7
 8004844:	7811      	ldrb	r1, [r2, #0]
 8004846:	1962      	adds	r2, r4, r5
 8004848:	19d2      	adds	r2, r2, r7
 800484a:	7812      	ldrb	r2, [r2, #0]
 800484c:	3a02      	subs	r2, #2
 800484e:	485b      	ldr	r0, [pc, #364]	; (80049bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004850:	5c40      	ldrb	r0, [r0, r1]
 8004852:	21e8      	movs	r1, #232	; 0xe8
 8004854:	1949      	adds	r1, r1, r5
 8004856:	19c9      	adds	r1, r1, r7
 8004858:	6809      	ldr	r1, [r1, #0]
 800485a:	5488      	strb	r0, [r1, r2]
			for (uint8_t i = 2; i < c + 1; i++) {
 800485c:	1962      	adds	r2, r4, r5
 800485e:	19d2      	adds	r2, r2, r7
 8004860:	7811      	ldrb	r1, [r2, #0]
 8004862:	1962      	adds	r2, r4, r5
 8004864:	19d2      	adds	r2, r2, r7
 8004866:	3101      	adds	r1, #1
 8004868:	7011      	strb	r1, [r2, #0]
 800486a:	25f3      	movs	r5, #243	; 0xf3
 800486c:	2018      	movs	r0, #24
 800486e:	182a      	adds	r2, r5, r0
 8004870:	19d1      	adds	r1, r2, r7
 8004872:	228f      	movs	r2, #143	; 0x8f
 8004874:	0052      	lsls	r2, r2, #1
 8004876:	1812      	adds	r2, r2, r0
 8004878:	19d2      	adds	r2, r2, r7
 800487a:	7809      	ldrb	r1, [r1, #0]
 800487c:	7812      	ldrb	r2, [r2, #0]
 800487e:	4291      	cmp	r1, r2
 8004880:	d2db      	bcs.n	800483a <HAL_TIM_PeriodElapsedCallback+0x16e>
			}
			uint8_t *tempPtr = tempCrcData;
 8004882:	22e8      	movs	r2, #232	; 0xe8
 8004884:	1812      	adds	r2, r2, r0
 8004886:	19d2      	adds	r2, r2, r7
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	21e0      	movs	r1, #224	; 0xe0
 800488c:	0004      	movs	r4, r0
 800488e:	1808      	adds	r0, r1, r0
 8004890:	19c0      	adds	r0, r0, r7
 8004892:	6002      	str	r2, [r0, #0]
			crcResult = GetCrc16(tempPtr,
 8004894:	26e6      	movs	r6, #230	; 0xe6
 8004896:	0020      	movs	r0, r4
 8004898:	1832      	adds	r2, r6, r0
 800489a:	19d4      	adds	r4, r2, r7
 800489c:	180a      	adds	r2, r1, r0
 800489e:	19d2      	adds	r2, r2, r7
 80048a0:	6812      	ldr	r2, [r2, #0]
 80048a2:	0019      	movs	r1, r3
 80048a4:	0010      	movs	r0, r2
 80048a6:	f001 fd6f 	bl	8006388 <GetCrc16>
 80048aa:	0003      	movs	r3, r0
 80048ac:	8023      	strh	r3, [r4, #0]
					sizeof(tempCrcData) / sizeof(tempCrcData[0]));
			uint16_t checker = responseBuffer[0][c + 1];
 80048ae:	2418      	movs	r4, #24
 80048b0:	192b      	adds	r3, r5, r4
 80048b2:	19db      	adds	r3, r3, r7
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	3301      	adds	r3, #1
 80048b8:	4a40      	ldr	r2, [pc, #256]	; (80049bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80048ba:	5cd2      	ldrb	r2, [r2, r3]
 80048bc:	20de      	movs	r0, #222	; 0xde
 80048be:	1903      	adds	r3, r0, r4
 80048c0:	19db      	adds	r3, r3, r7
 80048c2:	801a      	strh	r2, [r3, #0]
			checker = checker << 8 | responseBuffer[0][c + 2];
 80048c4:	1903      	adds	r3, r0, r4
 80048c6:	19db      	adds	r3, r3, r7
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	b21a      	sxth	r2, r3
 80048ce:	192b      	adds	r3, r5, r4
 80048d0:	19db      	adds	r3, r3, r7
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	3302      	adds	r3, #2
 80048d6:	4939      	ldr	r1, [pc, #228]	; (80049bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80048d8:	5ccb      	ldrb	r3, [r1, r3]
 80048da:	b21b      	sxth	r3, r3
 80048dc:	4313      	orrs	r3, r2
 80048de:	b21a      	sxth	r2, r3
 80048e0:	1903      	adds	r3, r0, r4
 80048e2:	19db      	adds	r3, r3, r7
 80048e4:	801a      	strh	r2, [r3, #0]
			if (crcResult == checker) {
 80048e6:	1933      	adds	r3, r6, r4
 80048e8:	19da      	adds	r2, r3, r7
 80048ea:	1903      	adds	r3, r0, r4
 80048ec:	19db      	adds	r3, r3, r7
 80048ee:	8812      	ldrh	r2, [r2, #0]
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d10a      	bne.n	800490c <HAL_TIM_PeriodElapsedCallback+0x240>
				if (responseBuffer[0][3] == 1 || responseBuffer[0][3] == 0x13) {
 80048f6:	4b31      	ldr	r3, [pc, #196]	; (80049bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80048f8:	78db      	ldrb	r3, [r3, #3]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d003      	beq.n	8004906 <HAL_TIM_PeriodElapsedCallback+0x23a>
 80048fe:	4b2f      	ldr	r3, [pc, #188]	; (80049bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004900:	78db      	ldrb	r3, [r3, #3]
 8004902:	2b13      	cmp	r3, #19
 8004904:	d102      	bne.n	800490c <HAL_TIM_PeriodElapsedCallback+0x240>
					isLoggedIn = 1;
 8004906:	4b2e      	ldr	r3, [pc, #184]	; (80049c0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8004908:	2201      	movs	r2, #1
 800490a:	701a      	strb	r2, [r3, #0]
						// HAL_UART_Transmit(&huart4, "HB rec", sizeof("HB rec"),
						// 100);
					}
				}
			}
			HAL_TIM_Base_Stop_IT(&htim6);
 800490c:	4b2a      	ldr	r3, [pc, #168]	; (80049b8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800490e:	0018      	movs	r0, r3
 8004910:	f006 fd16 	bl	800b340 <HAL_TIM_Base_Stop_IT>
			memset(responseBuffer, 0, sizeof(responseBuffer));
 8004914:	2396      	movs	r3, #150	; 0x96
 8004916:	005a      	lsls	r2, r3, #1
 8004918:	4b28      	ldr	r3, [pc, #160]	; (80049bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800491a:	2100      	movs	r1, #0
 800491c:	0018      	movs	r0, r3
 800491e:	f009 fc1a 	bl	800e156 <memset>
			lineCount = 0;
 8004922:	4b28      	ldr	r3, [pc, #160]	; (80049c4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004924:	2200      	movs	r2, #0
 8004926:	701a      	strb	r2, [r3, #0]
			charCount = 0;
 8004928:	4b27      	ldr	r3, [pc, #156]	; (80049c8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800492a:	2200      	movs	r2, #0
 800492c:	701a      	strb	r2, [r3, #0]
			isStart = 0;
 800492e:	4b27      	ldr	r3, [pc, #156]	; (80049cc <HAL_TIM_PeriodElapsedCallback+0x300>)
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
 8004934:	46c5      	mov	sp, r8
		if (responseBuffer[0][0] == 0x78 && responseBuffer[0][1] == 0x78) {
 8004936:	e2be      	b.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
		} else {
			uint8_t tLine = 99;
 8004938:	231e      	movs	r3, #30
 800493a:	33ff      	adds	r3, #255	; 0xff
 800493c:	2118      	movs	r1, #24
 800493e:	185b      	adds	r3, r3, r1
 8004940:	19db      	adds	r3, r3, r7
 8004942:	2263      	movs	r2, #99	; 0x63
 8004944:	701a      	strb	r2, [r3, #0]
			char *ptr;
			uint8_t tIndex;
			//message handling here------------------------------------------
			for (uint8_t i = 0; i <= RESPONSE_MAX_LINE; i++) {
 8004946:	238e      	movs	r3, #142	; 0x8e
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	185b      	adds	r3, r3, r1
 800494c:	19db      	adds	r3, r3, r7
 800494e:	2200      	movs	r2, #0
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e049      	b.n	80049e8 <HAL_TIM_PeriodElapsedCallback+0x31c>
				ptr = strstr(responseBuffer[i], "+CMT:");
 8004954:	248e      	movs	r4, #142	; 0x8e
 8004956:	0064      	lsls	r4, r4, #1
 8004958:	2518      	movs	r5, #24
 800495a:	1963      	adds	r3, r4, r5
 800495c:	19db      	adds	r3, r3, r7
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2232      	movs	r2, #50	; 0x32
 8004962:	435a      	muls	r2, r3
 8004964:	4b15      	ldr	r3, [pc, #84]	; (80049bc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8004966:	18d3      	adds	r3, r2, r3
 8004968:	4a19      	ldr	r2, [pc, #100]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800496a:	0011      	movs	r1, r2
 800496c:	0018      	movs	r0, r3
 800496e:	f009 fc4a 	bl	800e206 <strstr>
 8004972:	0003      	movs	r3, r0
 8004974:	22d8      	movs	r2, #216	; 0xd8
 8004976:	1951      	adds	r1, r2, r5
 8004978:	19c9      	adds	r1, r1, r7
 800497a:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 800497c:	1953      	adds	r3, r2, r5
 800497e:	19db      	adds	r3, r3, r7
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d026      	beq.n	80049d4 <HAL_TIM_PeriodElapsedCallback+0x308>
					tLine = i;
 8004986:	231e      	movs	r3, #30
 8004988:	33ff      	adds	r3, #255	; 0xff
 800498a:	195b      	adds	r3, r3, r5
 800498c:	19db      	adds	r3, r3, r7
 800498e:	1962      	adds	r2, r4, r5
 8004990:	19d2      	adds	r2, r2, r7
 8004992:	7812      	ldrb	r2, [r2, #0]
 8004994:	701a      	strb	r2, [r3, #0]
					break;
 8004996:	e02f      	b.n	80049f8 <HAL_TIM_PeriodElapsedCallback+0x32c>
 8004998:	200003e0 	.word	0x200003e0
 800499c:	50000800 	.word	0x50000800
 80049a0:	200006d3 	.word	0x200006d3
 80049a4:	200006d4 	.word	0x200006d4
 80049a8:	200006d1 	.word	0x200006d1
 80049ac:	200006d2 	.word	0x200006d2
 80049b0:	200006d0 	.word	0x200006d0
 80049b4:	200006dc 	.word	0x200006dc
 80049b8:	20000394 	.word	0x20000394
 80049bc:	200006f4 	.word	0x200006f4
 80049c0:	200009c7 	.word	0x200009c7
 80049c4:	20000820 	.word	0x20000820
 80049c8:	20000821 	.word	0x20000821
 80049cc:	20000824 	.word	0x20000824
 80049d0:	0801260c 	.word	0x0801260c
			for (uint8_t i = 0; i <= RESPONSE_MAX_LINE; i++) {
 80049d4:	218e      	movs	r1, #142	; 0x8e
 80049d6:	0049      	lsls	r1, r1, #1
 80049d8:	2018      	movs	r0, #24
 80049da:	180b      	adds	r3, r1, r0
 80049dc:	19db      	adds	r3, r3, r7
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	180b      	adds	r3, r1, r0
 80049e2:	19db      	adds	r3, r3, r7
 80049e4:	3201      	adds	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	238e      	movs	r3, #142	; 0x8e
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	2218      	movs	r2, #24
 80049ee:	189b      	adds	r3, r3, r2
 80049f0:	19db      	adds	r3, r3, r7
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b06      	cmp	r3, #6
 80049f6:	d9ad      	bls.n	8004954 <HAL_TIM_PeriodElapsedCallback+0x288>
				}
			}
			if (tLine != 99) {
 80049f8:	241e      	movs	r4, #30
 80049fa:	34ff      	adds	r4, #255	; 0xff
 80049fc:	2618      	movs	r6, #24
 80049fe:	19a3      	adds	r3, r4, r6
 8004a00:	19db      	adds	r3, r3, r7
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b63      	cmp	r3, #99	; 0x63
 8004a06:	d100      	bne.n	8004a0a <HAL_TIM_PeriodElapsedCallback+0x33e>
 8004a08:	e255      	b.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
				//some message is received!!!.
				//---check the sender's number.
				char sender[50];
				memset(sender, 0, sizeof(sender));
 8004a0a:	250c      	movs	r5, #12
 8004a0c:	19ab      	adds	r3, r5, r6
 8004a0e:	19db      	adds	r3, r3, r7
 8004a10:	2232      	movs	r2, #50	; 0x32
 8004a12:	2100      	movs	r1, #0
 8004a14:	0018      	movs	r0, r3
 8004a16:	f009 fb9e 	bl	800e156 <memset>
				ptr = strchr(responseBuffer[tLine], '\"');
 8004a1a:	19a3      	adds	r3, r4, r6
 8004a1c:	19db      	adds	r3, r3, r7
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2232      	movs	r2, #50	; 0x32
 8004a22:	435a      	muls	r2, r3
 8004a24:	4bdb      	ldr	r3, [pc, #876]	; (8004d94 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8004a26:	18d3      	adds	r3, r2, r3
 8004a28:	2122      	movs	r1, #34	; 0x22
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f009 fbc9 	bl	800e1c2 <strchr>
 8004a30:	0003      	movs	r3, r0
 8004a32:	21d8      	movs	r1, #216	; 0xd8
 8004a34:	0030      	movs	r0, r6
 8004a36:	180a      	adds	r2, r1, r0
 8004a38:	19d2      	adds	r2, r2, r7
 8004a3a:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8004a3c:	180b      	adds	r3, r1, r0
 8004a3e:	19db      	adds	r3, r3, r7
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d100      	bne.n	8004a48 <HAL_TIM_PeriodElapsedCallback+0x37c>
 8004a46:	e236      	b.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
					tIndex = ptr - (char) responseBuffer[tLine];
 8004a48:	1823      	adds	r3, r4, r0
 8004a4a:	19db      	adds	r3, r3, r7
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2232      	movs	r2, #50	; 0x32
 8004a50:	435a      	muls	r2, r3
 8004a52:	4bd0      	ldr	r3, [pc, #832]	; (8004d94 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8004a54:	18d3      	adds	r3, r2, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	425b      	negs	r3, r3
 8004a5a:	0006      	movs	r6, r0
 8004a5c:	198a      	adds	r2, r1, r6
 8004a5e:	19d2      	adds	r2, r2, r7
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	18d3      	adds	r3, r2, r3
 8004a64:	001a      	movs	r2, r3
 8004a66:	20d7      	movs	r0, #215	; 0xd7
 8004a68:	1983      	adds	r3, r0, r6
 8004a6a:	19db      	adds	r3, r3, r7
 8004a6c:	701a      	strb	r2, [r3, #0]
					substring(sender, responseBuffer[tLine], tIndex + 1, 13);
 8004a6e:	19a3      	adds	r3, r4, r6
 8004a70:	19db      	adds	r3, r3, r7
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2232      	movs	r2, #50	; 0x32
 8004a76:	435a      	muls	r2, r3
 8004a78:	4bc6      	ldr	r3, [pc, #792]	; (8004d94 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8004a7a:	18d1      	adds	r1, r2, r3
 8004a7c:	1983      	adds	r3, r0, r6
 8004a7e:	19db      	adds	r3, r3, r7
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	3301      	adds	r3, #1
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	19ab      	adds	r3, r5, r6
 8004a88:	19d8      	adds	r0, r3, r7
 8004a8a:	230d      	movs	r3, #13
 8004a8c:	f002 fa78 	bl	8006f80 <substring>
					substring(sender, sender, 3, 10);
 8004a90:	19ab      	adds	r3, r5, r6
 8004a92:	19d9      	adds	r1, r3, r7
 8004a94:	19ab      	adds	r3, r5, r6
 8004a96:	19d8      	adds	r0, r3, r7
 8004a98:	230a      	movs	r3, #10
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	f002 fa70 	bl	8006f80 <substring>
					uint8_t isOwner = 0;
 8004aa0:	26d6      	movs	r6, #214	; 0xd6
 8004aa2:	2118      	movs	r1, #24
 8004aa4:	1873      	adds	r3, r6, r1
 8004aa6:	19db      	adds	r3, r3, r7
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
					isOwner = !strcmp(sender, validSender); //check if sender's number is an owner?
 8004aac:	4aba      	ldr	r2, [pc, #744]	; (8004d98 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8004aae:	186b      	adds	r3, r5, r1
 8004ab0:	19db      	adds	r3, r3, r7
 8004ab2:	0011      	movs	r1, r2
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7fb fb23 	bl	8000100 <strcmp>
 8004aba:	0003      	movs	r3, r0
 8004abc:	425a      	negs	r2, r3
 8004abe:	4153      	adcs	r3, r2
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	2118      	movs	r1, #24
 8004ac4:	1873      	adds	r3, r6, r1
 8004ac6:	19db      	adds	r3, r3, r7
 8004ac8:	701a      	strb	r2, [r3, #0]
					//---check the message content for any command. (*auto# for example)
					uint8_t ind1;
					uint8_t ind2; //command length.
					char *x;
					char sCommand[MAX_COMMAND_LEN];
					x = strchr(responseBuffer[tLine + 1], '*');
 8004aca:	000e      	movs	r6, r1
 8004acc:	1863      	adds	r3, r4, r1
 8004ace:	19db      	adds	r3, r3, r7
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	2232      	movs	r2, #50	; 0x32
 8004ad6:	435a      	muls	r2, r3
 8004ad8:	4bae      	ldr	r3, [pc, #696]	; (8004d94 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8004ada:	18d3      	adds	r3, r2, r3
 8004adc:	212a      	movs	r1, #42	; 0x2a
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f009 fb6f 	bl	800e1c2 <strchr>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	25d0      	movs	r5, #208	; 0xd0
 8004ae8:	19aa      	adds	r2, r5, r6
 8004aea:	19d2      	adds	r2, r2, r7
 8004aec:	6013      	str	r3, [r2, #0]
					if (x != NULL) {
 8004aee:	19ab      	adds	r3, r5, r6
 8004af0:	19db      	adds	r3, r3, r7
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d100      	bne.n	8004afa <HAL_TIM_PeriodElapsedCallback+0x42e>
 8004af8:	e1dd      	b.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
						char *y;
						y = strchr(responseBuffer[tLine + 1], '#');
 8004afa:	19a3      	adds	r3, r4, r6
 8004afc:	19db      	adds	r3, r3, r7
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	3301      	adds	r3, #1
 8004b02:	2232      	movs	r2, #50	; 0x32
 8004b04:	435a      	muls	r2, r3
 8004b06:	4ba3      	ldr	r3, [pc, #652]	; (8004d94 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8004b08:	18d3      	adds	r3, r2, r3
 8004b0a:	2123      	movs	r1, #35	; 0x23
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f009 fb58 	bl	800e1c2 <strchr>
 8004b12:	0003      	movs	r3, r0
 8004b14:	20cc      	movs	r0, #204	; 0xcc
 8004b16:	1982      	adds	r2, r0, r6
 8004b18:	19d2      	adds	r2, r2, r7
 8004b1a:	6013      	str	r3, [r2, #0]
						if (y != NULL) {
 8004b1c:	1983      	adds	r3, r0, r6
 8004b1e:	19db      	adds	r3, r3, r7
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d100      	bne.n	8004b28 <HAL_TIM_PeriodElapsedCallback+0x45c>
 8004b26:	e1c6      	b.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
							//command found!!!
							//---extract the command.
							ind1 = x - (char) responseBuffer[tLine + 1] + 1;
 8004b28:	0021      	movs	r1, r4
 8004b2a:	0034      	movs	r4, r6
 8004b2c:	198b      	adds	r3, r1, r6
 8004b2e:	19db      	adds	r3, r3, r7
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	2232      	movs	r2, #50	; 0x32
 8004b36:	435a      	muls	r2, r3
 8004b38:	4b96      	ldr	r3, [pc, #600]	; (8004d94 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8004b3a:	18d3      	adds	r3, r2, r3
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	001a      	movs	r2, r3
 8004b40:	2301      	movs	r3, #1
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	192a      	adds	r2, r5, r4
 8004b46:	19d2      	adds	r2, r2, r7
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	18d3      	adds	r3, r2, r3
 8004b4c:	001a      	movs	r2, r3
 8004b4e:	25cb      	movs	r5, #203	; 0xcb
 8004b50:	192b      	adds	r3, r5, r4
 8004b52:	19db      	adds	r3, r3, r7
 8004b54:	701a      	strb	r2, [r3, #0]
							ind2 = y - (char) responseBuffer[tLine + 1] - 1;
 8004b56:	190b      	adds	r3, r1, r4
 8004b58:	19db      	adds	r3, r3, r7
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	2232      	movs	r2, #50	; 0x32
 8004b60:	435a      	muls	r2, r3
 8004b62:	4b8c      	ldr	r3, [pc, #560]	; (8004d94 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8004b64:	18d3      	adds	r3, r2, r3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	1902      	adds	r2, r0, r4
 8004b6c:	19d2      	adds	r2, r2, r7
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	18d3      	adds	r3, r2, r3
 8004b72:	001a      	movs	r2, r3
 8004b74:	26ca      	movs	r6, #202	; 0xca
 8004b76:	1933      	adds	r3, r6, r4
 8004b78:	19db      	adds	r3, r3, r7
 8004b7a:	701a      	strb	r2, [r3, #0]
							substring(sCommand, responseBuffer[tLine + 1], ind1,ind2);
 8004b7c:	190b      	adds	r3, r1, r4
 8004b7e:	19db      	adds	r3, r3, r7
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	3301      	adds	r3, #1
 8004b84:	2232      	movs	r2, #50	; 0x32
 8004b86:	435a      	muls	r2, r3
 8004b88:	4b82      	ldr	r3, [pc, #520]	; (8004d94 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8004b8a:	18d1      	adds	r1, r2, r3
 8004b8c:	0022      	movs	r2, r4
 8004b8e:	18b3      	adds	r3, r6, r2
 8004b90:	19db      	adds	r3, r3, r7
 8004b92:	781c      	ldrb	r4, [r3, #0]
 8004b94:	0010      	movs	r0, r2
 8004b96:	18ab      	adds	r3, r5, r2
 8004b98:	19db      	adds	r3, r3, r7
 8004b9a:	781a      	ldrb	r2, [r3, #0]
 8004b9c:	2540      	movs	r5, #64	; 0x40
 8004b9e:	182b      	adds	r3, r5, r0
 8004ba0:	19d8      	adds	r0, r3, r7
 8004ba2:	0023      	movs	r3, r4
 8004ba4:	f002 f9ec 	bl	8006f80 <substring>
							//--->1)RES0 = reset user PIN and registered NUMBER
							//--->2)RNUM3322336979xxxx = register new owner's number
							//--->3)RPIN = set new pin
							//--->4)WHERE
							//--->5)SERVER,DNS,PORT (DNS<=50,PORT<=5)
							if(sCommand[0] == 'R'
 8004ba8:	002a      	movs	r2, r5
 8004baa:	2118      	movs	r1, #24
 8004bac:	1853      	adds	r3, r2, r1
 8004bae:	19db      	adds	r3, r3, r7
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b52      	cmp	r3, #82	; 0x52
 8004bb4:	d129      	bne.n	8004c0a <HAL_TIM_PeriodElapsedCallback+0x53e>
							&& sCommand[1] == 'E'
 8004bb6:	1853      	adds	r3, r2, r1
 8004bb8:	19db      	adds	r3, r3, r7
 8004bba:	785b      	ldrb	r3, [r3, #1]
 8004bbc:	2b45      	cmp	r3, #69	; 0x45
 8004bbe:	d124      	bne.n	8004c0a <HAL_TIM_PeriodElapsedCallback+0x53e>
							&& sCommand[2] == 'S'
 8004bc0:	1853      	adds	r3, r2, r1
 8004bc2:	19db      	adds	r3, r3, r7
 8004bc4:	789b      	ldrb	r3, [r3, #2]
 8004bc6:	2b53      	cmp	r3, #83	; 0x53
 8004bc8:	d11f      	bne.n	8004c0a <HAL_TIM_PeriodElapsedCallback+0x53e>
							&& sCommand[3] == '0'
 8004bca:	1853      	adds	r3, r2, r1
 8004bcc:	19db      	adds	r3, r3, r7
 8004bce:	78db      	ldrb	r3, [r3, #3]
 8004bd0:	2b30      	cmp	r3, #48	; 0x30
 8004bd2:	d11a      	bne.n	8004c0a <HAL_TIM_PeriodElapsedCallback+0x53e>
							&& ind2 == 4) {
 8004bd4:	1873      	adds	r3, r6, r1
 8004bd6:	19db      	adds	r3, r3, r7
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d115      	bne.n	8004c0a <HAL_TIM_PeriodElapsedCallback+0x53e>
								//--- reset command received.
								cPin[0] = '1';
 8004bde:	4b6f      	ldr	r3, [pc, #444]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004be0:	2231      	movs	r2, #49	; 0x31
 8004be2:	701a      	strb	r2, [r3, #0]
								cPin[1] = '2';
 8004be4:	4b6d      	ldr	r3, [pc, #436]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004be6:	2232      	movs	r2, #50	; 0x32
 8004be8:	705a      	strb	r2, [r3, #1]
								cPin[2] = '3';
 8004bea:	4b6c      	ldr	r3, [pc, #432]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004bec:	2233      	movs	r2, #51	; 0x33
 8004bee:	709a      	strb	r2, [r3, #2]
								cPin[3] = '4';
 8004bf0:	4b6a      	ldr	r3, [pc, #424]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004bf2:	2234      	movs	r2, #52	; 0x34
 8004bf4:	70da      	strb	r2, [r3, #3]
								locationDataIntervalA = 5;
 8004bf6:	4b6a      	ldr	r3, [pc, #424]	; (8004da0 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8004bf8:	2205      	movs	r2, #5
 8004bfa:	701a      	strb	r2, [r3, #0]
								locationDataIntervalB = 5;
 8004bfc:	4b69      	ldr	r3, [pc, #420]	; (8004da4 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8004bfe:	2205      	movs	r2, #5
 8004c00:	701a      	strb	r2, [r3, #0]
								//---saving to flash memory
								save_to_flash(0);
 8004c02:	2000      	movs	r0, #0
 8004c04:	f001 f87a 	bl	8005cfc <save_to_flash>
 8004c08:	e155      	b.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
								//printf("Reset Completed\n");
							} else if (sCommand[0] == 'R'
 8004c0a:	2240      	movs	r2, #64	; 0x40
 8004c0c:	2018      	movs	r0, #24
 8004c0e:	1813      	adds	r3, r2, r0
 8004c10:	19db      	adds	r3, r3, r7
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b52      	cmp	r3, #82	; 0x52
 8004c16:	d162      	bne.n	8004cde <HAL_TIM_PeriodElapsedCallback+0x612>
									&& sCommand[1] == 'N'
 8004c18:	1813      	adds	r3, r2, r0
 8004c1a:	19db      	adds	r3, r3, r7
 8004c1c:	785b      	ldrb	r3, [r3, #1]
 8004c1e:	2b4e      	cmp	r3, #78	; 0x4e
 8004c20:	d15d      	bne.n	8004cde <HAL_TIM_PeriodElapsedCallback+0x612>
									&& sCommand[2] == 'U'
 8004c22:	1813      	adds	r3, r2, r0
 8004c24:	19db      	adds	r3, r3, r7
 8004c26:	789b      	ldrb	r3, [r3, #2]
 8004c28:	2b55      	cmp	r3, #85	; 0x55
 8004c2a:	d158      	bne.n	8004cde <HAL_TIM_PeriodElapsedCallback+0x612>
									&& sCommand[3] == 'M'
 8004c2c:	1813      	adds	r3, r2, r0
 8004c2e:	19db      	adds	r3, r3, r7
 8004c30:	78db      	ldrb	r3, [r3, #3]
 8004c32:	2b4d      	cmp	r3, #77	; 0x4d
 8004c34:	d153      	bne.n	8004cde <HAL_TIM_PeriodElapsedCallback+0x612>
									&& ind2 == 18) {
 8004c36:	23ca      	movs	r3, #202	; 0xca
 8004c38:	181b      	adds	r3, r3, r0
 8004c3a:	19db      	adds	r3, r3, r7
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b12      	cmp	r3, #18
 8004c40:	d14d      	bne.n	8004cde <HAL_TIM_PeriodElapsedCallback+0x612>
								//---owner number registration command received
								//printf("number registration command received\n");
								if(sCommand[14] == cPin[0]
 8004c42:	0011      	movs	r1, r2
 8004c44:	180b      	adds	r3, r1, r0
 8004c46:	19db      	adds	r3, r3, r7
 8004c48:	7b9a      	ldrb	r2, [r3, #14]
 8004c4a:	4b54      	ldr	r3, [pc, #336]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d000      	beq.n	8004c54 <HAL_TIM_PeriodElapsedCallback+0x588>
 8004c52:	e12d      	b.n	8004eb0 <HAL_TIM_PeriodElapsedCallback+0x7e4>
								&& sCommand[15] == cPin[1]
 8004c54:	180b      	adds	r3, r1, r0
 8004c56:	19db      	adds	r3, r3, r7
 8004c58:	7bda      	ldrb	r2, [r3, #15]
 8004c5a:	4b50      	ldr	r3, [pc, #320]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004c5c:	785b      	ldrb	r3, [r3, #1]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d000      	beq.n	8004c64 <HAL_TIM_PeriodElapsedCallback+0x598>
 8004c62:	e125      	b.n	8004eb0 <HAL_TIM_PeriodElapsedCallback+0x7e4>
								&& sCommand[16] == cPin[2]
 8004c64:	180b      	adds	r3, r1, r0
 8004c66:	19db      	adds	r3, r3, r7
 8004c68:	7c1a      	ldrb	r2, [r3, #16]
 8004c6a:	4b4c      	ldr	r3, [pc, #304]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004c6c:	789b      	ldrb	r3, [r3, #2]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d000      	beq.n	8004c74 <HAL_TIM_PeriodElapsedCallback+0x5a8>
 8004c72:	e11d      	b.n	8004eb0 <HAL_TIM_PeriodElapsedCallback+0x7e4>
								&& sCommand[17] == cPin[3]) {
 8004c74:	180b      	adds	r3, r1, r0
 8004c76:	19db      	adds	r3, r3, r7
 8004c78:	7c5a      	ldrb	r2, [r3, #17]
 8004c7a:	4b48      	ldr	r3, [pc, #288]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004c7c:	78db      	ldrb	r3, [r3, #3]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d000      	beq.n	8004c84 <HAL_TIM_PeriodElapsedCallback+0x5b8>
 8004c82:	e115      	b.n	8004eb0 <HAL_TIM_PeriodElapsedCallback+0x7e4>
									//PIN is valid!!!
									//---register new number
									for (uint8_t m = 0; m < 10; m++) {
 8004c84:	231c      	movs	r3, #28
 8004c86:	33ff      	adds	r3, #255	; 0xff
 8004c88:	181b      	adds	r3, r3, r0
 8004c8a:	19db      	adds	r3, r3, r7
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	e016      	b.n	8004cc0 <HAL_TIM_PeriodElapsedCallback+0x5f4>
										validSender[m] = sCommand[m + 4];
 8004c92:	201c      	movs	r0, #28
 8004c94:	30ff      	adds	r0, #255	; 0xff
 8004c96:	2418      	movs	r4, #24
 8004c98:	1903      	adds	r3, r0, r4
 8004c9a:	19db      	adds	r3, r3, r7
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	1d1a      	adds	r2, r3, #4
 8004ca0:	1903      	adds	r3, r0, r4
 8004ca2:	19db      	adds	r3, r3, r7
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2140      	movs	r1, #64	; 0x40
 8004ca8:	1909      	adds	r1, r1, r4
 8004caa:	19c9      	adds	r1, r1, r7
 8004cac:	5c89      	ldrb	r1, [r1, r2]
 8004cae:	4a3a      	ldr	r2, [pc, #232]	; (8004d98 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8004cb0:	54d1      	strb	r1, [r2, r3]
									for (uint8_t m = 0; m < 10; m++) {
 8004cb2:	1903      	adds	r3, r0, r4
 8004cb4:	19db      	adds	r3, r3, r7
 8004cb6:	781a      	ldrb	r2, [r3, #0]
 8004cb8:	1903      	adds	r3, r0, r4
 8004cba:	19db      	adds	r3, r3, r7
 8004cbc:	3201      	adds	r2, #1
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	231c      	movs	r3, #28
 8004cc2:	33ff      	adds	r3, #255	; 0xff
 8004cc4:	2218      	movs	r2, #24
 8004cc6:	189b      	adds	r3, r3, r2
 8004cc8:	19db      	adds	r3, r3, r7
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b09      	cmp	r3, #9
 8004cce:	d9e0      	bls.n	8004c92 <HAL_TIM_PeriodElapsedCallback+0x5c6>
									}
									save_to_flash(0);
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f001 f813 	bl	8005cfc <save_to_flash>
									isSMSActive=1;
 8004cd6:	4b34      	ldr	r3, [pc, #208]	; (8004da8 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	701a      	strb	r2, [r3, #0]
								if(sCommand[14] == cPin[0]
 8004cdc:	e0e8      	b.n	8004eb0 <HAL_TIM_PeriodElapsedCallback+0x7e4>
									//---send success message(todo)
								} else {
									// incorrect pin, send message (incoorect pin),(todo)
									// *future* stop sending message after 3 fails
								}
							} else if (sCommand[0] == 'R'
 8004cde:	2240      	movs	r2, #64	; 0x40
 8004ce0:	2018      	movs	r0, #24
 8004ce2:	1813      	adds	r3, r2, r0
 8004ce4:	19db      	adds	r3, r3, r7
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b52      	cmp	r3, #82	; 0x52
 8004cea:	d15f      	bne.n	8004dac <HAL_TIM_PeriodElapsedCallback+0x6e0>
									&& sCommand[1] == 'P'
 8004cec:	1813      	adds	r3, r2, r0
 8004cee:	19db      	adds	r3, r3, r7
 8004cf0:	785b      	ldrb	r3, [r3, #1]
 8004cf2:	2b50      	cmp	r3, #80	; 0x50
 8004cf4:	d15a      	bne.n	8004dac <HAL_TIM_PeriodElapsedCallback+0x6e0>
									&& sCommand[2] == 'I'
 8004cf6:	1813      	adds	r3, r2, r0
 8004cf8:	19db      	adds	r3, r3, r7
 8004cfa:	789b      	ldrb	r3, [r3, #2]
 8004cfc:	2b49      	cmp	r3, #73	; 0x49
 8004cfe:	d155      	bne.n	8004dac <HAL_TIM_PeriodElapsedCallback+0x6e0>
									&& sCommand[3] == 'N'
 8004d00:	1813      	adds	r3, r2, r0
 8004d02:	19db      	adds	r3, r3, r7
 8004d04:	78db      	ldrb	r3, [r3, #3]
 8004d06:	2b4e      	cmp	r3, #78	; 0x4e
 8004d08:	d150      	bne.n	8004dac <HAL_TIM_PeriodElapsedCallback+0x6e0>
									&& ind2 == 12
 8004d0a:	23ca      	movs	r3, #202	; 0xca
 8004d0c:	181b      	adds	r3, r3, r0
 8004d0e:	19db      	adds	r3, r3, r7
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b0c      	cmp	r3, #12
 8004d14:	d14a      	bne.n	8004dac <HAL_TIM_PeriodElapsedCallback+0x6e0>
									&& isOwner == 1) {
 8004d16:	23d6      	movs	r3, #214	; 0xd6
 8004d18:	181b      	adds	r3, r3, r0
 8004d1a:	19db      	adds	r3, r3, r7
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d144      	bne.n	8004dac <HAL_TIM_PeriodElapsedCallback+0x6e0>
								//---SET PIN command received from owner.
								// RPINxxxxNNNN
								//printf("set PIN command received\n");
								if (sCommand[4] == cPin[0]
 8004d22:	0011      	movs	r1, r2
 8004d24:	180b      	adds	r3, r1, r0
 8004d26:	19db      	adds	r3, r3, r7
 8004d28:	791a      	ldrb	r2, [r3, #4]
 8004d2a:	4b1c      	ldr	r3, [pc, #112]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d000      	beq.n	8004d34 <HAL_TIM_PeriodElapsedCallback+0x668>
 8004d32:	e0bf      	b.n	8004eb4 <HAL_TIM_PeriodElapsedCallback+0x7e8>
								&& sCommand[5] == cPin[1]
 8004d34:	180b      	adds	r3, r1, r0
 8004d36:	19db      	adds	r3, r3, r7
 8004d38:	795a      	ldrb	r2, [r3, #5]
 8004d3a:	4b18      	ldr	r3, [pc, #96]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004d3c:	785b      	ldrb	r3, [r3, #1]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d000      	beq.n	8004d44 <HAL_TIM_PeriodElapsedCallback+0x678>
 8004d42:	e0b7      	b.n	8004eb4 <HAL_TIM_PeriodElapsedCallback+0x7e8>
								&& sCommand[6] == cPin[2]
 8004d44:	180b      	adds	r3, r1, r0
 8004d46:	19db      	adds	r3, r3, r7
 8004d48:	799a      	ldrb	r2, [r3, #6]
 8004d4a:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004d4c:	789b      	ldrb	r3, [r3, #2]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d000      	beq.n	8004d54 <HAL_TIM_PeriodElapsedCallback+0x688>
 8004d52:	e0af      	b.n	8004eb4 <HAL_TIM_PeriodElapsedCallback+0x7e8>
								&& sCommand[7] == cPin[3]) {
 8004d54:	180b      	adds	r3, r1, r0
 8004d56:	19db      	adds	r3, r3, r7
 8004d58:	79da      	ldrb	r2, [r3, #7]
 8004d5a:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004d5c:	78db      	ldrb	r3, [r3, #3]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d000      	beq.n	8004d64 <HAL_TIM_PeriodElapsedCallback+0x698>
 8004d62:	e0a7      	b.n	8004eb4 <HAL_TIM_PeriodElapsedCallback+0x7e8>
									//old PIN is valid!!!
									//---set new pin
									cPin[0] = sCommand[8];
 8004d64:	180b      	adds	r3, r1, r0
 8004d66:	19db      	adds	r3, r3, r7
 8004d68:	7a1a      	ldrb	r2, [r3, #8]
 8004d6a:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004d6c:	701a      	strb	r2, [r3, #0]
									cPin[1] = sCommand[9];
 8004d6e:	180b      	adds	r3, r1, r0
 8004d70:	19db      	adds	r3, r3, r7
 8004d72:	7a5a      	ldrb	r2, [r3, #9]
 8004d74:	4b09      	ldr	r3, [pc, #36]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004d76:	705a      	strb	r2, [r3, #1]
									cPin[2] = sCommand[10];
 8004d78:	180b      	adds	r3, r1, r0
 8004d7a:	19db      	adds	r3, r3, r7
 8004d7c:	7a9a      	ldrb	r2, [r3, #10]
 8004d7e:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004d80:	709a      	strb	r2, [r3, #2]
									cPin[3] = sCommand[11];
 8004d82:	180b      	adds	r3, r1, r0
 8004d84:	19db      	adds	r3, r3, r7
 8004d86:	7ada      	ldrb	r2, [r3, #11]
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8004d8a:	70da      	strb	r2, [r3, #3]
									//---saving to flash memory
									save_to_flash(0);
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	f000 ffb5 	bl	8005cfc <save_to_flash>
								if (sCommand[4] == cPin[0]
 8004d92:	e08f      	b.n	8004eb4 <HAL_TIM_PeriodElapsedCallback+0x7e8>
 8004d94:	200006f4 	.word	0x200006f4
 8004d98:	20000004 	.word	0x20000004
 8004d9c:	20000010 	.word	0x20000010
 8004da0:	20000000 	.word	0x20000000
 8004da4:	20000001 	.word	0x20000001
 8004da8:	200006e0 	.word	0x200006e0
									//printf("NEW PIN set \n");
								}
							} else if (sCommand[0] == 'W'
 8004dac:	2240      	movs	r2, #64	; 0x40
 8004dae:	2118      	movs	r1, #24
 8004db0:	1853      	adds	r3, r2, r1
 8004db2:	19db      	adds	r3, r3, r7
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b57      	cmp	r3, #87	; 0x57
 8004db8:	d11d      	bne.n	8004df6 <HAL_TIM_PeriodElapsedCallback+0x72a>
									&& sCommand[1] == 'H'
 8004dba:	1853      	adds	r3, r2, r1
 8004dbc:	19db      	adds	r3, r3, r7
 8004dbe:	785b      	ldrb	r3, [r3, #1]
 8004dc0:	2b48      	cmp	r3, #72	; 0x48
 8004dc2:	d118      	bne.n	8004df6 <HAL_TIM_PeriodElapsedCallback+0x72a>
									&& sCommand[2] == 'E'
 8004dc4:	1853      	adds	r3, r2, r1
 8004dc6:	19db      	adds	r3, r3, r7
 8004dc8:	789b      	ldrb	r3, [r3, #2]
 8004dca:	2b45      	cmp	r3, #69	; 0x45
 8004dcc:	d113      	bne.n	8004df6 <HAL_TIM_PeriodElapsedCallback+0x72a>
									&& sCommand[3] == 'R'
 8004dce:	1853      	adds	r3, r2, r1
 8004dd0:	19db      	adds	r3, r3, r7
 8004dd2:	78db      	ldrb	r3, [r3, #3]
 8004dd4:	2b52      	cmp	r3, #82	; 0x52
 8004dd6:	d10e      	bne.n	8004df6 <HAL_TIM_PeriodElapsedCallback+0x72a>
									&& sCommand[4] == 'E'
 8004dd8:	1853      	adds	r3, r2, r1
 8004dda:	19db      	adds	r3, r3, r7
 8004ddc:	791b      	ldrb	r3, [r3, #4]
 8004dde:	2b45      	cmp	r3, #69	; 0x45
 8004de0:	d109      	bne.n	8004df6 <HAL_TIM_PeriodElapsedCallback+0x72a>
									&& isOwner == 1) {
 8004de2:	23d6      	movs	r3, #214	; 0xd6
 8004de4:	185b      	adds	r3, r3, r1
 8004de6:	19db      	adds	r3, r3, r7
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d103      	bne.n	8004df6 <HAL_TIM_PeriodElapsedCallback+0x72a>
								//WHERE API REQUEST RECEIVED
								isWhereApiCalled = 1;
 8004dee:	4bd6      	ldr	r3, [pc, #856]	; (8005148 <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	701a      	strb	r2, [r3, #0]
 8004df4:	e05f      	b.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
							} else if (sCommand[0] == 'S'
 8004df6:	2240      	movs	r2, #64	; 0x40
 8004df8:	2118      	movs	r1, #24
 8004dfa:	1853      	adds	r3, r2, r1
 8004dfc:	19db      	adds	r3, r3, r7
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b53      	cmp	r3, #83	; 0x53
 8004e02:	d129      	bne.n	8004e58 <HAL_TIM_PeriodElapsedCallback+0x78c>
									&& sCommand[1] == 'E'
 8004e04:	1853      	adds	r3, r2, r1
 8004e06:	19db      	adds	r3, r3, r7
 8004e08:	785b      	ldrb	r3, [r3, #1]
 8004e0a:	2b45      	cmp	r3, #69	; 0x45
 8004e0c:	d124      	bne.n	8004e58 <HAL_TIM_PeriodElapsedCallback+0x78c>
									&& sCommand[2] == 'R'
 8004e0e:	1853      	adds	r3, r2, r1
 8004e10:	19db      	adds	r3, r3, r7
 8004e12:	789b      	ldrb	r3, [r3, #2]
 8004e14:	2b52      	cmp	r3, #82	; 0x52
 8004e16:	d11f      	bne.n	8004e58 <HAL_TIM_PeriodElapsedCallback+0x78c>
									&& sCommand[3] == 'V'
 8004e18:	1853      	adds	r3, r2, r1
 8004e1a:	19db      	adds	r3, r3, r7
 8004e1c:	78db      	ldrb	r3, [r3, #3]
 8004e1e:	2b56      	cmp	r3, #86	; 0x56
 8004e20:	d11a      	bne.n	8004e58 <HAL_TIM_PeriodElapsedCallback+0x78c>
									&& sCommand[4] == 'E'
 8004e22:	1853      	adds	r3, r2, r1
 8004e24:	19db      	adds	r3, r3, r7
 8004e26:	791b      	ldrb	r3, [r3, #4]
 8004e28:	2b45      	cmp	r3, #69	; 0x45
 8004e2a:	d115      	bne.n	8004e58 <HAL_TIM_PeriodElapsedCallback+0x78c>
									&& sCommand[5] == 'R'
 8004e2c:	1853      	adds	r3, r2, r1
 8004e2e:	19db      	adds	r3, r3, r7
 8004e30:	795b      	ldrb	r3, [r3, #5]
 8004e32:	2b52      	cmp	r3, #82	; 0x52
 8004e34:	d110      	bne.n	8004e58 <HAL_TIM_PeriodElapsedCallback+0x78c>
									&& sCommand[6] == ','
 8004e36:	1853      	adds	r3, r2, r1
 8004e38:	19db      	adds	r3, r3, r7
 8004e3a:	799b      	ldrb	r3, [r3, #6]
 8004e3c:	2b2c      	cmp	r3, #44	; 0x2c
 8004e3e:	d10b      	bne.n	8004e58 <HAL_TIM_PeriodElapsedCallback+0x78c>
									&& isOwner == 1) {
 8004e40:	23d6      	movs	r3, #214	; 0xd6
 8004e42:	185b      	adds	r3, r3, r1
 8004e44:	19db      	adds	r3, r3, r7
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d105      	bne.n	8004e58 <HAL_TIM_PeriodElapsedCallback+0x78c>
								//SERVER CONFIG COMMAND RECEIVED
								check_command_SERVER(sCommand);///handle the SERVER CONFIG COMMAND
 8004e4c:	1853      	adds	r3, r2, r1
 8004e4e:	19db      	adds	r3, r3, r7
 8004e50:	0018      	movs	r0, r3
 8004e52:	f002 fced 	bl	8007830 <check_command_SERVER>
 8004e56:	e02e      	b.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>

							} else if (sCommand[0] == 'T'
 8004e58:	2240      	movs	r2, #64	; 0x40
 8004e5a:	2118      	movs	r1, #24
 8004e5c:	1853      	adds	r3, r2, r1
 8004e5e:	19db      	adds	r3, r3, r7
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b54      	cmp	r3, #84	; 0x54
 8004e64:	d127      	bne.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
									&& sCommand[1] == 'I'
 8004e66:	1853      	adds	r3, r2, r1
 8004e68:	19db      	adds	r3, r3, r7
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	2b49      	cmp	r3, #73	; 0x49
 8004e6e:	d122      	bne.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
									&& sCommand[2] == 'M'
 8004e70:	1853      	adds	r3, r2, r1
 8004e72:	19db      	adds	r3, r3, r7
 8004e74:	789b      	ldrb	r3, [r3, #2]
 8004e76:	2b4d      	cmp	r3, #77	; 0x4d
 8004e78:	d11d      	bne.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
									&& sCommand[3] == 'E'
 8004e7a:	1853      	adds	r3, r2, r1
 8004e7c:	19db      	adds	r3, r3, r7
 8004e7e:	78db      	ldrb	r3, [r3, #3]
 8004e80:	2b45      	cmp	r3, #69	; 0x45
 8004e82:	d118      	bne.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
									&& sCommand[4] == 'R'
 8004e84:	1853      	adds	r3, r2, r1
 8004e86:	19db      	adds	r3, r3, r7
 8004e88:	791b      	ldrb	r3, [r3, #4]
 8004e8a:	2b52      	cmp	r3, #82	; 0x52
 8004e8c:	d113      	bne.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
									&& sCommand[5] == ','
 8004e8e:	1853      	adds	r3, r2, r1
 8004e90:	19db      	adds	r3, r3, r7
 8004e92:	795b      	ldrb	r3, [r3, #5]
 8004e94:	2b2c      	cmp	r3, #44	; 0x2c
 8004e96:	d10e      	bne.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
									&& isOwner == 1) {
 8004e98:	23d6      	movs	r3, #214	; 0xd6
 8004e9a:	185b      	adds	r3, r3, r1
 8004e9c:	19db      	adds	r3, r3, r7
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d108      	bne.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
								//TIMER CONFIG COMMAND RECEIVED
								check_command_TIMER(sCommand);///handle the TIMER CONFIG COMMAND
 8004ea4:	1853      	adds	r3, r2, r1
 8004ea6:	19db      	adds	r3, r3, r7
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f002 fd67 	bl	800797c <check_command_TIMER>
 8004eae:	e002      	b.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
								if(sCommand[14] == cPin[0]
 8004eb0:	46c0      	nop			; (mov r8, r8)
 8004eb2:	e000      	b.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0x7ea>
								if (sCommand[4] == cPin[0]
 8004eb4:	46c0      	nop			; (mov r8, r8)

				}

			}
		}
		if (commandCase == 0) {
 8004eb6:	4ba5      	ldr	r3, [pc, #660]	; (800514c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d172      	bne.n	8004fa6 <HAL_TIM_PeriodElapsedCallback+0x8da>
			char *ptr;
			char *ptr2;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8004ec0:	238d      	movs	r3, #141	; 0x8d
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	2218      	movs	r2, #24
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	19db      	adds	r3, r3, r7
 8004eca:	2200      	movs	r2, #0
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e04e      	b.n	8004f6e <HAL_TIM_PeriodElapsedCallback+0x8a2>
				ptr = strstr(responseBuffer[i], "CLOSED");
 8004ed0:	248d      	movs	r4, #141	; 0x8d
 8004ed2:	0064      	lsls	r4, r4, #1
 8004ed4:	2618      	movs	r6, #24
 8004ed6:	19a3      	adds	r3, r4, r6
 8004ed8:	19db      	adds	r3, r3, r7
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2232      	movs	r2, #50	; 0x32
 8004ede:	435a      	muls	r2, r3
 8004ee0:	4b9b      	ldr	r3, [pc, #620]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004ee2:	18d3      	adds	r3, r2, r3
 8004ee4:	4a9b      	ldr	r2, [pc, #620]	; (8005154 <HAL_TIM_PeriodElapsedCallback+0xa88>)
 8004ee6:	0011      	movs	r1, r2
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f009 f98c 	bl	800e206 <strstr>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	25c4      	movs	r5, #196	; 0xc4
 8004ef2:	19aa      	adds	r2, r5, r6
 8004ef4:	19d2      	adds	r2, r2, r7
 8004ef6:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "+PDP DEACT");
 8004ef8:	19a3      	adds	r3, r4, r6
 8004efa:	19db      	adds	r3, r3, r7
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2232      	movs	r2, #50	; 0x32
 8004f00:	435a      	muls	r2, r3
 8004f02:	4b93      	ldr	r3, [pc, #588]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004f04:	18d3      	adds	r3, r2, r3
 8004f06:	4a94      	ldr	r2, [pc, #592]	; (8005158 <HAL_TIM_PeriodElapsedCallback+0xa8c>)
 8004f08:	0011      	movs	r1, r2
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	f009 f97b 	bl	800e206 <strstr>
 8004f10:	0003      	movs	r3, r0
 8004f12:	22c0      	movs	r2, #192	; 0xc0
 8004f14:	1992      	adds	r2, r2, r6
 8004f16:	19d2      	adds	r2, r2, r7
 8004f18:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 8004f1a:	19ab      	adds	r3, r5, r6
 8004f1c:	19db      	adds	r3, r3, r7
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <HAL_TIM_PeriodElapsedCallback+0x86c>
					// HAL_UART_Transmit(&huart4, "closed recv",
					// sizeof("closed recv"), 100);

					isLoggedIn = 0;
 8004f24:	4b8d      	ldr	r3, [pc, #564]	; (800515c <HAL_TIM_PeriodElapsedCallback+0xa90>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
					isDataMode = 0; //command mode activated
 8004f2a:	4b8d      	ldr	r3, [pc, #564]	; (8005160 <HAL_TIM_PeriodElapsedCallback+0xa94>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
					isTcpOpen = 0;
 8004f30:	4b8c      	ldr	r3, [pc, #560]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0xa98>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	701a      	strb	r2, [r3, #0]
					break;
 8004f36:	e022      	b.n	8004f7e <HAL_TIM_PeriodElapsedCallback+0x8b2>
				}
				if (ptr2 != NULL) {
 8004f38:	23c0      	movs	r3, #192	; 0xc0
 8004f3a:	2218      	movs	r2, #24
 8004f3c:	189b      	adds	r3, r3, r2
 8004f3e:	19db      	adds	r3, r3, r7
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <HAL_TIM_PeriodElapsedCallback+0x88e>
					// HAL_UART_Transmit(&huart4, "pdp deact recv",
					// sizeof("pdp deact"), 100);
					isLoggedIn = 0;
 8004f46:	4b85      	ldr	r3, [pc, #532]	; (800515c <HAL_TIM_PeriodElapsedCallback+0xa90>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	701a      	strb	r2, [r3, #0]
					isDataMode = 0; //command mode activated
 8004f4c:	4b84      	ldr	r3, [pc, #528]	; (8005160 <HAL_TIM_PeriodElapsedCallback+0xa94>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	701a      	strb	r2, [r3, #0]
					isTcpOpen = 0;
 8004f52:	4b84      	ldr	r3, [pc, #528]	; (8005164 <HAL_TIM_PeriodElapsedCallback+0xa98>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]
					break;
 8004f58:	e011      	b.n	8004f7e <HAL_TIM_PeriodElapsedCallback+0x8b2>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8004f5a:	218d      	movs	r1, #141	; 0x8d
 8004f5c:	0049      	lsls	r1, r1, #1
 8004f5e:	2018      	movs	r0, #24
 8004f60:	180b      	adds	r3, r1, r0
 8004f62:	19db      	adds	r3, r3, r7
 8004f64:	781a      	ldrb	r2, [r3, #0]
 8004f66:	180b      	adds	r3, r1, r0
 8004f68:	19db      	adds	r3, r3, r7
 8004f6a:	3201      	adds	r2, #1
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	238d      	movs	r3, #141	; 0x8d
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	2218      	movs	r2, #24
 8004f74:	189b      	adds	r3, r3, r2
 8004f76:	19db      	adds	r3, r3, r7
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d9a8      	bls.n	8004ed0 <HAL_TIM_PeriodElapsedCallback+0x804>
				}
			}
			HAL_TIM_Base_Stop_IT(&htim6);
 8004f7e:	4b7a      	ldr	r3, [pc, #488]	; (8005168 <HAL_TIM_PeriodElapsedCallback+0xa9c>)
 8004f80:	0018      	movs	r0, r3
 8004f82:	f006 f9dd 	bl	800b340 <HAL_TIM_Base_Stop_IT>
			memset(responseBuffer, 0, sizeof(responseBuffer));
 8004f86:	2396      	movs	r3, #150	; 0x96
 8004f88:	005a      	lsls	r2, r3, #1
 8004f8a:	4b71      	ldr	r3, [pc, #452]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f009 f8e1 	bl	800e156 <memset>
			lineCount = 0;
 8004f94:	4b75      	ldr	r3, [pc, #468]	; (800516c <HAL_TIM_PeriodElapsedCallback+0xaa0>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]
			charCount = 0;
 8004f9a:	4b75      	ldr	r3, [pc, #468]	; (8005170 <HAL_TIM_PeriodElapsedCallback+0xaa4>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]
			isStart = 0;
 8004fa0:	4b74      	ldr	r3, [pc, #464]	; (8005174 <HAL_TIM_PeriodElapsedCallback+0xaa8>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
		}

		// }
		if (commandCase == 1) {
 8004fa6:	4b69      	ldr	r3, [pc, #420]	; (800514c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d000      	beq.n	8004fb2 <HAL_TIM_PeriodElapsedCallback+0x8e6>
 8004fb0:	e0b5      	b.n	800511e <HAL_TIM_PeriodElapsedCallback+0xa52>
			uint8_t tLine = 99;
 8004fb2:	231a      	movs	r3, #26
 8004fb4:	33ff      	adds	r3, #255	; 0xff
 8004fb6:	2118      	movs	r1, #24
 8004fb8:	185b      	adds	r3, r3, r1
 8004fba:	19db      	adds	r3, r3, r7
 8004fbc:	2263      	movs	r2, #99	; 0x63
 8004fbe:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8004fc0:	238c      	movs	r3, #140	; 0x8c
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	185b      	adds	r3, r3, r1
 8004fc6:	19db      	adds	r3, r3, r7
 8004fc8:	2200      	movs	r2, #0
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	e05b      	b.n	8005086 <HAL_TIM_PeriodElapsedCallback+0x9ba>
				ptr = strstr(responseBuffer[i], "OK");
 8004fce:	248c      	movs	r4, #140	; 0x8c
 8004fd0:	0064      	lsls	r4, r4, #1
 8004fd2:	2618      	movs	r6, #24
 8004fd4:	19a3      	adds	r3, r4, r6
 8004fd6:	19db      	adds	r3, r3, r7
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2232      	movs	r2, #50	; 0x32
 8004fdc:	435a      	muls	r2, r3
 8004fde:	4b5c      	ldr	r3, [pc, #368]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8004fe0:	18d3      	adds	r3, r2, r3
 8004fe2:	4a65      	ldr	r2, [pc, #404]	; (8005178 <HAL_TIM_PeriodElapsedCallback+0xaac>)
 8004fe4:	0011      	movs	r1, r2
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f009 f90d 	bl	800e206 <strstr>
 8004fec:	0003      	movs	r3, r0
 8004fee:	2598      	movs	r5, #152	; 0x98
 8004ff0:	19aa      	adds	r2, r5, r6
 8004ff2:	19d2      	adds	r2, r2, r7
 8004ff4:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 8004ff6:	19a3      	adds	r3, r4, r6
 8004ff8:	19db      	adds	r3, r3, r7
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2232      	movs	r2, #50	; 0x32
 8004ffe:	435a      	muls	r2, r3
 8005000:	4b53      	ldr	r3, [pc, #332]	; (8005150 <HAL_TIM_PeriodElapsedCallback+0xa84>)
 8005002:	18d3      	adds	r3, r2, r3
 8005004:	4a5d      	ldr	r2, [pc, #372]	; (800517c <HAL_TIM_PeriodElapsedCallback+0xab0>)
 8005006:	0011      	movs	r1, r2
 8005008:	0018      	movs	r0, r3
 800500a:	f009 f8fc 	bl	800e206 <strstr>
 800500e:	0003      	movs	r3, r0
 8005010:	2294      	movs	r2, #148	; 0x94
 8005012:	0031      	movs	r1, r6
 8005014:	1852      	adds	r2, r2, r1
 8005016:	19d2      	adds	r2, r2, r7
 8005018:	6013      	str	r3, [r2, #0]

				if (ptr != NULL) {
 800501a:	186b      	adds	r3, r5, r1
 800501c:	19db      	adds	r3, r3, r7
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00e      	beq.n	8005042 <HAL_TIM_PeriodElapsedCallback+0x976>
					tLine = i;
 8005024:	231a      	movs	r3, #26
 8005026:	33ff      	adds	r3, #255	; 0xff
 8005028:	185b      	adds	r3, r3, r1
 800502a:	19db      	adds	r3, r3, r7
 800502c:	1862      	adds	r2, r4, r1
 800502e:	19d2      	adds	r2, r2, r7
 8005030:	7812      	ldrb	r2, [r2, #0]
 8005032:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005034:	2320      	movs	r3, #32
 8005036:	33ff      	adds	r3, #255	; 0xff
 8005038:	185b      	adds	r3, r3, r1
 800503a:	19db      	adds	r3, r3, r7
 800503c:	2247      	movs	r2, #71	; 0x47
 800503e:	701a      	strb	r2, [r3, #0]
					break;
 8005040:	e029      	b.n	8005096 <HAL_TIM_PeriodElapsedCallback+0x9ca>
				}
				if (ptr2 != NULL) {
 8005042:	2394      	movs	r3, #148	; 0x94
 8005044:	2118      	movs	r1, #24
 8005046:	185b      	adds	r3, r3, r1
 8005048:	19db      	adds	r3, r3, r7
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d010      	beq.n	8005072 <HAL_TIM_PeriodElapsedCallback+0x9a6>
					tLine = i;
 8005050:	231a      	movs	r3, #26
 8005052:	33ff      	adds	r3, #255	; 0xff
 8005054:	185b      	adds	r3, r3, r1
 8005056:	19db      	adds	r3, r3, r7
 8005058:	228c      	movs	r2, #140	; 0x8c
 800505a:	0052      	lsls	r2, r2, #1
 800505c:	1852      	adds	r2, r2, r1
 800505e:	19d2      	adds	r2, r2, r7
 8005060:	7812      	ldrb	r2, [r2, #0]
 8005062:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005064:	2320      	movs	r3, #32
 8005066:	33ff      	adds	r3, #255	; 0xff
 8005068:	185b      	adds	r3, r3, r1
 800506a:	19db      	adds	r3, r3, r7
 800506c:	2242      	movs	r2, #66	; 0x42
 800506e:	701a      	strb	r2, [r3, #0]
					break;
 8005070:	e011      	b.n	8005096 <HAL_TIM_PeriodElapsedCallback+0x9ca>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005072:	218c      	movs	r1, #140	; 0x8c
 8005074:	0049      	lsls	r1, r1, #1
 8005076:	2018      	movs	r0, #24
 8005078:	180b      	adds	r3, r1, r0
 800507a:	19db      	adds	r3, r3, r7
 800507c:	781a      	ldrb	r2, [r3, #0]
 800507e:	180b      	adds	r3, r1, r0
 8005080:	19db      	adds	r3, r3, r7
 8005082:	3201      	adds	r2, #1
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	238c      	movs	r3, #140	; 0x8c
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	2218      	movs	r2, #24
 800508c:	189b      	adds	r3, r3, r2
 800508e:	19db      	adds	r3, r3, r7
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b05      	cmp	r3, #5
 8005094:	d99b      	bls.n	8004fce <HAL_TIM_PeriodElapsedCallback+0x902>
				}
			}
			if (tLine != 99) {
 8005096:	231a      	movs	r3, #26
 8005098:	33ff      	adds	r3, #255	; 0xff
 800509a:	2218      	movs	r2, #24
 800509c:	189b      	adds	r3, r3, r2
 800509e:	19db      	adds	r3, r3, r7
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b63      	cmp	r3, #99	; 0x63
 80050a4:	d021      	beq.n	80050ea <HAL_TIM_PeriodElapsedCallback+0xa1e>
				if (tResponse == 'G') {
 80050a6:	2320      	movs	r3, #32
 80050a8:	33ff      	adds	r3, #255	; 0xff
 80050aa:	189b      	adds	r3, r3, r2
 80050ac:	19db      	adds	r3, r3, r7
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b47      	cmp	r3, #71	; 0x47
 80050b2:	d108      	bne.n	80050c6 <HAL_TIM_PeriodElapsedCallback+0x9fa>
					isResponseOk = 1;
 80050b4:	4b32      	ldr	r3, [pc, #200]	; (8005180 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	701a      	strb	r2, [r3, #0]
					clearit();
 80050ba:	f001 f9dd 	bl	8006478 <clearit>
					commandCase = 0;
 80050be:	4b23      	ldr	r3, [pc, #140]	; (800514c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	e360      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>

				} else if (tResponse == 'B') {
 80050c6:	2320      	movs	r3, #32
 80050c8:	33ff      	adds	r3, #255	; 0xff
 80050ca:	2218      	movs	r2, #24
 80050cc:	189b      	adds	r3, r3, r2
 80050ce:	19db      	adds	r3, r3, r7
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b42      	cmp	r3, #66	; 0x42
 80050d4:	d000      	beq.n	80050d8 <HAL_TIM_PeriodElapsedCallback+0xa0c>
 80050d6:	e357      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>
					isResponseOk = 0;
 80050d8:	4b29      	ldr	r3, [pc, #164]	; (8005180 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
					clearit();
 80050de:	f001 f9cb 	bl	8006478 <clearit>
					commandCase = 0;
 80050e2:	4b1a      	ldr	r3, [pc, #104]	; (800514c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e34e      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>
				}
			} else {

				resTimeout--;
 80050ea:	4b26      	ldr	r3, [pc, #152]	; (8005184 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	4b23      	ldr	r3, [pc, #140]	; (8005184 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 80050f6:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 80050f8:	4b22      	ldr	r3, [pc, #136]	; (8005184 <HAL_TIM_PeriodElapsedCallback+0xab8>)
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d000      	beq.n	8005104 <HAL_TIM_PeriodElapsedCallback+0xa38>
 8005102:	e341      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>
					if (!recResponse) {
 8005104:	4b20      	ldr	r3, [pc, #128]	; (8005188 <HAL_TIM_PeriodElapsedCallback+0xabc>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_TIM_PeriodElapsedCallback+0xa46>
						//printf("TIMEOUT HASH TAG\n");
						rebootsystem();
 800510e:	f000 fded 	bl	8005cec <rebootsystem>

					}
					clearit();
 8005112:	f001 f9b1 	bl	8006478 <clearit>
					isResponseOk = 0;
 8005116:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <HAL_TIM_PeriodElapsedCallback+0xab4>)
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	e334      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>

				}
			}
		} else if (commandCase == 2) {
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d000      	beq.n	800512a <HAL_TIM_PeriodElapsedCallback+0xa5e>
 8005128:	e08c      	b.n	8005244 <HAL_TIM_PeriodElapsedCallback+0xb78>
			//CPIN Case
			uint8_t tLine = 99;
 800512a:	2318      	movs	r3, #24
 800512c:	33ff      	adds	r3, #255	; 0xff
 800512e:	2118      	movs	r1, #24
 8005130:	185b      	adds	r3, r3, r1
 8005132:	19db      	adds	r3, r3, r7
 8005134:	2263      	movs	r2, #99	; 0x63
 8005136:	701a      	strb	r2, [r3, #0]
			char *ptr;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005138:	238b      	movs	r3, #139	; 0x8b
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	185b      	adds	r3, r3, r1
 800513e:	19db      	adds	r3, r3, r7
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	e04e      	b.n	80051e4 <HAL_TIM_PeriodElapsedCallback+0xb18>
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	200009c6 	.word	0x200009c6
 800514c:	2000082b 	.word	0x2000082b
 8005150:	200006f4 	.word	0x200006f4
 8005154:	08012614 	.word	0x08012614
 8005158:	0801261c 	.word	0x0801261c
 800515c:	200009c7 	.word	0x200009c7
 8005160:	20000826 	.word	0x20000826
 8005164:	200009c4 	.word	0x200009c4
 8005168:	20000394 	.word	0x20000394
 800516c:	20000820 	.word	0x20000820
 8005170:	20000821 	.word	0x20000821
 8005174:	20000824 	.word	0x20000824
 8005178:	08012628 	.word	0x08012628
 800517c:	0801262c 	.word	0x0801262c
 8005180:	2000082c 	.word	0x2000082c
 8005184:	20000828 	.word	0x20000828
 8005188:	2000082d 	.word	0x2000082d
				ptr = strstr(responseBuffer[i], "READY");
 800518c:	248b      	movs	r4, #139	; 0x8b
 800518e:	0064      	lsls	r4, r4, #1
 8005190:	2518      	movs	r5, #24
 8005192:	1963      	adds	r3, r4, r5
 8005194:	19db      	adds	r3, r3, r7
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2232      	movs	r2, #50	; 0x32
 800519a:	435a      	muls	r2, r3
 800519c:	4bcf      	ldr	r3, [pc, #828]	; (80054dc <HAL_TIM_PeriodElapsedCallback+0xe10>)
 800519e:	18d3      	adds	r3, r2, r3
 80051a0:	4acf      	ldr	r2, [pc, #828]	; (80054e0 <HAL_TIM_PeriodElapsedCallback+0xe14>)
 80051a2:	0011      	movs	r1, r2
 80051a4:	0018      	movs	r0, r3
 80051a6:	f009 f82e 	bl	800e206 <strstr>
 80051aa:	0003      	movs	r3, r0
 80051ac:	229c      	movs	r2, #156	; 0x9c
 80051ae:	1951      	adds	r1, r2, r5
 80051b0:	19c9      	adds	r1, r1, r7
 80051b2:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 80051b4:	1953      	adds	r3, r2, r5
 80051b6:	19db      	adds	r3, r3, r7
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d008      	beq.n	80051d0 <HAL_TIM_PeriodElapsedCallback+0xb04>
					tLine = i;
 80051be:	2318      	movs	r3, #24
 80051c0:	33ff      	adds	r3, #255	; 0xff
 80051c2:	195b      	adds	r3, r3, r5
 80051c4:	19db      	adds	r3, r3, r7
 80051c6:	1962      	adds	r2, r4, r5
 80051c8:	19d2      	adds	r2, r2, r7
 80051ca:	7812      	ldrb	r2, [r2, #0]
 80051cc:	701a      	strb	r2, [r3, #0]
					break;
 80051ce:	e011      	b.n	80051f4 <HAL_TIM_PeriodElapsedCallback+0xb28>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80051d0:	218b      	movs	r1, #139	; 0x8b
 80051d2:	0049      	lsls	r1, r1, #1
 80051d4:	2018      	movs	r0, #24
 80051d6:	180b      	adds	r3, r1, r0
 80051d8:	19db      	adds	r3, r3, r7
 80051da:	781a      	ldrb	r2, [r3, #0]
 80051dc:	180b      	adds	r3, r1, r0
 80051de:	19db      	adds	r3, r3, r7
 80051e0:	3201      	adds	r2, #1
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	238b      	movs	r3, #139	; 0x8b
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	2218      	movs	r2, #24
 80051ea:	189b      	adds	r3, r3, r2
 80051ec:	19db      	adds	r3, r3, r7
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b05      	cmp	r3, #5
 80051f2:	d9cb      	bls.n	800518c <HAL_TIM_PeriodElapsedCallback+0xac0>
				}
			}
			if (tLine != 99) {
 80051f4:	2318      	movs	r3, #24
 80051f6:	33ff      	adds	r3, #255	; 0xff
 80051f8:	2218      	movs	r2, #24
 80051fa:	189b      	adds	r3, r3, r2
 80051fc:	19db      	adds	r3, r3, r7
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b63      	cmp	r3, #99	; 0x63
 8005202:	d005      	beq.n	8005210 <HAL_TIM_PeriodElapsedCallback+0xb44>
				isResponseOk = 1;
 8005204:	4bb7      	ldr	r3, [pc, #732]	; (80054e4 <HAL_TIM_PeriodElapsedCallback+0xe18>)
 8005206:	2201      	movs	r2, #1
 8005208:	701a      	strb	r2, [r3, #0]
				clearit();
 800520a:	f001 f935 	bl	8006478 <clearit>
 800520e:	e2bb      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>
			} else {
				resTimeout--;
 8005210:	4bb5      	ldr	r3, [pc, #724]	; (80054e8 <HAL_TIM_PeriodElapsedCallback+0xe1c>)
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	4bb3      	ldr	r3, [pc, #716]	; (80054e8 <HAL_TIM_PeriodElapsedCallback+0xe1c>)
 800521c:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 800521e:	4bb2      	ldr	r3, [pc, #712]	; (80054e8 <HAL_TIM_PeriodElapsedCallback+0xe1c>)
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d000      	beq.n	800522a <HAL_TIM_PeriodElapsedCallback+0xb5e>
 8005228:	e2ae      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>
					if (!recResponse) {
 800522a:	4bb0      	ldr	r3, [pc, #704]	; (80054ec <HAL_TIM_PeriodElapsedCallback+0xe20>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_TIM_PeriodElapsedCallback+0xb6c>
						rebootsystem();
 8005234:	f000 fd5a 	bl	8005cec <rebootsystem>

					}
					clearit();
 8005238:	f001 f91e 	bl	8006478 <clearit>
					isResponseOk = 0;
 800523c:	4ba9      	ldr	r3, [pc, #676]	; (80054e4 <HAL_TIM_PeriodElapsedCallback+0xe18>)
 800523e:	2200      	movs	r2, #0
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	e2a1      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>
				}
			}
		} else if (commandCase == 3) {
 8005244:	4baa      	ldr	r3, [pc, #680]	; (80054f0 <HAL_TIM_PeriodElapsedCallback+0xe24>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b03      	cmp	r3, #3
 800524c:	d000      	beq.n	8005250 <HAL_TIM_PeriodElapsedCallback+0xb84>
 800524e:	e0b6      	b.n	80053be <HAL_TIM_PeriodElapsedCallback+0xcf2>
			// CREG? / CGREG? case
			uint8_t tLine = 99;
 8005250:	2316      	movs	r3, #22
 8005252:	33ff      	adds	r3, #255	; 0xff
 8005254:	2118      	movs	r1, #24
 8005256:	185b      	adds	r3, r3, r1
 8005258:	19db      	adds	r3, r3, r7
 800525a:	2263      	movs	r2, #99	; 0x63
 800525c:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;
			char *ptr4;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 800525e:	238a      	movs	r3, #138	; 0x8a
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	185b      	adds	r3, r3, r1
 8005264:	19db      	adds	r3, r3, r7
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	e075      	b.n	8005358 <HAL_TIM_PeriodElapsedCallback+0xc8c>
				ptr = strstr(responseBuffer[i], "+CREG: 0,1");
 800526c:	248a      	movs	r4, #138	; 0x8a
 800526e:	0064      	lsls	r4, r4, #1
 8005270:	2618      	movs	r6, #24
 8005272:	19a3      	adds	r3, r4, r6
 8005274:	19db      	adds	r3, r3, r7
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2232      	movs	r2, #50	; 0x32
 800527a:	435a      	muls	r2, r3
 800527c:	4b97      	ldr	r3, [pc, #604]	; (80054dc <HAL_TIM_PeriodElapsedCallback+0xe10>)
 800527e:	18d3      	adds	r3, r2, r3
 8005280:	4a9c      	ldr	r2, [pc, #624]	; (80054f4 <HAL_TIM_PeriodElapsedCallback+0xe28>)
 8005282:	0011      	movs	r1, r2
 8005284:	0018      	movs	r0, r3
 8005286:	f008 ffbe 	bl	800e206 <strstr>
 800528a:	0003      	movs	r3, r0
 800528c:	25ac      	movs	r5, #172	; 0xac
 800528e:	19aa      	adds	r2, r5, r6
 8005290:	19d2      	adds	r2, r2, r7
 8005292:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "+CREG: 0,5");
 8005294:	19a3      	adds	r3, r4, r6
 8005296:	19db      	adds	r3, r3, r7
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2232      	movs	r2, #50	; 0x32
 800529c:	435a      	muls	r2, r3
 800529e:	4b8f      	ldr	r3, [pc, #572]	; (80054dc <HAL_TIM_PeriodElapsedCallback+0xe10>)
 80052a0:	18d3      	adds	r3, r2, r3
 80052a2:	4a95      	ldr	r2, [pc, #596]	; (80054f8 <HAL_TIM_PeriodElapsedCallback+0xe2c>)
 80052a4:	0011      	movs	r1, r2
 80052a6:	0018      	movs	r0, r3
 80052a8:	f008 ffad 	bl	800e206 <strstr>
 80052ac:	0003      	movs	r3, r0
 80052ae:	26a8      	movs	r6, #168	; 0xa8
 80052b0:	2018      	movs	r0, #24
 80052b2:	1832      	adds	r2, r6, r0
 80052b4:	19d2      	adds	r2, r2, r7
 80052b6:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "+CGREG: 0,1");
 80052b8:	1823      	adds	r3, r4, r0
 80052ba:	19db      	adds	r3, r3, r7
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2232      	movs	r2, #50	; 0x32
 80052c0:	435a      	muls	r2, r3
 80052c2:	4b86      	ldr	r3, [pc, #536]	; (80054dc <HAL_TIM_PeriodElapsedCallback+0xe10>)
 80052c4:	18d3      	adds	r3, r2, r3
 80052c6:	4a8d      	ldr	r2, [pc, #564]	; (80054fc <HAL_TIM_PeriodElapsedCallback+0xe30>)
 80052c8:	0011      	movs	r1, r2
 80052ca:	0018      	movs	r0, r3
 80052cc:	f008 ff9b 	bl	800e206 <strstr>
 80052d0:	0003      	movs	r3, r0
 80052d2:	22a4      	movs	r2, #164	; 0xa4
 80052d4:	2018      	movs	r0, #24
 80052d6:	1812      	adds	r2, r2, r0
 80052d8:	19d1      	adds	r1, r2, r7
 80052da:	600b      	str	r3, [r1, #0]
				ptr4 = strstr(responseBuffer[i], "+CGREG: 0,5");
 80052dc:	1823      	adds	r3, r4, r0
 80052de:	19db      	adds	r3, r3, r7
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2232      	movs	r2, #50	; 0x32
 80052e4:	435a      	muls	r2, r3
 80052e6:	4b7d      	ldr	r3, [pc, #500]	; (80054dc <HAL_TIM_PeriodElapsedCallback+0xe10>)
 80052e8:	18d3      	adds	r3, r2, r3
 80052ea:	4a85      	ldr	r2, [pc, #532]	; (8005500 <HAL_TIM_PeriodElapsedCallback+0xe34>)
 80052ec:	0011      	movs	r1, r2
 80052ee:	0018      	movs	r0, r3
 80052f0:	f008 ff89 	bl	800e206 <strstr>
 80052f4:	0003      	movs	r3, r0
 80052f6:	21a0      	movs	r1, #160	; 0xa0
 80052f8:	2218      	movs	r2, #24
 80052fa:	1888      	adds	r0, r1, r2
 80052fc:	19c0      	adds	r0, r0, r7
 80052fe:	6003      	str	r3, [r0, #0]
				if (ptr != NULL || ptr2 != NULL || ptr3 != NULL || ptr4 != NULL) {
 8005300:	0010      	movs	r0, r2
 8005302:	182b      	adds	r3, r5, r0
 8005304:	19db      	adds	r3, r3, r7
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10f      	bne.n	800532c <HAL_TIM_PeriodElapsedCallback+0xc60>
 800530c:	1833      	adds	r3, r6, r0
 800530e:	19db      	adds	r3, r3, r7
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10a      	bne.n	800532c <HAL_TIM_PeriodElapsedCallback+0xc60>
 8005316:	22a4      	movs	r2, #164	; 0xa4
 8005318:	1813      	adds	r3, r2, r0
 800531a:	19db      	adds	r3, r3, r7
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d104      	bne.n	800532c <HAL_TIM_PeriodElapsedCallback+0xc60>
 8005322:	180b      	adds	r3, r1, r0
 8005324:	19db      	adds	r3, r3, r7
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00b      	beq.n	8005344 <HAL_TIM_PeriodElapsedCallback+0xc78>
					tLine = i;
 800532c:	2316      	movs	r3, #22
 800532e:	33ff      	adds	r3, #255	; 0xff
 8005330:	2118      	movs	r1, #24
 8005332:	185b      	adds	r3, r3, r1
 8005334:	19db      	adds	r3, r3, r7
 8005336:	228a      	movs	r2, #138	; 0x8a
 8005338:	0052      	lsls	r2, r2, #1
 800533a:	1852      	adds	r2, r2, r1
 800533c:	19d2      	adds	r2, r2, r7
 800533e:	7812      	ldrb	r2, [r2, #0]
 8005340:	701a      	strb	r2, [r3, #0]
					break;
 8005342:	e011      	b.n	8005368 <HAL_TIM_PeriodElapsedCallback+0xc9c>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005344:	218a      	movs	r1, #138	; 0x8a
 8005346:	0049      	lsls	r1, r1, #1
 8005348:	2018      	movs	r0, #24
 800534a:	180b      	adds	r3, r1, r0
 800534c:	19db      	adds	r3, r3, r7
 800534e:	781a      	ldrb	r2, [r3, #0]
 8005350:	180b      	adds	r3, r1, r0
 8005352:	19db      	adds	r3, r3, r7
 8005354:	3201      	adds	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	238a      	movs	r3, #138	; 0x8a
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	2218      	movs	r2, #24
 800535e:	189b      	adds	r3, r3, r2
 8005360:	19db      	adds	r3, r3, r7
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b05      	cmp	r3, #5
 8005366:	d981      	bls.n	800526c <HAL_TIM_PeriodElapsedCallback+0xba0>
				}
			}
			if (tLine != 99) {
 8005368:	2316      	movs	r3, #22
 800536a:	33ff      	adds	r3, #255	; 0xff
 800536c:	2218      	movs	r2, #24
 800536e:	189b      	adds	r3, r3, r2
 8005370:	19db      	adds	r3, r3, r7
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b63      	cmp	r3, #99	; 0x63
 8005376:	d008      	beq.n	800538a <HAL_TIM_PeriodElapsedCallback+0xcbe>
				isReg = 1;
 8005378:	4b62      	ldr	r3, [pc, #392]	; (8005504 <HAL_TIM_PeriodElapsedCallback+0xe38>)
 800537a:	2201      	movs	r2, #1
 800537c:	701a      	strb	r2, [r3, #0]
				isResponseOk = 1;
 800537e:	4b59      	ldr	r3, [pc, #356]	; (80054e4 <HAL_TIM_PeriodElapsedCallback+0xe18>)
 8005380:	2201      	movs	r2, #1
 8005382:	701a      	strb	r2, [r3, #0]
				clearit();
 8005384:	f001 f878 	bl	8006478 <clearit>
 8005388:	e1fe      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>

			} else {
				resTimeout--;
 800538a:	4b57      	ldr	r3, [pc, #348]	; (80054e8 <HAL_TIM_PeriodElapsedCallback+0xe1c>)
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	4b54      	ldr	r3, [pc, #336]	; (80054e8 <HAL_TIM_PeriodElapsedCallback+0xe1c>)
 8005396:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005398:	4b53      	ldr	r3, [pc, #332]	; (80054e8 <HAL_TIM_PeriodElapsedCallback+0xe1c>)
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d000      	beq.n	80053a4 <HAL_TIM_PeriodElapsedCallback+0xcd8>
 80053a2:	e1f1      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>
					if (!recResponse) {
 80053a4:	4b51      	ldr	r3, [pc, #324]	; (80054ec <HAL_TIM_PeriodElapsedCallback+0xe20>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_TIM_PeriodElapsedCallback+0xce6>
						rebootsystem();
 80053ae:	f000 fc9d 	bl	8005cec <rebootsystem>
					}
					clearit();
 80053b2:	f001 f861 	bl	8006478 <clearit>
					isResponseOk = 0;
 80053b6:	4b4b      	ldr	r3, [pc, #300]	; (80054e4 <HAL_TIM_PeriodElapsedCallback+0xe18>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	e1e4      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>
				}
			}
		}

		else if (commandCase == 4) {
 80053be:	4b4c      	ldr	r3, [pc, #304]	; (80054f0 <HAL_TIM_PeriodElapsedCallback+0xe24>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d000      	beq.n	80053ca <HAL_TIM_PeriodElapsedCallback+0xcfe>
 80053c8:	e0fc      	b.n	80055c4 <HAL_TIM_PeriodElapsedCallback+0xef8>
			//CGSN (IMEI) case
			uint8_t tLine = 99;
 80053ca:	2314      	movs	r3, #20
 80053cc:	33ff      	adds	r3, #255	; 0xff
 80053ce:	2118      	movs	r1, #24
 80053d0:	185b      	adds	r3, r3, r1
 80053d2:	19db      	adds	r3, r3, r7
 80053d4:	2263      	movs	r2, #99	; 0x63
 80053d6:	701a      	strb	r2, [r3, #0]
			char *ptr;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80053d8:	2389      	movs	r3, #137	; 0x89
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	185b      	adds	r3, r3, r1
 80053de:	19db      	adds	r3, r3, r7
 80053e0:	2200      	movs	r2, #0
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	e02b      	b.n	800543e <HAL_TIM_PeriodElapsedCallback+0xd72>
				ptr = strstr(responseBuffer[i], "OK");
 80053e6:	2489      	movs	r4, #137	; 0x89
 80053e8:	0064      	lsls	r4, r4, #1
 80053ea:	2518      	movs	r5, #24
 80053ec:	1963      	adds	r3, r4, r5
 80053ee:	19db      	adds	r3, r3, r7
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2232      	movs	r2, #50	; 0x32
 80053f4:	435a      	muls	r2, r3
 80053f6:	4b39      	ldr	r3, [pc, #228]	; (80054dc <HAL_TIM_PeriodElapsedCallback+0xe10>)
 80053f8:	18d3      	adds	r3, r2, r3
 80053fa:	4a43      	ldr	r2, [pc, #268]	; (8005508 <HAL_TIM_PeriodElapsedCallback+0xe3c>)
 80053fc:	0011      	movs	r1, r2
 80053fe:	0018      	movs	r0, r3
 8005400:	f008 ff01 	bl	800e206 <strstr>
 8005404:	0003      	movs	r3, r0
 8005406:	22b0      	movs	r2, #176	; 0xb0
 8005408:	1951      	adds	r1, r2, r5
 800540a:	19c9      	adds	r1, r1, r7
 800540c:	600b      	str	r3, [r1, #0]
				if (ptr != NULL) {
 800540e:	1953      	adds	r3, r2, r5
 8005410:	19db      	adds	r3, r3, r7
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_TIM_PeriodElapsedCallback+0xd5e>
					tLine = i;
 8005418:	2314      	movs	r3, #20
 800541a:	33ff      	adds	r3, #255	; 0xff
 800541c:	195b      	adds	r3, r3, r5
 800541e:	19db      	adds	r3, r3, r7
 8005420:	1962      	adds	r2, r4, r5
 8005422:	19d2      	adds	r2, r2, r7
 8005424:	7812      	ldrb	r2, [r2, #0]
 8005426:	701a      	strb	r2, [r3, #0]
					break;
 8005428:	e011      	b.n	800544e <HAL_TIM_PeriodElapsedCallback+0xd82>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 800542a:	2189      	movs	r1, #137	; 0x89
 800542c:	0049      	lsls	r1, r1, #1
 800542e:	2018      	movs	r0, #24
 8005430:	180b      	adds	r3, r1, r0
 8005432:	19db      	adds	r3, r3, r7
 8005434:	781a      	ldrb	r2, [r3, #0]
 8005436:	180b      	adds	r3, r1, r0
 8005438:	19db      	adds	r3, r3, r7
 800543a:	3201      	adds	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	2389      	movs	r3, #137	; 0x89
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	2218      	movs	r2, #24
 8005444:	189b      	adds	r3, r3, r2
 8005446:	19db      	adds	r3, r3, r7
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b05      	cmp	r3, #5
 800544c:	d9cb      	bls.n	80053e6 <HAL_TIM_PeriodElapsedCallback+0xd1a>
				}
			}
			if (tLine != 99) {
 800544e:	2414      	movs	r4, #20
 8005450:	34ff      	adds	r4, #255	; 0xff
 8005452:	2118      	movs	r1, #24
 8005454:	1863      	adds	r3, r4, r1
 8005456:	19db      	adds	r3, r3, r7
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b63      	cmp	r3, #99	; 0x63
 800545c:	d100      	bne.n	8005460 <HAL_TIM_PeriodElapsedCallback+0xd94>
 800545e:	e097      	b.n	8005590 <HAL_TIM_PeriodElapsedCallback+0xec4>
				isResponseOk = 1;
 8005460:	4b20      	ldr	r3, [pc, #128]	; (80054e4 <HAL_TIM_PeriodElapsedCallback+0xe18>)
 8005462:	2201      	movs	r2, #1
 8005464:	701a      	strb	r2, [r3, #0]
				//to-do with that line
				char p[10];
				memset(p, 0, sizeof(p));
 8005466:	2574      	movs	r5, #116	; 0x74
 8005468:	000e      	movs	r6, r1
 800546a:	186b      	adds	r3, r5, r1
 800546c:	19db      	adds	r3, r3, r7
 800546e:	220a      	movs	r2, #10
 8005470:	2100      	movs	r1, #0
 8005472:	0018      	movs	r0, r3
 8005474:	f008 fe6f 	bl	800e156 <memset>
				char *myt;
				myt = responseBuffer[tLine - 2];
 8005478:	0031      	movs	r1, r6
 800547a:	1863      	adds	r3, r4, r1
 800547c:	19db      	adds	r3, r3, r7
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	3b02      	subs	r3, #2
 8005482:	2232      	movs	r2, #50	; 0x32
 8005484:	435a      	muls	r2, r3
 8005486:	4b15      	ldr	r3, [pc, #84]	; (80054dc <HAL_TIM_PeriodElapsedCallback+0xe10>)
 8005488:	18d3      	adds	r3, r2, r3
 800548a:	2486      	movs	r4, #134	; 0x86
 800548c:	0064      	lsls	r4, r4, #1
 800548e:	000e      	movs	r6, r1
 8005490:	19a2      	adds	r2, r4, r6
 8005492:	19d2      	adds	r2, r2, r7
 8005494:	6013      	str	r3, [r2, #0]
				strncpy(p, myt, 1);
 8005496:	19a3      	adds	r3, r4, r6
 8005498:	19db      	adds	r3, r3, r7
 800549a:	6819      	ldr	r1, [r3, #0]
 800549c:	19ab      	adds	r3, r5, r6
 800549e:	19db      	adds	r3, r3, r7
 80054a0:	2201      	movs	r2, #1
 80054a2:	0018      	movs	r0, r3
 80054a4:	f008 fe9b 	bl	800e1de <strncpy>
				imei[0] = (int) strtol(p, NULL, 16);
 80054a8:	19ab      	adds	r3, r5, r6
 80054aa:	19db      	adds	r3, r3, r7
 80054ac:	2210      	movs	r2, #16
 80054ae:	2100      	movs	r1, #0
 80054b0:	0018      	movs	r0, r3
 80054b2:	f009 fdcf 	bl	800f054 <strtol>
 80054b6:	0003      	movs	r3, r0
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	4b14      	ldr	r3, [pc, #80]	; (800550c <HAL_TIM_PeriodElapsedCallback+0xe40>)
 80054bc:	701a      	strb	r2, [r3, #0]
				myt++;
 80054be:	19a3      	adds	r3, r4, r6
 80054c0:	19db      	adds	r3, r3, r7
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3301      	adds	r3, #1
 80054c6:	19a2      	adds	r2, r4, r6
 80054c8:	19d2      	adds	r2, r2, r7
 80054ca:	6013      	str	r3, [r2, #0]
				for (int i = 1; i < 8; i++) {
 80054cc:	2301      	movs	r3, #1
 80054ce:	2284      	movs	r2, #132	; 0x84
 80054d0:	0052      	lsls	r2, r2, #1
 80054d2:	1992      	adds	r2, r2, r6
 80054d4:	19d2      	adds	r2, r2, r7
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	e04f      	b.n	800557a <HAL_TIM_PeriodElapsedCallback+0xeae>
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	200006f4 	.word	0x200006f4
 80054e0:	08012634 	.word	0x08012634
 80054e4:	2000082c 	.word	0x2000082c
 80054e8:	20000828 	.word	0x20000828
 80054ec:	2000082d 	.word	0x2000082d
 80054f0:	2000082b 	.word	0x2000082b
 80054f4:	0801263c 	.word	0x0801263c
 80054f8:	08012648 	.word	0x08012648
 80054fc:	08012654 	.word	0x08012654
 8005500:	08012660 	.word	0x08012660
 8005504:	200009c5 	.word	0x200009c5
 8005508:	08012628 	.word	0x08012628
 800550c:	20000830 	.word	0x20000830
					memset(p, 0, sizeof(p));
 8005510:	2474      	movs	r4, #116	; 0x74
 8005512:	2618      	movs	r6, #24
 8005514:	19a3      	adds	r3, r4, r6
 8005516:	19db      	adds	r3, r3, r7
 8005518:	220a      	movs	r2, #10
 800551a:	2100      	movs	r1, #0
 800551c:	0018      	movs	r0, r3
 800551e:	f008 fe1a 	bl	800e156 <memset>
					strncpy(p, myt, 2);
 8005522:	2586      	movs	r5, #134	; 0x86
 8005524:	006d      	lsls	r5, r5, #1
 8005526:	19ab      	adds	r3, r5, r6
 8005528:	19db      	adds	r3, r3, r7
 800552a:	6819      	ldr	r1, [r3, #0]
 800552c:	19a3      	adds	r3, r4, r6
 800552e:	19db      	adds	r3, r3, r7
 8005530:	2202      	movs	r2, #2
 8005532:	0018      	movs	r0, r3
 8005534:	f008 fe53 	bl	800e1de <strncpy>
					imei[i] = (int) strtol(p, NULL, 16);
 8005538:	19a3      	adds	r3, r4, r6
 800553a:	19db      	adds	r3, r3, r7
 800553c:	2210      	movs	r2, #16
 800553e:	2100      	movs	r1, #0
 8005540:	0018      	movs	r0, r3
 8005542:	f009 fd87 	bl	800f054 <strtol>
 8005546:	0003      	movs	r3, r0
 8005548:	b2d9      	uxtb	r1, r3
 800554a:	4ae1      	ldr	r2, [pc, #900]	; (80058d0 <HAL_TIM_PeriodElapsedCallback+0x1204>)
 800554c:	2084      	movs	r0, #132	; 0x84
 800554e:	0040      	lsls	r0, r0, #1
 8005550:	0034      	movs	r4, r6
 8005552:	1903      	adds	r3, r0, r4
 8005554:	19db      	adds	r3, r3, r7
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	18d3      	adds	r3, r2, r3
 800555a:	1c0a      	adds	r2, r1, #0
 800555c:	701a      	strb	r2, [r3, #0]
					myt += 2;
 800555e:	192b      	adds	r3, r5, r4
 8005560:	19db      	adds	r3, r3, r7
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3302      	adds	r3, #2
 8005566:	192a      	adds	r2, r5, r4
 8005568:	19d2      	adds	r2, r2, r7
 800556a:	6013      	str	r3, [r2, #0]
				for (int i = 1; i < 8; i++) {
 800556c:	1903      	adds	r3, r0, r4
 800556e:	19db      	adds	r3, r3, r7
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3301      	adds	r3, #1
 8005574:	1902      	adds	r2, r0, r4
 8005576:	19d2      	adds	r2, r2, r7
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	2384      	movs	r3, #132	; 0x84
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	2218      	movs	r2, #24
 8005580:	189b      	adds	r3, r3, r2
 8005582:	19db      	adds	r3, r3, r7
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b07      	cmp	r3, #7
 8005588:	ddc2      	ble.n	8005510 <HAL_TIM_PeriodElapsedCallback+0xe44>
				}
				clearit();
 800558a:	f000 ff75 	bl	8006478 <clearit>
 800558e:	e0fb      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>

			} else {
				resTimeout--;
 8005590:	4bd0      	ldr	r3, [pc, #832]	; (80058d4 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	4bce      	ldr	r3, [pc, #824]	; (80058d4 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 800559c:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 800559e:	4bcd      	ldr	r3, [pc, #820]	; (80058d4 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d000      	beq.n	80055aa <HAL_TIM_PeriodElapsedCallback+0xede>
 80055a8:	e0ee      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>
					if (!recResponse) {
 80055aa:	4bcb      	ldr	r3, [pc, #812]	; (80058d8 <HAL_TIM_PeriodElapsedCallback+0x120c>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_TIM_PeriodElapsedCallback+0xeec>
						rebootsystem();
 80055b4:	f000 fb9a 	bl	8005cec <rebootsystem>
					}
					isResponseOk = 0;
 80055b8:	4bc8      	ldr	r3, [pc, #800]	; (80058dc <HAL_TIM_PeriodElapsedCallback+0x1210>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	701a      	strb	r2, [r3, #0]
					clearit();
 80055be:	f000 ff5b 	bl	8006478 <clearit>
 80055c2:	e0e1      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>

				}
			}
		} else if (commandCase == 5) {
 80055c4:	4bc6      	ldr	r3, [pc, #792]	; (80058e0 <HAL_TIM_PeriodElapsedCallback+0x1214>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b05      	cmp	r3, #5
 80055cc:	d000      	beq.n	80055d0 <HAL_TIM_PeriodElapsedCallback+0xf04>
 80055ce:	e0db      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>
			//tcp open case
			uint8_t tLine = 99;
 80055d0:	2308      	movs	r3, #8
 80055d2:	33ff      	adds	r3, #255	; 0xff
 80055d4:	2218      	movs	r2, #24
 80055d6:	189b      	adds	r3, r3, r2
 80055d8:	19db      	adds	r3, r3, r7
 80055da:	2263      	movs	r2, #99	; 0x63
 80055dc:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80055de:	238f      	movs	r3, #143	; 0x8f
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	18fb      	adds	r3, r7, r3
 80055e4:	2200      	movs	r2, #0
 80055e6:	701a      	strb	r2, [r3, #0]
 80055e8:	e083      	b.n	80056f2 <HAL_TIM_PeriodElapsedCallback+0x1026>
				ptr = strstr(responseBuffer[i], "ALREADY CONNECT"); //todo check wether in data mode or not
 80055ea:	268f      	movs	r6, #143	; 0x8f
 80055ec:	0076      	lsls	r6, r6, #1
 80055ee:	19bb      	adds	r3, r7, r6
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2232      	movs	r2, #50	; 0x32
 80055f4:	435a      	muls	r2, r3
 80055f6:	4bbb      	ldr	r3, [pc, #748]	; (80058e4 <HAL_TIM_PeriodElapsedCallback+0x1218>)
 80055f8:	18d3      	adds	r3, r2, r3
 80055fa:	4abb      	ldr	r2, [pc, #748]	; (80058e8 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 80055fc:	0011      	movs	r1, r2
 80055fe:	0018      	movs	r0, r3
 8005600:	f008 fe01 	bl	800e206 <strstr>
 8005604:	0003      	movs	r3, r0
 8005606:	24bc      	movs	r4, #188	; 0xbc
 8005608:	2518      	movs	r5, #24
 800560a:	1962      	adds	r2, r4, r5
 800560c:	19d2      	adds	r2, r2, r7
 800560e:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "CONNECT FAIL");
 8005610:	19bb      	adds	r3, r7, r6
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2232      	movs	r2, #50	; 0x32
 8005616:	435a      	muls	r2, r3
 8005618:	4bb2      	ldr	r3, [pc, #712]	; (80058e4 <HAL_TIM_PeriodElapsedCallback+0x1218>)
 800561a:	18d3      	adds	r3, r2, r3
 800561c:	4ab3      	ldr	r2, [pc, #716]	; (80058ec <HAL_TIM_PeriodElapsedCallback+0x1220>)
 800561e:	0011      	movs	r1, r2
 8005620:	0018      	movs	r0, r3
 8005622:	f008 fdf0 	bl	800e206 <strstr>
 8005626:	0003      	movs	r3, r0
 8005628:	22b8      	movs	r2, #184	; 0xb8
 800562a:	1952      	adds	r2, r2, r5
 800562c:	19d2      	adds	r2, r2, r7
 800562e:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "CONNECT");
 8005630:	19bb      	adds	r3, r7, r6
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2232      	movs	r2, #50	; 0x32
 8005636:	435a      	muls	r2, r3
 8005638:	4baa      	ldr	r3, [pc, #680]	; (80058e4 <HAL_TIM_PeriodElapsedCallback+0x1218>)
 800563a:	18d3      	adds	r3, r2, r3
 800563c:	4aac      	ldr	r2, [pc, #688]	; (80058f0 <HAL_TIM_PeriodElapsedCallback+0x1224>)
 800563e:	0011      	movs	r1, r2
 8005640:	0018      	movs	r0, r3
 8005642:	f008 fde0 	bl	800e206 <strstr>
 8005646:	0003      	movs	r3, r0
 8005648:	22b4      	movs	r2, #180	; 0xb4
 800564a:	1952      	adds	r2, r2, r5
 800564c:	19d2      	adds	r2, r2, r7
 800564e:	6013      	str	r3, [r2, #0]

				if (ptr != NULL) {
 8005650:	1963      	adds	r3, r4, r5
 8005652:	19db      	adds	r3, r3, r7
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d010      	beq.n	800567c <HAL_TIM_PeriodElapsedCallback+0xfb0>
					tLine = i;
 800565a:	2308      	movs	r3, #8
 800565c:	33ff      	adds	r3, #255	; 0xff
 800565e:	195b      	adds	r3, r3, r5
 8005660:	19db      	adds	r3, r3, r7
 8005662:	19ba      	adds	r2, r7, r6
 8005664:	7812      	ldrb	r2, [r2, #0]
 8005666:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005668:	2320      	movs	r3, #32
 800566a:	33ff      	adds	r3, #255	; 0xff
 800566c:	195b      	adds	r3, r3, r5
 800566e:	19db      	adds	r3, r3, r7
 8005670:	2247      	movs	r2, #71	; 0x47
 8005672:	701a      	strb	r2, [r3, #0]
					isDataMode = 0;
 8005674:	4b9f      	ldr	r3, [pc, #636]	; (80058f4 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 8005676:	2200      	movs	r2, #0
 8005678:	701a      	strb	r2, [r3, #0]
					break;
 800567a:	e041      	b.n	8005700 <HAL_TIM_PeriodElapsedCallback+0x1034>
				} else if (ptr2 != NULL) {
 800567c:	23b8      	movs	r3, #184	; 0xb8
 800567e:	2118      	movs	r1, #24
 8005680:	185b      	adds	r3, r3, r1
 8005682:	19db      	adds	r3, r3, r7
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d012      	beq.n	80056b0 <HAL_TIM_PeriodElapsedCallback+0xfe4>
					tLine = i;
 800568a:	2308      	movs	r3, #8
 800568c:	33ff      	adds	r3, #255	; 0xff
 800568e:	185b      	adds	r3, r3, r1
 8005690:	19db      	adds	r3, r3, r7
 8005692:	228f      	movs	r2, #143	; 0x8f
 8005694:	0052      	lsls	r2, r2, #1
 8005696:	18ba      	adds	r2, r7, r2
 8005698:	7812      	ldrb	r2, [r2, #0]
 800569a:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 800569c:	2320      	movs	r3, #32
 800569e:	33ff      	adds	r3, #255	; 0xff
 80056a0:	185b      	adds	r3, r3, r1
 80056a2:	19db      	adds	r3, r3, r7
 80056a4:	2242      	movs	r2, #66	; 0x42
 80056a6:	701a      	strb	r2, [r3, #0]
					isDataMode = 0;
 80056a8:	4b92      	ldr	r3, [pc, #584]	; (80058f4 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	701a      	strb	r2, [r3, #0]
					break;
 80056ae:	e027      	b.n	8005700 <HAL_TIM_PeriodElapsedCallback+0x1034>
				} else if (ptr3 != NULL) {
 80056b0:	23b4      	movs	r3, #180	; 0xb4
 80056b2:	2118      	movs	r1, #24
 80056b4:	185b      	adds	r3, r3, r1
 80056b6:	19db      	adds	r3, r3, r7
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d012      	beq.n	80056e4 <HAL_TIM_PeriodElapsedCallback+0x1018>
					tLine = i;
 80056be:	2308      	movs	r3, #8
 80056c0:	33ff      	adds	r3, #255	; 0xff
 80056c2:	185b      	adds	r3, r3, r1
 80056c4:	19db      	adds	r3, r3, r7
 80056c6:	228f      	movs	r2, #143	; 0x8f
 80056c8:	0052      	lsls	r2, r2, #1
 80056ca:	18ba      	adds	r2, r7, r2
 80056cc:	7812      	ldrb	r2, [r2, #0]
 80056ce:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 80056d0:	2320      	movs	r3, #32
 80056d2:	33ff      	adds	r3, #255	; 0xff
 80056d4:	185b      	adds	r3, r3, r1
 80056d6:	19db      	adds	r3, r3, r7
 80056d8:	2247      	movs	r2, #71	; 0x47
 80056da:	701a      	strb	r2, [r3, #0]
					isDataMode = 1;
 80056dc:	4b85      	ldr	r3, [pc, #532]	; (80058f4 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 80056de:	2201      	movs	r2, #1
 80056e0:	701a      	strb	r2, [r3, #0]
					break;
 80056e2:	e00d      	b.n	8005700 <HAL_TIM_PeriodElapsedCallback+0x1034>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 80056e4:	218f      	movs	r1, #143	; 0x8f
 80056e6:	0049      	lsls	r1, r1, #1
 80056e8:	187b      	adds	r3, r7, r1
 80056ea:	781a      	ldrb	r2, [r3, #0]
 80056ec:	187b      	adds	r3, r7, r1
 80056ee:	3201      	adds	r2, #1
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	238f      	movs	r3, #143	; 0x8f
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	d800      	bhi.n	8005700 <HAL_TIM_PeriodElapsedCallback+0x1034>
 80056fe:	e774      	b.n	80055ea <HAL_TIM_PeriodElapsedCallback+0xf1e>
				}
			}
			if (tLine != 99) {
 8005700:	2308      	movs	r3, #8
 8005702:	33ff      	adds	r3, #255	; 0xff
 8005704:	2218      	movs	r2, #24
 8005706:	189b      	adds	r3, r3, r2
 8005708:	19db      	adds	r3, r3, r7
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b63      	cmp	r3, #99	; 0x63
 800570e:	d023      	beq.n	8005758 <HAL_TIM_PeriodElapsedCallback+0x108c>
				if (tResponse == 'G') {
 8005710:	2320      	movs	r3, #32
 8005712:	33ff      	adds	r3, #255	; 0xff
 8005714:	189b      	adds	r3, r3, r2
 8005716:	19db      	adds	r3, r3, r7
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b47      	cmp	r3, #71	; 0x47
 800571c:	d10b      	bne.n	8005736 <HAL_TIM_PeriodElapsedCallback+0x106a>
					isResponseOk = 1;
 800571e:	4b6f      	ldr	r3, [pc, #444]	; (80058dc <HAL_TIM_PeriodElapsedCallback+0x1210>)
 8005720:	2201      	movs	r2, #1
 8005722:	701a      	strb	r2, [r3, #0]
					//to-do with that line
					clearit();
 8005724:	f000 fea8 	bl	8006478 <clearit>
					isTcpOpen = 1;
 8005728:	4b73      	ldr	r3, [pc, #460]	; (80058f8 <HAL_TIM_PeriodElapsedCallback+0x122c>)
 800572a:	2201      	movs	r2, #1
 800572c:	701a      	strb	r2, [r3, #0]
					isDataMode = 1;
 800572e:	4b71      	ldr	r3, [pc, #452]	; (80058f4 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 8005730:	2201      	movs	r2, #1
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	e028      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>

				} else if (tResponse == 'B') {
 8005736:	2320      	movs	r3, #32
 8005738:	33ff      	adds	r3, #255	; 0xff
 800573a:	2218      	movs	r2, #24
 800573c:	189b      	adds	r3, r3, r2
 800573e:	19db      	adds	r3, r3, r7
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b42      	cmp	r3, #66	; 0x42
 8005744:	d120      	bne.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>
					isResponseOk = 0;
 8005746:	4b65      	ldr	r3, [pc, #404]	; (80058dc <HAL_TIM_PeriodElapsedCallback+0x1210>)
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
					clearit();
 800574c:	f000 fe94 	bl	8006478 <clearit>
					isTcpOpen = 0;
 8005750:	4b69      	ldr	r3, [pc, #420]	; (80058f8 <HAL_TIM_PeriodElapsedCallback+0x122c>)
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	e017      	b.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>
				}
			} else {
				resTimeout--;
 8005758:	4b5e      	ldr	r3, [pc, #376]	; (80058d4 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	4b5c      	ldr	r3, [pc, #368]	; (80058d4 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 8005764:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005766:	4b5b      	ldr	r3, [pc, #364]	; (80058d4 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10b      	bne.n	8005788 <HAL_TIM_PeriodElapsedCallback+0x10bc>
					if (!recResponse) {
 8005770:	4b59      	ldr	r3, [pc, #356]	; (80058d8 <HAL_TIM_PeriodElapsedCallback+0x120c>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_TIM_PeriodElapsedCallback+0x10b2>
						rebootsystem();
 800577a:	f000 fab7 	bl	8005cec <rebootsystem>
					}
					clearit();
 800577e:	f000 fe7b 	bl	8006478 <clearit>
					isResponseOk = 0;
 8005782:	4b56      	ldr	r3, [pc, #344]	; (80058dc <HAL_TIM_PeriodElapsedCallback+0x1210>)
 8005784:	2200      	movs	r2, #0
 8005786:	701a      	strb	r2, [r3, #0]

				}
			}
		}
		if (commandCase == 6) {
 8005788:	4b55      	ldr	r3, [pc, #340]	; (80058e0 <HAL_TIM_PeriodElapsedCallback+0x1214>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b06      	cmp	r3, #6
 8005790:	d000      	beq.n	8005794 <HAL_TIM_PeriodElapsedCallback+0x10c8>
 8005792:	e0e0      	b.n	8005956 <HAL_TIM_PeriodElapsedCallback+0x128a>
			uint8_t tLine = 99;
 8005794:	231e      	movs	r3, #30
 8005796:	33ff      	adds	r3, #255	; 0xff
 8005798:	18fb      	adds	r3, r7, r3
 800579a:	2263      	movs	r2, #99	; 0x63
 800579c:	701a      	strb	r2, [r3, #0]
			char *ptr;
			char *ptr2;
			char *ptr3;

			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 800579e:	238e      	movs	r3, #142	; 0x8e
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	18fb      	adds	r3, r7, r3
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	e078      	b.n	800589c <HAL_TIM_PeriodElapsedCallback+0x11d0>
				ptr = strstr(responseBuffer[i], "NO CARRIER");
 80057aa:	268e      	movs	r6, #142	; 0x8e
 80057ac:	0076      	lsls	r6, r6, #1
 80057ae:	19bb      	adds	r3, r7, r6
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2232      	movs	r2, #50	; 0x32
 80057b4:	435a      	muls	r2, r3
 80057b6:	4b4b      	ldr	r3, [pc, #300]	; (80058e4 <HAL_TIM_PeriodElapsedCallback+0x1218>)
 80057b8:	18d3      	adds	r3, r2, r3
 80057ba:	4a50      	ldr	r2, [pc, #320]	; (80058fc <HAL_TIM_PeriodElapsedCallback+0x1230>)
 80057bc:	0011      	movs	r1, r2
 80057be:	0018      	movs	r0, r3
 80057c0:	f008 fd21 	bl	800e206 <strstr>
 80057c4:	0003      	movs	r3, r0
 80057c6:	2488      	movs	r4, #136	; 0x88
 80057c8:	2518      	movs	r5, #24
 80057ca:	1962      	adds	r2, r4, r5
 80057cc:	19d2      	adds	r2, r2, r7
 80057ce:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 80057d0:	19bb      	adds	r3, r7, r6
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2232      	movs	r2, #50	; 0x32
 80057d6:	435a      	muls	r2, r3
 80057d8:	4b42      	ldr	r3, [pc, #264]	; (80058e4 <HAL_TIM_PeriodElapsedCallback+0x1218>)
 80057da:	18d3      	adds	r3, r2, r3
 80057dc:	4a48      	ldr	r2, [pc, #288]	; (8005900 <HAL_TIM_PeriodElapsedCallback+0x1234>)
 80057de:	0011      	movs	r1, r2
 80057e0:	0018      	movs	r0, r3
 80057e2:	f008 fd10 	bl	800e206 <strstr>
 80057e6:	0003      	movs	r3, r0
 80057e8:	2284      	movs	r2, #132	; 0x84
 80057ea:	1952      	adds	r2, r2, r5
 80057ec:	19d2      	adds	r2, r2, r7
 80057ee:	6013      	str	r3, [r2, #0]
				ptr3 = strstr(responseBuffer[i], "CONNECT");
 80057f0:	19bb      	adds	r3, r7, r6
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2232      	movs	r2, #50	; 0x32
 80057f6:	435a      	muls	r2, r3
 80057f8:	4b3a      	ldr	r3, [pc, #232]	; (80058e4 <HAL_TIM_PeriodElapsedCallback+0x1218>)
 80057fa:	18d3      	adds	r3, r2, r3
 80057fc:	4a3c      	ldr	r2, [pc, #240]	; (80058f0 <HAL_TIM_PeriodElapsedCallback+0x1224>)
 80057fe:	0011      	movs	r1, r2
 8005800:	0018      	movs	r0, r3
 8005802:	f008 fd00 	bl	800e206 <strstr>
 8005806:	0003      	movs	r3, r0
 8005808:	2280      	movs	r2, #128	; 0x80
 800580a:	0029      	movs	r1, r5
 800580c:	1852      	adds	r2, r2, r1
 800580e:	19d2      	adds	r2, r2, r7
 8005810:	6013      	str	r3, [r2, #0]

				if (ptr != NULL) {
 8005812:	1863      	adds	r3, r4, r1
 8005814:	19db      	adds	r3, r3, r7
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00c      	beq.n	8005836 <HAL_TIM_PeriodElapsedCallback+0x116a>
					tLine = i;
 800581c:	231e      	movs	r3, #30
 800581e:	33ff      	adds	r3, #255	; 0xff
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	19ba      	adds	r2, r7, r6
 8005824:	7812      	ldrb	r2, [r2, #0]
 8005826:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005828:	2320      	movs	r3, #32
 800582a:	33ff      	adds	r3, #255	; 0xff
 800582c:	185b      	adds	r3, r3, r1
 800582e:	19db      	adds	r3, r3, r7
 8005830:	2242      	movs	r2, #66	; 0x42
 8005832:	701a      	strb	r2, [r3, #0]
					break;
 8005834:	e038      	b.n	80058a8 <HAL_TIM_PeriodElapsedCallback+0x11dc>
				}
				if (ptr2 != NULL) {
 8005836:	2384      	movs	r3, #132	; 0x84
 8005838:	2118      	movs	r1, #24
 800583a:	185b      	adds	r3, r3, r1
 800583c:	19db      	adds	r3, r3, r7
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00e      	beq.n	8005862 <HAL_TIM_PeriodElapsedCallback+0x1196>
					tLine = i;
 8005844:	231e      	movs	r3, #30
 8005846:	33ff      	adds	r3, #255	; 0xff
 8005848:	18fb      	adds	r3, r7, r3
 800584a:	228e      	movs	r2, #142	; 0x8e
 800584c:	0052      	lsls	r2, r2, #1
 800584e:	18ba      	adds	r2, r7, r2
 8005850:	7812      	ldrb	r2, [r2, #0]
 8005852:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005854:	2320      	movs	r3, #32
 8005856:	33ff      	adds	r3, #255	; 0xff
 8005858:	185b      	adds	r3, r3, r1
 800585a:	19db      	adds	r3, r3, r7
 800585c:	2242      	movs	r2, #66	; 0x42
 800585e:	701a      	strb	r2, [r3, #0]
					break;
 8005860:	e022      	b.n	80058a8 <HAL_TIM_PeriodElapsedCallback+0x11dc>
				}
				if (ptr3 != NULL) {
 8005862:	2380      	movs	r3, #128	; 0x80
 8005864:	2118      	movs	r1, #24
 8005866:	185b      	adds	r3, r3, r1
 8005868:	19db      	adds	r3, r3, r7
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00e      	beq.n	800588e <HAL_TIM_PeriodElapsedCallback+0x11c2>
					tLine = i;
 8005870:	231e      	movs	r3, #30
 8005872:	33ff      	adds	r3, #255	; 0xff
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	228e      	movs	r2, #142	; 0x8e
 8005878:	0052      	lsls	r2, r2, #1
 800587a:	18ba      	adds	r2, r7, r2
 800587c:	7812      	ldrb	r2, [r2, #0]
 800587e:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 8005880:	2320      	movs	r3, #32
 8005882:	33ff      	adds	r3, #255	; 0xff
 8005884:	185b      	adds	r3, r3, r1
 8005886:	19db      	adds	r3, r3, r7
 8005888:	2247      	movs	r2, #71	; 0x47
 800588a:	701a      	strb	r2, [r3, #0]
					break;
 800588c:	e00c      	b.n	80058a8 <HAL_TIM_PeriodElapsedCallback+0x11dc>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 800588e:	218e      	movs	r1, #142	; 0x8e
 8005890:	0049      	lsls	r1, r1, #1
 8005892:	187b      	adds	r3, r7, r1
 8005894:	781a      	ldrb	r2, [r3, #0]
 8005896:	187b      	adds	r3, r7, r1
 8005898:	3201      	adds	r2, #1
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	238e      	movs	r3, #142	; 0x8e
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	18fb      	adds	r3, r7, r3
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b05      	cmp	r3, #5
 80058a6:	d980      	bls.n	80057aa <HAL_TIM_PeriodElapsedCallback+0x10de>
				}
			}
			if (tLine != 99) {
 80058a8:	231e      	movs	r3, #30
 80058aa:	33ff      	adds	r3, #255	; 0xff
 80058ac:	18fb      	adds	r3, r7, r3
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b63      	cmp	r3, #99	; 0x63
 80058b2:	d036      	beq.n	8005922 <HAL_TIM_PeriodElapsedCallback+0x1256>
				if (tResponse == 'G') {
 80058b4:	2320      	movs	r3, #32
 80058b6:	33ff      	adds	r3, #255	; 0xff
 80058b8:	2218      	movs	r2, #24
 80058ba:	189b      	adds	r3, r3, r2
 80058bc:	19db      	adds	r3, r3, r7
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b47      	cmp	r3, #71	; 0x47
 80058c2:	d11f      	bne.n	8005904 <HAL_TIM_PeriodElapsedCallback+0x1238>
					isResponseOk = 1;
 80058c4:	4b05      	ldr	r3, [pc, #20]	; (80058dc <HAL_TIM_PeriodElapsedCallback+0x1210>)
 80058c6:	2201      	movs	r2, #1
 80058c8:	701a      	strb	r2, [r3, #0]
					//to-do with that line
					clearit();
 80058ca:	f000 fdd5 	bl	8006478 <clearit>
		nmeaLC = 0;
		nmeaCC = 0;
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
	}
}
 80058ce:	e1cd      	b.n	8005c6c <HAL_TIM_PeriodElapsedCallback+0x15a0>
 80058d0:	20000830 	.word	0x20000830
 80058d4:	20000828 	.word	0x20000828
 80058d8:	2000082d 	.word	0x2000082d
 80058dc:	2000082c 	.word	0x2000082c
 80058e0:	2000082b 	.word	0x2000082b
 80058e4:	200006f4 	.word	0x200006f4
 80058e8:	0801266c 	.word	0x0801266c
 80058ec:	0801267c 	.word	0x0801267c
 80058f0:	0801268c 	.word	0x0801268c
 80058f4:	20000826 	.word	0x20000826
 80058f8:	200009c4 	.word	0x200009c4
 80058fc:	08012694 	.word	0x08012694
 8005900:	0801262c 	.word	0x0801262c
				} else if (tResponse == 'B') {
 8005904:	2320      	movs	r3, #32
 8005906:	33ff      	adds	r3, #255	; 0xff
 8005908:	2218      	movs	r2, #24
 800590a:	189b      	adds	r3, r3, r2
 800590c:	19db      	adds	r3, r3, r7
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b42      	cmp	r3, #66	; 0x42
 8005912:	d000      	beq.n	8005916 <HAL_TIM_PeriodElapsedCallback+0x124a>
 8005914:	e1aa      	b.n	8005c6c <HAL_TIM_PeriodElapsedCallback+0x15a0>
					isResponseOk = 0;
 8005916:	4bd8      	ldr	r3, [pc, #864]	; (8005c78 <HAL_TIM_PeriodElapsedCallback+0x15ac>)
 8005918:	2200      	movs	r2, #0
 800591a:	701a      	strb	r2, [r3, #0]
					clearit();
 800591c:	f000 fdac 	bl	8006478 <clearit>
}
 8005920:	e1a4      	b.n	8005c6c <HAL_TIM_PeriodElapsedCallback+0x15a0>
				resTimeout--;
 8005922:	4bd6      	ldr	r3, [pc, #856]	; (8005c7c <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	4bd3      	ldr	r3, [pc, #844]	; (8005c7c <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 800592e:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005930:	4bd2      	ldr	r3, [pc, #840]	; (8005c7c <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d000      	beq.n	800593c <HAL_TIM_PeriodElapsedCallback+0x1270>
 800593a:	e197      	b.n	8005c6c <HAL_TIM_PeriodElapsedCallback+0x15a0>
					if (!recResponse) {
 800593c:	4bd0      	ldr	r3, [pc, #832]	; (8005c80 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_TIM_PeriodElapsedCallback+0x127e>
						rebootsystem();
 8005946:	f000 f9d1 	bl	8005cec <rebootsystem>
					clearit();
 800594a:	f000 fd95 	bl	8006478 <clearit>
					isResponseOk = 0;
 800594e:	4bca      	ldr	r3, [pc, #808]	; (8005c78 <HAL_TIM_PeriodElapsedCallback+0x15ac>)
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
}
 8005954:	e18a      	b.n	8005c6c <HAL_TIM_PeriodElapsedCallback+0x15a0>
		} else if (commandCase == 7) { //cmgs response check
 8005956:	4bcb      	ldr	r3, [pc, #812]	; (8005c84 <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b07      	cmp	r3, #7
 800595e:	d000      	beq.n	8005962 <HAL_TIM_PeriodElapsedCallback+0x1296>
 8005960:	e184      	b.n	8005c6c <HAL_TIM_PeriodElapsedCallback+0x15a0>
			uint8_t tLine = 99;
 8005962:	231c      	movs	r3, #28
 8005964:	33ff      	adds	r3, #255	; 0xff
 8005966:	18fb      	adds	r3, r7, r3
 8005968:	2263      	movs	r2, #99	; 0x63
 800596a:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 800596c:	238d      	movs	r3, #141	; 0x8d
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	18fb      	adds	r3, r7, r3
 8005972:	2200      	movs	r2, #0
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	e052      	b.n	8005a1e <HAL_TIM_PeriodElapsedCallback+0x1352>
				ptr = strstr(responseBuffer[i], "+CMGS:");
 8005978:	268d      	movs	r6, #141	; 0x8d
 800597a:	0076      	lsls	r6, r6, #1
 800597c:	19bb      	adds	r3, r7, r6
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2232      	movs	r2, #50	; 0x32
 8005982:	435a      	muls	r2, r3
 8005984:	4bc0      	ldr	r3, [pc, #768]	; (8005c88 <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 8005986:	18d3      	adds	r3, r2, r3
 8005988:	4ac0      	ldr	r2, [pc, #768]	; (8005c8c <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800598a:	0011      	movs	r1, r2
 800598c:	0018      	movs	r0, r3
 800598e:	f008 fc3a 	bl	800e206 <strstr>
 8005992:	0003      	movs	r3, r0
 8005994:	2490      	movs	r4, #144	; 0x90
 8005996:	2518      	movs	r5, #24
 8005998:	1962      	adds	r2, r4, r5
 800599a:	19d2      	adds	r2, r2, r7
 800599c:	6013      	str	r3, [r2, #0]
				ptr2 = strstr(responseBuffer[i], "ERROR");
 800599e:	19bb      	adds	r3, r7, r6
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2232      	movs	r2, #50	; 0x32
 80059a4:	435a      	muls	r2, r3
 80059a6:	4bb8      	ldr	r3, [pc, #736]	; (8005c88 <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 80059a8:	18d3      	adds	r3, r2, r3
 80059aa:	4ab9      	ldr	r2, [pc, #740]	; (8005c90 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 80059ac:	0011      	movs	r1, r2
 80059ae:	0018      	movs	r0, r3
 80059b0:	f008 fc29 	bl	800e206 <strstr>
 80059b4:	0003      	movs	r3, r0
 80059b6:	228c      	movs	r2, #140	; 0x8c
 80059b8:	0029      	movs	r1, r5
 80059ba:	1852      	adds	r2, r2, r1
 80059bc:	19d2      	adds	r2, r2, r7
 80059be:	6013      	str	r3, [r2, #0]
				if (ptr != NULL) {
 80059c0:	1863      	adds	r3, r4, r1
 80059c2:	19db      	adds	r3, r3, r7
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00c      	beq.n	80059e4 <HAL_TIM_PeriodElapsedCallback+0x1318>
					tLine = i;
 80059ca:	231c      	movs	r3, #28
 80059cc:	33ff      	adds	r3, #255	; 0xff
 80059ce:	18fb      	adds	r3, r7, r3
 80059d0:	19ba      	adds	r2, r7, r6
 80059d2:	7812      	ldrb	r2, [r2, #0]
 80059d4:	701a      	strb	r2, [r3, #0]
					tResponse = 'G';
 80059d6:	2320      	movs	r3, #32
 80059d8:	33ff      	adds	r3, #255	; 0xff
 80059da:	185b      	adds	r3, r3, r1
 80059dc:	19db      	adds	r3, r3, r7
 80059de:	2247      	movs	r2, #71	; 0x47
 80059e0:	701a      	strb	r2, [r3, #0]
					break;
 80059e2:	e022      	b.n	8005a2a <HAL_TIM_PeriodElapsedCallback+0x135e>
				if (ptr2 != NULL) {
 80059e4:	238c      	movs	r3, #140	; 0x8c
 80059e6:	2118      	movs	r1, #24
 80059e8:	185b      	adds	r3, r3, r1
 80059ea:	19db      	adds	r3, r3, r7
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00e      	beq.n	8005a10 <HAL_TIM_PeriodElapsedCallback+0x1344>
					tLine = i;
 80059f2:	231c      	movs	r3, #28
 80059f4:	33ff      	adds	r3, #255	; 0xff
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	228d      	movs	r2, #141	; 0x8d
 80059fa:	0052      	lsls	r2, r2, #1
 80059fc:	18ba      	adds	r2, r7, r2
 80059fe:	7812      	ldrb	r2, [r2, #0]
 8005a00:	701a      	strb	r2, [r3, #0]
					tResponse = 'B';
 8005a02:	2320      	movs	r3, #32
 8005a04:	33ff      	adds	r3, #255	; 0xff
 8005a06:	185b      	adds	r3, r3, r1
 8005a08:	19db      	adds	r3, r3, r7
 8005a0a:	2242      	movs	r2, #66	; 0x42
 8005a0c:	701a      	strb	r2, [r3, #0]
					break;
 8005a0e:	e00c      	b.n	8005a2a <HAL_TIM_PeriodElapsedCallback+0x135e>
			for (uint8_t i = 0; i < RESPONSE_MAX_LINE; i++) {
 8005a10:	218d      	movs	r1, #141	; 0x8d
 8005a12:	0049      	lsls	r1, r1, #1
 8005a14:	187b      	adds	r3, r7, r1
 8005a16:	781a      	ldrb	r2, [r3, #0]
 8005a18:	187b      	adds	r3, r7, r1
 8005a1a:	3201      	adds	r2, #1
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	238d      	movs	r3, #141	; 0x8d
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	18fb      	adds	r3, r7, r3
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b05      	cmp	r3, #5
 8005a28:	d9a6      	bls.n	8005978 <HAL_TIM_PeriodElapsedCallback+0x12ac>
			if (tLine != 99) {
 8005a2a:	231c      	movs	r3, #28
 8005a2c:	33ff      	adds	r3, #255	; 0xff
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b63      	cmp	r3, #99	; 0x63
 8005a34:	d01c      	beq.n	8005a70 <HAL_TIM_PeriodElapsedCallback+0x13a4>
				if (tResponse == 'G') {
 8005a36:	2320      	movs	r3, #32
 8005a38:	33ff      	adds	r3, #255	; 0xff
 8005a3a:	2218      	movs	r2, #24
 8005a3c:	189b      	adds	r3, r3, r2
 8005a3e:	19db      	adds	r3, r3, r7
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b47      	cmp	r3, #71	; 0x47
 8005a44:	d105      	bne.n	8005a52 <HAL_TIM_PeriodElapsedCallback+0x1386>
					isResponseOk = 1;
 8005a46:	4b8c      	ldr	r3, [pc, #560]	; (8005c78 <HAL_TIM_PeriodElapsedCallback+0x15ac>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	701a      	strb	r2, [r3, #0]
					clearit();
 8005a4c:	f000 fd14 	bl	8006478 <clearit>
}
 8005a50:	e10c      	b.n	8005c6c <HAL_TIM_PeriodElapsedCallback+0x15a0>
				} else if (tResponse == 'B') {
 8005a52:	2320      	movs	r3, #32
 8005a54:	33ff      	adds	r3, #255	; 0xff
 8005a56:	2218      	movs	r2, #24
 8005a58:	189b      	adds	r3, r3, r2
 8005a5a:	19db      	adds	r3, r3, r7
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b42      	cmp	r3, #66	; 0x42
 8005a60:	d000      	beq.n	8005a64 <HAL_TIM_PeriodElapsedCallback+0x1398>
 8005a62:	e103      	b.n	8005c6c <HAL_TIM_PeriodElapsedCallback+0x15a0>
					isResponseOk = 1;
 8005a64:	4b84      	ldr	r3, [pc, #528]	; (8005c78 <HAL_TIM_PeriodElapsedCallback+0x15ac>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	701a      	strb	r2, [r3, #0]
					clearit();
 8005a6a:	f000 fd05 	bl	8006478 <clearit>
}
 8005a6e:	e0fd      	b.n	8005c6c <HAL_TIM_PeriodElapsedCallback+0x15a0>
				resTimeout--;
 8005a70:	4b82      	ldr	r3, [pc, #520]	; (8005c7c <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	4b80      	ldr	r3, [pc, #512]	; (8005c7c <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 8005a7c:	801a      	strh	r2, [r3, #0]
				if (resTimeout < 1) {
 8005a7e:	4b7f      	ldr	r3, [pc, #508]	; (8005c7c <HAL_TIM_PeriodElapsedCallback+0x15b0>)
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d000      	beq.n	8005a8a <HAL_TIM_PeriodElapsedCallback+0x13be>
 8005a88:	e0f0      	b.n	8005c6c <HAL_TIM_PeriodElapsedCallback+0x15a0>
					if (!recResponse) {
 8005a8a:	4b7d      	ldr	r3, [pc, #500]	; (8005c80 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <HAL_TIM_PeriodElapsedCallback+0x13cc>
						rebootsystem();
 8005a94:	f000 f92a 	bl	8005cec <rebootsystem>
					isResponseOk = 0;
 8005a98:	4b77      	ldr	r3, [pc, #476]	; (8005c78 <HAL_TIM_PeriodElapsedCallback+0x15ac>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	701a      	strb	r2, [r3, #0]
					clearit();
 8005a9e:	f000 fceb 	bl	8006478 <clearit>
}
 8005aa2:	e0e3      	b.n	8005c6c <HAL_TIM_PeriodElapsedCallback+0x15a0>
	else if(htim == &htim3){
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	4b7b      	ldr	r3, [pc, #492]	; (8005c94 <HAL_TIM_PeriodElapsedCallback+0x15c8>)
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d106      	bne.n	8005aba <HAL_TIM_PeriodElapsedCallback+0x13ee>
		isReloaded ++;
 8005aac:	4b7a      	ldr	r3, [pc, #488]	; (8005c98 <HAL_TIM_PeriodElapsedCallback+0x15cc>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	4b78      	ldr	r3, [pc, #480]	; (8005c98 <HAL_TIM_PeriodElapsedCallback+0x15cc>)
 8005ab6:	701a      	strb	r2, [r3, #0]
}
 8005ab8:	e0d8      	b.n	8005c6c <HAL_TIM_PeriodElapsedCallback+0x15a0>
	else if (htim == &htim17) {
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	4b77      	ldr	r3, [pc, #476]	; (8005c9c <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d000      	beq.n	8005ac4 <HAL_TIM_PeriodElapsedCallback+0x13f8>
 8005ac2:	e0d3      	b.n	8005c6c <HAL_TIM_PeriodElapsedCallback+0x15a0>
		hangCounter = 0;
 8005ac4:	4b76      	ldr	r3, [pc, #472]	; (8005ca0 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	601a      	str	r2, [r3, #0]
		for(uint8_t tLine =0; tLine< nmeaLC; tLine++){
 8005aca:	231a      	movs	r3, #26
 8005acc:	33ff      	adds	r3, #255	; 0xff
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	e065      	b.n	8005ba2 <HAL_TIM_PeriodElapsedCallback+0x14d6>
			uint8_t commandSize = 0;
 8005ad6:	238c      	movs	r3, #140	; 0x8c
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	18fb      	adds	r3, r7, r3
 8005adc:	2200      	movs	r2, #0
 8005ade:	701a      	strb	r2, [r3, #0]
			tempSentenceCheck = strstr(nmeaResponse[tLine],"VTG");
 8005ae0:	231a      	movs	r3, #26
 8005ae2:	33ff      	adds	r3, #255	; 0xff
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	781a      	ldrb	r2, [r3, #0]
 8005ae8:	0013      	movs	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	189b      	adds	r3, r3, r2
 8005aee:	011a      	lsls	r2, r3, #4
 8005af0:	189b      	adds	r3, r3, r2
 8005af2:	4a6c      	ldr	r2, [pc, #432]	; (8005ca4 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 8005af4:	189b      	adds	r3, r3, r2
 8005af6:	4a6c      	ldr	r2, [pc, #432]	; (8005ca8 <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 8005af8:	0011      	movs	r1, r2
 8005afa:	0018      	movs	r0, r3
 8005afc:	f008 fb83 	bl	800e206 <strstr>
 8005b00:	0003      	movs	r3, r0
 8005b02:	22f4      	movs	r2, #244	; 0xf4
 8005b04:	2018      	movs	r0, #24
 8005b06:	1811      	adds	r1, r2, r0
 8005b08:	19c9      	adds	r1, r1, r7
 8005b0a:	600b      	str	r3, [r1, #0]
			if(tempSentenceCheck != NULL){
 8005b0c:	1813      	adds	r3, r2, r0
 8005b0e:	19db      	adds	r3, r3, r7
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00d      	beq.n	8005b32 <HAL_TIM_PeriodElapsedCallback+0x1466>
				HAL_UART_Transmit(&GNSS_PORT, "$PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\r\n",51,2000);
 8005b16:	23fa      	movs	r3, #250	; 0xfa
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	4964      	ldr	r1, [pc, #400]	; (8005cac <HAL_TIM_PeriodElapsedCallback+0x15e0>)
 8005b1c:	4864      	ldr	r0, [pc, #400]	; (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 8005b1e:	2233      	movs	r2, #51	; 0x33
 8005b20:	f006 fbbe 	bl	800c2a0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart4, "GNS SET\r\n", 9, 500);
 8005b24:	23fa      	movs	r3, #250	; 0xfa
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	4962      	ldr	r1, [pc, #392]	; (8005cb4 <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 8005b2a:	4863      	ldr	r0, [pc, #396]	; (8005cb8 <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 8005b2c:	2209      	movs	r2, #9
 8005b2e:	f006 fbb7 	bl	800c2a0 <HAL_UART_Transmit>
			for(uint8_t tChar =0 ;tChar<NMEA_MAX_CHARS;tChar++) {
 8005b32:	23ff      	movs	r3, #255	; 0xff
 8005b34:	2218      	movs	r2, #24
 8005b36:	189b      	adds	r3, r3, r2
 8005b38:	19db      	adds	r3, r3, r7
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	e020      	b.n	8005b82 <HAL_TIM_PeriodElapsedCallback+0x14b6>
				if(nmeaResponse[tLine][tChar] != NULL){
 8005b40:	231a      	movs	r3, #26
 8005b42:	33ff      	adds	r3, #255	; 0xff
 8005b44:	18fb      	adds	r3, r7, r3
 8005b46:	781a      	ldrb	r2, [r3, #0]
 8005b48:	24ff      	movs	r4, #255	; 0xff
 8005b4a:	2518      	movs	r5, #24
 8005b4c:	1963      	adds	r3, r4, r5
 8005b4e:	19db      	adds	r3, r3, r7
 8005b50:	7819      	ldrb	r1, [r3, #0]
 8005b52:	4854      	ldr	r0, [pc, #336]	; (8005ca4 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 8005b54:	0013      	movs	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	189b      	adds	r3, r3, r2
 8005b5a:	011a      	lsls	r2, r3, #4
 8005b5c:	189b      	adds	r3, r3, r2
 8005b5e:	18c3      	adds	r3, r0, r3
 8005b60:	5c5b      	ldrb	r3, [r3, r1]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d015      	beq.n	8005b92 <HAL_TIM_PeriodElapsedCallback+0x14c6>
					commandSize++;
 8005b66:	218c      	movs	r1, #140	; 0x8c
 8005b68:	0049      	lsls	r1, r1, #1
 8005b6a:	187b      	adds	r3, r7, r1
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	187b      	adds	r3, r7, r1
 8005b70:	3201      	adds	r2, #1
 8005b72:	701a      	strb	r2, [r3, #0]
			for(uint8_t tChar =0 ;tChar<NMEA_MAX_CHARS;tChar++) {
 8005b74:	1963      	adds	r3, r4, r5
 8005b76:	19db      	adds	r3, r3, r7
 8005b78:	781a      	ldrb	r2, [r3, #0]
 8005b7a:	1963      	adds	r3, r4, r5
 8005b7c:	19db      	adds	r3, r3, r7
 8005b7e:	3201      	adds	r2, #1
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	23ff      	movs	r3, #255	; 0xff
 8005b84:	2218      	movs	r2, #24
 8005b86:	189b      	adds	r3, r3, r2
 8005b88:	19db      	adds	r3, r3, r7
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b54      	cmp	r3, #84	; 0x54
 8005b8e:	d9d7      	bls.n	8005b40 <HAL_TIM_PeriodElapsedCallback+0x1474>
 8005b90:	e000      	b.n	8005b94 <HAL_TIM_PeriodElapsedCallback+0x14c8>
					break;
 8005b92:	46c0      	nop			; (mov r8, r8)
		for(uint8_t tLine =0; tLine< nmeaLC; tLine++){
 8005b94:	211a      	movs	r1, #26
 8005b96:	31ff      	adds	r1, #255	; 0xff
 8005b98:	187b      	adds	r3, r7, r1
 8005b9a:	781a      	ldrb	r2, [r3, #0]
 8005b9c:	187b      	adds	r3, r7, r1
 8005b9e:	3201      	adds	r2, #1
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	4b46      	ldr	r3, [pc, #280]	; (8005cbc <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	221a      	movs	r2, #26
 8005baa:	32ff      	adds	r2, #255	; 0xff
 8005bac:	18ba      	adds	r2, r7, r2
 8005bae:	7812      	ldrb	r2, [r2, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d390      	bcc.n	8005ad6 <HAL_TIM_PeriodElapsedCallback+0x140a>
		indicationCounter++;
 8005bb4:	4b42      	ldr	r3, [pc, #264]	; (8005cc0 <HAL_TIM_PeriodElapsedCallback+0x15f4>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	4b40      	ldr	r3, [pc, #256]	; (8005cc0 <HAL_TIM_PeriodElapsedCallback+0x15f4>)
 8005bbe:	701a      	strb	r2, [r3, #0]
		tempGps = nmea_parser(nmeaResponse, NMEA_MAX_CHARS,&crcc,&rCrc);
 8005bc0:	4b40      	ldr	r3, [pc, #256]	; (8005cc4 <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 8005bc2:	4a41      	ldr	r2, [pc, #260]	; (8005cc8 <HAL_TIM_PeriodElapsedCallback+0x15fc>)
 8005bc4:	4837      	ldr	r0, [pc, #220]	; (8005ca4 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 8005bc6:	2155      	movs	r1, #85	; 0x55
 8005bc8:	f7fc fef6 	bl	80029b8 <nmea_parser>
 8005bcc:	0003      	movs	r3, r0
 8005bce:	22f8      	movs	r2, #248	; 0xf8
 8005bd0:	2018      	movs	r0, #24
 8005bd2:	1811      	adds	r1, r2, r0
 8005bd4:	19c9      	adds	r1, r1, r7
 8005bd6:	600b      	str	r3, [r1, #0]
		if (tempGps != NULL) {
 8005bd8:	0001      	movs	r1, r0
 8005bda:	1853      	adds	r3, r2, r1
 8005bdc:	19db      	adds	r3, r3, r7
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d004      	beq.n	8005bee <HAL_TIM_PeriodElapsedCallback+0x1522>
			gps_info = tempGps;
 8005be4:	4b39      	ldr	r3, [pc, #228]	; (8005ccc <HAL_TIM_PeriodElapsedCallback+0x1600>)
 8005be6:	1852      	adds	r2, r2, r1
 8005be8:	19d2      	adds	r2, r2, r7
 8005bea:	6812      	ldr	r2, [r2, #0]
 8005bec:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim17);
 8005bee:	4b2b      	ldr	r3, [pc, #172]	; (8005c9c <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f005 fba5 	bl	800b340 <HAL_TIM_Base_Stop_IT>
		isGNSSTimStart = 0;
 8005bf6:	4b36      	ldr	r3, [pc, #216]	; (8005cd0 <HAL_TIM_PeriodElapsedCallback+0x1604>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
		if (tim6Count > 5) {
 8005bfc:	4b35      	ldr	r3, [pc, #212]	; (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x1608>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b05      	cmp	r3, #5
 8005c02:	d914      	bls.n	8005c2e <HAL_TIM_PeriodElapsedCallback+0x1562>
			if (isLoggedIn == 0 && isTcpOpen == 0 && flashready == 1) {
 8005c04:	4b34      	ldr	r3, [pc, #208]	; (8005cd8 <HAL_TIM_PeriodElapsedCallback+0x160c>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10b      	bne.n	8005c26 <HAL_TIM_PeriodElapsedCallback+0x155a>
 8005c0e:	4b33      	ldr	r3, [pc, #204]	; (8005cdc <HAL_TIM_PeriodElapsedCallback+0x1610>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <HAL_TIM_PeriodElapsedCallback+0x155a>
 8005c18:	4b31      	ldr	r3, [pc, #196]	; (8005ce0 <HAL_TIM_PeriodElapsedCallback+0x1614>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <HAL_TIM_PeriodElapsedCallback+0x155a>
				save_data_packet();
 8005c22:	f000 ff17 	bl	8006a54 <save_data_packet>
			tim6Count = 0;
 8005c26:	4b2b      	ldr	r3, [pc, #172]	; (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x1608>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_PeriodElapsedCallback+0x156e>
			tim6Count++;
 8005c2e:	4b29      	ldr	r3, [pc, #164]	; (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x1608>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	3301      	adds	r3, #1
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	4b27      	ldr	r3, [pc, #156]	; (8005cd4 <HAL_TIM_PeriodElapsedCallback+0x1608>)
 8005c38:	701a      	strb	r2, [r3, #0]
		memset(nmeaResponse, 0, sizeof(nmeaResponse));
 8005c3a:	23aa      	movs	r3, #170	; 0xaa
 8005c3c:	005a      	lsls	r2, r3, #1
 8005c3e:	4b19      	ldr	r3, [pc, #100]	; (8005ca4 <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 8005c40:	2100      	movs	r1, #0
 8005c42:	0018      	movs	r0, r3
 8005c44:	f008 fa87 	bl	800e156 <memset>
		nmeaLC = 0;
 8005c48:	4b1c      	ldr	r3, [pc, #112]	; (8005cbc <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	701a      	strb	r2, [r3, #0]
		nmeaCC = 0;
 8005c4e:	4b25      	ldr	r3, [pc, #148]	; (8005ce4 <HAL_TIM_PeriodElapsedCallback+0x1618>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 8005c54:	4924      	ldr	r1, [pc, #144]	; (8005ce8 <HAL_TIM_PeriodElapsedCallback+0x161c>)
 8005c56:	4b16      	ldr	r3, [pc, #88]	; (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 8005c58:	2201      	movs	r2, #1
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f006 fbbc 	bl	800c3d8 <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(&GNSS_PORT, GNSS_BUFFER, 1);
 8005c60:	4921      	ldr	r1, [pc, #132]	; (8005ce8 <HAL_TIM_PeriodElapsedCallback+0x161c>)
 8005c62:	4b13      	ldr	r3, [pc, #76]	; (8005cb0 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	0018      	movs	r0, r3
 8005c68:	f006 fbb6 	bl	800c3d8 <HAL_UART_Receive_IT>
}
 8005c6c:	46c0      	nop			; (mov r8, r8)
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b04e      	add	sp, #312	; 0x138
 8005c72:	bc80      	pop	{r7}
 8005c74:	46b8      	mov	r8, r7
 8005c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c78:	2000082c 	.word	0x2000082c
 8005c7c:	20000828 	.word	0x20000828
 8005c80:	2000082d 	.word	0x2000082d
 8005c84:	2000082b 	.word	0x2000082b
 8005c88:	200006f4 	.word	0x200006f4
 8005c8c:	080126a0 	.word	0x080126a0
 8005c90:	0801262c 	.word	0x0801262c
 8005c94:	20000348 	.word	0x20000348
 8005c98:	200006c8 	.word	0x200006c8
 8005c9c:	2000042c 	.word	0x2000042c
 8005ca0:	200006dc 	.word	0x200006dc
 8005ca4:	20000870 	.word	0x20000870
 8005ca8:	080126a8 	.word	0x080126a8
 8005cac:	080126ac 	.word	0x080126ac
 8005cb0:	2000050c 	.word	0x2000050c
 8005cb4:	080126e0 	.word	0x080126e0
 8005cb8:	20000634 	.word	0x20000634
 8005cbc:	20000822 	.word	0x20000822
 8005cc0:	200006e1 	.word	0x200006e1
 8005cc4:	200006e3 	.word	0x200006e3
 8005cc8:	200006e2 	.word	0x200006e2
 8005ccc:	20000028 	.word	0x20000028
 8005cd0:	2000082a 	.word	0x2000082a
 8005cd4:	200009c8 	.word	0x200009c8
 8005cd8:	200009c7 	.word	0x200009c7
 8005cdc:	200009c4 	.word	0x200009c4
 8005ce0:	20000cb4 	.word	0x20000cb4
 8005ce4:	20000823 	.word	0x20000823
 8005ce8:	200006f0 	.word	0x200006f0

08005cec <rebootsystem>:

void rebootsystem() {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
	save_to_flash(1);
 8005cf0:	2001      	movs	r0, #1
 8005cf2:	f000 f803 	bl	8005cfc <save_to_flash>
	NVIC_SystemReset();
 8005cf6:	f7fd fd65 	bl	80037c4 <__NVIC_SystemReset>
	...

08005cfc <save_to_flash>:
	// todo save flash info
}
void save_to_flash(uint8_t autoRstValue) {
 8005cfc:	b590      	push	{r4, r7, lr}
 8005cfe:	b0c5      	sub	sp, #276	; 0x114
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	0002      	movs	r2, r0
 8005d04:	4bab      	ldr	r3, [pc, #684]	; (8005fb4 <save_to_flash+0x2b8>)
 8005d06:	2488      	movs	r4, #136	; 0x88
 8005d08:	0064      	lsls	r4, r4, #1
 8005d0a:	191b      	adds	r3, r3, r4
 8005d0c:	19db      	adds	r3, r3, r7
 8005d0e:	701a      	strb	r2, [r3, #0]
	flashready = 0;
 8005d10:	4ba9      	ldr	r3, [pc, #676]	; (8005fb8 <save_to_flash+0x2bc>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	701a      	strb	r2, [r3, #0]

	uint8_t configPage[LASTPAGE_ADD+2];
	memset(configPage,0,sizeof(configPage));
 8005d16:	2310      	movs	r3, #16
 8005d18:	18fb      	adds	r3, r7, r3
 8005d1a:	22fc      	movs	r2, #252	; 0xfc
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	0018      	movs	r0, r3
 8005d20:	f008 fa19 	bl	800e156 <memset>
	//First time
	W25qxx_EraseSector(0);
 8005d24:	2000      	movs	r0, #0
 8005d26:	f002 fcdd 	bl	80086e4 <W25qxx_EraseSector>
	isFlash =1;
 8005d2a:	4ba4      	ldr	r3, [pc, #656]	; (8005fbc <save_to_flash+0x2c0>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	701a      	strb	r2, [r3, #0]
	configPage[0] = isFlash; // isflash
 8005d30:	4ba2      	ldr	r3, [pc, #648]	; (8005fbc <save_to_flash+0x2c0>)
 8005d32:	781a      	ldrb	r2, [r3, #0]
 8005d34:	4ba2      	ldr	r3, [pc, #648]	; (8005fc0 <save_to_flash+0x2c4>)
 8005d36:	191b      	adds	r3, r3, r4
 8005d38:	19db      	adds	r3, r3, r7
 8005d3a:	701a      	strb	r2, [r3, #0]

	uint8_t t[2];
	t[0] = StartSec >> 8;
 8005d3c:	4ba1      	ldr	r3, [pc, #644]	; (8005fc4 <save_to_flash+0x2c8>)
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	0a1b      	lsrs	r3, r3, #8
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	4b9f      	ldr	r3, [pc, #636]	; (8005fc8 <save_to_flash+0x2cc>)
 8005d4a:	191b      	adds	r3, r3, r4
 8005d4c:	19db      	adds	r3, r3, r7
 8005d4e:	701a      	strb	r2, [r3, #0]
	t[1] = StartSec;
 8005d50:	4b9c      	ldr	r3, [pc, #624]	; (8005fc4 <save_to_flash+0x2c8>)
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	4b9b      	ldr	r3, [pc, #620]	; (8005fc8 <save_to_flash+0x2cc>)
 8005d5a:	191b      	adds	r3, r3, r4
 8005d5c:	19db      	adds	r3, r3, r7
 8005d5e:	705a      	strb	r2, [r3, #1]
	configPage[MSBSS] = t[0]; //MSB StartSec
 8005d60:	4b99      	ldr	r3, [pc, #612]	; (8005fc8 <save_to_flash+0x2cc>)
 8005d62:	191b      	adds	r3, r3, r4
 8005d64:	19db      	adds	r3, r3, r7
 8005d66:	781a      	ldrb	r2, [r3, #0]
 8005d68:	4b95      	ldr	r3, [pc, #596]	; (8005fc0 <save_to_flash+0x2c4>)
 8005d6a:	0021      	movs	r1, r4
 8005d6c:	191b      	adds	r3, r3, r4
 8005d6e:	19db      	adds	r3, r3, r7
 8005d70:	705a      	strb	r2, [r3, #1]
	configPage[LSBSS] = t[1]; //LSB StartSec
 8005d72:	4b95      	ldr	r3, [pc, #596]	; (8005fc8 <save_to_flash+0x2cc>)
 8005d74:	185b      	adds	r3, r3, r1
 8005d76:	19db      	adds	r3, r3, r7
 8005d78:	785a      	ldrb	r2, [r3, #1]
 8005d7a:	4b91      	ldr	r3, [pc, #580]	; (8005fc0 <save_to_flash+0x2c4>)
 8005d7c:	185b      	adds	r3, r3, r1
 8005d7e:	19db      	adds	r3, r3, r7
 8005d80:	709a      	strb	r2, [r3, #2]

	t[0] = StartN >> 8;
 8005d82:	4b92      	ldr	r3, [pc, #584]	; (8005fcc <save_to_flash+0x2d0>)
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	0a1b      	lsrs	r3, r3, #8
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	4b8e      	ldr	r3, [pc, #568]	; (8005fc8 <save_to_flash+0x2cc>)
 8005d90:	185b      	adds	r3, r3, r1
 8005d92:	19db      	adds	r3, r3, r7
 8005d94:	701a      	strb	r2, [r3, #0]
	t[1] = StartN;
 8005d96:	4b8d      	ldr	r3, [pc, #564]	; (8005fcc <save_to_flash+0x2d0>)
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	4b8a      	ldr	r3, [pc, #552]	; (8005fc8 <save_to_flash+0x2cc>)
 8005da0:	185b      	adds	r3, r3, r1
 8005da2:	19db      	adds	r3, r3, r7
 8005da4:	705a      	strb	r2, [r3, #1]
	configPage[MSBSN] = t[0]; //MSB StartN
 8005da6:	4b88      	ldr	r3, [pc, #544]	; (8005fc8 <save_to_flash+0x2cc>)
 8005da8:	185b      	adds	r3, r3, r1
 8005daa:	19db      	adds	r3, r3, r7
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	4b84      	ldr	r3, [pc, #528]	; (8005fc0 <save_to_flash+0x2c4>)
 8005db0:	185b      	adds	r3, r3, r1
 8005db2:	19db      	adds	r3, r3, r7
 8005db4:	70da      	strb	r2, [r3, #3]
	configPage[LSBSN] = t[1]; //LSB StartN
 8005db6:	4b84      	ldr	r3, [pc, #528]	; (8005fc8 <save_to_flash+0x2cc>)
 8005db8:	185b      	adds	r3, r3, r1
 8005dba:	19db      	adds	r3, r3, r7
 8005dbc:	785a      	ldrb	r2, [r3, #1]
 8005dbe:	4b80      	ldr	r3, [pc, #512]	; (8005fc0 <save_to_flash+0x2c4>)
 8005dc0:	185b      	adds	r3, r3, r1
 8005dc2:	19db      	adds	r3, r3, r7
 8005dc4:	711a      	strb	r2, [r3, #4]

	t[0] = EndSec >> 8;
 8005dc6:	4b82      	ldr	r3, [pc, #520]	; (8005fd0 <save_to_flash+0x2d4>)
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	0a1b      	lsrs	r3, r3, #8
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	4b7d      	ldr	r3, [pc, #500]	; (8005fc8 <save_to_flash+0x2cc>)
 8005dd4:	185b      	adds	r3, r3, r1
 8005dd6:	19db      	adds	r3, r3, r7
 8005dd8:	701a      	strb	r2, [r3, #0]
	t[1] = EndSec;
 8005dda:	4b7d      	ldr	r3, [pc, #500]	; (8005fd0 <save_to_flash+0x2d4>)
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	4b79      	ldr	r3, [pc, #484]	; (8005fc8 <save_to_flash+0x2cc>)
 8005de4:	185b      	adds	r3, r3, r1
 8005de6:	19db      	adds	r3, r3, r7
 8005de8:	705a      	strb	r2, [r3, #1]
	configPage[MSBES] = t[0]; //MSB EndSec
 8005dea:	4b77      	ldr	r3, [pc, #476]	; (8005fc8 <save_to_flash+0x2cc>)
 8005dec:	185b      	adds	r3, r3, r1
 8005dee:	19db      	adds	r3, r3, r7
 8005df0:	781a      	ldrb	r2, [r3, #0]
 8005df2:	4b73      	ldr	r3, [pc, #460]	; (8005fc0 <save_to_flash+0x2c4>)
 8005df4:	185b      	adds	r3, r3, r1
 8005df6:	19db      	adds	r3, r3, r7
 8005df8:	715a      	strb	r2, [r3, #5]
	configPage[LSBES] = t[1]; //LSB EndSec
 8005dfa:	4b73      	ldr	r3, [pc, #460]	; (8005fc8 <save_to_flash+0x2cc>)
 8005dfc:	185b      	adds	r3, r3, r1
 8005dfe:	19db      	adds	r3, r3, r7
 8005e00:	785a      	ldrb	r2, [r3, #1]
 8005e02:	4b6f      	ldr	r3, [pc, #444]	; (8005fc0 <save_to_flash+0x2c4>)
 8005e04:	185b      	adds	r3, r3, r1
 8005e06:	19db      	adds	r3, r3, r7
 8005e08:	719a      	strb	r2, [r3, #6]

	t[0] = EndN >> 8;
 8005e0a:	4b72      	ldr	r3, [pc, #456]	; (8005fd4 <save_to_flash+0x2d8>)
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	0a1b      	lsrs	r3, r3, #8
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	4b6c      	ldr	r3, [pc, #432]	; (8005fc8 <save_to_flash+0x2cc>)
 8005e18:	185b      	adds	r3, r3, r1
 8005e1a:	19db      	adds	r3, r3, r7
 8005e1c:	701a      	strb	r2, [r3, #0]
	t[1] = EndN;
 8005e1e:	4b6d      	ldr	r3, [pc, #436]	; (8005fd4 <save_to_flash+0x2d8>)
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	4b68      	ldr	r3, [pc, #416]	; (8005fc8 <save_to_flash+0x2cc>)
 8005e28:	185b      	adds	r3, r3, r1
 8005e2a:	19db      	adds	r3, r3, r7
 8005e2c:	705a      	strb	r2, [r3, #1]
	configPage[MSBEN] = t[0]; //MSB EndN
 8005e2e:	4b66      	ldr	r3, [pc, #408]	; (8005fc8 <save_to_flash+0x2cc>)
 8005e30:	185b      	adds	r3, r3, r1
 8005e32:	19db      	adds	r3, r3, r7
 8005e34:	781a      	ldrb	r2, [r3, #0]
 8005e36:	4b62      	ldr	r3, [pc, #392]	; (8005fc0 <save_to_flash+0x2c4>)
 8005e38:	185b      	adds	r3, r3, r1
 8005e3a:	19db      	adds	r3, r3, r7
 8005e3c:	71da      	strb	r2, [r3, #7]
	configPage[LSBEN] = t[1]; //LSB EndN
 8005e3e:	4b62      	ldr	r3, [pc, #392]	; (8005fc8 <save_to_flash+0x2cc>)
 8005e40:	185b      	adds	r3, r3, r1
 8005e42:	19db      	adds	r3, r3, r7
 8005e44:	785a      	ldrb	r2, [r3, #1]
 8005e46:	4b5e      	ldr	r3, [pc, #376]	; (8005fc0 <save_to_flash+0x2c4>)
 8005e48:	185b      	adds	r3, r3, r1
 8005e4a:	19db      	adds	r3, r3, r7
 8005e4c:	721a      	strb	r2, [r3, #8]

	configPage[CP1_ADD] = cPin[0];  //pin 1
 8005e4e:	4b62      	ldr	r3, [pc, #392]	; (8005fd8 <save_to_flash+0x2dc>)
 8005e50:	781a      	ldrb	r2, [r3, #0]
 8005e52:	4b5b      	ldr	r3, [pc, #364]	; (8005fc0 <save_to_flash+0x2c4>)
 8005e54:	185b      	adds	r3, r3, r1
 8005e56:	19db      	adds	r3, r3, r7
 8005e58:	725a      	strb	r2, [r3, #9]
	configPage[CP2_ADD] = cPin[1]; //pin 2
 8005e5a:	4b5f      	ldr	r3, [pc, #380]	; (8005fd8 <save_to_flash+0x2dc>)
 8005e5c:	785a      	ldrb	r2, [r3, #1]
 8005e5e:	4b58      	ldr	r3, [pc, #352]	; (8005fc0 <save_to_flash+0x2c4>)
 8005e60:	185b      	adds	r3, r3, r1
 8005e62:	19db      	adds	r3, r3, r7
 8005e64:	729a      	strb	r2, [r3, #10]
	configPage[CP3_ADD] = cPin[2]; //pin 3
 8005e66:	4b5c      	ldr	r3, [pc, #368]	; (8005fd8 <save_to_flash+0x2dc>)
 8005e68:	789a      	ldrb	r2, [r3, #2]
 8005e6a:	4b55      	ldr	r3, [pc, #340]	; (8005fc0 <save_to_flash+0x2c4>)
 8005e6c:	185b      	adds	r3, r3, r1
 8005e6e:	19db      	adds	r3, r3, r7
 8005e70:	72da      	strb	r2, [r3, #11]
	configPage[CP4_ADD] = cPin[3]; //pin 4
 8005e72:	4b59      	ldr	r3, [pc, #356]	; (8005fd8 <save_to_flash+0x2dc>)
 8005e74:	78da      	ldrb	r2, [r3, #3]
 8005e76:	4b52      	ldr	r3, [pc, #328]	; (8005fc0 <save_to_flash+0x2c4>)
 8005e78:	185b      	adds	r3, r3, r1
 8005e7a:	19db      	adds	r3, r3, r7
 8005e7c:	731a      	strb	r2, [r3, #12]

	// saving valid sender
	for (uint8_t te = VALIDSENSTART_ADD; te < VALIDSENEND_ADD+1; te++) {
 8005e7e:	2310      	movs	r3, #16
 8005e80:	33ff      	adds	r3, #255	; 0xff
 8005e82:	18fb      	adds	r3, r7, r3
 8005e84:	220d      	movs	r2, #13
 8005e86:	701a      	strb	r2, [r3, #0]
 8005e88:	e014      	b.n	8005eb4 <save_to_flash+0x1b8>
		configPage[te] = validSender[te - VALIDSENSTART_ADD];
 8005e8a:	2010      	movs	r0, #16
 8005e8c:	30ff      	adds	r0, #255	; 0xff
 8005e8e:	183b      	adds	r3, r7, r0
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	3b0d      	subs	r3, #13
 8005e94:	001a      	movs	r2, r3
 8005e96:	183b      	adds	r3, r7, r0
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	4950      	ldr	r1, [pc, #320]	; (8005fdc <save_to_flash+0x2e0>)
 8005e9c:	5c89      	ldrb	r1, [r1, r2]
 8005e9e:	4a48      	ldr	r2, [pc, #288]	; (8005fc0 <save_to_flash+0x2c4>)
 8005ea0:	2488      	movs	r4, #136	; 0x88
 8005ea2:	0064      	lsls	r4, r4, #1
 8005ea4:	1912      	adds	r2, r2, r4
 8005ea6:	19d2      	adds	r2, r2, r7
 8005ea8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t te = VALIDSENSTART_ADD; te < VALIDSENEND_ADD+1; te++) {
 8005eaa:	183b      	adds	r3, r7, r0
 8005eac:	781a      	ldrb	r2, [r3, #0]
 8005eae:	183b      	adds	r3, r7, r0
 8005eb0:	3201      	adds	r2, #1
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	33ff      	adds	r3, #255	; 0xff
 8005eb8:	18fb      	adds	r3, r7, r3
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b16      	cmp	r3, #22
 8005ebe:	d9e4      	bls.n	8005e8a <save_to_flash+0x18e>
	}
	//------------------------------------


	//saving domain address from 23 - 72
	for (uint8_t te = DOMAINSTART_ADD; te < DOMAINEND_ADD+1; te++) {
 8005ec0:	2387      	movs	r3, #135	; 0x87
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	2217      	movs	r2, #23
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	e014      	b.n	8005ef6 <save_to_flash+0x1fa>
		configPage[te] = domainAdd[te - DOMAINSTART_ADD];
 8005ecc:	2087      	movs	r0, #135	; 0x87
 8005ece:	0040      	lsls	r0, r0, #1
 8005ed0:	183b      	adds	r3, r7, r0
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	3b17      	subs	r3, #23
 8005ed6:	001a      	movs	r2, r3
 8005ed8:	183b      	adds	r3, r7, r0
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	4940      	ldr	r1, [pc, #256]	; (8005fe0 <save_to_flash+0x2e4>)
 8005ede:	5c89      	ldrb	r1, [r1, r2]
 8005ee0:	4a37      	ldr	r2, [pc, #220]	; (8005fc0 <save_to_flash+0x2c4>)
 8005ee2:	2488      	movs	r4, #136	; 0x88
 8005ee4:	0064      	lsls	r4, r4, #1
 8005ee6:	1912      	adds	r2, r2, r4
 8005ee8:	19d2      	adds	r2, r2, r7
 8005eea:	54d1      	strb	r1, [r2, r3]
	for (uint8_t te = DOMAINSTART_ADD; te < DOMAINEND_ADD+1; te++) {
 8005eec:	183b      	adds	r3, r7, r0
 8005eee:	781a      	ldrb	r2, [r3, #0]
 8005ef0:	183b      	adds	r3, r7, r0
 8005ef2:	3201      	adds	r2, #1
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	2387      	movs	r3, #135	; 0x87
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	18fb      	adds	r3, r7, r3
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b48      	cmp	r3, #72	; 0x48
 8005f00:	d9e4      	bls.n	8005ecc <save_to_flash+0x1d0>
	}
	//----------------------------------------


	//saving port from 73 - 78
	for (uint8_t te = PORTSTART_ADD; te < PORTEND_ADD+1; te++) {
 8005f02:	230e      	movs	r3, #14
 8005f04:	33ff      	adds	r3, #255	; 0xff
 8005f06:	18fb      	adds	r3, r7, r3
 8005f08:	2249      	movs	r2, #73	; 0x49
 8005f0a:	701a      	strb	r2, [r3, #0]
 8005f0c:	e014      	b.n	8005f38 <save_to_flash+0x23c>
		configPage[te] = portAdd[te - PORTSTART_ADD];
 8005f0e:	200e      	movs	r0, #14
 8005f10:	30ff      	adds	r0, #255	; 0xff
 8005f12:	183b      	adds	r3, r7, r0
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	3b49      	subs	r3, #73	; 0x49
 8005f18:	001a      	movs	r2, r3
 8005f1a:	183b      	adds	r3, r7, r0
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	4931      	ldr	r1, [pc, #196]	; (8005fe4 <save_to_flash+0x2e8>)
 8005f20:	5c89      	ldrb	r1, [r1, r2]
 8005f22:	4a27      	ldr	r2, [pc, #156]	; (8005fc0 <save_to_flash+0x2c4>)
 8005f24:	2488      	movs	r4, #136	; 0x88
 8005f26:	0064      	lsls	r4, r4, #1
 8005f28:	1912      	adds	r2, r2, r4
 8005f2a:	19d2      	adds	r2, r2, r7
 8005f2c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t te = PORTSTART_ADD; te < PORTEND_ADD+1; te++) {
 8005f2e:	183b      	adds	r3, r7, r0
 8005f30:	781a      	ldrb	r2, [r3, #0]
 8005f32:	183b      	adds	r3, r7, r0
 8005f34:	3201      	adds	r2, #1
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	230e      	movs	r3, #14
 8005f3a:	33ff      	adds	r3, #255	; 0xff
 8005f3c:	18fb      	adds	r3, r7, r3
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b4e      	cmp	r3, #78	; 0x4e
 8005f42:	d9e4      	bls.n	8005f0e <save_to_flash+0x212>
	}
	//-----------------------------------

	configPage[LDIA_ADD] = locationDataIntervalA;  //locationDataIntervalA = 5
 8005f44:	4b28      	ldr	r3, [pc, #160]	; (8005fe8 <save_to_flash+0x2ec>)
 8005f46:	7819      	ldrb	r1, [r3, #0]
 8005f48:	4b1d      	ldr	r3, [pc, #116]	; (8005fc0 <save_to_flash+0x2c4>)
 8005f4a:	2088      	movs	r0, #136	; 0x88
 8005f4c:	0040      	lsls	r0, r0, #1
 8005f4e:	181b      	adds	r3, r3, r0
 8005f50:	19db      	adds	r3, r3, r7
 8005f52:	224f      	movs	r2, #79	; 0x4f
 8005f54:	5499      	strb	r1, [r3, r2]
	configPage[LDIB_ADD] = locationDataIntervalB;  //locationDataIntervalB = 5
 8005f56:	4b25      	ldr	r3, [pc, #148]	; (8005fec <save_to_flash+0x2f0>)
 8005f58:	7819      	ldrb	r1, [r3, #0]
 8005f5a:	4b19      	ldr	r3, [pc, #100]	; (8005fc0 <save_to_flash+0x2c4>)
 8005f5c:	181b      	adds	r3, r3, r0
 8005f5e:	19db      	adds	r3, r3, r7
 8005f60:	2250      	movs	r2, #80	; 0x50
 8005f62:	5499      	strb	r1, [r3, r2]
	isAutoRst = autoRstValue;
 8005f64:	4b22      	ldr	r3, [pc, #136]	; (8005ff0 <save_to_flash+0x2f4>)
 8005f66:	4a13      	ldr	r2, [pc, #76]	; (8005fb4 <save_to_flash+0x2b8>)
 8005f68:	1812      	adds	r2, r2, r0
 8005f6a:	19d2      	adds	r2, r2, r7
 8005f6c:	7812      	ldrb	r2, [r2, #0]
 8005f6e:	701a      	strb	r2, [r3, #0]
	configPage[AUTORST_ADD] = isAutoRst; //isAutorst
 8005f70:	4b1f      	ldr	r3, [pc, #124]	; (8005ff0 <save_to_flash+0x2f4>)
 8005f72:	7819      	ldrb	r1, [r3, #0]
 8005f74:	4b12      	ldr	r3, [pc, #72]	; (8005fc0 <save_to_flash+0x2c4>)
 8005f76:	181b      	adds	r3, r3, r0
 8005f78:	19db      	adds	r3, r3, r7
 8005f7a:	2251      	movs	r2, #81	; 0x51
 8005f7c:	5499      	strb	r1, [r3, r2]
	isFlash1 = 1;
 8005f7e:	4b1d      	ldr	r3, [pc, #116]	; (8005ff4 <save_to_flash+0x2f8>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	701a      	strb	r2, [r3, #0]
	configPage[LASTPAGE_ADD] = isFlash1; //isflash1
 8005f84:	4b1b      	ldr	r3, [pc, #108]	; (8005ff4 <save_to_flash+0x2f8>)
 8005f86:	7819      	ldrb	r1, [r3, #0]
 8005f88:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <save_to_flash+0x2c4>)
 8005f8a:	181b      	adds	r3, r3, r0
 8005f8c:	19db      	adds	r3, r3, r7
 8005f8e:	22fa      	movs	r2, #250	; 0xfa
 8005f90:	5499      	strb	r1, [r3, r2]
	W25qxx_WritePage(configPage, 0, 0, LASTPAGE_ADD+2);
 8005f92:	2310      	movs	r3, #16
 8005f94:	18f8      	adds	r0, r7, r3
 8005f96:	23fc      	movs	r3, #252	; 0xfc
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	f002 fc12 	bl	80087c4 <W25qxx_WritePage>
	flashready = 1;
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <save_to_flash+0x2bc>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8005fa6:	2064      	movs	r0, #100	; 0x64
 8005fa8:	f002 ff3c 	bl	8008e24 <HAL_Delay>

}
 8005fac:	46c0      	nop			; (mov r8, r8)
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b045      	add	sp, #276	; 0x114
 8005fb2:	bd90      	pop	{r4, r7, pc}
 8005fb4:	fffffef7 	.word	0xfffffef7
 8005fb8:	20000cb4 	.word	0x20000cb4
 8005fbc:	200006e4 	.word	0x200006e4
 8005fc0:	ffffff00 	.word	0xffffff00
 8005fc4:	20000cb0 	.word	0x20000cb0
 8005fc8:	fffffefc 	.word	0xfffffefc
 8005fcc:	20000cac 	.word	0x20000cac
 8005fd0:	20000cb2 	.word	0x20000cb2
 8005fd4:	20000cae 	.word	0x20000cae
 8005fd8:	20000010 	.word	0x20000010
 8005fdc:	20000004 	.word	0x20000004
 8005fe0:	20000034 	.word	0x20000034
 8005fe4:	2000002c 	.word	0x2000002c
 8005fe8:	20000000 	.word	0x20000000
 8005fec:	20000001 	.word	0x20000001
 8005ff0:	200006e6 	.word	0x200006e6
 8005ff4:	200006e5 	.word	0x200006e5

08005ff8 <send_command>:

void send_command(char *command, uint16_t timeout, uint8_t caseId,
		uint8_t retryCount, uint8_t isReset) {
 8005ff8:	b590      	push	{r4, r7, lr}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	000c      	movs	r4, r1
 8006002:	0010      	movs	r0, r2
 8006004:	0019      	movs	r1, r3
 8006006:	1cbb      	adds	r3, r7, #2
 8006008:	1c22      	adds	r2, r4, #0
 800600a:	801a      	strh	r2, [r3, #0]
 800600c:	1c7b      	adds	r3, r7, #1
 800600e:	1c02      	adds	r2, r0, #0
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	003b      	movs	r3, r7
 8006014:	1c0a      	adds	r2, r1, #0
 8006016:	701a      	strb	r2, [r3, #0]
	uint8_t processComplete = 0, processCount = 0;
 8006018:	230f      	movs	r3, #15
 800601a:	18fb      	adds	r3, r7, r3
 800601c:	2200      	movs	r2, #0
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	230e      	movs	r3, #14
 8006022:	18fb      	adds	r3, r7, r3
 8006024:	2200      	movs	r2, #0
 8006026:	701a      	strb	r2, [r3, #0]
	uint16_t commandSize = 0;
 8006028:	230c      	movs	r3, #12
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	2200      	movs	r2, #0
 800602e:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8006030:	230a      	movs	r3, #10
 8006032:	18fb      	adds	r3, r7, r3
 8006034:	2200      	movs	r2, #0
 8006036:	801a      	strh	r2, [r3, #0]
	while (command[i] != NULL) {
 8006038:	e00b      	b.n	8006052 <send_command+0x5a>
		commandSize++;
 800603a:	210c      	movs	r1, #12
 800603c:	187b      	adds	r3, r7, r1
 800603e:	881a      	ldrh	r2, [r3, #0]
 8006040:	187b      	adds	r3, r7, r1
 8006042:	3201      	adds	r2, #1
 8006044:	801a      	strh	r2, [r3, #0]
		i++;
 8006046:	210a      	movs	r1, #10
 8006048:	187b      	adds	r3, r7, r1
 800604a:	881a      	ldrh	r2, [r3, #0]
 800604c:	187b      	adds	r3, r7, r1
 800604e:	3201      	adds	r2, #1
 8006050:	801a      	strh	r2, [r3, #0]
	while (command[i] != NULL) {
 8006052:	230a      	movs	r3, #10
 8006054:	18fb      	adds	r3, r7, r3
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	18d3      	adds	r3, r2, r3
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1eb      	bne.n	800603a <send_command+0x42>
	}
	while (processComplete == 0) {
 8006062:	e05a      	b.n	800611a <send_command+0x122>
		while (isBusy)
 8006064:	46c0      	nop			; (mov r8, r8)
 8006066:	4b32      	ldr	r3, [pc, #200]	; (8006130 <send_command+0x138>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1fa      	bne.n	8006066 <send_command+0x6e>
			;
		isBusy = 1;
 8006070:	4b2f      	ldr	r3, [pc, #188]	; (8006130 <send_command+0x138>)
 8006072:	2201      	movs	r2, #1
 8006074:	701a      	strb	r2, [r3, #0]
		isResponseOk = 0;
 8006076:	4b2f      	ldr	r3, [pc, #188]	; (8006134 <send_command+0x13c>)
 8006078:	2200      	movs	r2, #0
 800607a:	701a      	strb	r2, [r3, #0]
		commandCase = caseId;
 800607c:	4b2e      	ldr	r3, [pc, #184]	; (8006138 <send_command+0x140>)
 800607e:	1c7a      	adds	r2, r7, #1
 8006080:	7812      	ldrb	r2, [r2, #0]
 8006082:	701a      	strb	r2, [r3, #0]
		isStart = 1;
 8006084:	4b2d      	ldr	r3, [pc, #180]	; (800613c <send_command+0x144>)
 8006086:	2201      	movs	r2, #1
 8006088:	701a      	strb	r2, [r3, #0]
		recResponse = 0;
 800608a:	4b2d      	ldr	r3, [pc, #180]	; (8006140 <send_command+0x148>)
 800608c:	2200      	movs	r2, #0
 800608e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&AT_PORT, command, commandSize, 1000);
 8006090:	23fa      	movs	r3, #250	; 0xfa
 8006092:	009c      	lsls	r4, r3, #2
 8006094:	230c      	movs	r3, #12
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	881a      	ldrh	r2, [r3, #0]
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	4829      	ldr	r0, [pc, #164]	; (8006144 <send_command+0x14c>)
 800609e:	0023      	movs	r3, r4
 80060a0:	f006 f8fe 	bl	800c2a0 <HAL_UART_Transmit>
		FIX_TIMER_TRIGGER(&htim6);
 80060a4:	4b28      	ldr	r3, [pc, #160]	; (8006148 <send_command+0x150>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2202      	movs	r2, #2
 80060aa:	4252      	negs	r2, r2
 80060ac:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim6);
 80060ae:	4b26      	ldr	r3, [pc, #152]	; (8006148 <send_command+0x150>)
 80060b0:	0018      	movs	r0, r3
 80060b2:	f005 f8ef 	bl	800b294 <HAL_TIM_Base_Start_IT>
		resTimeout = timeout; //300 ms
 80060b6:	4b25      	ldr	r3, [pc, #148]	; (800614c <send_command+0x154>)
 80060b8:	1cba      	adds	r2, r7, #2
 80060ba:	8812      	ldrh	r2, [r2, #0]
 80060bc:	801a      	strh	r2, [r3, #0]
		ab=5;
 80060be:	4b24      	ldr	r3, [pc, #144]	; (8006150 <send_command+0x158>)
 80060c0:	2205      	movs	r2, #5
 80060c2:	701a      	strb	r2, [r3, #0]
		while (isBusy)
 80060c4:	46c0      	nop			; (mov r8, r8)
 80060c6:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <send_command+0x138>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1fa      	bne.n	80060c6 <send_command+0xce>
			;
		commandCase = 0;
 80060d0:	4b19      	ldr	r3, [pc, #100]	; (8006138 <send_command+0x140>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]
		if (isResponseOk) {
 80060d6:	4b17      	ldr	r3, [pc, #92]	; (8006134 <send_command+0x13c>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <send_command+0xf2>
			processComplete = 1;
 80060e0:	230f      	movs	r3, #15
 80060e2:	18fb      	adds	r3, r7, r3
 80060e4:	2201      	movs	r2, #1
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	e017      	b.n	800611a <send_command+0x122>
		} else {
			//printf("failed\n");
			processCount++;
 80060ea:	210e      	movs	r1, #14
 80060ec:	187b      	adds	r3, r7, r1
 80060ee:	781a      	ldrb	r2, [r3, #0]
 80060f0:	187b      	adds	r3, r7, r1
 80060f2:	3201      	adds	r2, #1
 80060f4:	701a      	strb	r2, [r3, #0]
			if (processCount > retryCount) {
 80060f6:	187a      	adds	r2, r7, r1
 80060f8:	003b      	movs	r3, r7
 80060fa:	7812      	ldrb	r2, [r2, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d907      	bls.n	8006112 <send_command+0x11a>
				if (isReset == 1) {
 8006102:	2320      	movs	r3, #32
 8006104:	18fb      	adds	r3, r7, r3
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d10c      	bne.n	8006126 <send_command+0x12e>
					rebootsystem();
 800610c:	f7ff fdee 	bl	8005cec <rebootsystem>
				}
				break;
 8006110:	e009      	b.n	8006126 <send_command+0x12e>
			}
			HAL_Delay(5000);
 8006112:	4b10      	ldr	r3, [pc, #64]	; (8006154 <send_command+0x15c>)
 8006114:	0018      	movs	r0, r3
 8006116:	f002 fe85 	bl	8008e24 <HAL_Delay>
	while (processComplete == 0) {
 800611a:	230f      	movs	r3, #15
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d09f      	beq.n	8006064 <send_command+0x6c>
		}
	}
}
 8006124:	e000      	b.n	8006128 <send_command+0x130>
				break;
 8006126:	46c0      	nop			; (mov r8, r8)
}
 8006128:	46c0      	nop			; (mov r8, r8)
 800612a:	46bd      	mov	sp, r7
 800612c:	b005      	add	sp, #20
 800612e:	bd90      	pop	{r4, r7, pc}
 8006130:	20000825 	.word	0x20000825
 8006134:	2000082c 	.word	0x2000082c
 8006138:	2000082b 	.word	0x2000082b
 800613c:	20000824 	.word	0x20000824
 8006140:	2000082d 	.word	0x2000082d
 8006144:	20000478 	.word	0x20000478
 8006148:	20000394 	.word	0x20000394
 800614c:	20000828 	.word	0x20000828
 8006150:	20000cb6 	.word	0x20000cb6
 8006154:	00001388 	.word	0x00001388

08006158 <quectel_init>:
void quectel_init() {
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af02      	add	r7, sp, #8
	// printf("--Sending AT-- \n");
	send_command("AT\r\n", 3, 1, 1, 1);
 800615e:	481f      	ldr	r0, [pc, #124]	; (80061dc <quectel_init+0x84>)
 8006160:	2301      	movs	r3, #1
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	2301      	movs	r3, #1
 8006166:	2201      	movs	r2, #1
 8006168:	2103      	movs	r1, #3
 800616a:	f7ff ff45 	bl	8005ff8 <send_command>
	ab = 2;
 800616e:	4b1c      	ldr	r3, [pc, #112]	; (80061e0 <quectel_init+0x88>)
 8006170:	2202      	movs	r2, #2
 8006172:	701a      	strb	r2, [r3, #0]

	// printf("--sending AT+QIURC=1--\n");
	// send_command("AT+QIURC=1\r\n", 3, 1, 1,1);
	// printf("--Sending AT+CPIN-- \n");
	send_command("AT+CPIN?\r\n", 51, 2, 2, 1);
 8006174:	481b      	ldr	r0, [pc, #108]	; (80061e4 <quectel_init+0x8c>)
 8006176:	2301      	movs	r3, #1
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	2302      	movs	r3, #2
 800617c:	2202      	movs	r2, #2
 800617e:	2133      	movs	r1, #51	; 0x33
 8006180:	f7ff ff3a 	bl	8005ff8 <send_command>
	ab = 3;
 8006184:	4b16      	ldr	r3, [pc, #88]	; (80061e0 <quectel_init+0x88>)
 8006186:	2203      	movs	r2, #3
 8006188:	701a      	strb	r2, [r3, #0]
	// printf("--Sending AT+CREG?-- \n");
	// send_command("AT+CREG?\r\n",3,3,5,1);
	// printf("--Sending AT+CGREG?-- \n");
	// send_command("AT+CGREG?\r\n",3,3,3,1);
	// printf("--Sending AT+CMGF=1-- \n");
	send_command("AT+CMGF=1\r\n", 3, 1, 3, 1);
 800618a:	4817      	ldr	r0, [pc, #92]	; (80061e8 <quectel_init+0x90>)
 800618c:	2301      	movs	r3, #1
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	2303      	movs	r3, #3
 8006192:	2201      	movs	r2, #1
 8006194:	2103      	movs	r1, #3
 8006196:	f7ff ff2f 	bl	8005ff8 <send_command>
	ab = 4;
 800619a:	4b11      	ldr	r3, [pc, #68]	; (80061e0 <quectel_init+0x88>)
 800619c:	2204      	movs	r2, #4
 800619e:	701a      	strb	r2, [r3, #0]

	// printf("--Sending AT+CNMI=2,2-- \n");
	send_command("AT+CNMI=2,2\r\n", 3, 1, 3, 1);
 80061a0:	4812      	ldr	r0, [pc, #72]	; (80061ec <quectel_init+0x94>)
 80061a2:	2301      	movs	r3, #1
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	2303      	movs	r3, #3
 80061a8:	2201      	movs	r2, #1
 80061aa:	2103      	movs	r1, #3
 80061ac:	f7ff ff24 	bl	8005ff8 <send_command>
	ab = 5;
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <quectel_init+0x88>)
 80061b2:	2205      	movs	r2, #5
 80061b4:	701a      	strb	r2, [r3, #0]

	// printf("--Sending AT+CGSN--\r\n \n");
	send_command("AT+CGSN\r\n", 3, 4, 2, 1);
 80061b6:	480e      	ldr	r0, [pc, #56]	; (80061f0 <quectel_init+0x98>)
 80061b8:	2301      	movs	r3, #1
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	2302      	movs	r3, #2
 80061be:	2204      	movs	r2, #4
 80061c0:	2103      	movs	r1, #3
 80061c2:	f7ff ff19 	bl	8005ff8 <send_command>
	send_command("AT+QMGDA=\"DEL ALL\"\r\n", 50, 1, 0, 0);
 80061c6:	480b      	ldr	r0, [pc, #44]	; (80061f4 <quectel_init+0x9c>)
 80061c8:	2300      	movs	r3, #0
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	2300      	movs	r3, #0
 80061ce:	2201      	movs	r2, #1
 80061d0:	2132      	movs	r1, #50	; 0x32
 80061d2:	f7ff ff11 	bl	8005ff8 <send_command>

}
 80061d6:	46c0      	nop			; (mov r8, r8)
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	080126ec 	.word	0x080126ec
 80061e0:	20000cb6 	.word	0x20000cb6
 80061e4:	080126f4 	.word	0x080126f4
 80061e8:	08012700 	.word	0x08012700
 80061ec:	0801270c 	.word	0x0801270c
 80061f0:	0801271c 	.word	0x0801271c
 80061f4:	08012728 	.word	0x08012728

080061f8 <estabilish_tcp>:

uint8_t estabilish_tcp() {
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af02      	add	r7, sp, #8
	// HAL_UART_Transmit(&huart4, "est tcp",
	// sizeof("est tcp"), 100);
	send_command("+++", 10, 1, 0, 0);
 80061fe:	4853      	ldr	r0, [pc, #332]	; (800634c <estabilish_tcp+0x154>)
 8006200:	2300      	movs	r3, #0
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	2300      	movs	r3, #0
 8006206:	2201      	movs	r2, #1
 8006208:	210a      	movs	r1, #10
 800620a:	f7ff fef5 	bl	8005ff8 <send_command>
	memset(tcpCommand, 0, sizeof(tcpCommand));
 800620e:	4b50      	ldr	r3, [pc, #320]	; (8006350 <estabilish_tcp+0x158>)
 8006210:	2232      	movs	r2, #50	; 0x32
 8006212:	2100      	movs	r1, #0
 8006214:	0018      	movs	r0, r3
 8006216:	f007 ff9e 	bl	800e156 <memset>
	strcat(tcpCommand, "AT+QIOPEN=\"TCP\",\"");
 800621a:	4b4d      	ldr	r3, [pc, #308]	; (8006350 <estabilish_tcp+0x158>)
 800621c:	0018      	movs	r0, r3
 800621e:	f7f9 ff79 	bl	8000114 <strlen>
 8006222:	0003      	movs	r3, r0
 8006224:	001a      	movs	r2, r3
 8006226:	4b4a      	ldr	r3, [pc, #296]	; (8006350 <estabilish_tcp+0x158>)
 8006228:	18d2      	adds	r2, r2, r3
 800622a:	4b4a      	ldr	r3, [pc, #296]	; (8006354 <estabilish_tcp+0x15c>)
 800622c:	0010      	movs	r0, r2
 800622e:	0019      	movs	r1, r3
 8006230:	2312      	movs	r3, #18
 8006232:	001a      	movs	r2, r3
 8006234:	f007 ff86 	bl	800e144 <memcpy>
	strcat(tcpCommand, domainAdd);
 8006238:	4a47      	ldr	r2, [pc, #284]	; (8006358 <estabilish_tcp+0x160>)
 800623a:	4b45      	ldr	r3, [pc, #276]	; (8006350 <estabilish_tcp+0x158>)
 800623c:	0011      	movs	r1, r2
 800623e:	0018      	movs	r0, r3
 8006240:	f007 ffb2 	bl	800e1a8 <strcat>
	strcat(tcpCommand, "\",");
 8006244:	4b42      	ldr	r3, [pc, #264]	; (8006350 <estabilish_tcp+0x158>)
 8006246:	0018      	movs	r0, r3
 8006248:	f7f9 ff64 	bl	8000114 <strlen>
 800624c:	0003      	movs	r3, r0
 800624e:	001a      	movs	r2, r3
 8006250:	4b3f      	ldr	r3, [pc, #252]	; (8006350 <estabilish_tcp+0x158>)
 8006252:	18d2      	adds	r2, r2, r3
 8006254:	4b41      	ldr	r3, [pc, #260]	; (800635c <estabilish_tcp+0x164>)
 8006256:	0010      	movs	r0, r2
 8006258:	0019      	movs	r1, r3
 800625a:	2303      	movs	r3, #3
 800625c:	001a      	movs	r2, r3
 800625e:	f007 ff71 	bl	800e144 <memcpy>
	strcat(tcpCommand, portAdd);
 8006262:	4a3f      	ldr	r2, [pc, #252]	; (8006360 <estabilish_tcp+0x168>)
 8006264:	4b3a      	ldr	r3, [pc, #232]	; (8006350 <estabilish_tcp+0x158>)
 8006266:	0011      	movs	r1, r2
 8006268:	0018      	movs	r0, r3
 800626a:	f007 ff9d 	bl	800e1a8 <strcat>
	strcat(tcpCommand, "\r\n");
 800626e:	4b38      	ldr	r3, [pc, #224]	; (8006350 <estabilish_tcp+0x158>)
 8006270:	0018      	movs	r0, r3
 8006272:	f7f9 ff4f 	bl	8000114 <strlen>
 8006276:	0003      	movs	r3, r0
 8006278:	001a      	movs	r2, r3
 800627a:	4b35      	ldr	r3, [pc, #212]	; (8006350 <estabilish_tcp+0x158>)
 800627c:	18d2      	adds	r2, r2, r3
 800627e:	4b39      	ldr	r3, [pc, #228]	; (8006364 <estabilish_tcp+0x16c>)
 8006280:	0010      	movs	r0, r2
 8006282:	0019      	movs	r1, r3
 8006284:	2303      	movs	r3, #3
 8006286:	001a      	movs	r2, r3
 8006288:	f007 ff5c 	bl	800e144 <memcpy>
	// printf("--Sent AT+QIDEACT \n");
	send_command("AT+QIDEACT\r\n", 401, 1, 2, 0);
 800628c:	2392      	movs	r3, #146	; 0x92
 800628e:	33ff      	adds	r3, #255	; 0xff
 8006290:	0019      	movs	r1, r3
 8006292:	4835      	ldr	r0, [pc, #212]	; (8006368 <estabilish_tcp+0x170>)
 8006294:	2300      	movs	r3, #0
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	2302      	movs	r3, #2
 800629a:	2201      	movs	r2, #1
 800629c:	f7ff feac 	bl	8005ff8 <send_command>

	if (isResponseOk == 0) {
 80062a0:	4b32      	ldr	r3, [pc, #200]	; (800636c <estabilish_tcp+0x174>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <estabilish_tcp+0xb6>
		return 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	e04b      	b.n	8006346 <estabilish_tcp+0x14e>
	}
	send_command("AT+QIMODE=1\r\n", 3, 1, 3, 0);
 80062ae:	4830      	ldr	r0, [pc, #192]	; (8006370 <estabilish_tcp+0x178>)
 80062b0:	2300      	movs	r3, #0
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	2303      	movs	r3, #3
 80062b6:	2201      	movs	r2, #1
 80062b8:	2103      	movs	r1, #3
 80062ba:	f7ff fe9d 	bl	8005ff8 <send_command>
	if (isResponseOk == 0) {
 80062be:	4b2b      	ldr	r3, [pc, #172]	; (800636c <estabilish_tcp+0x174>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <estabilish_tcp+0xd4>
		return 0;
 80062c8:	2300      	movs	r3, #0
 80062ca:	e03c      	b.n	8006346 <estabilish_tcp+0x14e>
	}
	send_command("AT+QITCFG=3,2,512,1\r\n", 3, 1, 1, 0);
 80062cc:	4829      	ldr	r0, [pc, #164]	; (8006374 <estabilish_tcp+0x17c>)
 80062ce:	2300      	movs	r3, #0
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	2301      	movs	r3, #1
 80062d4:	2201      	movs	r2, #1
 80062d6:	2103      	movs	r1, #3
 80062d8:	f7ff fe8e 	bl	8005ff8 <send_command>
	if (isResponseOk == 0) {
 80062dc:	4b23      	ldr	r3, [pc, #140]	; (800636c <estabilish_tcp+0x174>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <estabilish_tcp+0xf2>
		return 0;
 80062e6:	2300      	movs	r3, #0
 80062e8:	e02d      	b.n	8006346 <estabilish_tcp+0x14e>
	}
	send_command("AT+QIREGAPP=\"network\",\"\",\"\"\r\n", 3, 1, 1, 0);
 80062ea:	4823      	ldr	r0, [pc, #140]	; (8006378 <estabilish_tcp+0x180>)
 80062ec:	2300      	movs	r3, #0
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	2301      	movs	r3, #1
 80062f2:	2201      	movs	r2, #1
 80062f4:	2103      	movs	r1, #3
 80062f6:	f7ff fe7f 	bl	8005ff8 <send_command>
	if (isResponseOk == 0) {
 80062fa:	4b1c      	ldr	r3, [pc, #112]	; (800636c <estabilish_tcp+0x174>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <estabilish_tcp+0x110>
		return 0;
 8006304:	2300      	movs	r3, #0
 8006306:	e01e      	b.n	8006346 <estabilish_tcp+0x14e>
	}
	send_command("AT+QIACT\r\n", 1510, 1, 0, 0);
 8006308:	491c      	ldr	r1, [pc, #112]	; (800637c <estabilish_tcp+0x184>)
 800630a:	481d      	ldr	r0, [pc, #116]	; (8006380 <estabilish_tcp+0x188>)
 800630c:	2300      	movs	r3, #0
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	2300      	movs	r3, #0
 8006312:	2201      	movs	r2, #1
 8006314:	f7ff fe70 	bl	8005ff8 <send_command>
	if (isResponseOk == 0) {
 8006318:	4b14      	ldr	r3, [pc, #80]	; (800636c <estabilish_tcp+0x174>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <estabilish_tcp+0x12e>
		return 0;
 8006322:	2300      	movs	r3, #0
 8006324:	e00f      	b.n	8006346 <estabilish_tcp+0x14e>
	}
	// HAL_UART_Transmit(&huart4, "S qiopen", sizeof("S qiopen"), 100);

	send_command(tcpCommand, 751, 5, 2, 0);
 8006326:	4917      	ldr	r1, [pc, #92]	; (8006384 <estabilish_tcp+0x18c>)
 8006328:	4809      	ldr	r0, [pc, #36]	; (8006350 <estabilish_tcp+0x158>)
 800632a:	2300      	movs	r3, #0
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	2302      	movs	r3, #2
 8006330:	2205      	movs	r2, #5
 8006332:	f7ff fe61 	bl	8005ff8 <send_command>
	if (isResponseOk == 1) {
 8006336:	4b0d      	ldr	r3, [pc, #52]	; (800636c <estabilish_tcp+0x174>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <estabilish_tcp+0x14c>
		return 1;
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <estabilish_tcp+0x14e>
	} else {
		return 0;
 8006344:	2300      	movs	r3, #0
	}
}
 8006346:	0018      	movs	r0, r3
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	08012740 	.word	0x08012740
 8006350:	2000083c 	.word	0x2000083c
 8006354:	08012744 	.word	0x08012744
 8006358:	20000034 	.word	0x20000034
 800635c:	08012758 	.word	0x08012758
 8006360:	2000002c 	.word	0x2000002c
 8006364:	0801275c 	.word	0x0801275c
 8006368:	08012760 	.word	0x08012760
 800636c:	2000082c 	.word	0x2000082c
 8006370:	08012770 	.word	0x08012770
 8006374:	08012780 	.word	0x08012780
 8006378:	08012798 	.word	0x08012798
 800637c:	000005e6 	.word	0x000005e6
 8006380:	080127b8 	.word	0x080127b8
 8006384:	000002ef 	.word	0x000002ef

08006388 <GetCrc16>:

uint16_t GetCrc16(const uint8_t *pData, int nLength) {
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
	uint16_t fcs = 0xffff; // initialization
 8006392:	230e      	movs	r3, #14
 8006394:	18fb      	adds	r3, r7, r3
 8006396:	2201      	movs	r2, #1
 8006398:	4252      	negs	r2, r2
 800639a:	801a      	strh	r2, [r3, #0]
	int a = 0;
 800639c:	2300      	movs	r3, #0
 800639e:	60bb      	str	r3, [r7, #8]
	while (nLength > 0) {
 80063a0:	e019      	b.n	80063d6 <GetCrc16+0x4e>
		a = (fcs ^ *pData) & 0xff;
 80063a2:	200e      	movs	r0, #14
 80063a4:	183b      	adds	r3, r7, r0
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	7812      	ldrb	r2, [r2, #0]
 80063ac:	4053      	eors	r3, r2
 80063ae:	22ff      	movs	r2, #255	; 0xff
 80063b0:	4013      	ands	r3, r2
 80063b2:	60bb      	str	r3, [r7, #8]
		fcs = (fcs >> 8) ^ crctab16[a];
 80063b4:	183b      	adds	r3, r7, r0
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	0a1b      	lsrs	r3, r3, #8
 80063ba:	b299      	uxth	r1, r3
 80063bc:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <GetCrc16+0x68>)
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	0052      	lsls	r2, r2, #1
 80063c2:	5ad2      	ldrh	r2, [r2, r3]
 80063c4:	183b      	adds	r3, r7, r0
 80063c6:	404a      	eors	r2, r1
 80063c8:	801a      	strh	r2, [r3, #0]
		nLength--;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	603b      	str	r3, [r7, #0]
		pData++;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3301      	adds	r3, #1
 80063d4:	607b      	str	r3, [r7, #4]
	while (nLength > 0) {
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	dce2      	bgt.n	80063a2 <GetCrc16+0x1a>
	}
	return ~fcs; // negated
 80063dc:	230e      	movs	r3, #14
 80063de:	18fb      	adds	r3, r7, r3
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	43db      	mvns	r3, r3
 80063e4:	b29b      	uxth	r3, r3
}
 80063e6:	0018      	movs	r0, r3
 80063e8:	46bd      	mov	sp, r7
 80063ea:	b004      	add	sp, #16
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	08012864 	.word	0x08012864

080063f4 <where_api_handler>:

void where_api_handler() {
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af02      	add	r7, sp, #8
	if (isWhereApiCalled == 1) {
 80063fa:	4b0c      	ldr	r3, [pc, #48]	; (800642c <where_api_handler+0x38>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d110      	bne.n	8006424 <where_api_handler+0x30>
		// printf("--Sending AT+CREG?-- \n");
		// HAL_UART_Transmit(&huart4, "S creg in api", sizeof("S creg in api"),
		// 100);
		send_command("AT+CREG?\r\n", 3, 3, 3, 1);
 8006402:	480b      	ldr	r0, [pc, #44]	; (8006430 <where_api_handler+0x3c>)
 8006404:	2301      	movs	r3, #1
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	2303      	movs	r3, #3
 800640a:	2203      	movs	r2, #3
 800640c:	2103      	movs	r1, #3
 800640e:	f7ff fdf3 	bl	8005ff8 <send_command>
		if (isReg == 1) {
 8006412:	4b08      	ldr	r3, [pc, #32]	; (8006434 <where_api_handler+0x40>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d104      	bne.n	8006424 <where_api_handler+0x30>
			send_current_location_via_sms(); //sending current location
 800641a:	f000 fddb 	bl	8006fd4 <send_current_location_via_sms>
			isWhereApiCalled = 0;
 800641e:	4b03      	ldr	r3, [pc, #12]	; (800642c <where_api_handler+0x38>)
 8006420:	2200      	movs	r2, #0
 8006422:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8006424:	46c0      	nop			; (mov r8, r8)
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	200009c6 	.word	0x200009c6
 8006430:	08012600 	.word	0x08012600
 8006434:	200009c5 	.word	0x200009c5

08006438 <alarm_sender>:
void alarm_sender(){
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
	if(isAlarm){
 800643c:	4b0b      	ldr	r3, [pc, #44]	; (800646c <alarm_sender+0x34>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00f      	beq.n	8006466 <alarm_sender+0x2e>
		if (isReg == 1) {
 8006446:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <alarm_sender+0x38>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d105      	bne.n	800645a <alarm_sender+0x22>
			send_alarm_packet_via_sms();
 800644e:	f000 ffa9 	bl	80073a4 <send_alarm_packet_via_sms>
			isAlarm = 0;
 8006452:	4b06      	ldr	r3, [pc, #24]	; (800646c <alarm_sender+0x34>)
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
			saveAlarm=1;
			isAlarm=0;
		}

	}
}
 8006458:	e005      	b.n	8006466 <alarm_sender+0x2e>
			saveAlarm=1;
 800645a:	4b06      	ldr	r3, [pc, #24]	; (8006474 <alarm_sender+0x3c>)
 800645c:	2201      	movs	r2, #1
 800645e:	701a      	strb	r2, [r3, #0]
			isAlarm=0;
 8006460:	4b02      	ldr	r3, [pc, #8]	; (800646c <alarm_sender+0x34>)
 8006462:	2200      	movs	r2, #0
 8006464:	701a      	strb	r2, [r3, #0]
}
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	200006d0 	.word	0x200006d0
 8006470:	200009c5 	.word	0x200009c5
 8006474:	200006d5 	.word	0x200006d5

08006478 <clearit>:

void clearit() {
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
	resTimeout = 3;
 800647c:	4b0e      	ldr	r3, [pc, #56]	; (80064b8 <clearit+0x40>)
 800647e:	2203      	movs	r2, #3
 8006480:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim6);
 8006482:	4b0e      	ldr	r3, [pc, #56]	; (80064bc <clearit+0x44>)
 8006484:	0018      	movs	r0, r3
 8006486:	f004 ff5b 	bl	800b340 <HAL_TIM_Base_Stop_IT>
	memset(responseBuffer, 0, sizeof(responseBuffer));
 800648a:	2396      	movs	r3, #150	; 0x96
 800648c:	005a      	lsls	r2, r3, #1
 800648e:	4b0c      	ldr	r3, [pc, #48]	; (80064c0 <clearit+0x48>)
 8006490:	2100      	movs	r1, #0
 8006492:	0018      	movs	r0, r3
 8006494:	f007 fe5f 	bl	800e156 <memset>
	lineCount = 0;
 8006498:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <clearit+0x4c>)
 800649a:	2200      	movs	r2, #0
 800649c:	701a      	strb	r2, [r3, #0]
	charCount = 0;
 800649e:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <clearit+0x50>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	701a      	strb	r2, [r3, #0]
	isStart = 0;
 80064a4:	4b09      	ldr	r3, [pc, #36]	; (80064cc <clearit+0x54>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	701a      	strb	r2, [r3, #0]
	isBusy = 0;
 80064aa:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <clearit+0x58>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	701a      	strb	r2, [r3, #0]

}
 80064b0:	46c0      	nop			; (mov r8, r8)
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	20000828 	.word	0x20000828
 80064bc:	20000394 	.word	0x20000394
 80064c0:	200006f4 	.word	0x200006f4
 80064c4:	20000820 	.word	0x20000820
 80064c8:	20000821 	.word	0x20000821
 80064cc:	20000824 	.word	0x20000824
 80064d0:	20000825 	.word	0x20000825

080064d4 <incoming_msg_handler>:

void incoming_msg_handler() {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af02      	add	r7, sp, #8
	if (isPulse == 1) {
 80064da:	4b26      	ldr	r3, [pc, #152]	; (8006574 <incoming_msg_handler+0xa0>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d144      	bne.n	800656e <incoming_msg_handler+0x9a>
		isPulse = 0;
 80064e4:	4b23      	ldr	r3, [pc, #140]	; (8006574 <incoming_msg_handler+0xa0>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
		//printf("--Sending +++-- \n");
		//HAL_UART_Transmit(&huart4, "S +++ incom", sizeof("S +++ incom"), 100);
		send_command("+++", 10, 1, 0, 0);
 80064ea:	4823      	ldr	r0, [pc, #140]	; (8006578 <incoming_msg_handler+0xa4>)
 80064ec:	2300      	movs	r3, #0
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	2300      	movs	r3, #0
 80064f2:	2201      	movs	r2, #1
 80064f4:	210a      	movs	r1, #10
 80064f6:	f7ff fd7f 	bl	8005ff8 <send_command>
		isDataMode = 0;
 80064fa:	4b20      	ldr	r3, [pc, #128]	; (800657c <incoming_msg_handler+0xa8>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	701a      	strb	r2, [r3, #0]
		indicationCounter = 0;
 8006500:	4b1f      	ldr	r3, [pc, #124]	; (8006580 <incoming_msg_handler+0xac>)
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
		while (indicationCounter < 5)
 8006506:	46c0      	nop			; (mov r8, r8)
 8006508:	4b1d      	ldr	r3, [pc, #116]	; (8006580 <incoming_msg_handler+0xac>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b04      	cmp	r3, #4
 800650e:	d9fb      	bls.n	8006508 <incoming_msg_handler+0x34>
			;
		where_api_handler();
 8006510:	f7ff ff70 	bl	80063f4 <where_api_handler>
		//HAL_UART_Transmit(&huart4, "S msg del", sizeof("S msg del"), 100);
		send_command("AT+QMGDA=\"DEL ALL\"\r\n", 50, 1, 0, 0);
 8006514:	481b      	ldr	r0, [pc, #108]	; (8006584 <incoming_msg_handler+0xb0>)
 8006516:	2300      	movs	r3, #0
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	2300      	movs	r3, #0
 800651c:	2201      	movs	r2, #1
 800651e:	2132      	movs	r1, #50	; 0x32
 8006520:	f7ff fd6a 	bl	8005ff8 <send_command>
		msgcleared = 0;
 8006524:	4b18      	ldr	r3, [pc, #96]	; (8006588 <incoming_msg_handler+0xb4>)
 8006526:	2200      	movs	r2, #0
 8006528:	701a      	strb	r2, [r3, #0]
		if (isResponseOk == 1) {
 800652a:	4b18      	ldr	r3, [pc, #96]	; (800658c <incoming_msg_handler+0xb8>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b01      	cmp	r3, #1
 8006532:	d102      	bne.n	800653a <incoming_msg_handler+0x66>
			msgcleared = 1;
 8006534:	4b14      	ldr	r3, [pc, #80]	; (8006588 <incoming_msg_handler+0xb4>)
 8006536:	2201      	movs	r2, #1
 8006538:	701a      	strb	r2, [r3, #0]
		}
		//printf("--Sending ATO-- \n");
		send_command("ATO\r\n", 10, 6, 0, 0);
 800653a:	4815      	ldr	r0, [pc, #84]	; (8006590 <incoming_msg_handler+0xbc>)
 800653c:	2300      	movs	r3, #0
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	2300      	movs	r3, #0
 8006542:	2206      	movs	r2, #6
 8006544:	210a      	movs	r1, #10
 8006546:	f7ff fd57 	bl	8005ff8 <send_command>
		if (isResponseOk == 1) {
 800654a:	4b10      	ldr	r3, [pc, #64]	; (800658c <incoming_msg_handler+0xb8>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b01      	cmp	r3, #1
 8006552:	d103      	bne.n	800655c <incoming_msg_handler+0x88>
			isDataMode = 1;
 8006554:	4b09      	ldr	r3, [pc, #36]	; (800657c <incoming_msg_handler+0xa8>)
 8006556:	2201      	movs	r2, #1
 8006558:	701a      	strb	r2, [r3, #0]
			isDataMode = 0;
			isTcpOpen = 0;
		}
	}

}
 800655a:	e008      	b.n	800656e <incoming_msg_handler+0x9a>
			isLoggedIn = 0;
 800655c:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <incoming_msg_handler+0xc0>)
 800655e:	2200      	movs	r2, #0
 8006560:	701a      	strb	r2, [r3, #0]
			isDataMode = 0;
 8006562:	4b06      	ldr	r3, [pc, #24]	; (800657c <incoming_msg_handler+0xa8>)
 8006564:	2200      	movs	r2, #0
 8006566:	701a      	strb	r2, [r3, #0]
			isTcpOpen = 0;
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <incoming_msg_handler+0xc4>)
 800656a:	2200      	movs	r2, #0
 800656c:	701a      	strb	r2, [r3, #0]
}
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	200006e9 	.word	0x200006e9
 8006578:	08012740 	.word	0x08012740
 800657c:	20000826 	.word	0x20000826
 8006580:	200006e1 	.word	0x200006e1
 8006584:	08012728 	.word	0x08012728
 8006588:	20000838 	.word	0x20000838
 800658c:	2000082c 	.word	0x2000082c
 8006590:	080127c4 	.word	0x080127c4
 8006594:	200009c7 	.word	0x200009c7
 8006598:	200009c4 	.word	0x200009c4

0800659c <send_login_packet>:

void send_login_packet() {
 800659c:	b5b0      	push	{r4, r5, r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
	if (isTcpOpen == 1 && isDataMode == 1) {
 80065a2:	4b39      	ldr	r3, [pc, #228]	; (8006688 <send_login_packet+0xec>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d169      	bne.n	8006680 <send_login_packet+0xe4>
 80065ac:	4b37      	ldr	r3, [pc, #220]	; (800668c <send_login_packet+0xf0>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d164      	bne.n	8006680 <send_login_packet+0xe4>
		for (uint8_t i = 0; i < 8; i++) {
 80065b6:	2317      	movs	r3, #23
 80065b8:	18fb      	adds	r3, r7, r3
 80065ba:	2200      	movs	r2, #0
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	e00e      	b.n	80065de <send_login_packet+0x42>
			loginPacket[i + 4] = imei[i];
 80065c0:	2017      	movs	r0, #23
 80065c2:	183b      	adds	r3, r7, r0
 80065c4:	781a      	ldrb	r2, [r3, #0]
 80065c6:	183b      	adds	r3, r7, r0
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	3304      	adds	r3, #4
 80065cc:	4930      	ldr	r1, [pc, #192]	; (8006690 <send_login_packet+0xf4>)
 80065ce:	5c89      	ldrb	r1, [r1, r2]
 80065d0:	4a30      	ldr	r2, [pc, #192]	; (8006694 <send_login_packet+0xf8>)
 80065d2:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 8; i++) {
 80065d4:	183b      	adds	r3, r7, r0
 80065d6:	781a      	ldrb	r2, [r3, #0]
 80065d8:	183b      	adds	r3, r7, r0
 80065da:	3201      	adds	r2, #1
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	2317      	movs	r3, #23
 80065e0:	18fb      	adds	r3, r7, r3
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b07      	cmp	r3, #7
 80065e6:	d9eb      	bls.n	80065c0 <send_login_packet+0x24>
		}
		loginPacket[12] = infoSNo >> 8;
 80065e8:	4b2b      	ldr	r3, [pc, #172]	; (8006698 <send_login_packet+0xfc>)
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	0a1b      	lsrs	r3, r3, #8
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	4b28      	ldr	r3, [pc, #160]	; (8006694 <send_login_packet+0xf8>)
 80065f4:	731a      	strb	r2, [r3, #12]
		loginPacket[13] = infoSNo;
 80065f6:	4b28      	ldr	r3, [pc, #160]	; (8006698 <send_login_packet+0xfc>)
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	4b25      	ldr	r3, [pc, #148]	; (8006694 <send_login_packet+0xf8>)
 80065fe:	735a      	strb	r2, [r3, #13]
		uint8_t tempCrcData[12];
		for (uint8_t i = 0; i < 12; i++) {
 8006600:	2316      	movs	r3, #22
 8006602:	18fb      	adds	r3, r7, r3
 8006604:	2200      	movs	r2, #0
 8006606:	701a      	strb	r2, [r3, #0]
 8006608:	e00e      	b.n	8006628 <send_login_packet+0x8c>
			tempCrcData[i] = loginPacket[i + 2];
 800660a:	2016      	movs	r0, #22
 800660c:	183b      	adds	r3, r7, r0
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	1c9a      	adds	r2, r3, #2
 8006612:	183b      	adds	r3, r7, r0
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	491f      	ldr	r1, [pc, #124]	; (8006694 <send_login_packet+0xf8>)
 8006618:	5c89      	ldrb	r1, [r1, r2]
 800661a:	003a      	movs	r2, r7
 800661c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 12; i++) {
 800661e:	183b      	adds	r3, r7, r0
 8006620:	781a      	ldrb	r2, [r3, #0]
 8006622:	183b      	adds	r3, r7, r0
 8006624:	3201      	adds	r2, #1
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	2316      	movs	r3, #22
 800662a:	18fb      	adds	r3, r7, r3
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	2b0b      	cmp	r3, #11
 8006630:	d9eb      	bls.n	800660a <send_login_packet+0x6e>
		}
		uint8_t *tempPtr = tempCrcData;
 8006632:	003b      	movs	r3, r7
 8006634:	613b      	str	r3, [r7, #16]
		uint16_t crcResult = 0;
 8006636:	250e      	movs	r5, #14
 8006638:	197b      	adds	r3, r7, r5
 800663a:	2200      	movs	r2, #0
 800663c:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 800663e:	197c      	adds	r4, r7, r5
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	210c      	movs	r1, #12
 8006644:	0018      	movs	r0, r3
 8006646:	f7ff fe9f 	bl	8006388 <GetCrc16>
 800664a:	0003      	movs	r3, r0
 800664c:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		loginPacket[14] = crcResult >> 8;
 800664e:	0029      	movs	r1, r5
 8006650:	187b      	adds	r3, r7, r1
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	0a1b      	lsrs	r3, r3, #8
 8006656:	b29b      	uxth	r3, r3
 8006658:	b2da      	uxtb	r2, r3
 800665a:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <send_login_packet+0xf8>)
 800665c:	739a      	strb	r2, [r3, #14]
		loginPacket[15] = crcResult;
 800665e:	187b      	adds	r3, r7, r1
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	b2da      	uxtb	r2, r3
 8006664:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <send_login_packet+0xf8>)
 8006666:	73da      	strb	r2, [r3, #15]
		HAL_UART_Transmit(&AT_PORT, loginPacket, 18, 100);
 8006668:	490a      	ldr	r1, [pc, #40]	; (8006694 <send_login_packet+0xf8>)
 800666a:	480c      	ldr	r0, [pc, #48]	; (800669c <send_login_packet+0x100>)
 800666c:	2364      	movs	r3, #100	; 0x64
 800666e:	2212      	movs	r2, #18
 8006670:	f005 fe16 	bl	800c2a0 <HAL_UART_Transmit>
		//printf("SENT LOGING PACKET SUCCESSFULLY\n");
		infoSNo++;
 8006674:	4b08      	ldr	r3, [pc, #32]	; (8006698 <send_login_packet+0xfc>)
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	3301      	adds	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	4b06      	ldr	r3, [pc, #24]	; (8006698 <send_login_packet+0xfc>)
 800667e:	801a      	strh	r2, [r3, #0]

	} else {
		//printf("TCP SESSION NOT OPENED\n");
	}
}
 8006680:	46c0      	nop			; (mov r8, r8)
 8006682:	46bd      	mov	sp, r7
 8006684:	b006      	add	sp, #24
 8006686:	bdb0      	pop	{r4, r5, r7, pc}
 8006688:	200009c4 	.word	0x200009c4
 800668c:	20000826 	.word	0x20000826
 8006690:	20000830 	.word	0x20000830
 8006694:	2000006c 	.word	0x2000006c
 8006698:	20000068 	.word	0x20000068
 800669c:	20000478 	.word	0x20000478

080066a0 <send_data_packet>:

void send_data_packet() {
 80066a0:	b5b0      	push	{r4, r5, r7, lr}
 80066a2:	b0a0      	sub	sp, #128	; 0x80
 80066a4:	af00      	add	r7, sp, #0
	infoSNo++;
 80066a6:	4bbc      	ldr	r3, [pc, #752]	; (8006998 <send_data_packet+0x2f8>)
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	3301      	adds	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	4bba      	ldr	r3, [pc, #744]	; (8006998 <send_data_packet+0x2f8>)
 80066b0:	801a      	strh	r2, [r3, #0]
	uint8_t sendCounter = 0;
 80066b2:	237f      	movs	r3, #127	; 0x7f
 80066b4:	18fb      	adds	r3, r7, r3
 80066b6:	2200      	movs	r2, #0
 80066b8:	701a      	strb	r2, [r3, #0]
	while (read_data_packet() == 1 && sendCounter < 100 && isLoggedIn == 1
 80066ba:	e06d      	b.n	8006798 <send_data_packet+0xf8>
			&& isDataMode == 1 && isTcpOpen == 1) {
		for (uint8_t i = 0; i < 18; i++) {
 80066bc:	237e      	movs	r3, #126	; 0x7e
 80066be:	18fb      	adds	r3, r7, r3
 80066c0:	2200      	movs	r2, #0
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	e00e      	b.n	80066e4 <send_data_packet+0x44>
			dataPacket[i + 4] = readPacket[i];
 80066c6:	207e      	movs	r0, #126	; 0x7e
 80066c8:	183b      	adds	r3, r7, r0
 80066ca:	781a      	ldrb	r2, [r3, #0]
 80066cc:	183b      	adds	r3, r7, r0
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	3304      	adds	r3, #4
 80066d2:	49b2      	ldr	r1, [pc, #712]	; (800699c <send_data_packet+0x2fc>)
 80066d4:	5c89      	ldrb	r1, [r1, r2]
 80066d6:	4ab2      	ldr	r2, [pc, #712]	; (80069a0 <send_data_packet+0x300>)
 80066d8:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 18; i++) {
 80066da:	183b      	adds	r3, r7, r0
 80066dc:	781a      	ldrb	r2, [r3, #0]
 80066de:	183b      	adds	r3, r7, r0
 80066e0:	3201      	adds	r2, #1
 80066e2:	701a      	strb	r2, [r3, #0]
 80066e4:	237e      	movs	r3, #126	; 0x7e
 80066e6:	18fb      	adds	r3, r7, r3
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b11      	cmp	r3, #17
 80066ec:	d9eb      	bls.n	80066c6 <send_data_packet+0x26>
		}

		dataPacket[30] = infoSNo >> 8;
 80066ee:	4baa      	ldr	r3, [pc, #680]	; (8006998 <send_data_packet+0x2f8>)
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	0a1b      	lsrs	r3, r3, #8
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	4ba9      	ldr	r3, [pc, #676]	; (80069a0 <send_data_packet+0x300>)
 80066fa:	779a      	strb	r2, [r3, #30]
		dataPacket[31] = infoSNo;
 80066fc:	4ba6      	ldr	r3, [pc, #664]	; (8006998 <send_data_packet+0x2f8>)
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	b2da      	uxtb	r2, r3
 8006702:	4ba7      	ldr	r3, [pc, #668]	; (80069a0 <send_data_packet+0x300>)
 8006704:	77da      	strb	r2, [r3, #31]
		uint8_t tempCrcData[30];
		for (uint8_t i = 0; i < 29; i++) {
 8006706:	237d      	movs	r3, #125	; 0x7d
 8006708:	18fb      	adds	r3, r7, r3
 800670a:	2200      	movs	r2, #0
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	e00f      	b.n	8006730 <send_data_packet+0x90>
			tempCrcData[i] = dataPacket[i + 2];
 8006710:	207d      	movs	r0, #125	; 0x7d
 8006712:	183b      	adds	r3, r7, r0
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	1c9a      	adds	r2, r3, #2
 8006718:	183b      	adds	r3, r7, r0
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	49a0      	ldr	r1, [pc, #640]	; (80069a0 <send_data_packet+0x300>)
 800671e:	5c89      	ldrb	r1, [r1, r2]
 8006720:	2244      	movs	r2, #68	; 0x44
 8006722:	18ba      	adds	r2, r7, r2
 8006724:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 29; i++) {
 8006726:	183b      	adds	r3, r7, r0
 8006728:	781a      	ldrb	r2, [r3, #0]
 800672a:	183b      	adds	r3, r7, r0
 800672c:	3201      	adds	r2, #1
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	237d      	movs	r3, #125	; 0x7d
 8006732:	18fb      	adds	r3, r7, r3
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b1c      	cmp	r3, #28
 8006738:	d9ea      	bls.n	8006710 <send_data_packet+0x70>
		}
		uint8_t *tempPtr = tempCrcData;
 800673a:	2344      	movs	r3, #68	; 0x44
 800673c:	18fb      	adds	r3, r7, r3
 800673e:	677b      	str	r3, [r7, #116]	; 0x74
		uint16_t crcResult = 0;
 8006740:	2572      	movs	r5, #114	; 0x72
 8006742:	197b      	adds	r3, r7, r5
 8006744:	2200      	movs	r2, #0
 8006746:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 8006748:	197c      	adds	r4, r7, r5
 800674a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800674c:	211e      	movs	r1, #30
 800674e:	0018      	movs	r0, r3
 8006750:	f7ff fe1a 	bl	8006388 <GetCrc16>
 8006754:	0003      	movs	r3, r0
 8006756:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		dataPacket[32] = crcResult >> 8;
 8006758:	0028      	movs	r0, r5
 800675a:	183b      	adds	r3, r7, r0
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	0a1b      	lsrs	r3, r3, #8
 8006760:	b29b      	uxth	r3, r3
 8006762:	b2d9      	uxtb	r1, r3
 8006764:	4b8e      	ldr	r3, [pc, #568]	; (80069a0 <send_data_packet+0x300>)
 8006766:	2220      	movs	r2, #32
 8006768:	5499      	strb	r1, [r3, r2]
		dataPacket[33] = crcResult;
 800676a:	183b      	adds	r3, r7, r0
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	b2d9      	uxtb	r1, r3
 8006770:	4b8b      	ldr	r3, [pc, #556]	; (80069a0 <send_data_packet+0x300>)
 8006772:	2221      	movs	r2, #33	; 0x21
 8006774:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&AT_PORT, dataPacket, 36, 100);
 8006776:	498a      	ldr	r1, [pc, #552]	; (80069a0 <send_data_packet+0x300>)
 8006778:	488a      	ldr	r0, [pc, #552]	; (80069a4 <send_data_packet+0x304>)
 800677a:	2364      	movs	r3, #100	; 0x64
 800677c:	2224      	movs	r2, #36	; 0x24
 800677e:	f005 fd8f 	bl	800c2a0 <HAL_UART_Transmit>
		// HAL_UART_Transmit(&huart4, dataPacket, 36, 100);
		sendCounter++;
 8006782:	217f      	movs	r1, #127	; 0x7f
 8006784:	187b      	adds	r3, r7, r1
 8006786:	781a      	ldrb	r2, [r3, #0]
 8006788:	187b      	adds	r3, r7, r1
 800678a:	3201      	adds	r2, #1
 800678c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1000);
 800678e:	23fa      	movs	r3, #250	; 0xfa
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	0018      	movs	r0, r3
 8006794:	f002 fb46 	bl	8008e24 <HAL_Delay>
	while (read_data_packet() == 1 && sendCounter < 100 && isLoggedIn == 1
 8006798:	f000 f9ea 	bl	8006b70 <read_data_packet>
 800679c:	0003      	movs	r3, r0
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d114      	bne.n	80067cc <send_data_packet+0x12c>
 80067a2:	237f      	movs	r3, #127	; 0x7f
 80067a4:	18fb      	adds	r3, r7, r3
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b63      	cmp	r3, #99	; 0x63
 80067aa:	d80f      	bhi.n	80067cc <send_data_packet+0x12c>
 80067ac:	4b7e      	ldr	r3, [pc, #504]	; (80069a8 <send_data_packet+0x308>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d10a      	bne.n	80067cc <send_data_packet+0x12c>
			&& isDataMode == 1 && isTcpOpen == 1) {
 80067b6:	4b7d      	ldr	r3, [pc, #500]	; (80069ac <send_data_packet+0x30c>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d105      	bne.n	80067cc <send_data_packet+0x12c>
 80067c0:	4b7b      	ldr	r3, [pc, #492]	; (80069b0 <send_data_packet+0x310>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d100      	bne.n	80067cc <send_data_packet+0x12c>
 80067ca:	e777      	b.n	80066bc <send_data_packet+0x1c>
	}
	if (read_data_packet() == 0) {
 80067cc:	f000 f9d0 	bl	8006b70 <read_data_packet>
 80067d0:	1e03      	subs	r3, r0, #0
 80067d2:	d000      	beq.n	80067d6 <send_data_packet+0x136>
 80067d4:	e0dc      	b.n	8006990 <send_data_packet+0x2f0>
		if(isAlarm){
 80067d6:	4b77      	ldr	r3, [pc, #476]	; (80069b4 <send_data_packet+0x314>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d074      	beq.n	80068ca <send_data_packet+0x22a>
			isAlarm=0;
 80067e0:	4b74      	ldr	r3, [pc, #464]	; (80069b4 <send_data_packet+0x314>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 18; i++) {
 80067e6:	237c      	movs	r3, #124	; 0x7c
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	2200      	movs	r2, #0
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	e010      	b.n	8006812 <send_data_packet+0x172>
				alarmPacket[i + 4] = gps_info[i];
 80067f0:	4b71      	ldr	r3, [pc, #452]	; (80069b8 <send_data_packet+0x318>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	207c      	movs	r0, #124	; 0x7c
 80067f6:	183b      	adds	r3, r7, r0
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	18d2      	adds	r2, r2, r3
 80067fc:	183b      	adds	r3, r7, r0
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	3304      	adds	r3, #4
 8006802:	7811      	ldrb	r1, [r2, #0]
 8006804:	4a6d      	ldr	r2, [pc, #436]	; (80069bc <send_data_packet+0x31c>)
 8006806:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 18; i++) {
 8006808:	183b      	adds	r3, r7, r0
 800680a:	781a      	ldrb	r2, [r3, #0]
 800680c:	183b      	adds	r3, r7, r0
 800680e:	3201      	adds	r2, #1
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	237c      	movs	r3, #124	; 0x7c
 8006814:	18fb      	adds	r3, r7, r3
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b11      	cmp	r3, #17
 800681a:	d9e9      	bls.n	80067f0 <send_data_packet+0x150>
			}
			create_status_info();
 800681c:	f000 fa1e 	bl	8006c5c <create_status_info>
			alarmPacket[22]=TermInfo;
 8006820:	4b67      	ldr	r3, [pc, #412]	; (80069c0 <send_data_packet+0x320>)
 8006822:	781a      	ldrb	r2, [r3, #0]
 8006824:	4b65      	ldr	r3, [pc, #404]	; (80069bc <send_data_packet+0x31c>)
 8006826:	759a      	strb	r2, [r3, #22]
			alarmPacket[23]=VLvl;
 8006828:	4b66      	ldr	r3, [pc, #408]	; (80069c4 <send_data_packet+0x324>)
 800682a:	781a      	ldrb	r2, [r3, #0]
 800682c:	4b63      	ldr	r3, [pc, #396]	; (80069bc <send_data_packet+0x31c>)
 800682e:	75da      	strb	r2, [r3, #23]
			alarmPacket[24]=GSMSS;
 8006830:	4b65      	ldr	r3, [pc, #404]	; (80069c8 <send_data_packet+0x328>)
 8006832:	781a      	ldrb	r2, [r3, #0]
 8006834:	4b61      	ldr	r3, [pc, #388]	; (80069bc <send_data_packet+0x31c>)
 8006836:	761a      	strb	r2, [r3, #24]
			alarmPacket[26] = infoSNo >> 8;
 8006838:	4b57      	ldr	r3, [pc, #348]	; (8006998 <send_data_packet+0x2f8>)
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	0a1b      	lsrs	r3, r3, #8
 800683e:	b29b      	uxth	r3, r3
 8006840:	b2da      	uxtb	r2, r3
 8006842:	4b5e      	ldr	r3, [pc, #376]	; (80069bc <send_data_packet+0x31c>)
 8006844:	769a      	strb	r2, [r3, #26]
			alarmPacket[27] = infoSNo;
 8006846:	4b54      	ldr	r3, [pc, #336]	; (8006998 <send_data_packet+0x2f8>)
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b2da      	uxtb	r2, r3
 800684c:	4b5b      	ldr	r3, [pc, #364]	; (80069bc <send_data_packet+0x31c>)
 800684e:	76da      	strb	r2, [r3, #27]
			uint8_t tempCrcData[30];
			for (uint8_t i = 0; i < 26; i++) {
 8006850:	237b      	movs	r3, #123	; 0x7b
 8006852:	18fb      	adds	r3, r7, r3
 8006854:	2200      	movs	r2, #0
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	e00f      	b.n	800687a <send_data_packet+0x1da>
				tempCrcData[i] = alarmPacket[i + 2];
 800685a:	207b      	movs	r0, #123	; 0x7b
 800685c:	183b      	adds	r3, r7, r0
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	1c9a      	adds	r2, r3, #2
 8006862:	183b      	adds	r3, r7, r0
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	4955      	ldr	r1, [pc, #340]	; (80069bc <send_data_packet+0x31c>)
 8006868:	5c89      	ldrb	r1, [r1, r2]
 800686a:	2224      	movs	r2, #36	; 0x24
 800686c:	18ba      	adds	r2, r7, r2
 800686e:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 26; i++) {
 8006870:	183b      	adds	r3, r7, r0
 8006872:	781a      	ldrb	r2, [r3, #0]
 8006874:	183b      	adds	r3, r7, r0
 8006876:	3201      	adds	r2, #1
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	237b      	movs	r3, #123	; 0x7b
 800687c:	18fb      	adds	r3, r7, r3
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b19      	cmp	r3, #25
 8006882:	d9ea      	bls.n	800685a <send_data_packet+0x1ba>
			}
			uint8_t *tempPtr = tempCrcData;
 8006884:	2324      	movs	r3, #36	; 0x24
 8006886:	18fb      	adds	r3, r7, r3
 8006888:	667b      	str	r3, [r7, #100]	; 0x64
			uint16_t crcResult = 0;
 800688a:	2562      	movs	r5, #98	; 0x62
 800688c:	197b      	adds	r3, r7, r5
 800688e:	2200      	movs	r2, #0
 8006890:	801a      	strh	r2, [r3, #0]
			crcResult = GetCrc16(tempPtr,
 8006892:	197c      	adds	r4, r7, r5
 8006894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006896:	211e      	movs	r1, #30
 8006898:	0018      	movs	r0, r3
 800689a:	f7ff fd75 	bl	8006388 <GetCrc16>
 800689e:	0003      	movs	r3, r0
 80068a0:	8023      	strh	r3, [r4, #0]
					sizeof(tempCrcData) / sizeof(tempCrcData[0]));
			alarmPacket[28] = crcResult >> 8;
 80068a2:	0029      	movs	r1, r5
 80068a4:	187b      	adds	r3, r7, r1
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	0a1b      	lsrs	r3, r3, #8
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	4b43      	ldr	r3, [pc, #268]	; (80069bc <send_data_packet+0x31c>)
 80068b0:	771a      	strb	r2, [r3, #28]
			alarmPacket[29] = crcResult;
 80068b2:	187b      	adds	r3, r7, r1
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	4b40      	ldr	r3, [pc, #256]	; (80069bc <send_data_packet+0x31c>)
 80068ba:	775a      	strb	r2, [r3, #29]
			HAL_UART_Transmit(&AT_PORT, alarmPacket, 29, 100);
 80068bc:	493f      	ldr	r1, [pc, #252]	; (80069bc <send_data_packet+0x31c>)
 80068be:	4839      	ldr	r0, [pc, #228]	; (80069a4 <send_data_packet+0x304>)
 80068c0:	2364      	movs	r3, #100	; 0x64
 80068c2:	221d      	movs	r2, #29
 80068c4:	f005 fcec 	bl	800c2a0 <HAL_UART_Transmit>

		}


	}
}
 80068c8:	e062      	b.n	8006990 <send_data_packet+0x2f0>
			for (uint8_t i = 0; i < 18; i++) {
 80068ca:	237a      	movs	r3, #122	; 0x7a
 80068cc:	18fb      	adds	r3, r7, r3
 80068ce:	2200      	movs	r2, #0
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	e010      	b.n	80068f6 <send_data_packet+0x256>
				dataPacket[i + 4] = gps_info[i];
 80068d4:	4b38      	ldr	r3, [pc, #224]	; (80069b8 <send_data_packet+0x318>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	207a      	movs	r0, #122	; 0x7a
 80068da:	183b      	adds	r3, r7, r0
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	18d2      	adds	r2, r2, r3
 80068e0:	183b      	adds	r3, r7, r0
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	3304      	adds	r3, #4
 80068e6:	7811      	ldrb	r1, [r2, #0]
 80068e8:	4a2d      	ldr	r2, [pc, #180]	; (80069a0 <send_data_packet+0x300>)
 80068ea:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 18; i++) {
 80068ec:	183b      	adds	r3, r7, r0
 80068ee:	781a      	ldrb	r2, [r3, #0]
 80068f0:	183b      	adds	r3, r7, r0
 80068f2:	3201      	adds	r2, #1
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	237a      	movs	r3, #122	; 0x7a
 80068f8:	18fb      	adds	r3, r7, r3
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b11      	cmp	r3, #17
 80068fe:	d9e9      	bls.n	80068d4 <send_data_packet+0x234>
			dataPacket[30] = infoSNo >> 8;
 8006900:	4b25      	ldr	r3, [pc, #148]	; (8006998 <send_data_packet+0x2f8>)
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	0a1b      	lsrs	r3, r3, #8
 8006906:	b29b      	uxth	r3, r3
 8006908:	b2da      	uxtb	r2, r3
 800690a:	4b25      	ldr	r3, [pc, #148]	; (80069a0 <send_data_packet+0x300>)
 800690c:	779a      	strb	r2, [r3, #30]
			dataPacket[31] = infoSNo;
 800690e:	4b22      	ldr	r3, [pc, #136]	; (8006998 <send_data_packet+0x2f8>)
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	b2da      	uxtb	r2, r3
 8006914:	4b22      	ldr	r3, [pc, #136]	; (80069a0 <send_data_packet+0x300>)
 8006916:	77da      	strb	r2, [r3, #31]
			for (uint8_t i = 0; i < 29; i++) {
 8006918:	2379      	movs	r3, #121	; 0x79
 800691a:	18fb      	adds	r3, r7, r3
 800691c:	2200      	movs	r2, #0
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	e00e      	b.n	8006940 <send_data_packet+0x2a0>
				tempCrcData[i] = dataPacket[i + 2];
 8006922:	2079      	movs	r0, #121	; 0x79
 8006924:	183b      	adds	r3, r7, r0
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	1c9a      	adds	r2, r3, #2
 800692a:	183b      	adds	r3, r7, r0
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	491c      	ldr	r1, [pc, #112]	; (80069a0 <send_data_packet+0x300>)
 8006930:	5c89      	ldrb	r1, [r1, r2]
 8006932:	1d3a      	adds	r2, r7, #4
 8006934:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < 29; i++) {
 8006936:	183b      	adds	r3, r7, r0
 8006938:	781a      	ldrb	r2, [r3, #0]
 800693a:	183b      	adds	r3, r7, r0
 800693c:	3201      	adds	r2, #1
 800693e:	701a      	strb	r2, [r3, #0]
 8006940:	2379      	movs	r3, #121	; 0x79
 8006942:	18fb      	adds	r3, r7, r3
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b1c      	cmp	r3, #28
 8006948:	d9eb      	bls.n	8006922 <send_data_packet+0x282>
			uint8_t *tempPtr = tempCrcData;
 800694a:	1d3b      	adds	r3, r7, #4
 800694c:	66fb      	str	r3, [r7, #108]	; 0x6c
			uint16_t crcResult = 0;
 800694e:	256a      	movs	r5, #106	; 0x6a
 8006950:	197b      	adds	r3, r7, r5
 8006952:	2200      	movs	r2, #0
 8006954:	801a      	strh	r2, [r3, #0]
			crcResult = GetCrc16(tempPtr,
 8006956:	197c      	adds	r4, r7, r5
 8006958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695a:	211e      	movs	r1, #30
 800695c:	0018      	movs	r0, r3
 800695e:	f7ff fd13 	bl	8006388 <GetCrc16>
 8006962:	0003      	movs	r3, r0
 8006964:	8023      	strh	r3, [r4, #0]
			dataPacket[32] = crcResult >> 8;
 8006966:	0028      	movs	r0, r5
 8006968:	183b      	adds	r3, r7, r0
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	0a1b      	lsrs	r3, r3, #8
 800696e:	b29b      	uxth	r3, r3
 8006970:	b2d9      	uxtb	r1, r3
 8006972:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <send_data_packet+0x300>)
 8006974:	2220      	movs	r2, #32
 8006976:	5499      	strb	r1, [r3, r2]
			dataPacket[33] = crcResult;
 8006978:	183b      	adds	r3, r7, r0
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b2d9      	uxtb	r1, r3
 800697e:	4b08      	ldr	r3, [pc, #32]	; (80069a0 <send_data_packet+0x300>)
 8006980:	2221      	movs	r2, #33	; 0x21
 8006982:	5499      	strb	r1, [r3, r2]
			HAL_UART_Transmit(&AT_PORT, dataPacket, 36, 100);
 8006984:	4906      	ldr	r1, [pc, #24]	; (80069a0 <send_data_packet+0x300>)
 8006986:	4807      	ldr	r0, [pc, #28]	; (80069a4 <send_data_packet+0x304>)
 8006988:	2364      	movs	r3, #100	; 0x64
 800698a:	2224      	movs	r2, #36	; 0x24
 800698c:	f005 fc88 	bl	800c2a0 <HAL_UART_Transmit>
}
 8006990:	46c0      	nop			; (mov r8, r8)
 8006992:	46bd      	mov	sp, r7
 8006994:	b020      	add	sp, #128	; 0x80
 8006996:	bdb0      	pop	{r4, r5, r7, pc}
 8006998:	20000068 	.word	0x20000068
 800699c:	200009ec 	.word	0x200009ec
 80069a0:	20000080 	.word	0x20000080
 80069a4:	20000478 	.word	0x20000478
 80069a8:	200009c7 	.word	0x200009c7
 80069ac:	20000826 	.word	0x20000826
 80069b0:	200009c4 	.word	0x200009c4
 80069b4:	200006d0 	.word	0x200006d0
 80069b8:	20000028 	.word	0x20000028
 80069bc:	200000a4 	.word	0x200000a4
 80069c0:	200006d6 	.word	0x200006d6
 80069c4:	200006d8 	.word	0x200006d8
 80069c8:	200006d7 	.word	0x200006d7

080069cc <checkdatasize>:
uint8_t checkdatasize() {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	af00      	add	r7, sp, #0
	if (StartSec == EndSec) {
 80069d0:	4b1c      	ldr	r3, [pc, #112]	; (8006a44 <checkdatasize+0x78>)
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	4b1c      	ldr	r3, [pc, #112]	; (8006a48 <checkdatasize+0x7c>)
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	429a      	cmp	r2, r3
 80069de:	d10f      	bne.n	8006a00 <checkdatasize+0x34>
		if ((StartN - EndN) >= 672) {
 80069e0:	4b1a      	ldr	r3, [pc, #104]	; (8006a4c <checkdatasize+0x80>)
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	001a      	movs	r2, r3
 80069e8:	4b19      	ldr	r3, [pc, #100]	; (8006a50 <checkdatasize+0x84>)
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	1ad2      	subs	r2, r2, r3
 80069f0:	23a8      	movs	r3, #168	; 0xa8
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	429a      	cmp	r2, r3
 80069f6:	db01      	blt.n	80069fc <checkdatasize+0x30>
			return 1;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e01f      	b.n	8006a3c <checkdatasize+0x70>
		} else {
			return 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	e01d      	b.n	8006a3c <checkdatasize+0x70>
		}
	} else if ((StartSec - EndSec) == 1) {
 8006a00:	4b10      	ldr	r3, [pc, #64]	; (8006a44 <checkdatasize+0x78>)
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	001a      	movs	r2, r3
 8006a08:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <checkdatasize+0x7c>)
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d112      	bne.n	8006a3a <checkdatasize+0x6e>
		if ((4096 - EndN + StartN) >= 672) {
 8006a14:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <checkdatasize+0x84>)
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	001a      	movs	r2, r3
 8006a1c:	2380      	movs	r3, #128	; 0x80
 8006a1e:	015b      	lsls	r3, r3, #5
 8006a20:	1a9b      	subs	r3, r3, r2
 8006a22:	4a0a      	ldr	r2, [pc, #40]	; (8006a4c <checkdatasize+0x80>)
 8006a24:	8812      	ldrh	r2, [r2, #0]
 8006a26:	b292      	uxth	r2, r2
 8006a28:	189a      	adds	r2, r3, r2
 8006a2a:	23a8      	movs	r3, #168	; 0xa8
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	db01      	blt.n	8006a36 <checkdatasize+0x6a>
			return 1;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e002      	b.n	8006a3c <checkdatasize+0x70>
		} else {
			return 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	e000      	b.n	8006a3c <checkdatasize+0x70>
		}
	} else {
		return 1;
 8006a3a:	2301      	movs	r3, #1
	}
}
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	20000cb0 	.word	0x20000cb0
 8006a48:	20000cb2 	.word	0x20000cb2
 8006a4c:	20000cac 	.word	0x20000cac
 8006a50:	20000cae 	.word	0x20000cae

08006a54 <save_data_packet>:

void save_data_packet() {
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0

	if(saveAlarm){
 8006a5a:	4b3c      	ldr	r3, [pc, #240]	; (8006b4c <save_data_packet+0xf8>)
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <save_data_packet+0x16>
		saveAlarm=0;
 8006a64:	4b39      	ldr	r3, [pc, #228]	; (8006b4c <save_data_packet+0xf8>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	701a      	strb	r2, [r3, #0]
		//todo save packet
	}
	memset(savePacket, 0, sizeof(savePacket));
 8006a6a:	4b39      	ldr	r3, [pc, #228]	; (8006b50 <save_data_packet+0xfc>)
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	2100      	movs	r1, #0
 8006a70:	0018      	movs	r0, r3
 8006a72:	f007 fb70 	bl	800e156 <memset>
	for (uint8_t i = 0; i < 18; i++) {
 8006a76:	1dfb      	adds	r3, r7, #7
 8006a78:	2200      	movs	r2, #0
 8006a7a:	701a      	strb	r2, [r3, #0]
 8006a7c:	e00e      	b.n	8006a9c <save_data_packet+0x48>
		savePacket[i] = gps_info[i];
 8006a7e:	4b35      	ldr	r3, [pc, #212]	; (8006b54 <save_data_packet+0x100>)
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	1dfb      	adds	r3, r7, #7
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	18d2      	adds	r2, r2, r3
 8006a88:	1dfb      	adds	r3, r7, #7
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	7811      	ldrb	r1, [r2, #0]
 8006a8e:	4a30      	ldr	r2, [pc, #192]	; (8006b50 <save_data_packet+0xfc>)
 8006a90:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 18; i++) {
 8006a92:	1dfb      	adds	r3, r7, #7
 8006a94:	781a      	ldrb	r2, [r3, #0]
 8006a96:	1dfb      	adds	r3, r7, #7
 8006a98:	3201      	adds	r2, #1
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	1dfb      	adds	r3, r7, #7
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b11      	cmp	r3, #17
 8006aa2:	d9ec      	bls.n	8006a7e <save_data_packet+0x2a>
	}
	W25qxx_WriteSector(savePacket, StartSec, StartN, 32);
 8006aa4:	4b2c      	ldr	r3, [pc, #176]	; (8006b58 <save_data_packet+0x104>)
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	0019      	movs	r1, r3
 8006aac:	4b2b      	ldr	r3, [pc, #172]	; (8006b5c <save_data_packet+0x108>)
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	001a      	movs	r2, r3
 8006ab4:	4826      	ldr	r0, [pc, #152]	; (8006b50 <save_data_packet+0xfc>)
 8006ab6:	2320      	movs	r3, #32
 8006ab8:	f001 ff0a 	bl	80088d0 <W25qxx_WriteSector>
	StartN = StartN + 32;
 8006abc:	4b27      	ldr	r3, [pc, #156]	; (8006b5c <save_data_packet+0x108>)
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	3320      	adds	r3, #32
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	4b25      	ldr	r3, [pc, #148]	; (8006b5c <save_data_packet+0x108>)
 8006ac8:	801a      	strh	r2, [r3, #0]
	if (StartN > 4090) {
 8006aca:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <save_data_packet+0x108>)
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	4a23      	ldr	r2, [pc, #140]	; (8006b60 <save_data_packet+0x10c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d935      	bls.n	8006b42 <save_data_packet+0xee>
		StartN = 0;
 8006ad6:	4b21      	ldr	r3, [pc, #132]	; (8006b5c <save_data_packet+0x108>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	801a      	strh	r2, [r3, #0]
		StartSec += 1;
 8006adc:	4b1e      	ldr	r3, [pc, #120]	; (8006b58 <save_data_packet+0x104>)
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	4b1c      	ldr	r3, [pc, #112]	; (8006b58 <save_data_packet+0x104>)
 8006ae8:	801a      	strh	r2, [r3, #0]
		if (StartSec == 1024) {
 8006aea:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <save_data_packet+0x104>)
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	2380      	movs	r3, #128	; 0x80
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d102      	bne.n	8006afe <save_data_packet+0xaa>
			StartSec = 1;
 8006af8:	4b17      	ldr	r3, [pc, #92]	; (8006b58 <save_data_packet+0x104>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	801a      	strh	r2, [r3, #0]
		}
		W25qxx_EraseSector(StartSec);
 8006afe:	4b16      	ldr	r3, [pc, #88]	; (8006b58 <save_data_packet+0x104>)
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	0018      	movs	r0, r3
 8006b06:	f001 fded 	bl	80086e4 <W25qxx_EraseSector>
		if (StartSec == EndSec) {
 8006b0a:	4b13      	ldr	r3, [pc, #76]	; (8006b58 <save_data_packet+0x104>)
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	4b14      	ldr	r3, [pc, #80]	; (8006b64 <save_data_packet+0x110>)
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d113      	bne.n	8006b42 <save_data_packet+0xee>
			EndN = 0;
 8006b1a:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <save_data_packet+0x114>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	801a      	strh	r2, [r3, #0]
			if (EndSec == 1023) {
 8006b20:	4b10      	ldr	r3, [pc, #64]	; (8006b64 <save_data_packet+0x110>)
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	4a11      	ldr	r2, [pc, #68]	; (8006b6c <save_data_packet+0x118>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d103      	bne.n	8006b34 <save_data_packet+0xe0>
				EndSec = 1;
 8006b2c:	4b0d      	ldr	r3, [pc, #52]	; (8006b64 <save_data_packet+0x110>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	801a      	strh	r2, [r3, #0]
			} else {
				EndSec += 1;
			}
		}
	}
}
 8006b32:	e006      	b.n	8006b42 <save_data_packet+0xee>
				EndSec += 1;
 8006b34:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <save_data_packet+0x110>)
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <save_data_packet+0x110>)
 8006b40:	801a      	strh	r2, [r3, #0]
}
 8006b42:	46c0      	nop			; (mov r8, r8)
 8006b44:	46bd      	mov	sp, r7
 8006b46:	b002      	add	sp, #8
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	46c0      	nop			; (mov r8, r8)
 8006b4c:	200006d5 	.word	0x200006d5
 8006b50:	200009cc 	.word	0x200009cc
 8006b54:	20000028 	.word	0x20000028
 8006b58:	20000cb0 	.word	0x20000cb0
 8006b5c:	20000cac 	.word	0x20000cac
 8006b60:	00000ffa 	.word	0x00000ffa
 8006b64:	20000cb2 	.word	0x20000cb2
 8006b68:	20000cae 	.word	0x20000cae
 8006b6c:	000003ff 	.word	0x000003ff

08006b70 <read_data_packet>:
uint8_t read_data_packet() {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
	memset(readPacket, 0, sizeof(readPacket));
 8006b74:	4b32      	ldr	r3, [pc, #200]	; (8006c40 <read_data_packet+0xd0>)
 8006b76:	2220      	movs	r2, #32
 8006b78:	2100      	movs	r1, #0
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f007 faeb 	bl	800e156 <memset>
	if ((EndSec == StartSec) && (EndN == StartN)) {
 8006b80:	4b30      	ldr	r3, [pc, #192]	; (8006c44 <read_data_packet+0xd4>)
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	4b30      	ldr	r3, [pc, #192]	; (8006c48 <read_data_packet+0xd8>)
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d122      	bne.n	8006bd6 <read_data_packet+0x66>
 8006b90:	4b2e      	ldr	r3, [pc, #184]	; (8006c4c <read_data_packet+0xdc>)
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	4b2e      	ldr	r3, [pc, #184]	; (8006c50 <read_data_packet+0xe0>)
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d11a      	bne.n	8006bd6 <read_data_packet+0x66>
		if (EndN != 0 || EndSec != 1) {
 8006ba0:	4b2a      	ldr	r3, [pc, #168]	; (8006c4c <read_data_packet+0xdc>)
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d104      	bne.n	8006bb4 <read_data_packet+0x44>
 8006baa:	4b26      	ldr	r3, [pc, #152]	; (8006c44 <read_data_packet+0xd4>)
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d00e      	beq.n	8006bd2 <read_data_packet+0x62>
			W25qxx_EraseSector(1);
 8006bb4:	2001      	movs	r0, #1
 8006bb6:	f001 fd95 	bl	80086e4 <W25qxx_EraseSector>
			StartN = 0;
 8006bba:	4b25      	ldr	r3, [pc, #148]	; (8006c50 <read_data_packet+0xe0>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	801a      	strh	r2, [r3, #0]
			EndN = 0;
 8006bc0:	4b22      	ldr	r3, [pc, #136]	; (8006c4c <read_data_packet+0xdc>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	801a      	strh	r2, [r3, #0]
			StartSec = 1;
 8006bc6:	4b20      	ldr	r3, [pc, #128]	; (8006c48 <read_data_packet+0xd8>)
 8006bc8:	2201      	movs	r2, #1
 8006bca:	801a      	strh	r2, [r3, #0]
			EndSec = 1;
 8006bcc:	4b1d      	ldr	r3, [pc, #116]	; (8006c44 <read_data_packet+0xd4>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	801a      	strh	r2, [r3, #0]
		}
		return 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e030      	b.n	8006c38 <read_data_packet+0xc8>
	} else {
		W25qxx_ReadSector(readPacket, EndSec, EndN, 32);
 8006bd6:	4b1b      	ldr	r3, [pc, #108]	; (8006c44 <read_data_packet+0xd4>)
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	0019      	movs	r1, r3
 8006bde:	4b1b      	ldr	r3, [pc, #108]	; (8006c4c <read_data_packet+0xdc>)
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	001a      	movs	r2, r3
 8006be6:	4816      	ldr	r0, [pc, #88]	; (8006c40 <read_data_packet+0xd0>)
 8006be8:	2320      	movs	r3, #32
 8006bea:	f002 f807 	bl	8008bfc <W25qxx_ReadSector>
		//reading data//
		EndN = EndN + 32;
 8006bee:	4b17      	ldr	r3, [pc, #92]	; (8006c4c <read_data_packet+0xdc>)
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3320      	adds	r3, #32
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	4b14      	ldr	r3, [pc, #80]	; (8006c4c <read_data_packet+0xdc>)
 8006bfa:	801a      	strh	r2, [r3, #0]
		if (EndN > 4090) {
 8006bfc:	4b13      	ldr	r3, [pc, #76]	; (8006c4c <read_data_packet+0xdc>)
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	4a14      	ldr	r2, [pc, #80]	; (8006c54 <read_data_packet+0xe4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d916      	bls.n	8006c36 <read_data_packet+0xc6>
			if (EndSec == 1023) {
 8006c08:	4b0e      	ldr	r3, [pc, #56]	; (8006c44 <read_data_packet+0xd4>)
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	4a12      	ldr	r2, [pc, #72]	; (8006c58 <read_data_packet+0xe8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d106      	bne.n	8006c22 <read_data_packet+0xb2>
				EndSec = 1;
 8006c14:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <read_data_packet+0xd4>)
 8006c16:	2201      	movs	r2, #1
 8006c18:	801a      	strh	r2, [r3, #0]
				EndN = 0;
 8006c1a:	4b0c      	ldr	r3, [pc, #48]	; (8006c4c <read_data_packet+0xdc>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	801a      	strh	r2, [r3, #0]
 8006c20:	e009      	b.n	8006c36 <read_data_packet+0xc6>
			} else {
				EndSec = EndSec + 1;
 8006c22:	4b08      	ldr	r3, [pc, #32]	; (8006c44 <read_data_packet+0xd4>)
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	3301      	adds	r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <read_data_packet+0xd4>)
 8006c2e:	801a      	strh	r2, [r3, #0]
				EndN = 0;
 8006c30:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <read_data_packet+0xdc>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	801a      	strh	r2, [r3, #0]
			}
		}
		return 1;
 8006c36:	2301      	movs	r3, #1
	}
}
 8006c38:	0018      	movs	r0, r3
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	46c0      	nop			; (mov r8, r8)
 8006c40:	200009ec 	.word	0x200009ec
 8006c44:	20000cb2 	.word	0x20000cb2
 8006c48:	20000cb0 	.word	0x20000cb0
 8006c4c:	20000cae 	.word	0x20000cae
 8006c50:	20000cac 	.word	0x20000cac
 8006c54:	00000ffa 	.word	0x00000ffa
 8006c58:	000003ff 	.word	0x000003ff

08006c5c <create_status_info>:


void create_status_info(){
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0

	uint8_t SigStre = 20;
 8006c62:	1dfb      	adds	r3, r7, #7
 8006c64:	2214      	movs	r2, #20
 8006c66:	701a      	strb	r2, [r3, #0]
	int voltage = 4400;
 8006c68:	4b4c      	ldr	r3, [pc, #304]	; (8006d9c <create_status_info+0x140>)
 8006c6a:	603b      	str	r3, [r7, #0]
		TermInfo = TermInfo | 0x80;
	}
	//if gps tracking is on

	if (1) {
		TermInfo = TermInfo | 0x40;
 8006c6c:	4b4c      	ldr	r3, [pc, #304]	; (8006da0 <create_status_info+0x144>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2240      	movs	r2, #64	; 0x40
 8006c72:	4313      	orrs	r3, r2
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	4b4a      	ldr	r3, [pc, #296]	; (8006da0 <create_status_info+0x144>)
 8006c78:	701a      	strb	r2, [r3, #0]
	}
	//if SOS is on

	if (1) {
		TermInfo = TermInfo | 0x20;
 8006c7a:	4b49      	ldr	r3, [pc, #292]	; (8006da0 <create_status_info+0x144>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	4313      	orrs	r3, r2
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	4b46      	ldr	r3, [pc, #280]	; (8006da0 <create_status_info+0x144>)
 8006c86:	701a      	strb	r2, [r3, #0]
	}
	//if Low batt alarm is on

	if (1) {
		TermInfo = TermInfo | 0x18;
 8006c88:	4b45      	ldr	r3, [pc, #276]	; (8006da0 <create_status_info+0x144>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2218      	movs	r2, #24
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	4b43      	ldr	r3, [pc, #268]	; (8006da0 <create_status_info+0x144>)
 8006c94:	701a      	strb	r2, [r3, #0]
	}
	//if Power Cut alarm is on

	if (1) {
		TermInfo = TermInfo | 0x10;
 8006c96:	4b42      	ldr	r3, [pc, #264]	; (8006da0 <create_status_info+0x144>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	2210      	movs	r2, #16
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	4b3f      	ldr	r3, [pc, #252]	; (8006da0 <create_status_info+0x144>)
 8006ca2:	701a      	strb	r2, [r3, #0]
	}
	//if shock alarm is on
	if (1) {
		TermInfo = TermInfo | 0x8;
 8006ca4:	4b3e      	ldr	r3, [pc, #248]	; (8006da0 <create_status_info+0x144>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2208      	movs	r2, #8
 8006caa:	4313      	orrs	r3, r2
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	4b3c      	ldr	r3, [pc, #240]	; (8006da0 <create_status_info+0x144>)
 8006cb0:	701a      	strb	r2, [r3, #0]
	}
	// 000 means normal
	//if charge is on
	if (1) {
		TermInfo = TermInfo | 0x4;
 8006cb2:	4b3b      	ldr	r3, [pc, #236]	; (8006da0 <create_status_info+0x144>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	4b38      	ldr	r3, [pc, #224]	; (8006da0 <create_status_info+0x144>)
 8006cbe:	701a      	strb	r2, [r3, #0]
	}
	//if ACC is on
	if (accInputState) {
 8006cc0:	4b38      	ldr	r3, [pc, #224]	; (8006da4 <create_status_info+0x148>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d006      	beq.n	8006cd8 <create_status_info+0x7c>
		TermInfo = TermInfo | 0x2;
 8006cca:	4b35      	ldr	r3, [pc, #212]	; (8006da0 <create_status_info+0x144>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	4b32      	ldr	r3, [pc, #200]	; (8006da0 <create_status_info+0x144>)
 8006cd6:	701a      	strb	r2, [r3, #0]
	}
	//if Activated
	if (1) {
		TermInfo = TermInfo | 0x1;
 8006cd8:	4b31      	ldr	r3, [pc, #196]	; (8006da0 <create_status_info+0x144>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	4b2f      	ldr	r3, [pc, #188]	; (8006da0 <create_status_info+0x144>)
 8006ce4:	701a      	strb	r2, [r3, #0]
	}
	if (voltage > 4400) {
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	4a2c      	ldr	r2, [pc, #176]	; (8006d9c <create_status_info+0x140>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	dd03      	ble.n	8006cf6 <create_status_info+0x9a>
		VLvl = 6;
 8006cee:	4b2e      	ldr	r3, [pc, #184]	; (8006da8 <create_status_info+0x14c>)
 8006cf0:	2206      	movs	r2, #6
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	e02b      	b.n	8006d4e <create_status_info+0xf2>
	} else if (voltage > 4100) {
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	4a2c      	ldr	r2, [pc, #176]	; (8006dac <create_status_info+0x150>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	dd03      	ble.n	8006d06 <create_status_info+0xaa>
		VLvl = 5;
 8006cfe:	4b2a      	ldr	r3, [pc, #168]	; (8006da8 <create_status_info+0x14c>)
 8006d00:	2205      	movs	r2, #5
 8006d02:	701a      	strb	r2, [r3, #0]
 8006d04:	e023      	b.n	8006d4e <create_status_info+0xf2>

	} else if (voltage > 4000) {
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	23fa      	movs	r3, #250	; 0xfa
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	dd03      	ble.n	8006d18 <create_status_info+0xbc>
		VLvl = 4;
 8006d10:	4b25      	ldr	r3, [pc, #148]	; (8006da8 <create_status_info+0x14c>)
 8006d12:	2204      	movs	r2, #4
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	e01a      	b.n	8006d4e <create_status_info+0xf2>

	} else if (voltage > 3900) {
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	4a25      	ldr	r2, [pc, #148]	; (8006db0 <create_status_info+0x154>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	dd03      	ble.n	8006d28 <create_status_info+0xcc>
		VLvl = 3;
 8006d20:	4b21      	ldr	r3, [pc, #132]	; (8006da8 <create_status_info+0x14c>)
 8006d22:	2203      	movs	r2, #3
 8006d24:	701a      	strb	r2, [r3, #0]
 8006d26:	e012      	b.n	8006d4e <create_status_info+0xf2>

	} else if (voltage > 3800) {
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	4a22      	ldr	r2, [pc, #136]	; (8006db4 <create_status_info+0x158>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	dd03      	ble.n	8006d38 <create_status_info+0xdc>
		VLvl = 2;
 8006d30:	4b1d      	ldr	r3, [pc, #116]	; (8006da8 <create_status_info+0x14c>)
 8006d32:	2202      	movs	r2, #2
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	e00a      	b.n	8006d4e <create_status_info+0xf2>

	} else if (voltage > 3700) {
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	4a1f      	ldr	r2, [pc, #124]	; (8006db8 <create_status_info+0x15c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	dd03      	ble.n	8006d48 <create_status_info+0xec>
		VLvl = 1;
 8006d40:	4b19      	ldr	r3, [pc, #100]	; (8006da8 <create_status_info+0x14c>)
 8006d42:	2201      	movs	r2, #1
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	e002      	b.n	8006d4e <create_status_info+0xf2>

	} else {
		VLvl = 0;
 8006d48:	4b17      	ldr	r3, [pc, #92]	; (8006da8 <create_status_info+0x14c>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	701a      	strb	r2, [r3, #0]

	}
	if (SigStre > 19) {
 8006d4e:	1dfb      	adds	r3, r7, #7
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	2b13      	cmp	r3, #19
 8006d54:	d903      	bls.n	8006d5e <create_status_info+0x102>
		GSMSS = 4;
 8006d56:	4b19      	ldr	r3, [pc, #100]	; (8006dbc <create_status_info+0x160>)
 8006d58:	2204      	movs	r2, #4
 8006d5a:	701a      	strb	r2, [r3, #0]
		GSMSS = 1;
	} else {
		GSMSS = 0;
	}

}
 8006d5c:	e01a      	b.n	8006d94 <create_status_info+0x138>
	} else if (SigStre > 14) {
 8006d5e:	1dfb      	adds	r3, r7, #7
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b0e      	cmp	r3, #14
 8006d64:	d903      	bls.n	8006d6e <create_status_info+0x112>
		GSMSS = 3;
 8006d66:	4b15      	ldr	r3, [pc, #84]	; (8006dbc <create_status_info+0x160>)
 8006d68:	2203      	movs	r2, #3
 8006d6a:	701a      	strb	r2, [r3, #0]
}
 8006d6c:	e012      	b.n	8006d94 <create_status_info+0x138>
	} else if (SigStre > 9) {
 8006d6e:	1dfb      	adds	r3, r7, #7
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b09      	cmp	r3, #9
 8006d74:	d903      	bls.n	8006d7e <create_status_info+0x122>
		GSMSS = 2;
 8006d76:	4b11      	ldr	r3, [pc, #68]	; (8006dbc <create_status_info+0x160>)
 8006d78:	2202      	movs	r2, #2
 8006d7a:	701a      	strb	r2, [r3, #0]
}
 8006d7c:	e00a      	b.n	8006d94 <create_status_info+0x138>
	} else if (SigStre > 1) {
 8006d7e:	1dfb      	adds	r3, r7, #7
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d903      	bls.n	8006d8e <create_status_info+0x132>
		GSMSS = 1;
 8006d86:	4b0d      	ldr	r3, [pc, #52]	; (8006dbc <create_status_info+0x160>)
 8006d88:	2201      	movs	r2, #1
 8006d8a:	701a      	strb	r2, [r3, #0]
}
 8006d8c:	e002      	b.n	8006d94 <create_status_info+0x138>
		GSMSS = 0;
 8006d8e:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <create_status_info+0x160>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	701a      	strb	r2, [r3, #0]
}
 8006d94:	46c0      	nop			; (mov r8, r8)
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b002      	add	sp, #8
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	00001130 	.word	0x00001130
 8006da0:	200006d6 	.word	0x200006d6
 8006da4:	200006d1 	.word	0x200006d1
 8006da8:	200006d8 	.word	0x200006d8
 8006dac:	00001004 	.word	0x00001004
 8006db0:	00000f3c 	.word	0x00000f3c
 8006db4:	00000ed8 	.word	0x00000ed8
 8006db8:	00000e74 	.word	0x00000e74
 8006dbc:	200006d7 	.word	0x200006d7

08006dc0 <send_hb_packet>:

void send_hb_packet() {
 8006dc0:	b5b0      	push	{r4, r5, r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
	if (isTcpOpen == 1 && isDataMode == 1) {
 8006dc6:	4b37      	ldr	r3, [pc, #220]	; (8006ea4 <send_hb_packet+0xe4>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d164      	bne.n	8006e9a <send_hb_packet+0xda>
 8006dd0:	4b35      	ldr	r3, [pc, #212]	; (8006ea8 <send_hb_packet+0xe8>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d15f      	bne.n	8006e9a <send_hb_packet+0xda>

		create_status_info();
 8006dda:	f7ff ff3f 	bl	8006c5c <create_status_info>
		heartbeatPacket[4] = TermInfo;
 8006dde:	4b33      	ldr	r3, [pc, #204]	; (8006eac <send_hb_packet+0xec>)
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	4b33      	ldr	r3, [pc, #204]	; (8006eb0 <send_hb_packet+0xf0>)
 8006de4:	711a      	strb	r2, [r3, #4]
		heartbeatPacket[5] = VLvl;
 8006de6:	4b33      	ldr	r3, [pc, #204]	; (8006eb4 <send_hb_packet+0xf4>)
 8006de8:	781a      	ldrb	r2, [r3, #0]
 8006dea:	4b31      	ldr	r3, [pc, #196]	; (8006eb0 <send_hb_packet+0xf0>)
 8006dec:	715a      	strb	r2, [r3, #5]
		heartbeatPacket[6] = GSMSS;
 8006dee:	4b32      	ldr	r3, [pc, #200]	; (8006eb8 <send_hb_packet+0xf8>)
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	4b2f      	ldr	r3, [pc, #188]	; (8006eb0 <send_hb_packet+0xf0>)
 8006df4:	719a      	strb	r2, [r3, #6]
		heartbeatPacket[7] = 0;
 8006df6:	4b2e      	ldr	r3, [pc, #184]	; (8006eb0 <send_hb_packet+0xf0>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	71da      	strb	r2, [r3, #7]
		heartbeatPacket[8] = 2;
 8006dfc:	4b2c      	ldr	r3, [pc, #176]	; (8006eb0 <send_hb_packet+0xf0>)
 8006dfe:	2202      	movs	r2, #2
 8006e00:	721a      	strb	r2, [r3, #8]
		heartbeatPacket[9] = infoSNo >> 8;
 8006e02:	4b2e      	ldr	r3, [pc, #184]	; (8006ebc <send_hb_packet+0xfc>)
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	0a1b      	lsrs	r3, r3, #8
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	4b28      	ldr	r3, [pc, #160]	; (8006eb0 <send_hb_packet+0xf0>)
 8006e0e:	725a      	strb	r2, [r3, #9]
		heartbeatPacket[10] = infoSNo;
 8006e10:	4b2a      	ldr	r3, [pc, #168]	; (8006ebc <send_hb_packet+0xfc>)
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	4b26      	ldr	r3, [pc, #152]	; (8006eb0 <send_hb_packet+0xf0>)
 8006e18:	729a      	strb	r2, [r3, #10]

		uint8_t tempCrcData[9];
		for (uint8_t i = 0; i < 10; i++) {
 8006e1a:	2317      	movs	r3, #23
 8006e1c:	18fb      	adds	r3, r7, r3
 8006e1e:	2200      	movs	r2, #0
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	e00e      	b.n	8006e42 <send_hb_packet+0x82>
			tempCrcData[i] = heartbeatPacket[i + 2];
 8006e24:	2017      	movs	r0, #23
 8006e26:	183b      	adds	r3, r7, r0
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	1c9a      	adds	r2, r3, #2
 8006e2c:	183b      	adds	r3, r7, r0
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	491f      	ldr	r1, [pc, #124]	; (8006eb0 <send_hb_packet+0xf0>)
 8006e32:	5c89      	ldrb	r1, [r1, r2]
 8006e34:	1d3a      	adds	r2, r7, #4
 8006e36:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 10; i++) {
 8006e38:	183b      	adds	r3, r7, r0
 8006e3a:	781a      	ldrb	r2, [r3, #0]
 8006e3c:	183b      	adds	r3, r7, r0
 8006e3e:	3201      	adds	r2, #1
 8006e40:	701a      	strb	r2, [r3, #0]
 8006e42:	2317      	movs	r3, #23
 8006e44:	18fb      	adds	r3, r7, r3
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b09      	cmp	r3, #9
 8006e4a:	d9eb      	bls.n	8006e24 <send_hb_packet+0x64>
		}
		uint8_t *tempPtr = tempCrcData;
 8006e4c:	1d3b      	adds	r3, r7, #4
 8006e4e:	613b      	str	r3, [r7, #16]
		uint16_t crcResult = 0;
 8006e50:	250e      	movs	r5, #14
 8006e52:	197b      	adds	r3, r7, r5
 8006e54:	2200      	movs	r2, #0
 8006e56:	801a      	strh	r2, [r3, #0]
		crcResult = GetCrc16(tempPtr,
 8006e58:	197c      	adds	r4, r7, r5
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	2109      	movs	r1, #9
 8006e5e:	0018      	movs	r0, r3
 8006e60:	f7ff fa92 	bl	8006388 <GetCrc16>
 8006e64:	0003      	movs	r3, r0
 8006e66:	8023      	strh	r3, [r4, #0]
				sizeof(tempCrcData) / sizeof(tempCrcData[0]));
		heartbeatPacket[11] = crcResult >> 8;
 8006e68:	0029      	movs	r1, r5
 8006e6a:	187b      	adds	r3, r7, r1
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	0a1b      	lsrs	r3, r3, #8
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <send_hb_packet+0xf0>)
 8006e76:	72da      	strb	r2, [r3, #11]
		heartbeatPacket[12] = crcResult;
 8006e78:	187b      	adds	r3, r7, r1
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <send_hb_packet+0xf0>)
 8006e80:	731a      	strb	r2, [r3, #12]
		HAL_UART_Transmit(&AT_PORT, heartbeatPacket, 15, 100);
 8006e82:	490b      	ldr	r1, [pc, #44]	; (8006eb0 <send_hb_packet+0xf0>)
 8006e84:	480e      	ldr	r0, [pc, #56]	; (8006ec0 <send_hb_packet+0x100>)
 8006e86:	2364      	movs	r3, #100	; 0x64
 8006e88:	220f      	movs	r2, #15
 8006e8a:	f005 fa09 	bl	800c2a0 <HAL_UART_Transmit>
		infoSNo++;
 8006e8e:	4b0b      	ldr	r3, [pc, #44]	; (8006ebc <send_hb_packet+0xfc>)
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	3301      	adds	r3, #1
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <send_hb_packet+0xfc>)
 8006e98:	801a      	strh	r2, [r3, #0]

	}
}
 8006e9a:	46c0      	nop			; (mov r8, r8)
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	b006      	add	sp, #24
 8006ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8006ea2:	46c0      	nop			; (mov r8, r8)
 8006ea4:	200009c4 	.word	0x200009c4
 8006ea8:	20000826 	.word	0x20000826
 8006eac:	200006d6 	.word	0x200006d6
 8006eb0:	200000c4 	.word	0x200000c4
 8006eb4:	200006d8 	.word	0x200006d8
 8006eb8:	200006d7 	.word	0x200006d7
 8006ebc:	20000068 	.word	0x20000068
 8006ec0:	20000478 	.word	0x20000478

08006ec4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]

	if(isDataMode == 1){
 8006ecc:	4b26      	ldr	r3, [pc, #152]	; (8006f68 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d144      	bne.n	8006f60 <HAL_TIM_IC_CaptureCallback+0x9c>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	7f1b      	ldrb	r3, [r3, #28]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d140      	bne.n	8006f60 <HAL_TIM_IC_CaptureCallback+0x9c>
			currentValueIC = TIM3->CNT;
 8006ede:	4b23      	ldr	r3, [pc, #140]	; (8006f6c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	4b22      	ldr	r3, [pc, #136]	; (8006f70 <HAL_TIM_IC_CaptureCallback+0xac>)
 8006ee6:	801a      	strh	r2, [r3, #0]

			if(currentValueIC>lastValueIC){
 8006ee8:	4b21      	ldr	r3, [pc, #132]	; (8006f70 <HAL_TIM_IC_CaptureCallback+0xac>)
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	4b21      	ldr	r3, [pc, #132]	; (8006f74 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d90a      	bls.n	8006f0e <HAL_TIM_IC_CaptureCallback+0x4a>
				diff = currentValueIC - lastValueIC;
 8006ef8:	4b1d      	ldr	r3, [pc, #116]	; (8006f70 <HAL_TIM_IC_CaptureCallback+0xac>)
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	4b1d      	ldr	r3, [pc, #116]	; (8006f74 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	4b1b      	ldr	r3, [pc, #108]	; (8006f78 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8006f0a:	801a      	strh	r2, [r3, #0]
 8006f0c:	e016      	b.n	8006f3c <HAL_TIM_IC_CaptureCallback+0x78>
			}
			else if(currentValueIC < lastValueIC)
 8006f0e:	4b18      	ldr	r3, [pc, #96]	; (8006f70 <HAL_TIM_IC_CaptureCallback+0xac>)
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	4b17      	ldr	r3, [pc, #92]	; (8006f74 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d20e      	bcs.n	8006f3c <HAL_TIM_IC_CaptureCallback+0x78>
			{
				diff = (1000 - lastValueIC) + currentValueIC;
 8006f1e:	4b14      	ldr	r3, [pc, #80]	; (8006f70 <HAL_TIM_IC_CaptureCallback+0xac>)
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	4b13      	ldr	r3, [pc, #76]	; (8006f74 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	22fa      	movs	r2, #250	; 0xfa
 8006f30:	0092      	lsls	r2, r2, #2
 8006f32:	4694      	mov	ip, r2
 8006f34:	4463      	add	r3, ip
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	4b0f      	ldr	r3, [pc, #60]	; (8006f78 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8006f3a:	801a      	strh	r2, [r3, #0]
			}
			if(diff > 100 && diff < 145){
 8006f3c:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b64      	cmp	r3, #100	; 0x64
 8006f44:	d907      	bls.n	8006f56 <HAL_TIM_IC_CaptureCallback+0x92>
 8006f46:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b90      	cmp	r3, #144	; 0x90
 8006f4e:	d802      	bhi.n	8006f56 <HAL_TIM_IC_CaptureCallback+0x92>
				isPulse = 1;
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <HAL_TIM_IC_CaptureCallback+0xb8>)
 8006f52:	2201      	movs	r2, #1
 8006f54:	701a      	strb	r2, [r3, #0]
			}
			lastValueIC = currentValueIC;
 8006f56:	4b06      	ldr	r3, [pc, #24]	; (8006f70 <HAL_TIM_IC_CaptureCallback+0xac>)
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8006f5e:	801a      	strh	r2, [r3, #0]
////				//printf("Got message indication\n");
////				isPulse = 1;
////			}
//		}
//	}
}
 8006f60:	46c0      	nop			; (mov r8, r8)
 8006f62:	46bd      	mov	sp, r7
 8006f64:	b002      	add	sp, #8
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20000826 	.word	0x20000826
 8006f6c:	40000400 	.word	0x40000400
 8006f70:	200006cc 	.word	0x200006cc
 8006f74:	200006ca 	.word	0x200006ca
 8006f78:	200006ce 	.word	0x200006ce
 8006f7c:	200006e9 	.word	0x200006e9

08006f80 <substring>:

char* substring(char *destination, const char *source, uint8_t beg, uint8_t n) {
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	0019      	movs	r1, r3
 8006f8c:	1dfb      	adds	r3, r7, #7
 8006f8e:	701a      	strb	r2, [r3, #0]
 8006f90:	1dbb      	adds	r3, r7, #6
 8006f92:	1c0a      	adds	r2, r1, #0
 8006f94:	701a      	strb	r2, [r3, #0]
	// extracts `n` characters from the source string starting from `beg` index
	// and copy them into the destination string
	while (n > 0) {
 8006f96:	e011      	b.n	8006fbc <substring+0x3c>
		*destination = *(source + beg);
 8006f98:	1dfb      	adds	r3, r7, #7
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	18d3      	adds	r3, r2, r3
 8006fa0:	781a      	ldrb	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	701a      	strb	r2, [r3, #0]
		destination++;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	60fb      	str	r3, [r7, #12]
		source++;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60bb      	str	r3, [r7, #8]
		n--;
 8006fb2:	1dbb      	adds	r3, r7, #6
 8006fb4:	781a      	ldrb	r2, [r3, #0]
 8006fb6:	1dbb      	adds	r3, r7, #6
 8006fb8:	3a01      	subs	r2, #1
 8006fba:	701a      	strb	r2, [r3, #0]
	while (n > 0) {
 8006fbc:	1dbb      	adds	r3, r7, #6
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e9      	bne.n	8006f98 <substring+0x18>
	}

	// null terminate destination string
	*destination = '\0';
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]

	// return the destination string
	return destination;
 8006fca:	68fb      	ldr	r3, [r7, #12]
}
 8006fcc:	0018      	movs	r0, r3
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	b004      	add	sp, #16
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <send_current_location_via_sms>:

void send_current_location_via_sms() {
 8006fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fd6:	b0b9      	sub	sp, #228	; 0xe4
 8006fd8:	af02      	add	r7, sp, #8
	if (isSMSActive == 1) {
 8006fda:	4be9      	ldr	r3, [pc, #932]	; (8007380 <send_current_location_via_sms+0x3ac>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d000      	beq.n	8006fe4 <send_current_location_via_sms+0x10>
 8006fe2:	e1c9      	b.n	8007378 <send_current_location_via_sms+0x3a4>
		//printf("sending message(current location)\n");
		// send_command("AT+CMGS=\"3352093997\"\n\r", 10, 6, 0, 0);
		char tempMsg[150];
		uint8_t speed = 0;
 8006fe4:	21d6      	movs	r1, #214	; 0xd6
 8006fe6:	187b      	adds	r3, r7, r1
 8006fe8:	2200      	movs	r2, #0
 8006fea:	701a      	strb	r2, [r3, #0]
		uint32_t lat = 0, lon = 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	20d0      	movs	r0, #208	; 0xd0
 8006ff0:	183a      	adds	r2, r7, r0
 8006ff2:	6013      	str	r3, [r2, #0]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	24cc      	movs	r4, #204	; 0xcc
 8006ff8:	193a      	adds	r2, r7, r4
 8006ffa:	6013      	str	r3, [r2, #0]
		double tempFloat;
		double tempMin;
		uint8_t tempDeg;
		char buf[15];
		float latitude, longitude;
		lat = (gps_info[7] << 24) | (gps_info[8] << 16) | (gps_info[9] << 8)
 8006ffc:	4be1      	ldr	r3, [pc, #900]	; (8007384 <send_current_location_via_sms+0x3b0>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3307      	adds	r3, #7
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	061a      	lsls	r2, r3, #24
 8007006:	4bdf      	ldr	r3, [pc, #892]	; (8007384 <send_current_location_via_sms+0x3b0>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3308      	adds	r3, #8
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	041b      	lsls	r3, r3, #16
 8007010:	431a      	orrs	r2, r3
 8007012:	4bdc      	ldr	r3, [pc, #880]	; (8007384 <send_current_location_via_sms+0x3b0>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3309      	adds	r3, #9
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	021b      	lsls	r3, r3, #8
 800701c:	431a      	orrs	r2, r3
		| gps_info[10];
 800701e:	4bd9      	ldr	r3, [pc, #868]	; (8007384 <send_current_location_via_sms+0x3b0>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	330a      	adds	r3, #10
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	4313      	orrs	r3, r2
		lat = (gps_info[7] << 24) | (gps_info[8] << 16) | (gps_info[9] << 8)
 8007028:	183a      	adds	r2, r7, r0
 800702a:	6013      	str	r3, [r2, #0]
		lon = (gps_info[11] << 24) | (gps_info[12] << 16) | (gps_info[13] << 8)
 800702c:	4bd5      	ldr	r3, [pc, #852]	; (8007384 <send_current_location_via_sms+0x3b0>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	330b      	adds	r3, #11
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	061a      	lsls	r2, r3, #24
 8007036:	4bd3      	ldr	r3, [pc, #844]	; (8007384 <send_current_location_via_sms+0x3b0>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	041b      	lsls	r3, r3, #16
 8007040:	431a      	orrs	r2, r3
 8007042:	4bd0      	ldr	r3, [pc, #832]	; (8007384 <send_current_location_via_sms+0x3b0>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	330d      	adds	r3, #13
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	021b      	lsls	r3, r3, #8
 800704c:	431a      	orrs	r2, r3
		| gps_info[14];
 800704e:	4bcd      	ldr	r3, [pc, #820]	; (8007384 <send_current_location_via_sms+0x3b0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	330e      	adds	r3, #14
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	4313      	orrs	r3, r2
		lon = (gps_info[11] << 24) | (gps_info[12] << 16) | (gps_info[13] << 8)
 8007058:	193a      	adds	r2, r7, r4
 800705a:	6013      	str	r3, [r2, #0]
		speed = gps_info[15];
 800705c:	4bc9      	ldr	r3, [pc, #804]	; (8007384 <send_current_location_via_sms+0x3b0>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	187b      	adds	r3, r7, r1
 8007062:	7bd2      	ldrb	r2, [r2, #15]
 8007064:	701a      	strb	r2, [r3, #0]
		tempFloat = lat / 30000.0;
 8007066:	183a      	adds	r2, r7, r0
 8007068:	6810      	ldr	r0, [r2, #0]
 800706a:	f7fb fb5f 	bl	800272c <__aeabi_ui2d>
 800706e:	2200      	movs	r2, #0
 8007070:	4bc5      	ldr	r3, [pc, #788]	; (8007388 <send_current_location_via_sms+0x3b4>)
 8007072:	f7fa f8d7 	bl	8001224 <__aeabi_ddiv>
 8007076:	0002      	movs	r2, r0
 8007078:	000b      	movs	r3, r1
 800707a:	24c0      	movs	r4, #192	; 0xc0
 800707c:	1938      	adds	r0, r7, r4
 800707e:	6002      	str	r2, [r0, #0]
 8007080:	6043      	str	r3, [r0, #4]
		tempDeg = (int) tempFloat / 60;
 8007082:	193a      	adds	r2, r7, r4
 8007084:	6810      	ldr	r0, [r2, #0]
 8007086:	6851      	ldr	r1, [r2, #4]
 8007088:	f7fb faea 	bl	8002660 <__aeabi_d2iz>
 800708c:	0003      	movs	r3, r0
 800708e:	213c      	movs	r1, #60	; 0x3c
 8007090:	0018      	movs	r0, r3
 8007092:	f7f9 f8e5 	bl	8000260 <__divsi3>
 8007096:	0003      	movs	r3, r0
 8007098:	001a      	movs	r2, r3
 800709a:	26bf      	movs	r6, #191	; 0xbf
 800709c:	19bb      	adds	r3, r7, r6
 800709e:	701a      	strb	r2, [r3, #0]
		tempMin = (int) tempFloat % 60;
 80070a0:	193a      	adds	r2, r7, r4
 80070a2:	6810      	ldr	r0, [r2, #0]
 80070a4:	6851      	ldr	r1, [r2, #4]
 80070a6:	f7fb fadb 	bl	8002660 <__aeabi_d2iz>
 80070aa:	0003      	movs	r3, r0
 80070ac:	213c      	movs	r1, #60	; 0x3c
 80070ae:	0018      	movs	r0, r3
 80070b0:	f7f9 f9bc 	bl	800042c <__aeabi_idivmod>
 80070b4:	000b      	movs	r3, r1
 80070b6:	0018      	movs	r0, r3
 80070b8:	f7fb fb08 	bl	80026cc <__aeabi_i2d>
 80070bc:	0002      	movs	r2, r0
 80070be:	000b      	movs	r3, r1
 80070c0:	25b0      	movs	r5, #176	; 0xb0
 80070c2:	1978      	adds	r0, r7, r5
 80070c4:	6002      	str	r2, [r0, #0]
 80070c6:	6043      	str	r3, [r0, #4]
		tempFloat = tempFloat - (int) tempFloat;
 80070c8:	193a      	adds	r2, r7, r4
 80070ca:	6810      	ldr	r0, [r2, #0]
 80070cc:	6851      	ldr	r1, [r2, #4]
 80070ce:	f7fb fac7 	bl	8002660 <__aeabi_d2iz>
 80070d2:	0003      	movs	r3, r0
 80070d4:	0018      	movs	r0, r3
 80070d6:	f7fb faf9 	bl	80026cc <__aeabi_i2d>
 80070da:	0002      	movs	r2, r0
 80070dc:	000b      	movs	r3, r1
 80070de:	1938      	adds	r0, r7, r4
 80070e0:	6841      	ldr	r1, [r0, #4]
 80070e2:	6800      	ldr	r0, [r0, #0]
 80070e4:	f7fa ff0c 	bl	8001f00 <__aeabi_dsub>
 80070e8:	0002      	movs	r2, r0
 80070ea:	000b      	movs	r3, r1
 80070ec:	1938      	adds	r0, r7, r4
 80070ee:	6002      	str	r2, [r0, #0]
 80070f0:	6043      	str	r3, [r0, #4]
		tempMin = tempMin + tempFloat;
 80070f2:	193a      	adds	r2, r7, r4
 80070f4:	6853      	ldr	r3, [r2, #4]
 80070f6:	6812      	ldr	r2, [r2, #0]
 80070f8:	1978      	adds	r0, r7, r5
 80070fa:	6841      	ldr	r1, [r0, #4]
 80070fc:	6800      	ldr	r0, [r0, #0]
 80070fe:	f7f9 fd55 	bl	8000bac <__aeabi_dadd>
 8007102:	0002      	movs	r2, r0
 8007104:	000b      	movs	r3, r1
 8007106:	1978      	adds	r0, r7, r5
 8007108:	6002      	str	r2, [r0, #0]
 800710a:	6043      	str	r3, [r0, #4]
		latitude = tempMin / 60.0;
 800710c:	2200      	movs	r2, #0
 800710e:	4b9f      	ldr	r3, [pc, #636]	; (800738c <send_current_location_via_sms+0x3b8>)
 8007110:	1978      	adds	r0, r7, r5
 8007112:	6841      	ldr	r1, [r0, #4]
 8007114:	6800      	ldr	r0, [r0, #0]
 8007116:	f7fa f885 	bl	8001224 <__aeabi_ddiv>
 800711a:	0002      	movs	r2, r0
 800711c:	000b      	movs	r3, r1
 800711e:	0010      	movs	r0, r2
 8007120:	0019      	movs	r1, r3
 8007122:	f7fb fb71 	bl	8002808 <__aeabi_d2f>
 8007126:	1c03      	adds	r3, r0, #0
 8007128:	22ac      	movs	r2, #172	; 0xac
 800712a:	18b8      	adds	r0, r7, r2
 800712c:	6003      	str	r3, [r0, #0]
		latitude += tempDeg;
 800712e:	19bb      	adds	r3, r7, r6
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	0018      	movs	r0, r3
 8007134:	f7f9 fcec 	bl	8000b10 <__aeabi_i2f>
 8007138:	1c03      	adds	r3, r0, #0
 800713a:	1c19      	adds	r1, r3, #0
 800713c:	22ac      	movs	r2, #172	; 0xac
 800713e:	18b8      	adds	r0, r7, r2
 8007140:	6800      	ldr	r0, [r0, #0]
 8007142:	f7f9 fa61 	bl	8000608 <__aeabi_fadd>
 8007146:	1c03      	adds	r3, r0, #0
 8007148:	22ac      	movs	r2, #172	; 0xac
 800714a:	18b8      	adds	r0, r7, r2
 800714c:	6003      	str	r3, [r0, #0]
		tempFloat = lon / 30000.0;
 800714e:	23cc      	movs	r3, #204	; 0xcc
 8007150:	18fb      	adds	r3, r7, r3
 8007152:	6818      	ldr	r0, [r3, #0]
 8007154:	f7fb faea 	bl	800272c <__aeabi_ui2d>
 8007158:	2200      	movs	r2, #0
 800715a:	4b8b      	ldr	r3, [pc, #556]	; (8007388 <send_current_location_via_sms+0x3b4>)
 800715c:	f7fa f862 	bl	8001224 <__aeabi_ddiv>
 8007160:	0002      	movs	r2, r0
 8007162:	000b      	movs	r3, r1
 8007164:	1938      	adds	r0, r7, r4
 8007166:	6002      	str	r2, [r0, #0]
 8007168:	6043      	str	r3, [r0, #4]
		tempDeg = (int) tempFloat / 60;
 800716a:	193b      	adds	r3, r7, r4
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	6859      	ldr	r1, [r3, #4]
 8007170:	f7fb fa76 	bl	8002660 <__aeabi_d2iz>
 8007174:	0003      	movs	r3, r0
 8007176:	213c      	movs	r1, #60	; 0x3c
 8007178:	0018      	movs	r0, r3
 800717a:	f7f9 f871 	bl	8000260 <__divsi3>
 800717e:	0003      	movs	r3, r0
 8007180:	001a      	movs	r2, r3
 8007182:	19bb      	adds	r3, r7, r6
 8007184:	701a      	strb	r2, [r3, #0]
		tempMin = (int) tempFloat % 60;
 8007186:	193b      	adds	r3, r7, r4
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	6859      	ldr	r1, [r3, #4]
 800718c:	f7fb fa68 	bl	8002660 <__aeabi_d2iz>
 8007190:	0003      	movs	r3, r0
 8007192:	213c      	movs	r1, #60	; 0x3c
 8007194:	0018      	movs	r0, r3
 8007196:	f7f9 f949 	bl	800042c <__aeabi_idivmod>
 800719a:	000b      	movs	r3, r1
 800719c:	0018      	movs	r0, r3
 800719e:	f7fb fa95 	bl	80026cc <__aeabi_i2d>
 80071a2:	0002      	movs	r2, r0
 80071a4:	000b      	movs	r3, r1
 80071a6:	1978      	adds	r0, r7, r5
 80071a8:	6002      	str	r2, [r0, #0]
 80071aa:	6043      	str	r3, [r0, #4]
		tempFloat = tempFloat - (int) tempFloat;
 80071ac:	193b      	adds	r3, r7, r4
 80071ae:	6818      	ldr	r0, [r3, #0]
 80071b0:	6859      	ldr	r1, [r3, #4]
 80071b2:	f7fb fa55 	bl	8002660 <__aeabi_d2iz>
 80071b6:	0003      	movs	r3, r0
 80071b8:	0018      	movs	r0, r3
 80071ba:	f7fb fa87 	bl	80026cc <__aeabi_i2d>
 80071be:	0002      	movs	r2, r0
 80071c0:	000b      	movs	r3, r1
 80071c2:	1938      	adds	r0, r7, r4
 80071c4:	6841      	ldr	r1, [r0, #4]
 80071c6:	6800      	ldr	r0, [r0, #0]
 80071c8:	f7fa fe9a 	bl	8001f00 <__aeabi_dsub>
 80071cc:	0002      	movs	r2, r0
 80071ce:	000b      	movs	r3, r1
 80071d0:	1938      	adds	r0, r7, r4
 80071d2:	6002      	str	r2, [r0, #0]
 80071d4:	6043      	str	r3, [r0, #4]
		tempMin = tempMin + tempFloat;
 80071d6:	193b      	adds	r3, r7, r4
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	1978      	adds	r0, r7, r5
 80071de:	6841      	ldr	r1, [r0, #4]
 80071e0:	6800      	ldr	r0, [r0, #0]
 80071e2:	f7f9 fce3 	bl	8000bac <__aeabi_dadd>
 80071e6:	0002      	movs	r2, r0
 80071e8:	000b      	movs	r3, r1
 80071ea:	1978      	adds	r0, r7, r5
 80071ec:	6002      	str	r2, [r0, #0]
 80071ee:	6043      	str	r3, [r0, #4]
		longitude = tempMin / 60.0;
 80071f0:	2200      	movs	r2, #0
 80071f2:	4b66      	ldr	r3, [pc, #408]	; (800738c <send_current_location_via_sms+0x3b8>)
 80071f4:	1978      	adds	r0, r7, r5
 80071f6:	6841      	ldr	r1, [r0, #4]
 80071f8:	6800      	ldr	r0, [r0, #0]
 80071fa:	f7fa f813 	bl	8001224 <__aeabi_ddiv>
 80071fe:	0002      	movs	r2, r0
 8007200:	000b      	movs	r3, r1
 8007202:	0010      	movs	r0, r2
 8007204:	0019      	movs	r1, r3
 8007206:	f7fb faff 	bl	8002808 <__aeabi_d2f>
 800720a:	1c03      	adds	r3, r0, #0
 800720c:	25a8      	movs	r5, #168	; 0xa8
 800720e:	1978      	adds	r0, r7, r5
 8007210:	6003      	str	r3, [r0, #0]
		longitude += tempDeg;
 8007212:	19bb      	adds	r3, r7, r6
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	0018      	movs	r0, r3
 8007218:	f7f9 fc7a 	bl	8000b10 <__aeabi_i2f>
 800721c:	1c03      	adds	r3, r0, #0
 800721e:	1c19      	adds	r1, r3, #0
 8007220:	197b      	adds	r3, r7, r5
 8007222:	6818      	ldr	r0, [r3, #0]
 8007224:	f7f9 f9f0 	bl	8000608 <__aeabi_fadd>
 8007228:	1c03      	adds	r3, r0, #0
 800722a:	1978      	adds	r0, r7, r5
 800722c:	6003      	str	r3, [r0, #0]
		memset(tempMsg, 0, sizeof(tempMsg));
 800722e:	003b      	movs	r3, r7
 8007230:	2296      	movs	r2, #150	; 0x96
 8007232:	2100      	movs	r1, #0
 8007234:	0018      	movs	r0, r3
 8007236:	f006 ff8e 	bl	800e156 <memset>
		memset(buf, 0, sizeof(buf));
 800723a:	2498      	movs	r4, #152	; 0x98
 800723c:	193b      	adds	r3, r7, r4
 800723e:	220f      	movs	r2, #15
 8007240:	2100      	movs	r1, #0
 8007242:	0018      	movs	r0, r3
 8007244:	f006 ff87 	bl	800e156 <memset>
		gcvt(latitude, 8, buf);
 8007248:	22ac      	movs	r2, #172	; 0xac
 800724a:	18bb      	adds	r3, r7, r2
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	f7fb fa93 	bl	8002778 <__aeabi_f2d>
 8007252:	193b      	adds	r3, r7, r4
 8007254:	2208      	movs	r2, #8
 8007256:	f006 ff25 	bl	800e0a4 <gcvt>
		strcat(tempMsg,"AT+CMGS=\"");
 800725a:	003b      	movs	r3, r7
 800725c:	0018      	movs	r0, r3
 800725e:	f7f8 ff59 	bl	8000114 <strlen>
 8007262:	0003      	movs	r3, r0
 8007264:	001a      	movs	r2, r3
 8007266:	003b      	movs	r3, r7
 8007268:	189a      	adds	r2, r3, r2
 800726a:	4b49      	ldr	r3, [pc, #292]	; (8007390 <send_current_location_via_sms+0x3bc>)
 800726c:	0010      	movs	r0, r2
 800726e:	0019      	movs	r1, r3
 8007270:	230a      	movs	r3, #10
 8007272:	001a      	movs	r2, r3
 8007274:	f006 ff66 	bl	800e144 <memcpy>
		strcat(tempMsg,validSender);
 8007278:	4a46      	ldr	r2, [pc, #280]	; (8007394 <send_current_location_via_sms+0x3c0>)
 800727a:	003b      	movs	r3, r7
 800727c:	0011      	movs	r1, r2
 800727e:	0018      	movs	r0, r3
 8007280:	f006 ff92 	bl	800e1a8 <strcat>
		strcat(tempMsg,"\"\r");
 8007284:	003b      	movs	r3, r7
 8007286:	0018      	movs	r0, r3
 8007288:	f7f8 ff44 	bl	8000114 <strlen>
 800728c:	0003      	movs	r3, r0
 800728e:	001a      	movs	r2, r3
 8007290:	003b      	movs	r3, r7
 8007292:	189a      	adds	r2, r3, r2
 8007294:	4b40      	ldr	r3, [pc, #256]	; (8007398 <send_current_location_via_sms+0x3c4>)
 8007296:	0010      	movs	r0, r2
 8007298:	0019      	movs	r1, r3
 800729a:	2303      	movs	r3, #3
 800729c:	001a      	movs	r2, r3
 800729e:	f006 ff51 	bl	800e144 <memcpy>
//		strcat(tempMsg, "AT+CMGS=\"3322336979\"\r");
		strcat(tempMsg, buf);
 80072a2:	193a      	adds	r2, r7, r4
 80072a4:	003b      	movs	r3, r7
 80072a6:	0011      	movs	r1, r2
 80072a8:	0018      	movs	r0, r3
 80072aa:	f006 ff7d 	bl	800e1a8 <strcat>
		memset(buf, 0, sizeof(buf));
 80072ae:	193b      	adds	r3, r7, r4
 80072b0:	220f      	movs	r2, #15
 80072b2:	2100      	movs	r1, #0
 80072b4:	0018      	movs	r0, r3
 80072b6:	f006 ff4e 	bl	800e156 <memset>
		gcvt(longitude, 8, buf);
 80072ba:	197b      	adds	r3, r7, r5
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	f7fb fa5b 	bl	8002778 <__aeabi_f2d>
 80072c2:	193b      	adds	r3, r7, r4
 80072c4:	2208      	movs	r2, #8
 80072c6:	f006 feed 	bl	800e0a4 <gcvt>
		strcat(tempMsg, ",");
 80072ca:	003b      	movs	r3, r7
 80072cc:	0018      	movs	r0, r3
 80072ce:	f7f8 ff21 	bl	8000114 <strlen>
 80072d2:	0003      	movs	r3, r0
 80072d4:	001a      	movs	r2, r3
 80072d6:	003b      	movs	r3, r7
 80072d8:	189a      	adds	r2, r3, r2
 80072da:	4b30      	ldr	r3, [pc, #192]	; (800739c <send_current_location_via_sms+0x3c8>)
 80072dc:	0010      	movs	r0, r2
 80072de:	0019      	movs	r1, r3
 80072e0:	2302      	movs	r3, #2
 80072e2:	001a      	movs	r2, r3
 80072e4:	f006 ff2e 	bl	800e144 <memcpy>
		strcat(tempMsg, buf);
 80072e8:	193a      	adds	r2, r7, r4
 80072ea:	003b      	movs	r3, r7
 80072ec:	0011      	movs	r1, r2
 80072ee:	0018      	movs	r0, r3
 80072f0:	f006 ff5a 	bl	800e1a8 <strcat>
		strcat(tempMsg, ",");
 80072f4:	003b      	movs	r3, r7
 80072f6:	0018      	movs	r0, r3
 80072f8:	f7f8 ff0c 	bl	8000114 <strlen>
 80072fc:	0003      	movs	r3, r0
 80072fe:	001a      	movs	r2, r3
 8007300:	003b      	movs	r3, r7
 8007302:	189a      	adds	r2, r3, r2
 8007304:	4b25      	ldr	r3, [pc, #148]	; (800739c <send_current_location_via_sms+0x3c8>)
 8007306:	0010      	movs	r0, r2
 8007308:	0019      	movs	r1, r3
 800730a:	2302      	movs	r3, #2
 800730c:	001a      	movs	r2, r3
 800730e:	f006 ff19 	bl	800e144 <memcpy>
		memset(buf, 0, sizeof(buf));
 8007312:	193b      	adds	r3, r7, r4
 8007314:	220f      	movs	r2, #15
 8007316:	2100      	movs	r1, #0
 8007318:	0018      	movs	r0, r3
 800731a:	f006 ff1c 	bl	800e156 <memset>
		int2string(speed, buf);
 800731e:	21d6      	movs	r1, #214	; 0xd6
 8007320:	187b      	adds	r3, r7, r1
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	193a      	adds	r2, r7, r4
 8007326:	0011      	movs	r1, r2
 8007328:	0018      	movs	r0, r3
 800732a:	f000 fa69 	bl	8007800 <int2string>
		strcat(tempMsg, buf);
 800732e:	193a      	adds	r2, r7, r4
 8007330:	003b      	movs	r3, r7
 8007332:	0011      	movs	r1, r2
 8007334:	0018      	movs	r0, r3
 8007336:	f006 ff37 	bl	800e1a8 <strcat>
		uint8_t tempCount = 0;
 800733a:	23d7      	movs	r3, #215	; 0xd7
 800733c:	18fb      	adds	r3, r7, r3
 800733e:	2200      	movs	r2, #0
 8007340:	701a      	strb	r2, [r3, #0]

		//todo replace while with for loop
		while (tempMsg[tempCount] != NULL) {
 8007342:	e005      	b.n	8007350 <send_current_location_via_sms+0x37c>
			tempCount++;
 8007344:	21d7      	movs	r1, #215	; 0xd7
 8007346:	187b      	adds	r3, r7, r1
 8007348:	781a      	ldrb	r2, [r3, #0]
 800734a:	187b      	adds	r3, r7, r1
 800734c:	3201      	adds	r2, #1
 800734e:	701a      	strb	r2, [r3, #0]
		while (tempMsg[tempCount] != NULL) {
 8007350:	21d7      	movs	r1, #215	; 0xd7
 8007352:	187b      	adds	r3, r7, r1
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	003a      	movs	r2, r7
 8007358:	5cd3      	ldrb	r3, [r2, r3]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1f2      	bne.n	8007344 <send_current_location_via_sms+0x370>
		}

		tempMsg[tempCount] = 26;
 800735e:	187b      	adds	r3, r7, r1
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	003a      	movs	r2, r7
 8007364:	211a      	movs	r1, #26
 8007366:	54d1      	strb	r1, [r2, r3]
		//printf("--Sending message to mobile \n");

		send_command(tempMsg, 12005, 7, 0, 0);
 8007368:	490d      	ldr	r1, [pc, #52]	; (80073a0 <send_current_location_via_sms+0x3cc>)
 800736a:	0038      	movs	r0, r7
 800736c:	2300      	movs	r3, #0
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	2300      	movs	r3, #0
 8007372:	2207      	movs	r2, #7
 8007374:	f7fe fe40 	bl	8005ff8 <send_command>

		// char tecMsg[] = {'A','T','+','C','M','G','S','=','\"','3','3','2','2','3','3','6','9','7','9','\"','\r','h','e','l','l','o',26,0};

		//    send_command(tecMsg, 12005, 7, 0, 0);
	}
}
 8007378:	46c0      	nop			; (mov r8, r8)
 800737a:	46bd      	mov	sp, r7
 800737c:	b037      	add	sp, #220	; 0xdc
 800737e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007380:	200006e0 	.word	0x200006e0
 8007384:	20000028 	.word	0x20000028
 8007388:	40dd4c00 	.word	0x40dd4c00
 800738c:	404e0000 	.word	0x404e0000
 8007390:	080127cc 	.word	0x080127cc
 8007394:	20000004 	.word	0x20000004
 8007398:	080127d8 	.word	0x080127d8
 800739c:	080127dc 	.word	0x080127dc
 80073a0:	00002ee5 	.word	0x00002ee5

080073a4 <send_alarm_packet_via_sms>:


void send_alarm_packet_via_sms(){
 80073a4:	b5b0      	push	{r4, r5, r7, lr}
 80073a6:	b0a2      	sub	sp, #136	; 0x88
 80073a8:	af02      	add	r7, sp, #8
	if(isSMSActive==1){
 80073aa:	4b59      	ldr	r3, [pc, #356]	; (8007510 <send_alarm_packet_via_sms+0x16c>)
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d000      	beq.n	80073b4 <send_alarm_packet_via_sms+0x10>
 80073b2:	e0a9      	b.n	8007508 <send_alarm_packet_via_sms+0x164>
		uint8_t tempalarm[23];
		memset(tempalarm, 0, sizeof(tempalarm));
 80073b4:	2364      	movs	r3, #100	; 0x64
 80073b6:	18fb      	adds	r3, r7, r3
 80073b8:	2217      	movs	r2, #23
 80073ba:	2100      	movs	r1, #0
 80073bc:	0018      	movs	r0, r3
 80073be:	f006 feca 	bl	800e156 <memset>
		create_status_info();
 80073c2:	f7ff fc4b 	bl	8006c5c <create_status_info>
		char temMsg[100];
		uint8_t n = 21;
 80073c6:	237f      	movs	r3, #127	; 0x7f
 80073c8:	18fb      	adds	r3, r7, r3
 80073ca:	2215      	movs	r2, #21
 80073cc:	701a      	strb	r2, [r3, #0]
		uint8_t tempCt = 0;
 80073ce:	237e      	movs	r3, #126	; 0x7e
 80073d0:	18fb      	adds	r3, r7, r3
 80073d2:	2200      	movs	r2, #0
 80073d4:	701a      	strb	r2, [r3, #0]
		memset(temMsg, 0, sizeof(temMsg));
 80073d6:	003b      	movs	r3, r7
 80073d8:	2264      	movs	r2, #100	; 0x64
 80073da:	2100      	movs	r1, #0
 80073dc:	0018      	movs	r0, r3
 80073de:	f006 feba 	bl	800e156 <memset>
		strcat(temMsg,"AT+CMGS=\"");
 80073e2:	003b      	movs	r3, r7
 80073e4:	0018      	movs	r0, r3
 80073e6:	f7f8 fe95 	bl	8000114 <strlen>
 80073ea:	0003      	movs	r3, r0
 80073ec:	001a      	movs	r2, r3
 80073ee:	003b      	movs	r3, r7
 80073f0:	189a      	adds	r2, r3, r2
 80073f2:	4b48      	ldr	r3, [pc, #288]	; (8007514 <send_alarm_packet_via_sms+0x170>)
 80073f4:	0010      	movs	r0, r2
 80073f6:	0019      	movs	r1, r3
 80073f8:	230a      	movs	r3, #10
 80073fa:	001a      	movs	r2, r3
 80073fc:	f006 fea2 	bl	800e144 <memcpy>
		strcat(temMsg,validSender);
 8007400:	4a45      	ldr	r2, [pc, #276]	; (8007518 <send_alarm_packet_via_sms+0x174>)
 8007402:	003b      	movs	r3, r7
 8007404:	0011      	movs	r1, r2
 8007406:	0018      	movs	r0, r3
 8007408:	f006 fece 	bl	800e1a8 <strcat>
		strcat(temMsg,"\"\r");
 800740c:	003b      	movs	r3, r7
 800740e:	0018      	movs	r0, r3
 8007410:	f7f8 fe80 	bl	8000114 <strlen>
 8007414:	0003      	movs	r3, r0
 8007416:	001a      	movs	r2, r3
 8007418:	003b      	movs	r3, r7
 800741a:	189a      	adds	r2, r3, r2
 800741c:	4b3f      	ldr	r3, [pc, #252]	; (800751c <send_alarm_packet_via_sms+0x178>)
 800741e:	0010      	movs	r0, r2
 8007420:	0019      	movs	r1, r3
 8007422:	2303      	movs	r3, #3
 8007424:	001a      	movs	r2, r3
 8007426:	f006 fe8d 	bl	800e144 <memcpy>
		create_status_info();
 800742a:	f7ff fc17 	bl	8006c5c <create_status_info>
		for (uint8_t y = 0; y < 18; y++) {
 800742e:	237d      	movs	r3, #125	; 0x7d
 8007430:	18fb      	adds	r3, r7, r3
 8007432:	2200      	movs	r2, #0
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e010      	b.n	800745a <send_alarm_packet_via_sms+0xb6>
			tempalarm[y]  = gps_info[y];
 8007438:	4b39      	ldr	r3, [pc, #228]	; (8007520 <send_alarm_packet_via_sms+0x17c>)
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	207d      	movs	r0, #125	; 0x7d
 800743e:	183b      	adds	r3, r7, r0
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	18d2      	adds	r2, r2, r3
 8007444:	183b      	adds	r3, r7, r0
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	7811      	ldrb	r1, [r2, #0]
 800744a:	2264      	movs	r2, #100	; 0x64
 800744c:	18ba      	adds	r2, r7, r2
 800744e:	54d1      	strb	r1, [r2, r3]
		for (uint8_t y = 0; y < 18; y++) {
 8007450:	183b      	adds	r3, r7, r0
 8007452:	781a      	ldrb	r2, [r3, #0]
 8007454:	183b      	adds	r3, r7, r0
 8007456:	3201      	adds	r2, #1
 8007458:	701a      	strb	r2, [r3, #0]
 800745a:	237d      	movs	r3, #125	; 0x7d
 800745c:	18fb      	adds	r3, r7, r3
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b11      	cmp	r3, #17
 8007462:	d9e9      	bls.n	8007438 <send_alarm_packet_via_sms+0x94>
		}
		tempalarm[18]=TermInfo;
 8007464:	4b2f      	ldr	r3, [pc, #188]	; (8007524 <send_alarm_packet_via_sms+0x180>)
 8007466:	781a      	ldrb	r2, [r3, #0]
 8007468:	2164      	movs	r1, #100	; 0x64
 800746a:	187b      	adds	r3, r7, r1
 800746c:	749a      	strb	r2, [r3, #18]
		tempalarm[19]=VLvl;
 800746e:	4b2e      	ldr	r3, [pc, #184]	; (8007528 <send_alarm_packet_via_sms+0x184>)
 8007470:	781a      	ldrb	r2, [r3, #0]
 8007472:	187b      	adds	r3, r7, r1
 8007474:	74da      	strb	r2, [r3, #19]
		tempalarm[20]=GSMSS;
 8007476:	4b2d      	ldr	r3, [pc, #180]	; (800752c <send_alarm_packet_via_sms+0x188>)
 8007478:	781a      	ldrb	r2, [r3, #0]
 800747a:	187b      	adds	r3, r7, r1
 800747c:	751a      	strb	r2, [r3, #20]
		for (uint8_t y = 0; y < 21; y++) {
 800747e:	237c      	movs	r3, #124	; 0x7c
 8007480:	18fb      	adds	r3, r7, r3
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	e01b      	b.n	80074c0 <send_alarm_packet_via_sms+0x11c>
			n += sprintf(&temMsg[n], "%d", tempalarm[y]);
 8007488:	247f      	movs	r4, #127	; 0x7f
 800748a:	193b      	adds	r3, r7, r4
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	003a      	movs	r2, r7
 8007490:	18d0      	adds	r0, r2, r3
 8007492:	257c      	movs	r5, #124	; 0x7c
 8007494:	197b      	adds	r3, r7, r5
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2264      	movs	r2, #100	; 0x64
 800749a:	18ba      	adds	r2, r7, r2
 800749c:	5cd3      	ldrb	r3, [r2, r3]
 800749e:	001a      	movs	r2, r3
 80074a0:	4b23      	ldr	r3, [pc, #140]	; (8007530 <send_alarm_packet_via_sms+0x18c>)
 80074a2:	0019      	movs	r1, r3
 80074a4:	f006 fe60 	bl	800e168 <siprintf>
 80074a8:	0003      	movs	r3, r0
 80074aa:	b2d9      	uxtb	r1, r3
 80074ac:	193b      	adds	r3, r7, r4
 80074ae:	193a      	adds	r2, r7, r4
 80074b0:	7812      	ldrb	r2, [r2, #0]
 80074b2:	188a      	adds	r2, r1, r2
 80074b4:	701a      	strb	r2, [r3, #0]
		for (uint8_t y = 0; y < 21; y++) {
 80074b6:	197b      	adds	r3, r7, r5
 80074b8:	781a      	ldrb	r2, [r3, #0]
 80074ba:	197b      	adds	r3, r7, r5
 80074bc:	3201      	adds	r2, #1
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	237c      	movs	r3, #124	; 0x7c
 80074c2:	18fb      	adds	r3, r7, r3
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b14      	cmp	r3, #20
 80074c8:	d9de      	bls.n	8007488 <send_alarm_packet_via_sms+0xe4>
		}
		tempCt = 0;
 80074ca:	237e      	movs	r3, #126	; 0x7e
 80074cc:	18fb      	adds	r3, r7, r3
 80074ce:	2200      	movs	r2, #0
 80074d0:	701a      	strb	r2, [r3, #0]
		while (temMsg[tempCt] != NULL) {
 80074d2:	e005      	b.n	80074e0 <send_alarm_packet_via_sms+0x13c>
			tempCt++;
 80074d4:	217e      	movs	r1, #126	; 0x7e
 80074d6:	187b      	adds	r3, r7, r1
 80074d8:	781a      	ldrb	r2, [r3, #0]
 80074da:	187b      	adds	r3, r7, r1
 80074dc:	3201      	adds	r2, #1
 80074de:	701a      	strb	r2, [r3, #0]
		while (temMsg[tempCt] != NULL) {
 80074e0:	217e      	movs	r1, #126	; 0x7e
 80074e2:	187b      	adds	r3, r7, r1
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	003a      	movs	r2, r7
 80074e8:	5cd3      	ldrb	r3, [r2, r3]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1f2      	bne.n	80074d4 <send_alarm_packet_via_sms+0x130>
		}
		temMsg[tempCt] = 26;
 80074ee:	187b      	adds	r3, r7, r1
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	003a      	movs	r2, r7
 80074f4:	211a      	movs	r1, #26
 80074f6:	54d1      	strb	r1, [r2, r3]
		send_command(temMsg, 12005, 7, 0, 0);
 80074f8:	490e      	ldr	r1, [pc, #56]	; (8007534 <send_alarm_packet_via_sms+0x190>)
 80074fa:	0038      	movs	r0, r7
 80074fc:	2300      	movs	r3, #0
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	2300      	movs	r3, #0
 8007502:	2207      	movs	r2, #7
 8007504:	f7fe fd78 	bl	8005ff8 <send_command>
	}
}
 8007508:	46c0      	nop			; (mov r8, r8)
 800750a:	46bd      	mov	sp, r7
 800750c:	b020      	add	sp, #128	; 0x80
 800750e:	bdb0      	pop	{r4, r5, r7, pc}
 8007510:	200006e0 	.word	0x200006e0
 8007514:	080127cc 	.word	0x080127cc
 8007518:	20000004 	.word	0x20000004
 800751c:	080127d8 	.word	0x080127d8
 8007520:	20000028 	.word	0x20000028
 8007524:	200006d6 	.word	0x200006d6
 8007528:	200006d8 	.word	0x200006d8
 800752c:	200006d7 	.word	0x200006d7
 8007530:	080127e0 	.word	0x080127e0
 8007534:	00002ee5 	.word	0x00002ee5

08007538 <send_location_packet_via_sms>:

void send_location_packet_via_sms(){
 8007538:	b5b0      	push	{r4, r5, r7, lr}
 800753a:	4c9e      	ldr	r4, [pc, #632]	; (80077b4 <send_location_packet_via_sms+0x27c>)
 800753c:	44a5      	add	sp, r4
 800753e:	af02      	add	r7, sp, #8
	if(isSMSActive==1){
 8007540:	4b9d      	ldr	r3, [pc, #628]	; (80077b8 <send_location_packet_via_sms+0x280>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d000      	beq.n	800754a <send_location_packet_via_sms+0x12>
 8007548:	e12e      	b.n	80077a8 <send_location_packet_via_sms+0x270>
		msgCounter = 0;
 800754a:	4b9c      	ldr	r3, [pc, #624]	; (80077bc <send_location_packet_via_sms+0x284>)
 800754c:	2200      	movs	r2, #0
 800754e:	701a      	strb	r2, [r3, #0]
		uint8_t dataSize = 0;
 8007550:	499b      	ldr	r1, [pc, #620]	; (80077c0 <send_location_packet_via_sms+0x288>)
 8007552:	187b      	adds	r3, r7, r1
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]
		dataSize = checkdatasize();
 8007558:	187c      	adds	r4, r7, r1
 800755a:	f7ff fa37 	bl	80069cc <checkdatasize>
 800755e:	0003      	movs	r3, r0
 8007560:	7023      	strb	r3, [r4, #0]
		while (dataSize == 1 && msgCounter < msgCount) {
 8007562:	e115      	b.n	8007790 <send_location_packet_via_sms+0x258>
			stats = 6;
 8007564:	4b97      	ldr	r3, [pc, #604]	; (80077c4 <send_location_packet_via_sms+0x28c>)
 8007566:	2206      	movs	r2, #6
 8007568:	701a      	strb	r2, [r3, #0]
			uint8_t loopCount = 0;
 800756a:	4b97      	ldr	r3, [pc, #604]	; (80077c8 <send_location_packet_via_sms+0x290>)
 800756c:	18fb      	adds	r3, r7, r3
 800756e:	2200      	movs	r2, #0
 8007570:	701a      	strb	r2, [r3, #0]
			memset(bunchdata, 0, sizeof(bunchdata));
 8007572:	23a8      	movs	r3, #168	; 0xa8
 8007574:	009a      	lsls	r2, r3, #2
 8007576:	4b95      	ldr	r3, [pc, #596]	; (80077cc <send_location_packet_via_sms+0x294>)
 8007578:	2100      	movs	r1, #0
 800757a:	0018      	movs	r0, r3
 800757c:	f006 fdeb 	bl	800e156 <memset>
			//printf("--Sending AT+CREG?-- \n");
			send_command("AT+CREG?\r\n", 3, 3, 3, 1);
 8007580:	4893      	ldr	r0, [pc, #588]	; (80077d0 <send_location_packet_via_sms+0x298>)
 8007582:	2301      	movs	r3, #1
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	2303      	movs	r3, #3
 8007588:	2203      	movs	r2, #3
 800758a:	2103      	movs	r1, #3
 800758c:	f7fe fd34 	bl	8005ff8 <send_command>
			if (isReg == 1) {
 8007590:	4b90      	ldr	r3, [pc, #576]	; (80077d4 <send_location_packet_via_sms+0x29c>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d000      	beq.n	800759a <send_location_packet_via_sms+0x62>
 8007598:	e105      	b.n	80077a6 <send_location_packet_via_sms+0x26e>
				while (read_data_packet() == 1 && loopCount < smsBunch) {
 800759a:	e023      	b.n	80075e4 <send_location_packet_via_sms+0xac>
					//printf("readed the data \n");
					for (uint8_t i = 0; i < 18; i++) {
 800759c:	4b8e      	ldr	r3, [pc, #568]	; (80077d8 <send_location_packet_via_sms+0x2a0>)
 800759e:	18fb      	adds	r3, r7, r3
 80075a0:	2200      	movs	r2, #0
 80075a2:	701a      	strb	r2, [r3, #0]
 80075a4:	e013      	b.n	80075ce <send_location_packet_via_sms+0x96>
						bunchdata[loopCount][i] = readPacket[i];
 80075a6:	4c8c      	ldr	r4, [pc, #560]	; (80077d8 <send_location_packet_via_sms+0x2a0>)
 80075a8:	193b      	adds	r3, r7, r4
 80075aa:	7819      	ldrb	r1, [r3, #0]
 80075ac:	4b86      	ldr	r3, [pc, #536]	; (80077c8 <send_location_packet_via_sms+0x290>)
 80075ae:	18fb      	adds	r3, r7, r3
 80075b0:	781a      	ldrb	r2, [r3, #0]
 80075b2:	193b      	adds	r3, r7, r4
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	4889      	ldr	r0, [pc, #548]	; (80077dc <send_location_packet_via_sms+0x2a4>)
 80075b8:	5c40      	ldrb	r0, [r0, r1]
 80075ba:	4984      	ldr	r1, [pc, #528]	; (80077cc <send_location_packet_via_sms+0x294>)
 80075bc:	0152      	lsls	r2, r2, #5
 80075be:	188a      	adds	r2, r1, r2
 80075c0:	1c01      	adds	r1, r0, #0
 80075c2:	54d1      	strb	r1, [r2, r3]
					for (uint8_t i = 0; i < 18; i++) {
 80075c4:	193b      	adds	r3, r7, r4
 80075c6:	781a      	ldrb	r2, [r3, #0]
 80075c8:	193b      	adds	r3, r7, r4
 80075ca:	3201      	adds	r2, #1
 80075cc:	701a      	strb	r2, [r3, #0]
 80075ce:	4b82      	ldr	r3, [pc, #520]	; (80077d8 <send_location_packet_via_sms+0x2a0>)
 80075d0:	18fb      	adds	r3, r7, r3
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b11      	cmp	r3, #17
 80075d6:	d9e6      	bls.n	80075a6 <send_location_packet_via_sms+0x6e>
					}
					loopCount++;
 80075d8:	497b      	ldr	r1, [pc, #492]	; (80077c8 <send_location_packet_via_sms+0x290>)
 80075da:	187b      	adds	r3, r7, r1
 80075dc:	781a      	ldrb	r2, [r3, #0]
 80075de:	187b      	adds	r3, r7, r1
 80075e0:	3201      	adds	r2, #1
 80075e2:	701a      	strb	r2, [r3, #0]
				while (read_data_packet() == 1 && loopCount < smsBunch) {
 80075e4:	f7ff fac4 	bl	8006b70 <read_data_packet>
 80075e8:	0003      	movs	r3, r0
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d104      	bne.n	80075f8 <send_location_packet_via_sms+0xc0>
 80075ee:	4b76      	ldr	r3, [pc, #472]	; (80077c8 <send_location_packet_via_sms+0x290>)
 80075f0:	18fb      	adds	r3, r7, r3
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b09      	cmp	r3, #9
 80075f6:	d9d1      	bls.n	800759c <send_location_packet_via_sms+0x64>
				}
				char temMsg[1000];
				int n = 21;
 80075f8:	2315      	movs	r3, #21
 80075fa:	22fc      	movs	r2, #252	; 0xfc
 80075fc:	0092      	lsls	r2, r2, #2
 80075fe:	18ba      	adds	r2, r7, r2
 8007600:	6013      	str	r3, [r2, #0]
				int tempCt = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	22fb      	movs	r2, #251	; 0xfb
 8007606:	0092      	lsls	r2, r2, #2
 8007608:	18ba      	adds	r2, r7, r2
 800760a:	6013      	str	r3, [r2, #0]
				memset(temMsg, 0, sizeof(temMsg));
 800760c:	23fa      	movs	r3, #250	; 0xfa
 800760e:	009a      	lsls	r2, r3, #2
 8007610:	003b      	movs	r3, r7
 8007612:	2100      	movs	r1, #0
 8007614:	0018      	movs	r0, r3
 8007616:	f006 fd9e 	bl	800e156 <memset>
				strcat(temMsg,"AT+CMGS=\"");
 800761a:	003b      	movs	r3, r7
 800761c:	0018      	movs	r0, r3
 800761e:	f7f8 fd79 	bl	8000114 <strlen>
 8007622:	0003      	movs	r3, r0
 8007624:	001a      	movs	r2, r3
 8007626:	003b      	movs	r3, r7
 8007628:	189a      	adds	r2, r3, r2
 800762a:	4b6d      	ldr	r3, [pc, #436]	; (80077e0 <send_location_packet_via_sms+0x2a8>)
 800762c:	0010      	movs	r0, r2
 800762e:	0019      	movs	r1, r3
 8007630:	230a      	movs	r3, #10
 8007632:	001a      	movs	r2, r3
 8007634:	f006 fd86 	bl	800e144 <memcpy>
				strcat(temMsg,validSender);
 8007638:	4a6a      	ldr	r2, [pc, #424]	; (80077e4 <send_location_packet_via_sms+0x2ac>)
 800763a:	003b      	movs	r3, r7
 800763c:	0011      	movs	r1, r2
 800763e:	0018      	movs	r0, r3
 8007640:	f006 fdb2 	bl	800e1a8 <strcat>
				strcat(temMsg,"\"\r");
 8007644:	003b      	movs	r3, r7
 8007646:	0018      	movs	r0, r3
 8007648:	f7f8 fd64 	bl	8000114 <strlen>
 800764c:	0003      	movs	r3, r0
 800764e:	001a      	movs	r2, r3
 8007650:	003b      	movs	r3, r7
 8007652:	189a      	adds	r2, r3, r2
 8007654:	4b64      	ldr	r3, [pc, #400]	; (80077e8 <send_location_packet_via_sms+0x2b0>)
 8007656:	0010      	movs	r0, r2
 8007658:	0019      	movs	r1, r3
 800765a:	2303      	movs	r3, #3
 800765c:	001a      	movs	r2, r3
 800765e:	f006 fd71 	bl	800e144 <memcpy>
	//			strcat(temMsg, "AT+CMGS=\"3322336979\"\r");
				// todo send 21 msg packet
				for (uint8_t i = 0; i < loopCount; i++) {
 8007662:	4b62      	ldr	r3, [pc, #392]	; (80077ec <send_location_packet_via_sms+0x2b4>)
 8007664:	18fb      	adds	r3, r7, r3
 8007666:	2200      	movs	r2, #0
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	e053      	b.n	8007714 <send_location_packet_via_sms+0x1dc>
					for (uint8_t y = 0; y < 18; y++) {
 800766c:	4b60      	ldr	r3, [pc, #384]	; (80077f0 <send_location_packet_via_sms+0x2b8>)
 800766e:	18fb      	adds	r3, r7, r3
 8007670:	2200      	movs	r2, #0
 8007672:	701a      	strb	r2, [r3, #0]
 8007674:	e01f      	b.n	80076b6 <send_location_packet_via_sms+0x17e>
						n += sprintf(&temMsg[n], "%d", bunchdata[i][y]);
 8007676:	003a      	movs	r2, r7
 8007678:	24fc      	movs	r4, #252	; 0xfc
 800767a:	00a4      	lsls	r4, r4, #2
 800767c:	193b      	adds	r3, r7, r4
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	18d0      	adds	r0, r2, r3
 8007682:	4b5a      	ldr	r3, [pc, #360]	; (80077ec <send_location_packet_via_sms+0x2b4>)
 8007684:	18fb      	adds	r3, r7, r3
 8007686:	781a      	ldrb	r2, [r3, #0]
 8007688:	4d59      	ldr	r5, [pc, #356]	; (80077f0 <send_location_packet_via_sms+0x2b8>)
 800768a:	197b      	adds	r3, r7, r5
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	494f      	ldr	r1, [pc, #316]	; (80077cc <send_location_packet_via_sms+0x294>)
 8007690:	0152      	lsls	r2, r2, #5
 8007692:	188a      	adds	r2, r1, r2
 8007694:	5cd3      	ldrb	r3, [r2, r3]
 8007696:	001a      	movs	r2, r3
 8007698:	4b56      	ldr	r3, [pc, #344]	; (80077f4 <send_location_packet_via_sms+0x2bc>)
 800769a:	0019      	movs	r1, r3
 800769c:	f006 fd64 	bl	800e168 <siprintf>
 80076a0:	0002      	movs	r2, r0
 80076a2:	193b      	adds	r3, r7, r4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	189b      	adds	r3, r3, r2
 80076a8:	193a      	adds	r2, r7, r4
 80076aa:	6013      	str	r3, [r2, #0]
					for (uint8_t y = 0; y < 18; y++) {
 80076ac:	197b      	adds	r3, r7, r5
 80076ae:	781a      	ldrb	r2, [r3, #0]
 80076b0:	197b      	adds	r3, r7, r5
 80076b2:	3201      	adds	r2, #1
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	4b4e      	ldr	r3, [pc, #312]	; (80077f0 <send_location_packet_via_sms+0x2b8>)
 80076b8:	18fb      	adds	r3, r7, r3
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b11      	cmp	r3, #17
 80076be:	d9da      	bls.n	8007676 <send_location_packet_via_sms+0x13e>
					}
					while (temMsg[tempCt] != NULL) {
 80076c0:	e006      	b.n	80076d0 <send_location_packet_via_sms+0x198>
						tempCt++;
 80076c2:	22fb      	movs	r2, #251	; 0xfb
 80076c4:	0092      	lsls	r2, r2, #2
 80076c6:	18bb      	adds	r3, r7, r2
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3301      	adds	r3, #1
 80076cc:	18ba      	adds	r2, r7, r2
 80076ce:	6013      	str	r3, [r2, #0]
					while (temMsg[tempCt] != NULL) {
 80076d0:	4b49      	ldr	r3, [pc, #292]	; (80077f8 <send_location_packet_via_sms+0x2c0>)
 80076d2:	21fe      	movs	r1, #254	; 0xfe
 80076d4:	0089      	lsls	r1, r1, #2
 80076d6:	185b      	adds	r3, r3, r1
 80076d8:	19da      	adds	r2, r3, r7
 80076da:	20fb      	movs	r0, #251	; 0xfb
 80076dc:	0080      	lsls	r0, r0, #2
 80076de:	183b      	adds	r3, r7, r0
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	18d3      	adds	r3, r2, r3
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1eb      	bne.n	80076c2 <send_location_packet_via_sms+0x18a>
					}
					temMsg[tempCt] = ',';
 80076ea:	4b43      	ldr	r3, [pc, #268]	; (80077f8 <send_location_packet_via_sms+0x2c0>)
 80076ec:	185b      	adds	r3, r3, r1
 80076ee:	19da      	adds	r2, r3, r7
 80076f0:	183b      	adds	r3, r7, r0
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	18d3      	adds	r3, r2, r3
 80076f6:	222c      	movs	r2, #44	; 0x2c
 80076f8:	701a      	strb	r2, [r3, #0]
					n++;
 80076fa:	22fc      	movs	r2, #252	; 0xfc
 80076fc:	0092      	lsls	r2, r2, #2
 80076fe:	18bb      	adds	r3, r7, r2
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3301      	adds	r3, #1
 8007704:	18ba      	adds	r2, r7, r2
 8007706:	6013      	str	r3, [r2, #0]
				for (uint8_t i = 0; i < loopCount; i++) {
 8007708:	4938      	ldr	r1, [pc, #224]	; (80077ec <send_location_packet_via_sms+0x2b4>)
 800770a:	187b      	adds	r3, r7, r1
 800770c:	781a      	ldrb	r2, [r3, #0]
 800770e:	187b      	adds	r3, r7, r1
 8007710:	3201      	adds	r2, #1
 8007712:	701a      	strb	r2, [r3, #0]
 8007714:	4b35      	ldr	r3, [pc, #212]	; (80077ec <send_location_packet_via_sms+0x2b4>)
 8007716:	18fa      	adds	r2, r7, r3
 8007718:	4b2b      	ldr	r3, [pc, #172]	; (80077c8 <send_location_packet_via_sms+0x290>)
 800771a:	18fb      	adds	r3, r7, r3
 800771c:	7812      	ldrb	r2, [r2, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d3a3      	bcc.n	800766c <send_location_packet_via_sms+0x134>
				}
				tempCt = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	22fb      	movs	r2, #251	; 0xfb
 8007728:	0092      	lsls	r2, r2, #2
 800772a:	18ba      	adds	r2, r7, r2
 800772c:	6013      	str	r3, [r2, #0]
				while (temMsg[tempCt] != NULL) {
 800772e:	e006      	b.n	800773e <send_location_packet_via_sms+0x206>
					tempCt++;
 8007730:	22fb      	movs	r2, #251	; 0xfb
 8007732:	0092      	lsls	r2, r2, #2
 8007734:	18bb      	adds	r3, r7, r2
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3301      	adds	r3, #1
 800773a:	18ba      	adds	r2, r7, r2
 800773c:	6013      	str	r3, [r2, #0]
				while (temMsg[tempCt] != NULL) {
 800773e:	4b2e      	ldr	r3, [pc, #184]	; (80077f8 <send_location_packet_via_sms+0x2c0>)
 8007740:	21fe      	movs	r1, #254	; 0xfe
 8007742:	0089      	lsls	r1, r1, #2
 8007744:	185b      	adds	r3, r3, r1
 8007746:	19da      	adds	r2, r3, r7
 8007748:	20fb      	movs	r0, #251	; 0xfb
 800774a:	0080      	lsls	r0, r0, #2
 800774c:	183b      	adds	r3, r7, r0
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	18d3      	adds	r3, r2, r3
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1eb      	bne.n	8007730 <send_location_packet_via_sms+0x1f8>
				}
				temMsg[tempCt] = 26;
 8007758:	4b27      	ldr	r3, [pc, #156]	; (80077f8 <send_location_packet_via_sms+0x2c0>)
 800775a:	185b      	adds	r3, r3, r1
 800775c:	19da      	adds	r2, r3, r7
 800775e:	183b      	adds	r3, r7, r0
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	18d3      	adds	r3, r2, r3
 8007764:	221a      	movs	r2, #26
 8007766:	701a      	strb	r2, [r3, #0]
				send_command(temMsg, 12005, 7, 0, 0);
 8007768:	4924      	ldr	r1, [pc, #144]	; (80077fc <send_location_packet_via_sms+0x2c4>)
 800776a:	0038      	movs	r0, r7
 800776c:	2300      	movs	r3, #0
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	2300      	movs	r3, #0
 8007772:	2207      	movs	r2, #7
 8007774:	f7fe fc40 	bl	8005ff8 <send_command>
				dataSize = checkdatasize();
 8007778:	4b11      	ldr	r3, [pc, #68]	; (80077c0 <send_location_packet_via_sms+0x288>)
 800777a:	18fc      	adds	r4, r7, r3
 800777c:	f7ff f926 	bl	80069cc <checkdatasize>
 8007780:	0003      	movs	r3, r0
 8007782:	7023      	strb	r3, [r4, #0]
				msgCounter++;
 8007784:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <send_location_packet_via_sms+0x284>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	3301      	adds	r3, #1
 800778a:	b2da      	uxtb	r2, r3
 800778c:	4b0b      	ldr	r3, [pc, #44]	; (80077bc <send_location_packet_via_sms+0x284>)
 800778e:	701a      	strb	r2, [r3, #0]
		while (dataSize == 1 && msgCounter < msgCount) {
 8007790:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <send_location_packet_via_sms+0x288>)
 8007792:	18fb      	adds	r3, r7, r3
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d106      	bne.n	80077a8 <send_location_packet_via_sms+0x270>
 800779a:	4b08      	ldr	r3, [pc, #32]	; (80077bc <send_location_packet_via_sms+0x284>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b09      	cmp	r3, #9
 80077a0:	d800      	bhi.n	80077a4 <send_location_packet_via_sms+0x26c>
 80077a2:	e6df      	b.n	8007564 <send_location_packet_via_sms+0x2c>
			} else {
				break;
			}
		}
	}
}
 80077a4:	e000      	b.n	80077a8 <send_location_packet_via_sms+0x270>
				break;
 80077a6:	46c0      	nop			; (mov r8, r8)
}
 80077a8:	46c0      	nop			; (mov r8, r8)
 80077aa:	46bd      	mov	sp, r7
 80077ac:	23fe      	movs	r3, #254	; 0xfe
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	449d      	add	sp, r3
 80077b2:	bdb0      	pop	{r4, r5, r7, pc}
 80077b4:	fffffc00 	.word	0xfffffc00
 80077b8:	200006e0 	.word	0x200006e0
 80077bc:	200006e8 	.word	0x200006e8
 80077c0:	000003f7 	.word	0x000003f7
 80077c4:	20000cb5 	.word	0x20000cb5
 80077c8:	000003f6 	.word	0x000003f6
 80077cc:	20000a0c 	.word	0x20000a0c
 80077d0:	08012600 	.word	0x08012600
 80077d4:	200009c5 	.word	0x200009c5
 80077d8:	000003f5 	.word	0x000003f5
 80077dc:	200009ec 	.word	0x200009ec
 80077e0:	080127cc 	.word	0x080127cc
 80077e4:	20000004 	.word	0x20000004
 80077e8:	080127d8 	.word	0x080127d8
 80077ec:	000003eb 	.word	0x000003eb
 80077f0:	000003ea 	.word	0x000003ea
 80077f4:	080127e0 	.word	0x080127e0
 80077f8:	fffffc08 	.word	0xfffffc08
 80077fc:	00002ee5 	.word	0x00002ee5

08007800 <int2string>:
char* int2string(int num, char *str) {
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
	if (str == NULL) {
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <int2string+0x14>
		return NULL;
 8007810:	2300      	movs	r3, #0
 8007812:	e006      	b.n	8007822 <int2string+0x22>
	}
	sprintf(str, "%d", num);
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	4905      	ldr	r1, [pc, #20]	; (800782c <int2string+0x2c>)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	0018      	movs	r0, r3
 800781c:	f006 fca4 	bl	800e168 <siprintf>
	return str;
 8007820:	683b      	ldr	r3, [r7, #0]
}
 8007822:	0018      	movs	r0, r3
 8007824:	46bd      	mov	sp, r7
 8007826:	b002      	add	sp, #8
 8007828:	bd80      	pop	{r7, pc}
 800782a:	46c0      	nop			; (mov r8, r8)
 800782c:	080127e0 	.word	0x080127e0

08007830 <check_command_SERVER>:

void check_command_SERVER(char* command){
 8007830:	b590      	push	{r4, r7, lr}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
		    //check for data integrity by counting commas.
		    //there must be 2 commas in total.
		    uint8_t commaPosition[2]={0,0};
 8007838:	2308      	movs	r3, #8
 800783a:	18fb      	adds	r3, r7, r3
 800783c:	2200      	movs	r2, #0
 800783e:	801a      	strh	r2, [r3, #0]
		    uint8_t totalCommas=0;
 8007840:	230f      	movs	r3, #15
 8007842:	18fb      	adds	r3, r7, r3
 8007844:	2200      	movs	r2, #0
 8007846:	701a      	strb	r2, [r3, #0]
		    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 8007848:	230e      	movs	r3, #14
 800784a:	18fb      	adds	r3, r7, r3
 800784c:	2200      	movs	r2, #0
 800784e:	701a      	strb	r2, [r3, #0]
 8007850:	e01f      	b.n	8007892 <check_command_SERVER+0x62>
		        if(command[a]==','){
 8007852:	210e      	movs	r1, #14
 8007854:	187b      	adds	r3, r7, r1
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	18d3      	adds	r3, r2, r3
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	2b2c      	cmp	r3, #44	; 0x2c
 8007860:	d111      	bne.n	8007886 <check_command_SERVER+0x56>
		            if(totalCommas<2){
 8007862:	220f      	movs	r2, #15
 8007864:	18bb      	adds	r3, r7, r2
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d806      	bhi.n	800787a <check_command_SERVER+0x4a>
		                commaPosition[totalCommas]=a;
 800786c:	18bb      	adds	r3, r7, r2
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2208      	movs	r2, #8
 8007872:	18ba      	adds	r2, r7, r2
 8007874:	1879      	adds	r1, r7, r1
 8007876:	7809      	ldrb	r1, [r1, #0]
 8007878:	54d1      	strb	r1, [r2, r3]
		            }
		            totalCommas++;
 800787a:	210f      	movs	r1, #15
 800787c:	187b      	adds	r3, r7, r1
 800787e:	781a      	ldrb	r2, [r3, #0]
 8007880:	187b      	adds	r3, r7, r1
 8007882:	3201      	adds	r2, #1
 8007884:	701a      	strb	r2, [r3, #0]
		    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 8007886:	210e      	movs	r1, #14
 8007888:	187b      	adds	r3, r7, r1
 800788a:	781a      	ldrb	r2, [r3, #0]
 800788c:	187b      	adds	r3, r7, r1
 800788e:	3201      	adds	r2, #1
 8007890:	701a      	strb	r2, [r3, #0]
 8007892:	230e      	movs	r3, #14
 8007894:	18fb      	adds	r3, r7, r3
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	2b31      	cmp	r3, #49	; 0x31
 800789a:	d9da      	bls.n	8007852 <check_command_SERVER+0x22>
		        }
		    }
		    if(totalCommas ==2 && commaPosition[0] == 6 ){
 800789c:	230f      	movs	r3, #15
 800789e:	18fb      	adds	r3, r7, r3
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d162      	bne.n	800796c <check_command_SERVER+0x13c>
 80078a6:	2408      	movs	r4, #8
 80078a8:	193b      	adds	r3, r7, r4
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	2b06      	cmp	r3, #6
 80078ae:	d15d      	bne.n	800796c <check_command_SERVER+0x13c>
		        //two commas found, and first one is on 6th index.
		        //data is good.
		    	memset(portAdd,0,sizeof(portAdd));
 80078b0:	4b30      	ldr	r3, [pc, #192]	; (8007974 <check_command_SERVER+0x144>)
 80078b2:	2206      	movs	r2, #6
 80078b4:	2100      	movs	r1, #0
 80078b6:	0018      	movs	r0, r3
 80078b8:	f006 fc4d 	bl	800e156 <memset>
		    	memset(domainAdd,0,sizeof(domainAdd));
 80078bc:	4b2e      	ldr	r3, [pc, #184]	; (8007978 <check_command_SERVER+0x148>)
 80078be:	2233      	movs	r2, #51	; 0x33
 80078c0:	2100      	movs	r1, #0
 80078c2:	0018      	movs	r0, r3
 80078c4:	f006 fc47 	bl	800e156 <memset>

		        //extract dns
	            for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 80078c8:	193b      	adds	r3, r7, r4
 80078ca:	781a      	ldrb	r2, [r3, #0]
 80078cc:	230d      	movs	r3, #13
 80078ce:	18fb      	adds	r3, r7, r3
 80078d0:	3201      	adds	r2, #1
 80078d2:	701a      	strb	r2, [r3, #0]
 80078d4:	e013      	b.n	80078fe <check_command_SERVER+0xce>
	                    domainAdd[a-(commaPosition[0]+1)]=command[a];
 80078d6:	200d      	movs	r0, #13
 80078d8:	183b      	adds	r3, r7, r0
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	18d2      	adds	r2, r2, r3
 80078e0:	183b      	adds	r3, r7, r0
 80078e2:	7819      	ldrb	r1, [r3, #0]
 80078e4:	2308      	movs	r3, #8
 80078e6:	18fb      	adds	r3, r7, r3
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	3301      	adds	r3, #1
 80078ec:	1acb      	subs	r3, r1, r3
 80078ee:	7811      	ldrb	r1, [r2, #0]
 80078f0:	4a21      	ldr	r2, [pc, #132]	; (8007978 <check_command_SERVER+0x148>)
 80078f2:	54d1      	strb	r1, [r2, r3]
	            for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 80078f4:	183b      	adds	r3, r7, r0
 80078f6:	781a      	ldrb	r2, [r3, #0]
 80078f8:	183b      	adds	r3, r7, r0
 80078fa:	3201      	adds	r2, #1
 80078fc:	701a      	strb	r2, [r3, #0]
 80078fe:	2108      	movs	r1, #8
 8007900:	187b      	adds	r3, r7, r1
 8007902:	785b      	ldrb	r3, [r3, #1]
 8007904:	220d      	movs	r2, #13
 8007906:	18ba      	adds	r2, r7, r2
 8007908:	7812      	ldrb	r2, [r2, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d3e3      	bcc.n	80078d6 <check_command_SERVER+0xa6>
	                }
	            //extract port
	    	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+7;a++){
 800790e:	187b      	adds	r3, r7, r1
 8007910:	785a      	ldrb	r2, [r3, #1]
 8007912:	230c      	movs	r3, #12
 8007914:	18fb      	adds	r3, r7, r3
 8007916:	3201      	adds	r2, #1
 8007918:	701a      	strb	r2, [r3, #0]
 800791a:	e01b      	b.n	8007954 <check_command_SERVER+0x124>
	    	        if(command[a]!=NULL){
 800791c:	210c      	movs	r1, #12
 800791e:	187b      	adds	r3, r7, r1
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	18d3      	adds	r3, r2, r3
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00d      	beq.n	8007948 <check_command_SERVER+0x118>
	    	            portAdd[a-(commaPosition[1]+1)] = command[a];
 800792c:	187b      	adds	r3, r7, r1
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	18d2      	adds	r2, r2, r3
 8007934:	187b      	adds	r3, r7, r1
 8007936:	7819      	ldrb	r1, [r3, #0]
 8007938:	2308      	movs	r3, #8
 800793a:	18fb      	adds	r3, r7, r3
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	3301      	adds	r3, #1
 8007940:	1acb      	subs	r3, r1, r3
 8007942:	7811      	ldrb	r1, [r2, #0]
 8007944:	4a0b      	ldr	r2, [pc, #44]	; (8007974 <check_command_SERVER+0x144>)
 8007946:	54d1      	strb	r1, [r2, r3]
	    	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+7;a++){
 8007948:	210c      	movs	r1, #12
 800794a:	187b      	adds	r3, r7, r1
 800794c:	781a      	ldrb	r2, [r3, #0]
 800794e:	187b      	adds	r3, r7, r1
 8007950:	3201      	adds	r2, #1
 8007952:	701a      	strb	r2, [r3, #0]
 8007954:	2308      	movs	r3, #8
 8007956:	18fb      	adds	r3, r7, r3
 8007958:	785b      	ldrb	r3, [r3, #1]
 800795a:	1d9a      	adds	r2, r3, #6
 800795c:	230c      	movs	r3, #12
 800795e:	18fb      	adds	r3, r7, r3
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	dada      	bge.n	800791c <check_command_SERVER+0xec>
	    	        }
	    	    }
	    	    save_to_flash(0);
 8007966:	2000      	movs	r0, #0
 8007968:	f7fe f9c8 	bl	8005cfc <save_to_flash>
	    	    //todo save to flash please.
		    }
		    else{
//		        printf("Data is bad");
		    }
}
 800796c:	46c0      	nop			; (mov r8, r8)
 800796e:	46bd      	mov	sp, r7
 8007970:	b005      	add	sp, #20
 8007972:	bd90      	pop	{r4, r7, pc}
 8007974:	2000002c 	.word	0x2000002c
 8007978:	20000034 	.word	0x20000034

0800797c <check_command_TIMER>:
void check_command_TIMER(char* command){
 800797c:	b590      	push	{r4, r7, lr}
 800797e:	b089      	sub	sp, #36	; 0x24
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]

    //check for data integrity by counting commas.
    //there must be 2 commas in total.
    //t1 and t2 both must no be greater than 3 chars.

    uint8_t commaPosition[2]={0,0};
 8007984:	230c      	movs	r3, #12
 8007986:	18fb      	adds	r3, r7, r3
 8007988:	2200      	movs	r2, #0
 800798a:	801a      	strh	r2, [r3, #0]
    uint8_t totalCommas=0;
 800798c:	231f      	movs	r3, #31
 800798e:	18fb      	adds	r3, r7, r3
 8007990:	2200      	movs	r2, #0
 8007992:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 8007994:	231e      	movs	r3, #30
 8007996:	18fb      	adds	r3, r7, r3
 8007998:	2200      	movs	r2, #0
 800799a:	701a      	strb	r2, [r3, #0]
 800799c:	e01f      	b.n	80079de <check_command_TIMER+0x62>
        if(command[a]==','){
 800799e:	211e      	movs	r1, #30
 80079a0:	187b      	adds	r3, r7, r1
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	18d3      	adds	r3, r2, r3
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b2c      	cmp	r3, #44	; 0x2c
 80079ac:	d111      	bne.n	80079d2 <check_command_TIMER+0x56>
            if(totalCommas<2){
 80079ae:	221f      	movs	r2, #31
 80079b0:	18bb      	adds	r3, r7, r2
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d806      	bhi.n	80079c6 <check_command_TIMER+0x4a>
                commaPosition[totalCommas]=a;
 80079b8:	18bb      	adds	r3, r7, r2
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	220c      	movs	r2, #12
 80079be:	18ba      	adds	r2, r7, r2
 80079c0:	1879      	adds	r1, r7, r1
 80079c2:	7809      	ldrb	r1, [r1, #0]
 80079c4:	54d1      	strb	r1, [r2, r3]
            }
            totalCommas++;
 80079c6:	211f      	movs	r1, #31
 80079c8:	187b      	adds	r3, r7, r1
 80079ca:	781a      	ldrb	r2, [r3, #0]
 80079cc:	187b      	adds	r3, r7, r1
 80079ce:	3201      	adds	r2, #1
 80079d0:	701a      	strb	r2, [r3, #0]
    for (uint8_t a=0;a<MAX_COMMAND_LEN;a++){
 80079d2:	211e      	movs	r1, #30
 80079d4:	187b      	adds	r3, r7, r1
 80079d6:	781a      	ldrb	r2, [r3, #0]
 80079d8:	187b      	adds	r3, r7, r1
 80079da:	3201      	adds	r2, #1
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	231e      	movs	r3, #30
 80079e0:	18fb      	adds	r3, r7, r3
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b31      	cmp	r3, #49	; 0x31
 80079e6:	d9da      	bls.n	800799e <check_command_TIMER+0x22>
        }
    }
    uint8_t comaDiff = 0;
 80079e8:	201b      	movs	r0, #27
 80079ea:	183b      	adds	r3, r7, r0
 80079ec:	2200      	movs	r2, #0
 80079ee:	701a      	strb	r2, [r3, #0]
    comaDiff = commaPosition[1] - commaPosition[0];
 80079f0:	240c      	movs	r4, #12
 80079f2:	193b      	adds	r3, r7, r4
 80079f4:	7859      	ldrb	r1, [r3, #1]
 80079f6:	193b      	adds	r3, r7, r4
 80079f8:	781a      	ldrb	r2, [r3, #0]
 80079fa:	183b      	adds	r3, r7, r0
 80079fc:	1a8a      	subs	r2, r1, r2
 80079fe:	701a      	strb	r2, [r3, #0]
    if(totalCommas ==2
 8007a00:	231f      	movs	r3, #31
 8007a02:	18fb      	adds	r3, r7, r3
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d000      	beq.n	8007a0c <check_command_TIMER+0x90>
 8007a0a:	e0ae      	b.n	8007b6a <check_command_TIMER+0x1ee>
    && commaPosition[0] == 5
 8007a0c:	193b      	adds	r3, r7, r4
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b05      	cmp	r3, #5
 8007a12:	d000      	beq.n	8007a16 <check_command_TIMER+0x9a>
 8007a14:	e0a9      	b.n	8007b6a <check_command_TIMER+0x1ee>
    && comaDiff < 5
 8007a16:	183b      	adds	r3, r7, r0
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	d900      	bls.n	8007a20 <check_command_TIMER+0xa4>
 8007a1e:	e0a4      	b.n	8007b6a <check_command_TIMER+0x1ee>
    && comaDiff > 1){
 8007a20:	183b      	adds	r3, r7, r0
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d800      	bhi.n	8007a2a <check_command_TIMER+0xae>
 8007a28:	e09f      	b.n	8007b6a <check_command_TIMER+0x1ee>
        //two commas found, and first one is on 5th index.
        //t1 has 1-3 chars
        //data is good.
    	memset(t1,0,sizeof(t1));
 8007a2a:	2314      	movs	r3, #20
 8007a2c:	18fb      	adds	r3, r7, r3
 8007a2e:	2204      	movs	r2, #4
 8007a30:	2100      	movs	r1, #0
 8007a32:	0018      	movs	r0, r3
 8007a34:	f006 fb8f 	bl	800e156 <memset>
    	memset(t2,0,sizeof(t2));
 8007a38:	2310      	movs	r3, #16
 8007a3a:	18fb      	adds	r3, r7, r3
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	2100      	movs	r1, #0
 8007a40:	0018      	movs	r0, r3
 8007a42:	f006 fb88 	bl	800e156 <memset>

        //extract t1
        for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 8007a46:	193b      	adds	r3, r7, r4
 8007a48:	781a      	ldrb	r2, [r3, #0]
 8007a4a:	231d      	movs	r3, #29
 8007a4c:	18fb      	adds	r3, r7, r3
 8007a4e:	3201      	adds	r2, #1
 8007a50:	701a      	strb	r2, [r3, #0]
 8007a52:	e014      	b.n	8007a7e <check_command_TIMER+0x102>
                t1[a-(commaPosition[0]+1)]=command[a];
 8007a54:	201d      	movs	r0, #29
 8007a56:	183b      	adds	r3, r7, r0
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	18d2      	adds	r2, r2, r3
 8007a5e:	183b      	adds	r3, r7, r0
 8007a60:	7819      	ldrb	r1, [r3, #0]
 8007a62:	230c      	movs	r3, #12
 8007a64:	18fb      	adds	r3, r7, r3
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	1acb      	subs	r3, r1, r3
 8007a6c:	7811      	ldrb	r1, [r2, #0]
 8007a6e:	2214      	movs	r2, #20
 8007a70:	18ba      	adds	r2, r7, r2
 8007a72:	54d1      	strb	r1, [r2, r3]
        for(uint8_t a=commaPosition[0]+1;a<commaPosition[1];a++){
 8007a74:	183b      	adds	r3, r7, r0
 8007a76:	781a      	ldrb	r2, [r3, #0]
 8007a78:	183b      	adds	r3, r7, r0
 8007a7a:	3201      	adds	r2, #1
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	210c      	movs	r1, #12
 8007a80:	187b      	adds	r3, r7, r1
 8007a82:	785b      	ldrb	r3, [r3, #1]
 8007a84:	221d      	movs	r2, #29
 8007a86:	18ba      	adds	r2, r7, r2
 8007a88:	7812      	ldrb	r2, [r2, #0]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d3e2      	bcc.n	8007a54 <check_command_TIMER+0xd8>
            }
        //extract t2
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 8007a8e:	187b      	adds	r3, r7, r1
 8007a90:	785a      	ldrb	r2, [r3, #1]
 8007a92:	231c      	movs	r3, #28
 8007a94:	18fb      	adds	r3, r7, r3
 8007a96:	3201      	adds	r2, #1
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	e01c      	b.n	8007ad6 <check_command_TIMER+0x15a>
	        if(command[a]!=NULL){
 8007a9c:	211c      	movs	r1, #28
 8007a9e:	187b      	adds	r3, r7, r1
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	18d3      	adds	r3, r2, r3
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00e      	beq.n	8007aca <check_command_TIMER+0x14e>
	            t2[a-(commaPosition[1]+1)] = command[a];
 8007aac:	187b      	adds	r3, r7, r1
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	18d2      	adds	r2, r2, r3
 8007ab4:	187b      	adds	r3, r7, r1
 8007ab6:	7819      	ldrb	r1, [r3, #0]
 8007ab8:	230c      	movs	r3, #12
 8007aba:	18fb      	adds	r3, r7, r3
 8007abc:	785b      	ldrb	r3, [r3, #1]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	1acb      	subs	r3, r1, r3
 8007ac2:	7811      	ldrb	r1, [r2, #0]
 8007ac4:	2210      	movs	r2, #16
 8007ac6:	18ba      	adds	r2, r7, r2
 8007ac8:	54d1      	strb	r1, [r2, r3]
	    for(uint8_t a=commaPosition[1]+1;a<commaPosition[1]+4;a++){
 8007aca:	211c      	movs	r1, #28
 8007acc:	187b      	adds	r3, r7, r1
 8007ace:	781a      	ldrb	r2, [r3, #0]
 8007ad0:	187b      	adds	r3, r7, r1
 8007ad2:	3201      	adds	r2, #1
 8007ad4:	701a      	strb	r2, [r3, #0]
 8007ad6:	230c      	movs	r3, #12
 8007ad8:	18fb      	adds	r3, r7, r3
 8007ada:	785b      	ldrb	r3, [r3, #1]
 8007adc:	1cda      	adds	r2, r3, #3
 8007ade:	231c      	movs	r3, #28
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	dad9      	bge.n	8007a9c <check_command_TIMER+0x120>
	        }
	    }
	    locationDataIntervalA = atoi(t1);
 8007ae8:	2314      	movs	r3, #20
 8007aea:	18fb      	adds	r3, r7, r3
 8007aec:	0018      	movs	r0, r3
 8007aee:	f006 fad3 	bl	800e098 <atoi>
 8007af2:	0003      	movs	r3, r0
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	4b1f      	ldr	r3, [pc, #124]	; (8007b74 <check_command_TIMER+0x1f8>)
 8007af8:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalB = atoi(t2);
 8007afa:	2310      	movs	r3, #16
 8007afc:	18fb      	adds	r3, r7, r3
 8007afe:	0018      	movs	r0, r3
 8007b00:	f006 faca 	bl	800e098 <atoi>
 8007b04:	0003      	movs	r3, r0
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <check_command_TIMER+0x1fc>)
 8007b0a:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalA = locationDataIntervalA > 180 ? 180 : locationDataIntervalA;
 8007b0c:	4b19      	ldr	r3, [pc, #100]	; (8007b74 <check_command_TIMER+0x1f8>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	1c1a      	adds	r2, r3, #0
 8007b12:	b2d3      	uxtb	r3, r2
 8007b14:	2bb4      	cmp	r3, #180	; 0xb4
 8007b16:	d901      	bls.n	8007b1c <check_command_TIMER+0x1a0>
 8007b18:	23b4      	movs	r3, #180	; 0xb4
 8007b1a:	1c1a      	adds	r2, r3, #0
 8007b1c:	b2d2      	uxtb	r2, r2
 8007b1e:	4b15      	ldr	r3, [pc, #84]	; (8007b74 <check_command_TIMER+0x1f8>)
 8007b20:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalA = locationDataIntervalA < 5 ? 5 : locationDataIntervalA;
 8007b22:	4b14      	ldr	r3, [pc, #80]	; (8007b74 <check_command_TIMER+0x1f8>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	1c1a      	adds	r2, r3, #0
 8007b28:	b2d3      	uxtb	r3, r2
 8007b2a:	2b05      	cmp	r3, #5
 8007b2c:	d201      	bcs.n	8007b32 <check_command_TIMER+0x1b6>
 8007b2e:	2305      	movs	r3, #5
 8007b30:	1c1a      	adds	r2, r3, #0
 8007b32:	b2d2      	uxtb	r2, r2
 8007b34:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <check_command_TIMER+0x1f8>)
 8007b36:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalB = locationDataIntervalB > 180 ? 180 : locationDataIntervalB;
 8007b38:	4b0f      	ldr	r3, [pc, #60]	; (8007b78 <check_command_TIMER+0x1fc>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	1c1a      	adds	r2, r3, #0
 8007b3e:	b2d3      	uxtb	r3, r2
 8007b40:	2bb4      	cmp	r3, #180	; 0xb4
 8007b42:	d901      	bls.n	8007b48 <check_command_TIMER+0x1cc>
 8007b44:	23b4      	movs	r3, #180	; 0xb4
 8007b46:	1c1a      	adds	r2, r3, #0
 8007b48:	b2d2      	uxtb	r2, r2
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <check_command_TIMER+0x1fc>)
 8007b4c:	701a      	strb	r2, [r3, #0]
	    locationDataIntervalB = locationDataIntervalB < 5 ? 5 : locationDataIntervalB;
 8007b4e:	4b0a      	ldr	r3, [pc, #40]	; (8007b78 <check_command_TIMER+0x1fc>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	1c1a      	adds	r2, r3, #0
 8007b54:	b2d3      	uxtb	r3, r2
 8007b56:	2b05      	cmp	r3, #5
 8007b58:	d201      	bcs.n	8007b5e <check_command_TIMER+0x1e2>
 8007b5a:	2305      	movs	r3, #5
 8007b5c:	1c1a      	adds	r2, r3, #0
 8007b5e:	b2d2      	uxtb	r2, r2
 8007b60:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <check_command_TIMER+0x1fc>)
 8007b62:	701a      	strb	r2, [r3, #0]
	    //todo save to flash please.
	    save_to_flash(0);
 8007b64:	2000      	movs	r0, #0
 8007b66:	f7fe f8c9 	bl	8005cfc <save_to_flash>
    }
    else{
//		        printf("Data is bad");
    }

}
 8007b6a:	46c0      	nop			; (mov r8, r8)
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	b009      	add	sp, #36	; 0x24
 8007b70:	bd90      	pop	{r4, r7, pc}
 8007b72:	46c0      	nop			; (mov r8, r8)
 8007b74:	20000000 	.word	0x20000000
 8007b78:	20000001 	.word	0x20000001

08007b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007b80:	b672      	cpsid	i
}
 8007b82:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8007b84:	e7fe      	b.n	8007b84 <Error_Handler+0x8>
	...

08007b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b8e:	4b0f      	ldr	r3, [pc, #60]	; (8007bcc <HAL_MspInit+0x44>)
 8007b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b92:	4b0e      	ldr	r3, [pc, #56]	; (8007bcc <HAL_MspInit+0x44>)
 8007b94:	2101      	movs	r1, #1
 8007b96:	430a      	orrs	r2, r1
 8007b98:	641a      	str	r2, [r3, #64]	; 0x40
 8007b9a:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <HAL_MspInit+0x44>)
 8007b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	607b      	str	r3, [r7, #4]
 8007ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ba6:	4b09      	ldr	r3, [pc, #36]	; (8007bcc <HAL_MspInit+0x44>)
 8007ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007baa:	4b08      	ldr	r3, [pc, #32]	; (8007bcc <HAL_MspInit+0x44>)
 8007bac:	2180      	movs	r1, #128	; 0x80
 8007bae:	0549      	lsls	r1, r1, #21
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8007bb4:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <HAL_MspInit+0x44>)
 8007bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bb8:	2380      	movs	r3, #128	; 0x80
 8007bba:	055b      	lsls	r3, r3, #21
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	603b      	str	r3, [r7, #0]
 8007bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007bc2:	46c0      	nop			; (mov r8, r8)
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	b002      	add	sp, #8
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	46c0      	nop			; (mov r8, r8)
 8007bcc:	40021000 	.word	0x40021000

08007bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007bd0:	b590      	push	{r4, r7, lr}
 8007bd2:	b08b      	sub	sp, #44	; 0x2c
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bd8:	2414      	movs	r4, #20
 8007bda:	193b      	adds	r3, r7, r4
 8007bdc:	0018      	movs	r0, r3
 8007bde:	2314      	movs	r3, #20
 8007be0:	001a      	movs	r2, r3
 8007be2:	2100      	movs	r1, #0
 8007be4:	f006 fab7 	bl	800e156 <memset>
  if(hspi->Instance==SPI1)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a1f      	ldr	r2, [pc, #124]	; (8007c6c <HAL_SPI_MspInit+0x9c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d137      	bne.n	8007c62 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007bf2:	4b1f      	ldr	r3, [pc, #124]	; (8007c70 <HAL_SPI_MspInit+0xa0>)
 8007bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bf6:	4b1e      	ldr	r3, [pc, #120]	; (8007c70 <HAL_SPI_MspInit+0xa0>)
 8007bf8:	2180      	movs	r1, #128	; 0x80
 8007bfa:	0149      	lsls	r1, r1, #5
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	641a      	str	r2, [r3, #64]	; 0x40
 8007c00:	4b1b      	ldr	r3, [pc, #108]	; (8007c70 <HAL_SPI_MspInit+0xa0>)
 8007c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c04:	2380      	movs	r3, #128	; 0x80
 8007c06:	015b      	lsls	r3, r3, #5
 8007c08:	4013      	ands	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]
 8007c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c0e:	4b18      	ldr	r3, [pc, #96]	; (8007c70 <HAL_SPI_MspInit+0xa0>)
 8007c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c12:	4b17      	ldr	r3, [pc, #92]	; (8007c70 <HAL_SPI_MspInit+0xa0>)
 8007c14:	2102      	movs	r1, #2
 8007c16:	430a      	orrs	r2, r1
 8007c18:	635a      	str	r2, [r3, #52]	; 0x34
 8007c1a:	4b15      	ldr	r3, [pc, #84]	; (8007c70 <HAL_SPI_MspInit+0xa0>)
 8007c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1e:	2202      	movs	r2, #2
 8007c20:	4013      	ands	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8007c26:	0021      	movs	r1, r4
 8007c28:	187b      	adds	r3, r7, r1
 8007c2a:	2238      	movs	r2, #56	; 0x38
 8007c2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c2e:	187b      	adds	r3, r7, r1
 8007c30:	2202      	movs	r2, #2
 8007c32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c34:	187b      	adds	r3, r7, r1
 8007c36:	2200      	movs	r2, #0
 8007c38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c3a:	187b      	adds	r3, r7, r1
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8007c40:	187b      	adds	r3, r7, r1
 8007c42:	2200      	movs	r2, #0
 8007c44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c46:	187b      	adds	r3, r7, r1
 8007c48:	4a0a      	ldr	r2, [pc, #40]	; (8007c74 <HAL_SPI_MspInit+0xa4>)
 8007c4a:	0019      	movs	r1, r3
 8007c4c:	0010      	movs	r0, r2
 8007c4e:	f001 fab7 	bl	80091c0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8007c52:	2200      	movs	r2, #0
 8007c54:	2103      	movs	r1, #3
 8007c56:	2019      	movs	r0, #25
 8007c58:	f001 f9b4 	bl	8008fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007c5c:	2019      	movs	r0, #25
 8007c5e:	f001 f9c6 	bl	8008fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007c62:	46c0      	nop			; (mov r8, r8)
 8007c64:	46bd      	mov	sp, r7
 8007c66:	b00b      	add	sp, #44	; 0x2c
 8007c68:	bd90      	pop	{r4, r7, pc}
 8007c6a:	46c0      	nop			; (mov r8, r8)
 8007c6c:	40013000 	.word	0x40013000
 8007c70:	40021000 	.word	0x40021000
 8007c74:	50000400 	.word	0x50000400

08007c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007c78:	b590      	push	{r4, r7, lr}
 8007c7a:	b08d      	sub	sp, #52	; 0x34
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c80:	241c      	movs	r4, #28
 8007c82:	193b      	adds	r3, r7, r4
 8007c84:	0018      	movs	r0, r3
 8007c86:	2314      	movs	r3, #20
 8007c88:	001a      	movs	r2, r3
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	f006 fa63 	bl	800e156 <memset>
  if(htim_base->Instance==TIM3)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a47      	ldr	r2, [pc, #284]	; (8007db4 <HAL_TIM_Base_MspInit+0x13c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d137      	bne.n	8007d0a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007c9a:	4b47      	ldr	r3, [pc, #284]	; (8007db8 <HAL_TIM_Base_MspInit+0x140>)
 8007c9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c9e:	4b46      	ldr	r3, [pc, #280]	; (8007db8 <HAL_TIM_Base_MspInit+0x140>)
 8007ca0:	2102      	movs	r1, #2
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	63da      	str	r2, [r3, #60]	; 0x3c
 8007ca6:	4b44      	ldr	r3, [pc, #272]	; (8007db8 <HAL_TIM_Base_MspInit+0x140>)
 8007ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007caa:	2202      	movs	r2, #2
 8007cac:	4013      	ands	r3, r2
 8007cae:	61bb      	str	r3, [r7, #24]
 8007cb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cb2:	4b41      	ldr	r3, [pc, #260]	; (8007db8 <HAL_TIM_Base_MspInit+0x140>)
 8007cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cb6:	4b40      	ldr	r3, [pc, #256]	; (8007db8 <HAL_TIM_Base_MspInit+0x140>)
 8007cb8:	2101      	movs	r1, #1
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8007cbe:	4b3e      	ldr	r3, [pc, #248]	; (8007db8 <HAL_TIM_Base_MspInit+0x140>)
 8007cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RI_Pin;
 8007cca:	0021      	movs	r1, r4
 8007ccc:	187b      	adds	r3, r7, r1
 8007cce:	2240      	movs	r2, #64	; 0x40
 8007cd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cd2:	187b      	adds	r3, r7, r1
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007cd8:	187b      	adds	r3, r7, r1
 8007cda:	2202      	movs	r2, #2
 8007cdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cde:	187b      	adds	r3, r7, r1
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8007ce4:	187b      	adds	r3, r7, r1
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RI_GPIO_Port, &GPIO_InitStruct);
 8007cea:	187a      	adds	r2, r7, r1
 8007cec:	23a0      	movs	r3, #160	; 0xa0
 8007cee:	05db      	lsls	r3, r3, #23
 8007cf0:	0011      	movs	r1, r2
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	f001 fa64 	bl	80091c0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2103      	movs	r1, #3
 8007cfc:	2010      	movs	r0, #16
 8007cfe:	f001 f961 	bl	8008fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007d02:	2010      	movs	r0, #16
 8007d04:	f001 f973 	bl	8008fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8007d08:	e050      	b.n	8007dac <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM6)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a2b      	ldr	r2, [pc, #172]	; (8007dbc <HAL_TIM_Base_MspInit+0x144>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d114      	bne.n	8007d3e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007d14:	4b28      	ldr	r3, [pc, #160]	; (8007db8 <HAL_TIM_Base_MspInit+0x140>)
 8007d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d18:	4b27      	ldr	r3, [pc, #156]	; (8007db8 <HAL_TIM_Base_MspInit+0x140>)
 8007d1a:	2110      	movs	r1, #16
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007d20:	4b25      	ldr	r3, [pc, #148]	; (8007db8 <HAL_TIM_Base_MspInit+0x140>)
 8007d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d24:	2210      	movs	r2, #16
 8007d26:	4013      	ands	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]
 8007d2a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2103      	movs	r1, #3
 8007d30:	2011      	movs	r0, #17
 8007d32:	f001 f947 	bl	8008fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8007d36:	2011      	movs	r0, #17
 8007d38:	f001 f959 	bl	8008fee <HAL_NVIC_EnableIRQ>
}
 8007d3c:	e036      	b.n	8007dac <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM14)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a1f      	ldr	r2, [pc, #124]	; (8007dc0 <HAL_TIM_Base_MspInit+0x148>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d116      	bne.n	8007d76 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8007d48:	4b1b      	ldr	r3, [pc, #108]	; (8007db8 <HAL_TIM_Base_MspInit+0x140>)
 8007d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d4c:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <HAL_TIM_Base_MspInit+0x140>)
 8007d4e:	2180      	movs	r1, #128	; 0x80
 8007d50:	0209      	lsls	r1, r1, #8
 8007d52:	430a      	orrs	r2, r1
 8007d54:	641a      	str	r2, [r3, #64]	; 0x40
 8007d56:	4b18      	ldr	r3, [pc, #96]	; (8007db8 <HAL_TIM_Base_MspInit+0x140>)
 8007d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d5a:	2380      	movs	r3, #128	; 0x80
 8007d5c:	021b      	lsls	r3, r3, #8
 8007d5e:	4013      	ands	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8007d64:	2200      	movs	r2, #0
 8007d66:	2102      	movs	r1, #2
 8007d68:	2013      	movs	r0, #19
 8007d6a:	f001 f92b 	bl	8008fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8007d6e:	2013      	movs	r0, #19
 8007d70:	f001 f93d 	bl	8008fee <HAL_NVIC_EnableIRQ>
}
 8007d74:	e01a      	b.n	8007dac <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM17)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a12      	ldr	r2, [pc, #72]	; (8007dc4 <HAL_TIM_Base_MspInit+0x14c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d115      	bne.n	8007dac <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8007d80:	4b0d      	ldr	r3, [pc, #52]	; (8007db8 <HAL_TIM_Base_MspInit+0x140>)
 8007d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d84:	4b0c      	ldr	r3, [pc, #48]	; (8007db8 <HAL_TIM_Base_MspInit+0x140>)
 8007d86:	2180      	movs	r1, #128	; 0x80
 8007d88:	02c9      	lsls	r1, r1, #11
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	641a      	str	r2, [r3, #64]	; 0x40
 8007d8e:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <HAL_TIM_Base_MspInit+0x140>)
 8007d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d92:	2380      	movs	r3, #128	; 0x80
 8007d94:	02db      	lsls	r3, r3, #11
 8007d96:	4013      	ands	r3, r2
 8007d98:	60bb      	str	r3, [r7, #8]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 0);
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2103      	movs	r1, #3
 8007da0:	2016      	movs	r0, #22
 8007da2:	f001 f90f 	bl	8008fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8007da6:	2016      	movs	r0, #22
 8007da8:	f001 f921 	bl	8008fee <HAL_NVIC_EnableIRQ>
}
 8007dac:	46c0      	nop			; (mov r8, r8)
 8007dae:	46bd      	mov	sp, r7
 8007db0:	b00d      	add	sp, #52	; 0x34
 8007db2:	bd90      	pop	{r4, r7, pc}
 8007db4:	40000400 	.word	0x40000400
 8007db8:	40021000 	.word	0x40021000
 8007dbc:	40001000 	.word	0x40001000
 8007dc0:	40002000 	.word	0x40002000
 8007dc4:	40014800 	.word	0x40014800

08007dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007dc8:	b590      	push	{r4, r7, lr}
 8007dca:	b099      	sub	sp, #100	; 0x64
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dd0:	234c      	movs	r3, #76	; 0x4c
 8007dd2:	18fb      	adds	r3, r7, r3
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	2314      	movs	r3, #20
 8007dd8:	001a      	movs	r2, r3
 8007dda:	2100      	movs	r1, #0
 8007ddc:	f006 f9bb 	bl	800e156 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007de0:	2430      	movs	r4, #48	; 0x30
 8007de2:	193b      	adds	r3, r7, r4
 8007de4:	0018      	movs	r0, r3
 8007de6:	231c      	movs	r3, #28
 8007de8:	001a      	movs	r2, r3
 8007dea:	2100      	movs	r1, #0
 8007dec:	f006 f9b3 	bl	800e156 <memset>
  if(huart->Instance==USART1)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a9e      	ldr	r2, [pc, #632]	; (8008070 <HAL_UART_MspInit+0x2a8>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d148      	bne.n	8007e8c <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007dfa:	193b      	adds	r3, r7, r4
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8007e00:	193b      	adds	r3, r7, r4
 8007e02:	2200      	movs	r2, #0
 8007e04:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007e06:	193b      	adds	r3, r7, r4
 8007e08:	0018      	movs	r0, r3
 8007e0a:	f002 f899 	bl	8009f40 <HAL_RCCEx_PeriphCLKConfig>
 8007e0e:	1e03      	subs	r3, r0, #0
 8007e10:	d001      	beq.n	8007e16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007e12:	f7ff feb3 	bl	8007b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007e16:	4b97      	ldr	r3, [pc, #604]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e1a:	4b96      	ldr	r3, [pc, #600]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007e1c:	2180      	movs	r1, #128	; 0x80
 8007e1e:	01c9      	lsls	r1, r1, #7
 8007e20:	430a      	orrs	r2, r1
 8007e22:	641a      	str	r2, [r3, #64]	; 0x40
 8007e24:	4b93      	ldr	r3, [pc, #588]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e28:	2380      	movs	r3, #128	; 0x80
 8007e2a:	01db      	lsls	r3, r3, #7
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e32:	4b90      	ldr	r3, [pc, #576]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e36:	4b8f      	ldr	r3, [pc, #572]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007e38:	2101      	movs	r1, #1
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8007e3e:	4b8d      	ldr	r3, [pc, #564]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e42:	2201      	movs	r2, #1
 8007e44:	4013      	ands	r3, r2
 8007e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007e4a:	214c      	movs	r1, #76	; 0x4c
 8007e4c:	187b      	adds	r3, r7, r1
 8007e4e:	22c0      	movs	r2, #192	; 0xc0
 8007e50:	00d2      	lsls	r2, r2, #3
 8007e52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e54:	187b      	adds	r3, r7, r1
 8007e56:	2202      	movs	r2, #2
 8007e58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e5a:	187b      	adds	r3, r7, r1
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e60:	187b      	adds	r3, r7, r1
 8007e62:	2200      	movs	r2, #0
 8007e64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8007e66:	187b      	adds	r3, r7, r1
 8007e68:	2201      	movs	r2, #1
 8007e6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e6c:	187a      	adds	r2, r7, r1
 8007e6e:	23a0      	movs	r3, #160	; 0xa0
 8007e70:	05db      	lsls	r3, r3, #23
 8007e72:	0011      	movs	r1, r2
 8007e74:	0018      	movs	r0, r3
 8007e76:	f001 f9a3 	bl	80091c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2103      	movs	r1, #3
 8007e7e:	201b      	movs	r0, #27
 8007e80:	f001 f8a0 	bl	8008fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007e84:	201b      	movs	r0, #27
 8007e86:	f001 f8b2 	bl	8008fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8007e8a:	e0ec      	b.n	8008066 <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART2)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a79      	ldr	r2, [pc, #484]	; (8008078 <HAL_UART_MspInit+0x2b0>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d148      	bne.n	8007f28 <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007e96:	2130      	movs	r1, #48	; 0x30
 8007e98:	187b      	adds	r3, r7, r1
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007e9e:	187b      	adds	r3, r7, r1
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007ea4:	187b      	adds	r3, r7, r1
 8007ea6:	0018      	movs	r0, r3
 8007ea8:	f002 f84a 	bl	8009f40 <HAL_RCCEx_PeriphCLKConfig>
 8007eac:	1e03      	subs	r3, r0, #0
 8007eae:	d001      	beq.n	8007eb4 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8007eb0:	f7ff fe64 	bl	8007b7c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007eb4:	4b6f      	ldr	r3, [pc, #444]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007eb8:	4b6e      	ldr	r3, [pc, #440]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007eba:	2180      	movs	r1, #128	; 0x80
 8007ebc:	0289      	lsls	r1, r1, #10
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	63da      	str	r2, [r3, #60]	; 0x3c
 8007ec2:	4b6c      	ldr	r3, [pc, #432]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ec6:	2380      	movs	r3, #128	; 0x80
 8007ec8:	029b      	lsls	r3, r3, #10
 8007eca:	4013      	ands	r3, r2
 8007ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ed0:	4b68      	ldr	r3, [pc, #416]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ed4:	4b67      	ldr	r3, [pc, #412]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	635a      	str	r2, [r3, #52]	; 0x34
 8007edc:	4b65      	ldr	r3, [pc, #404]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	623b      	str	r3, [r7, #32]
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GNS_TX_Pin|GNS_RX_Pin;
 8007ee8:	214c      	movs	r1, #76	; 0x4c
 8007eea:	187b      	adds	r3, r7, r1
 8007eec:	220c      	movs	r2, #12
 8007eee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ef0:	187b      	adds	r3, r7, r1
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ef6:	187b      	adds	r3, r7, r1
 8007ef8:	2200      	movs	r2, #0
 8007efa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007efc:	187b      	adds	r3, r7, r1
 8007efe:	2200      	movs	r2, #0
 8007f00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007f02:	187b      	adds	r3, r7, r1
 8007f04:	2201      	movs	r2, #1
 8007f06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f08:	187a      	adds	r2, r7, r1
 8007f0a:	23a0      	movs	r3, #160	; 0xa0
 8007f0c:	05db      	lsls	r3, r3, #23
 8007f0e:	0011      	movs	r1, r2
 8007f10:	0018      	movs	r0, r3
 8007f12:	f001 f955 	bl	80091c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8007f16:	2200      	movs	r2, #0
 8007f18:	2103      	movs	r1, #3
 8007f1a:	201c      	movs	r0, #28
 8007f1c:	f001 f852 	bl	8008fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007f20:	201c      	movs	r0, #28
 8007f22:	f001 f864 	bl	8008fee <HAL_NVIC_EnableIRQ>
}
 8007f26:	e09e      	b.n	8008066 <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART3)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a53      	ldr	r2, [pc, #332]	; (800807c <HAL_UART_MspInit+0x2b4>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d15b      	bne.n	8007fea <HAL_UART_MspInit+0x222>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007f32:	4b50      	ldr	r3, [pc, #320]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f36:	4b4f      	ldr	r3, [pc, #316]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007f38:	2180      	movs	r1, #128	; 0x80
 8007f3a:	02c9      	lsls	r1, r1, #11
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007f40:	4b4c      	ldr	r3, [pc, #304]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f44:	2380      	movs	r3, #128	; 0x80
 8007f46:	02db      	lsls	r3, r3, #11
 8007f48:	4013      	ands	r3, r2
 8007f4a:	61fb      	str	r3, [r7, #28]
 8007f4c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f4e:	4b49      	ldr	r3, [pc, #292]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f52:	4b48      	ldr	r3, [pc, #288]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007f54:	2101      	movs	r1, #1
 8007f56:	430a      	orrs	r2, r1
 8007f58:	635a      	str	r2, [r3, #52]	; 0x34
 8007f5a:	4b46      	ldr	r3, [pc, #280]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5e:	2201      	movs	r2, #1
 8007f60:	4013      	ands	r3, r2
 8007f62:	61bb      	str	r3, [r7, #24]
 8007f64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f66:	4b43      	ldr	r3, [pc, #268]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f6a:	4b42      	ldr	r3, [pc, #264]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007f6c:	2102      	movs	r1, #2
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	635a      	str	r2, [r3, #52]	; 0x34
 8007f72:	4b40      	ldr	r3, [pc, #256]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f76:	2202      	movs	r2, #2
 8007f78:	4013      	ands	r3, r2
 8007f7a:	617b      	str	r3, [r7, #20]
 8007f7c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007f7e:	244c      	movs	r4, #76	; 0x4c
 8007f80:	193b      	adds	r3, r7, r4
 8007f82:	2220      	movs	r2, #32
 8007f84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f86:	193b      	adds	r3, r7, r4
 8007f88:	2202      	movs	r2, #2
 8007f8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f8c:	193b      	adds	r3, r7, r4
 8007f8e:	2200      	movs	r2, #0
 8007f90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f92:	193b      	adds	r3, r7, r4
 8007f94:	2200      	movs	r2, #0
 8007f96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8007f98:	193b      	adds	r3, r7, r4
 8007f9a:	2204      	movs	r2, #4
 8007f9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f9e:	193a      	adds	r2, r7, r4
 8007fa0:	23a0      	movs	r3, #160	; 0xa0
 8007fa2:	05db      	lsls	r3, r3, #23
 8007fa4:	0011      	movs	r1, r2
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	f001 f90a 	bl	80091c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007fac:	0021      	movs	r1, r4
 8007fae:	187b      	adds	r3, r7, r1
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fb4:	187b      	adds	r3, r7, r1
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fba:	187b      	adds	r3, r7, r1
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fc0:	187b      	adds	r3, r7, r1
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8007fc6:	187b      	adds	r3, r7, r1
 8007fc8:	2204      	movs	r2, #4
 8007fca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fcc:	187b      	adds	r3, r7, r1
 8007fce:	4a2c      	ldr	r2, [pc, #176]	; (8008080 <HAL_UART_MspInit+0x2b8>)
 8007fd0:	0019      	movs	r1, r3
 8007fd2:	0010      	movs	r0, r2
 8007fd4:	f001 f8f4 	bl	80091c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2103      	movs	r1, #3
 8007fdc:	201d      	movs	r0, #29
 8007fde:	f000 fff1 	bl	8008fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8007fe2:	201d      	movs	r0, #29
 8007fe4:	f001 f803 	bl	8008fee <HAL_NVIC_EnableIRQ>
}
 8007fe8:	e03d      	b.n	8008066 <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART4)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a25      	ldr	r2, [pc, #148]	; (8008084 <HAL_UART_MspInit+0x2bc>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d138      	bne.n	8008066 <HAL_UART_MspInit+0x29e>
    __HAL_RCC_USART4_CLK_ENABLE();
 8007ff4:	4b1f      	ldr	r3, [pc, #124]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ff8:	4b1e      	ldr	r3, [pc, #120]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8007ffa:	2180      	movs	r1, #128	; 0x80
 8007ffc:	0309      	lsls	r1, r1, #12
 8007ffe:	430a      	orrs	r2, r1
 8008000:	63da      	str	r2, [r3, #60]	; 0x3c
 8008002:	4b1c      	ldr	r3, [pc, #112]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8008004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008006:	2380      	movs	r3, #128	; 0x80
 8008008:	031b      	lsls	r3, r3, #12
 800800a:	4013      	ands	r3, r2
 800800c:	613b      	str	r3, [r7, #16]
 800800e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008010:	4b18      	ldr	r3, [pc, #96]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8008012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008014:	4b17      	ldr	r3, [pc, #92]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 8008016:	2101      	movs	r1, #1
 8008018:	430a      	orrs	r2, r1
 800801a:	635a      	str	r2, [r3, #52]	; 0x34
 800801c:	4b15      	ldr	r3, [pc, #84]	; (8008074 <HAL_UART_MspInit+0x2ac>)
 800801e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008020:	2201      	movs	r2, #1
 8008022:	4013      	ands	r3, r2
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8008028:	214c      	movs	r1, #76	; 0x4c
 800802a:	187b      	adds	r3, r7, r1
 800802c:	2203      	movs	r2, #3
 800802e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008030:	187b      	adds	r3, r7, r1
 8008032:	2202      	movs	r2, #2
 8008034:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008036:	187b      	adds	r3, r7, r1
 8008038:	2200      	movs	r2, #0
 800803a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800803c:	187b      	adds	r3, r7, r1
 800803e:	2200      	movs	r2, #0
 8008040:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8008042:	187b      	adds	r3, r7, r1
 8008044:	2204      	movs	r2, #4
 8008046:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008048:	187a      	adds	r2, r7, r1
 800804a:	23a0      	movs	r3, #160	; 0xa0
 800804c:	05db      	lsls	r3, r3, #23
 800804e:	0011      	movs	r1, r2
 8008050:	0018      	movs	r0, r3
 8008052:	f001 f8b5 	bl	80091c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8008056:	2200      	movs	r2, #0
 8008058:	2103      	movs	r1, #3
 800805a:	201d      	movs	r0, #29
 800805c:	f000 ffb2 	bl	8008fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8008060:	201d      	movs	r0, #29
 8008062:	f000 ffc4 	bl	8008fee <HAL_NVIC_EnableIRQ>
}
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	46bd      	mov	sp, r7
 800806a:	b019      	add	sp, #100	; 0x64
 800806c:	bd90      	pop	{r4, r7, pc}
 800806e:	46c0      	nop			; (mov r8, r8)
 8008070:	40013800 	.word	0x40013800
 8008074:	40021000 	.word	0x40021000
 8008078:	40004400 	.word	0x40004400
 800807c:	40004800 	.word	0x40004800
 8008080:	50000400 	.word	0x50000400
 8008084:	40004c00 	.word	0x40004c00

08008088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800808c:	e7fe      	b.n	800808c <NMI_Handler+0x4>

0800808e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008092:	e7fe      	b.n	8008092 <HardFault_Handler+0x4>

08008094 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008098:	46c0      	nop			; (mov r8, r8)
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80080a2:	46c0      	nop			; (mov r8, r8)
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80080ac:	f000 fe9e 	bl	8008dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80080b0:	46c0      	nop			; (mov r8, r8)
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
	...

080080b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80080bc:	4b03      	ldr	r3, [pc, #12]	; (80080cc <TIM3_IRQHandler+0x14>)
 80080be:	0018      	movs	r0, r3
 80080c0:	f003 fafe 	bl	800b6c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80080c4:	46c0      	nop			; (mov r8, r8)
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	20000348 	.word	0x20000348

080080d0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80080d4:	4b03      	ldr	r3, [pc, #12]	; (80080e4 <TIM6_IRQHandler+0x14>)
 80080d6:	0018      	movs	r0, r3
 80080d8:	f003 faf2 	bl	800b6c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80080dc:	46c0      	nop			; (mov r8, r8)
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	46c0      	nop			; (mov r8, r8)
 80080e4:	20000394 	.word	0x20000394

080080e8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80080ec:	4b03      	ldr	r3, [pc, #12]	; (80080fc <TIM14_IRQHandler+0x14>)
 80080ee:	0018      	movs	r0, r3
 80080f0:	f003 fae6 	bl	800b6c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80080f4:	46c0      	nop			; (mov r8, r8)
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	46c0      	nop			; (mov r8, r8)
 80080fc:	200003e0 	.word	0x200003e0

08008100 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8008104:	4b03      	ldr	r3, [pc, #12]	; (8008114 <TIM17_IRQHandler+0x14>)
 8008106:	0018      	movs	r0, r3
 8008108:	f003 fada 	bl	800b6c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800810c:	46c0      	nop			; (mov r8, r8)
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	46c0      	nop			; (mov r8, r8)
 8008114:	2000042c 	.word	0x2000042c

08008118 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800811c:	4b03      	ldr	r3, [pc, #12]	; (800812c <SPI1_IRQHandler+0x14>)
 800811e:	0018      	movs	r0, r3
 8008120:	f002 fd70 	bl	800ac04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8008124:	46c0      	nop			; (mov r8, r8)
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	200002e4 	.word	0x200002e4

08008130 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008134:	4b03      	ldr	r3, [pc, #12]	; (8008144 <USART1_IRQHandler+0x14>)
 8008136:	0018      	movs	r0, r3
 8008138:	f004 f9a6 	bl	800c488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800813c:	46c0      	nop			; (mov r8, r8)
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	46c0      	nop			; (mov r8, r8)
 8008144:	20000478 	.word	0x20000478

08008148 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800814c:	4b03      	ldr	r3, [pc, #12]	; (800815c <USART2_IRQHandler+0x14>)
 800814e:	0018      	movs	r0, r3
 8008150:	f004 f99a 	bl	800c488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008154:	46c0      	nop			; (mov r8, r8)
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	46c0      	nop			; (mov r8, r8)
 800815c:	2000050c 	.word	0x2000050c

08008160 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008164:	4b05      	ldr	r3, [pc, #20]	; (800817c <USART3_4_IRQHandler+0x1c>)
 8008166:	0018      	movs	r0, r3
 8008168:	f004 f98e 	bl	800c488 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 800816c:	4b04      	ldr	r3, [pc, #16]	; (8008180 <USART3_4_IRQHandler+0x20>)
 800816e:	0018      	movs	r0, r3
 8008170:	f004 f98a 	bl	800c488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8008174:	46c0      	nop			; (mov r8, r8)
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	46c0      	nop			; (mov r8, r8)
 800817c:	200005a0 	.word	0x200005a0
 8008180:	20000634 	.word	0x20000634

08008184 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	af00      	add	r7, sp, #0
	return 1;
 8008188:	2301      	movs	r3, #1
}
 800818a:	0018      	movs	r0, r3
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <_kill>:

int _kill(int pid, int sig)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800819a:	f005 ffa9 	bl	800e0f0 <__errno>
 800819e:	0003      	movs	r3, r0
 80081a0:	2216      	movs	r2, #22
 80081a2:	601a      	str	r2, [r3, #0]
	return -1;
 80081a4:	2301      	movs	r3, #1
 80081a6:	425b      	negs	r3, r3
}
 80081a8:	0018      	movs	r0, r3
 80081aa:	46bd      	mov	sp, r7
 80081ac:	b002      	add	sp, #8
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <_exit>:

void _exit (int status)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80081b8:	2301      	movs	r3, #1
 80081ba:	425a      	negs	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	0011      	movs	r1, r2
 80081c0:	0018      	movs	r0, r3
 80081c2:	f7ff ffe5 	bl	8008190 <_kill>
	while (1) {}		/* Make sure we hang here */
 80081c6:	e7fe      	b.n	80081c6 <_exit+0x16>

080081c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081d4:	2300      	movs	r3, #0
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	e00a      	b.n	80081f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80081da:	e000      	b.n	80081de <_read+0x16>
 80081dc:	bf00      	nop
 80081de:	0001      	movs	r1, r0
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	60ba      	str	r2, [r7, #8]
 80081e6:	b2ca      	uxtb	r2, r1
 80081e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	3301      	adds	r3, #1
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	dbf0      	blt.n	80081da <_read+0x12>
	}

return len;
 80081f8:	687b      	ldr	r3, [r7, #4]
}
 80081fa:	0018      	movs	r0, r3
 80081fc:	46bd      	mov	sp, r7
 80081fe:	b006      	add	sp, #24
 8008200:	bd80      	pop	{r7, pc}

08008202 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b086      	sub	sp, #24
 8008206:	af00      	add	r7, sp, #0
 8008208:	60f8      	str	r0, [r7, #12]
 800820a:	60b9      	str	r1, [r7, #8]
 800820c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800820e:	2300      	movs	r3, #0
 8008210:	617b      	str	r3, [r7, #20]
 8008212:	e009      	b.n	8008228 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	60ba      	str	r2, [r7, #8]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	0018      	movs	r0, r3
 800821e:	e000      	b.n	8008222 <_write+0x20>
 8008220:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	3301      	adds	r3, #1
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	429a      	cmp	r2, r3
 800822e:	dbf1      	blt.n	8008214 <_write+0x12>
	}
	return len;
 8008230:	687b      	ldr	r3, [r7, #4]
}
 8008232:	0018      	movs	r0, r3
 8008234:	46bd      	mov	sp, r7
 8008236:	b006      	add	sp, #24
 8008238:	bd80      	pop	{r7, pc}

0800823a <_close>:

int _close(int file)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b082      	sub	sp, #8
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
	return -1;
 8008242:	2301      	movs	r3, #1
 8008244:	425b      	negs	r3, r3
}
 8008246:	0018      	movs	r0, r3
 8008248:	46bd      	mov	sp, r7
 800824a:	b002      	add	sp, #8
 800824c:	bd80      	pop	{r7, pc}

0800824e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2280      	movs	r2, #128	; 0x80
 800825c:	0192      	lsls	r2, r2, #6
 800825e:	605a      	str	r2, [r3, #4]
	return 0;
 8008260:	2300      	movs	r3, #0
}
 8008262:	0018      	movs	r0, r3
 8008264:	46bd      	mov	sp, r7
 8008266:	b002      	add	sp, #8
 8008268:	bd80      	pop	{r7, pc}

0800826a <_isatty>:

int _isatty(int file)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
	return 1;
 8008272:	2301      	movs	r3, #1
}
 8008274:	0018      	movs	r0, r3
 8008276:	46bd      	mov	sp, r7
 8008278:	b002      	add	sp, #8
 800827a:	bd80      	pop	{r7, pc}

0800827c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
	return 0;
 8008288:	2300      	movs	r3, #0
}
 800828a:	0018      	movs	r0, r3
 800828c:	46bd      	mov	sp, r7
 800828e:	b004      	add	sp, #16
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800829c:	4a14      	ldr	r2, [pc, #80]	; (80082f0 <_sbrk+0x5c>)
 800829e:	4b15      	ldr	r3, [pc, #84]	; (80082f4 <_sbrk+0x60>)
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80082a8:	4b13      	ldr	r3, [pc, #76]	; (80082f8 <_sbrk+0x64>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80082b0:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <_sbrk+0x64>)
 80082b2:	4a12      	ldr	r2, [pc, #72]	; (80082fc <_sbrk+0x68>)
 80082b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80082b6:	4b10      	ldr	r3, [pc, #64]	; (80082f8 <_sbrk+0x64>)
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	18d3      	adds	r3, r2, r3
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d207      	bcs.n	80082d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80082c4:	f005 ff14 	bl	800e0f0 <__errno>
 80082c8:	0003      	movs	r3, r0
 80082ca:	220c      	movs	r2, #12
 80082cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80082ce:	2301      	movs	r3, #1
 80082d0:	425b      	negs	r3, r3
 80082d2:	e009      	b.n	80082e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80082d4:	4b08      	ldr	r3, [pc, #32]	; (80082f8 <_sbrk+0x64>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80082da:	4b07      	ldr	r3, [pc, #28]	; (80082f8 <_sbrk+0x64>)
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	18d2      	adds	r2, r2, r3
 80082e2:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <_sbrk+0x64>)
 80082e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80082e6:	68fb      	ldr	r3, [r7, #12]
}
 80082e8:	0018      	movs	r0, r3
 80082ea:	46bd      	mov	sp, r7
 80082ec:	b006      	add	sp, #24
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	20009000 	.word	0x20009000
 80082f4:	00000400 	.word	0x00000400
 80082f8:	20000cb8 	.word	0x20000cb8
 80082fc:	20000cf8 	.word	0x20000cf8

08008300 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008304:	46c0      	nop			; (mov r8, r8)
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800830c:	b590      	push	{r4, r7, lr}
 800830e:	b087      	sub	sp, #28
 8008310:	af02      	add	r7, sp, #8
 8008312:	0002      	movs	r2, r0
 8008314:	1dfb      	adds	r3, r7, #7
 8008316:	701a      	strb	r2, [r3, #0]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8008318:	240f      	movs	r4, #15
 800831a:	193a      	adds	r2, r7, r4
 800831c:	1df9      	adds	r1, r7, #7
 800831e:	4806      	ldr	r0, [pc, #24]	; (8008338 <W25qxx_Spi+0x2c>)
 8008320:	2364      	movs	r3, #100	; 0x64
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	2301      	movs	r3, #1
 8008326:	f002 fa9b 	bl	800a860 <HAL_SPI_TransmitReceive>
	return ret;
 800832a:	193b      	adds	r3, r7, r4
 800832c:	781b      	ldrb	r3, [r3, #0]
}
 800832e:	0018      	movs	r0, r3
 8008330:	46bd      	mov	sp, r7
 8008332:	b005      	add	sp, #20
 8008334:	bd90      	pop	{r4, r7, pc}
 8008336:	46c0      	nop			; (mov r8, r8)
 8008338:	200002e4 	.word	0x200002e4

0800833c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8008342:	2300      	movs	r3, #0
 8008344:	60fb      	str	r3, [r7, #12]
 8008346:	2300      	movs	r3, #0
 8008348:	60bb      	str	r3, [r7, #8]
 800834a:	2300      	movs	r3, #0
 800834c:	607b      	str	r3, [r7, #4]
 800834e:	2300      	movs	r3, #0
 8008350:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008352:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <W25qxx_ReadID+0x6c>)
 8008354:	2200      	movs	r2, #0
 8008356:	2108      	movs	r1, #8
 8008358:	0018      	movs	r0, r3
 800835a:	f001 f8b2 	bl	80094c2 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800835e:	209f      	movs	r0, #159	; 0x9f
 8008360:	f7ff ffd4 	bl	800830c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008364:	20a5      	movs	r0, #165	; 0xa5
 8008366:	f7ff ffd1 	bl	800830c <W25qxx_Spi>
 800836a:	0003      	movs	r3, r0
 800836c:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800836e:	20a5      	movs	r0, #165	; 0xa5
 8008370:	f7ff ffcc 	bl	800830c <W25qxx_Spi>
 8008374:	0003      	movs	r3, r0
 8008376:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008378:	20a5      	movs	r0, #165	; 0xa5
 800837a:	f7ff ffc7 	bl	800830c <W25qxx_Spi>
 800837e:	0003      	movs	r3, r0
 8008380:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008382:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <W25qxx_ReadID+0x6c>)
 8008384:	2201      	movs	r2, #1
 8008386:	2108      	movs	r1, #8
 8008388:	0018      	movs	r0, r3
 800838a:	f001 f89a 	bl	80094c2 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	041a      	lsls	r2, r3, #16
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	021b      	lsls	r3, r3, #8
 8008396:	4313      	orrs	r3, r2
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	4313      	orrs	r3, r2
 800839c:	60fb      	str	r3, [r7, #12]
	return Temp;
 800839e:	68fb      	ldr	r3, [r7, #12]
}
 80083a0:	0018      	movs	r0, r3
 80083a2:	46bd      	mov	sp, r7
 80083a4:	b004      	add	sp, #16
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	50000c00 	.word	0x50000c00

080083ac <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80083ac:	b590      	push	{r4, r7, lr}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80083b2:	4b1d      	ldr	r3, [pc, #116]	; (8008428 <W25qxx_ReadUniqID+0x7c>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	2108      	movs	r1, #8
 80083b8:	0018      	movs	r0, r3
 80083ba:	f001 f882 	bl	80094c2 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80083be:	204b      	movs	r0, #75	; 0x4b
 80083c0:	f7ff ffa4 	bl	800830c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80083c4:	1dfb      	adds	r3, r7, #7
 80083c6:	2200      	movs	r2, #0
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	e007      	b.n	80083dc <W25qxx_ReadUniqID+0x30>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80083cc:	20a5      	movs	r0, #165	; 0xa5
 80083ce:	f7ff ff9d 	bl	800830c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80083d2:	1dfb      	adds	r3, r7, #7
 80083d4:	781a      	ldrb	r2, [r3, #0]
 80083d6:	1dfb      	adds	r3, r7, #7
 80083d8:	3201      	adds	r2, #1
 80083da:	701a      	strb	r2, [r3, #0]
 80083dc:	1dfb      	adds	r3, r7, #7
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d9f3      	bls.n	80083cc <W25qxx_ReadUniqID+0x20>
	for (uint8_t i = 0; i < 8; i++)
 80083e4:	1dbb      	adds	r3, r7, #6
 80083e6:	2200      	movs	r2, #0
 80083e8:	701a      	strb	r2, [r3, #0]
 80083ea:	e00e      	b.n	800840a <W25qxx_ReadUniqID+0x5e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80083ec:	1dbb      	adds	r3, r7, #6
 80083ee:	781c      	ldrb	r4, [r3, #0]
 80083f0:	20a5      	movs	r0, #165	; 0xa5
 80083f2:	f7ff ff8b 	bl	800830c <W25qxx_Spi>
 80083f6:	0003      	movs	r3, r0
 80083f8:	001a      	movs	r2, r3
 80083fa:	4b0c      	ldr	r3, [pc, #48]	; (800842c <W25qxx_ReadUniqID+0x80>)
 80083fc:	191b      	adds	r3, r3, r4
 80083fe:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8008400:	1dbb      	adds	r3, r7, #6
 8008402:	781a      	ldrb	r2, [r3, #0]
 8008404:	1dbb      	adds	r3, r7, #6
 8008406:	3201      	adds	r2, #1
 8008408:	701a      	strb	r2, [r3, #0]
 800840a:	1dbb      	adds	r3, r7, #6
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b07      	cmp	r3, #7
 8008410:	d9ec      	bls.n	80083ec <W25qxx_ReadUniqID+0x40>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008412:	4b05      	ldr	r3, [pc, #20]	; (8008428 <W25qxx_ReadUniqID+0x7c>)
 8008414:	2201      	movs	r2, #1
 8008416:	2108      	movs	r1, #8
 8008418:	0018      	movs	r0, r3
 800841a:	f001 f852 	bl	80094c2 <HAL_GPIO_WritePin>
}
 800841e:	46c0      	nop			; (mov r8, r8)
 8008420:	46bd      	mov	sp, r7
 8008422:	b003      	add	sp, #12
 8008424:	bd90      	pop	{r4, r7, pc}
 8008426:	46c0      	nop			; (mov r8, r8)
 8008428:	50000c00 	.word	0x50000c00
 800842c:	20000cbc 	.word	0x20000cbc

08008430 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008434:	4b0a      	ldr	r3, [pc, #40]	; (8008460 <W25qxx_WriteEnable+0x30>)
 8008436:	2200      	movs	r2, #0
 8008438:	2108      	movs	r1, #8
 800843a:	0018      	movs	r0, r3
 800843c:	f001 f841 	bl	80094c2 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8008440:	2006      	movs	r0, #6
 8008442:	f7ff ff63 	bl	800830c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008446:	4b06      	ldr	r3, [pc, #24]	; (8008460 <W25qxx_WriteEnable+0x30>)
 8008448:	2201      	movs	r2, #1
 800844a:	2108      	movs	r1, #8
 800844c:	0018      	movs	r0, r3
 800844e:	f001 f838 	bl	80094c2 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8008452:	2001      	movs	r0, #1
 8008454:	f000 fce6 	bl	8008e24 <HAL_Delay>
}
 8008458:	46c0      	nop			; (mov r8, r8)
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	46c0      	nop			; (mov r8, r8)
 8008460:	50000c00 	.word	0x50000c00

08008464 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8008464:	b5b0      	push	{r4, r5, r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	0002      	movs	r2, r0
 800846c:	1dfb      	adds	r3, r7, #7
 800846e:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8008470:	240f      	movs	r4, #15
 8008472:	193b      	adds	r3, r7, r4
 8008474:	2200      	movs	r2, #0
 8008476:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008478:	4b24      	ldr	r3, [pc, #144]	; (800850c <W25qxx_ReadStatusRegister+0xa8>)
 800847a:	2200      	movs	r2, #0
 800847c:	2108      	movs	r1, #8
 800847e:	0018      	movs	r0, r3
 8008480:	f001 f81f 	bl	80094c2 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8008484:	1dfb      	adds	r3, r7, #7
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d10f      	bne.n	80084ac <W25qxx_ReadStatusRegister+0x48>
	{
		W25qxx_Spi(0x05);
 800848c:	2005      	movs	r0, #5
 800848e:	f7ff ff3d 	bl	800830c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008492:	0025      	movs	r5, r4
 8008494:	193c      	adds	r4, r7, r4
 8008496:	20a5      	movs	r0, #165	; 0xa5
 8008498:	f7ff ff38 	bl	800830c <W25qxx_Spi>
 800849c:	0003      	movs	r3, r0
 800849e:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister1 = status;
 80084a0:	4b1b      	ldr	r3, [pc, #108]	; (8008510 <W25qxx_ReadStatusRegister+0xac>)
 80084a2:	197a      	adds	r2, r7, r5
 80084a4:	2124      	movs	r1, #36	; 0x24
 80084a6:	7812      	ldrb	r2, [r2, #0]
 80084a8:	545a      	strb	r2, [r3, r1]
 80084aa:	e022      	b.n	80084f2 <W25qxx_ReadStatusRegister+0x8e>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80084ac:	1dfb      	adds	r3, r7, #7
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d10f      	bne.n	80084d4 <W25qxx_ReadStatusRegister+0x70>
	{
		W25qxx_Spi(0x35);
 80084b4:	2035      	movs	r0, #53	; 0x35
 80084b6:	f7ff ff29 	bl	800830c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80084ba:	250f      	movs	r5, #15
 80084bc:	197c      	adds	r4, r7, r5
 80084be:	20a5      	movs	r0, #165	; 0xa5
 80084c0:	f7ff ff24 	bl	800830c <W25qxx_Spi>
 80084c4:	0003      	movs	r3, r0
 80084c6:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister2 = status;
 80084c8:	4b11      	ldr	r3, [pc, #68]	; (8008510 <W25qxx_ReadStatusRegister+0xac>)
 80084ca:	197a      	adds	r2, r7, r5
 80084cc:	2125      	movs	r1, #37	; 0x25
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	545a      	strb	r2, [r3, r1]
 80084d2:	e00e      	b.n	80084f2 <W25qxx_ReadStatusRegister+0x8e>
	}
	else
	{
		W25qxx_Spi(0x15);
 80084d4:	2015      	movs	r0, #21
 80084d6:	f7ff ff19 	bl	800830c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80084da:	250f      	movs	r5, #15
 80084dc:	197c      	adds	r4, r7, r5
 80084de:	20a5      	movs	r0, #165	; 0xa5
 80084e0:	f7ff ff14 	bl	800830c <W25qxx_Spi>
 80084e4:	0003      	movs	r3, r0
 80084e6:	7023      	strb	r3, [r4, #0]
		w25qxx.StatusRegister3 = status;
 80084e8:	4b09      	ldr	r3, [pc, #36]	; (8008510 <W25qxx_ReadStatusRegister+0xac>)
 80084ea:	197a      	adds	r2, r7, r5
 80084ec:	2126      	movs	r1, #38	; 0x26
 80084ee:	7812      	ldrb	r2, [r2, #0]
 80084f0:	545a      	strb	r2, [r3, r1]
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80084f2:	4b06      	ldr	r3, [pc, #24]	; (800850c <W25qxx_ReadStatusRegister+0xa8>)
 80084f4:	2201      	movs	r2, #1
 80084f6:	2108      	movs	r1, #8
 80084f8:	0018      	movs	r0, r3
 80084fa:	f000 ffe2 	bl	80094c2 <HAL_GPIO_WritePin>
	return status;
 80084fe:	230f      	movs	r3, #15
 8008500:	18fb      	adds	r3, r7, r3
 8008502:	781b      	ldrb	r3, [r3, #0]
}
 8008504:	0018      	movs	r0, r3
 8008506:	46bd      	mov	sp, r7
 8008508:	b004      	add	sp, #16
 800850a:	bdb0      	pop	{r4, r5, r7, pc}
 800850c:	50000c00 	.word	0x50000c00
 8008510:	20000cbc 	.word	0x20000cbc

08008514 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8008518:	2001      	movs	r0, #1
 800851a:	f000 fc83 	bl	8008e24 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800851e:	4b12      	ldr	r3, [pc, #72]	; (8008568 <W25qxx_WaitForWriteEnd+0x54>)
 8008520:	2200      	movs	r2, #0
 8008522:	2108      	movs	r1, #8
 8008524:	0018      	movs	r0, r3
 8008526:	f000 ffcc 	bl	80094c2 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800852a:	2005      	movs	r0, #5
 800852c:	f7ff feee 	bl	800830c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008530:	20a5      	movs	r0, #165	; 0xa5
 8008532:	f7ff feeb 	bl	800830c <W25qxx_Spi>
 8008536:	0003      	movs	r3, r0
 8008538:	0019      	movs	r1, r3
 800853a:	4b0c      	ldr	r3, [pc, #48]	; (800856c <W25qxx_WaitForWriteEnd+0x58>)
 800853c:	2224      	movs	r2, #36	; 0x24
 800853e:	5499      	strb	r1, [r3, r2]
		W25qxx_Delay(1);
 8008540:	2001      	movs	r0, #1
 8008542:	f000 fc6f 	bl	8008e24 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8008546:	4b09      	ldr	r3, [pc, #36]	; (800856c <W25qxx_WaitForWriteEnd+0x58>)
 8008548:	2224      	movs	r2, #36	; 0x24
 800854a:	5c9b      	ldrb	r3, [r3, r2]
 800854c:	001a      	movs	r2, r3
 800854e:	2301      	movs	r3, #1
 8008550:	4013      	ands	r3, r2
 8008552:	d1ed      	bne.n	8008530 <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008554:	4b04      	ldr	r3, [pc, #16]	; (8008568 <W25qxx_WaitForWriteEnd+0x54>)
 8008556:	2201      	movs	r2, #1
 8008558:	2108      	movs	r1, #8
 800855a:	0018      	movs	r0, r3
 800855c:	f000 ffb1 	bl	80094c2 <HAL_GPIO_WritePin>
}
 8008560:	46c0      	nop			; (mov r8, r8)
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	46c0      	nop			; (mov r8, r8)
 8008568:	50000c00 	.word	0x50000c00
 800856c:	20000cbc 	.word	0x20000cbc

08008570 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8008576:	4b58      	ldr	r3, [pc, #352]	; (80086d8 <W25qxx_Init+0x168>)
 8008578:	2227      	movs	r2, #39	; 0x27
 800857a:	2101      	movs	r1, #1
 800857c:	5499      	strb	r1, [r3, r2]
	while (HAL_GetTick() < 100)
 800857e:	e002      	b.n	8008586 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8008580:	2001      	movs	r0, #1
 8008582:	f000 fc4f 	bl	8008e24 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8008586:	f000 fc43 	bl	8008e10 <HAL_GetTick>
 800858a:	0003      	movs	r3, r0
 800858c:	2b63      	cmp	r3, #99	; 0x63
 800858e:	d9f7      	bls.n	8008580 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008590:	4b52      	ldr	r3, [pc, #328]	; (80086dc <W25qxx_Init+0x16c>)
 8008592:	2201      	movs	r2, #1
 8008594:	2108      	movs	r1, #8
 8008596:	0018      	movs	r0, r3
 8008598:	f000 ff93 	bl	80094c2 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800859c:	2064      	movs	r0, #100	; 0x64
 800859e:	f000 fc41 	bl	8008e24 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80085a2:	f7ff fecb 	bl	800833c <W25qxx_ReadID>
 80085a6:	0003      	movs	r3, r0
 80085a8:	607b      	str	r3, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	22ff      	movs	r2, #255	; 0xff
 80085ae:	4013      	ands	r3, r2
 80085b0:	3b11      	subs	r3, #17
 80085b2:	2b0f      	cmp	r3, #15
 80085b4:	d84d      	bhi.n	8008652 <W25qxx_Init+0xe2>
 80085b6:	009a      	lsls	r2, r3, #2
 80085b8:	4b49      	ldr	r3, [pc, #292]	; (80086e0 <W25qxx_Init+0x170>)
 80085ba:	18d3      	adds	r3, r2, r3
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	469f      	mov	pc, r3
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80085c0:	4b45      	ldr	r3, [pc, #276]	; (80086d8 <W25qxx_Init+0x168>)
 80085c2:	220a      	movs	r2, #10
 80085c4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80085c6:	4b44      	ldr	r3, [pc, #272]	; (80086d8 <W25qxx_Init+0x168>)
 80085c8:	2280      	movs	r2, #128	; 0x80
 80085ca:	00d2      	lsls	r2, r2, #3
 80085cc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 80085ce:	e046      	b.n	800865e <W25qxx_Init+0xee>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80085d0:	4b41      	ldr	r3, [pc, #260]	; (80086d8 <W25qxx_Init+0x168>)
 80085d2:	2209      	movs	r2, #9
 80085d4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80085d6:	4b40      	ldr	r3, [pc, #256]	; (80086d8 <W25qxx_Init+0x168>)
 80085d8:	2280      	movs	r2, #128	; 0x80
 80085da:	0092      	lsls	r2, r2, #2
 80085dc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 80085de:	e03e      	b.n	800865e <W25qxx_Init+0xee>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80085e0:	4b3d      	ldr	r3, [pc, #244]	; (80086d8 <W25qxx_Init+0x168>)
 80085e2:	2208      	movs	r2, #8
 80085e4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80085e6:	4b3c      	ldr	r3, [pc, #240]	; (80086d8 <W25qxx_Init+0x168>)
 80085e8:	2280      	movs	r2, #128	; 0x80
 80085ea:	0052      	lsls	r2, r2, #1
 80085ec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 80085ee:	e036      	b.n	800865e <W25qxx_Init+0xee>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80085f0:	4b39      	ldr	r3, [pc, #228]	; (80086d8 <W25qxx_Init+0x168>)
 80085f2:	2207      	movs	r2, #7
 80085f4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80085f6:	4b38      	ldr	r3, [pc, #224]	; (80086d8 <W25qxx_Init+0x168>)
 80085f8:	2280      	movs	r2, #128	; 0x80
 80085fa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 80085fc:	e02f      	b.n	800865e <W25qxx_Init+0xee>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80085fe:	4b36      	ldr	r3, [pc, #216]	; (80086d8 <W25qxx_Init+0x168>)
 8008600:	2206      	movs	r2, #6
 8008602:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8008604:	4b34      	ldr	r3, [pc, #208]	; (80086d8 <W25qxx_Init+0x168>)
 8008606:	2240      	movs	r2, #64	; 0x40
 8008608:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800860a:	e028      	b.n	800865e <W25qxx_Init+0xee>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800860c:	4b32      	ldr	r3, [pc, #200]	; (80086d8 <W25qxx_Init+0x168>)
 800860e:	2205      	movs	r2, #5
 8008610:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8008612:	4b31      	ldr	r3, [pc, #196]	; (80086d8 <W25qxx_Init+0x168>)
 8008614:	2220      	movs	r2, #32
 8008616:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8008618:	e021      	b.n	800865e <W25qxx_Init+0xee>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800861a:	4b2f      	ldr	r3, [pc, #188]	; (80086d8 <W25qxx_Init+0x168>)
 800861c:	2204      	movs	r2, #4
 800861e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8008620:	4b2d      	ldr	r3, [pc, #180]	; (80086d8 <W25qxx_Init+0x168>)
 8008622:	2210      	movs	r2, #16
 8008624:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8008626:	e01a      	b.n	800865e <W25qxx_Init+0xee>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8008628:	4b2b      	ldr	r3, [pc, #172]	; (80086d8 <W25qxx_Init+0x168>)
 800862a:	2203      	movs	r2, #3
 800862c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800862e:	4b2a      	ldr	r3, [pc, #168]	; (80086d8 <W25qxx_Init+0x168>)
 8008630:	2208      	movs	r2, #8
 8008632:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8008634:	e013      	b.n	800865e <W25qxx_Init+0xee>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8008636:	4b28      	ldr	r3, [pc, #160]	; (80086d8 <W25qxx_Init+0x168>)
 8008638:	2202      	movs	r2, #2
 800863a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800863c:	4b26      	ldr	r3, [pc, #152]	; (80086d8 <W25qxx_Init+0x168>)
 800863e:	2204      	movs	r2, #4
 8008640:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8008642:	e00c      	b.n	800865e <W25qxx_Init+0xee>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8008644:	4b24      	ldr	r3, [pc, #144]	; (80086d8 <W25qxx_Init+0x168>)
 8008646:	2201      	movs	r2, #1
 8008648:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800864a:	4b23      	ldr	r3, [pc, #140]	; (80086d8 <W25qxx_Init+0x168>)
 800864c:	2202      	movs	r2, #2
 800864e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8008650:	e005      	b.n	800865e <W25qxx_Init+0xee>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8008652:	4b21      	ldr	r3, [pc, #132]	; (80086d8 <W25qxx_Init+0x168>)
 8008654:	2227      	movs	r2, #39	; 0x27
 8008656:	2100      	movs	r1, #0
 8008658:	5499      	strb	r1, [r3, r2]
		return false;
 800865a:	2300      	movs	r3, #0
 800865c:	e038      	b.n	80086d0 <W25qxx_Init+0x160>
	}
	w25qxx.PageSize = 256;
 800865e:	4b1e      	ldr	r3, [pc, #120]	; (80086d8 <W25qxx_Init+0x168>)
 8008660:	2280      	movs	r2, #128	; 0x80
 8008662:	0052      	lsls	r2, r2, #1
 8008664:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8008666:	4b1c      	ldr	r3, [pc, #112]	; (80086d8 <W25qxx_Init+0x168>)
 8008668:	2280      	movs	r2, #128	; 0x80
 800866a:	0152      	lsls	r2, r2, #5
 800866c:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800866e:	4b1a      	ldr	r3, [pc, #104]	; (80086d8 <W25qxx_Init+0x168>)
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	011a      	lsls	r2, r3, #4
 8008674:	4b18      	ldr	r3, [pc, #96]	; (80086d8 <W25qxx_Init+0x168>)
 8008676:	615a      	str	r2, [r3, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8008678:	4b17      	ldr	r3, [pc, #92]	; (80086d8 <W25qxx_Init+0x168>)
 800867a:	695a      	ldr	r2, [r3, #20]
 800867c:	4b16      	ldr	r3, [pc, #88]	; (80086d8 <W25qxx_Init+0x168>)
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	435a      	muls	r2, r3
 8008682:	4b15      	ldr	r3, [pc, #84]	; (80086d8 <W25qxx_Init+0x168>)
 8008684:	895b      	ldrh	r3, [r3, #10]
 8008686:	0019      	movs	r1, r3
 8008688:	0010      	movs	r0, r2
 800868a:	f7f7 fd5f 	bl	800014c <__udivsi3>
 800868e:	0003      	movs	r3, r0
 8008690:	001a      	movs	r2, r3
 8008692:	4b11      	ldr	r3, [pc, #68]	; (80086d8 <W25qxx_Init+0x168>)
 8008694:	60da      	str	r2, [r3, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8008696:	4b10      	ldr	r3, [pc, #64]	; (80086d8 <W25qxx_Init+0x168>)
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	011a      	lsls	r2, r3, #4
 800869c:	4b0e      	ldr	r3, [pc, #56]	; (80086d8 <W25qxx_Init+0x168>)
 800869e:	619a      	str	r2, [r3, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80086a0:	4b0d      	ldr	r3, [pc, #52]	; (80086d8 <W25qxx_Init+0x168>)
 80086a2:	695a      	ldr	r2, [r3, #20]
 80086a4:	4b0c      	ldr	r3, [pc, #48]	; (80086d8 <W25qxx_Init+0x168>)
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	4353      	muls	r3, r2
 80086aa:	0a9a      	lsrs	r2, r3, #10
 80086ac:	4b0a      	ldr	r3, [pc, #40]	; (80086d8 <W25qxx_Init+0x168>)
 80086ae:	621a      	str	r2, [r3, #32]
	W25qxx_ReadUniqID();
 80086b0:	f7ff fe7c 	bl	80083ac <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80086b4:	2001      	movs	r0, #1
 80086b6:	f7ff fed5 	bl	8008464 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80086ba:	2002      	movs	r0, #2
 80086bc:	f7ff fed2 	bl	8008464 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80086c0:	2003      	movs	r0, #3
 80086c2:	f7ff fecf 	bl	8008464 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 80086c6:	4b04      	ldr	r3, [pc, #16]	; (80086d8 <W25qxx_Init+0x168>)
 80086c8:	2227      	movs	r2, #39	; 0x27
 80086ca:	2100      	movs	r1, #0
 80086cc:	5499      	strb	r1, [r3, r2]
	return true;
 80086ce:	2301      	movs	r3, #1
}
 80086d0:	0018      	movs	r0, r3
 80086d2:	46bd      	mov	sp, r7
 80086d4:	b002      	add	sp, #8
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	20000cbc 	.word	0x20000cbc
 80086dc:	50000c00 	.word	0x50000c00
 80086e0:	08012ac4 	.word	0x08012ac4

080086e4 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80086ec:	e002      	b.n	80086f4 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80086ee:	2001      	movs	r0, #1
 80086f0:	f000 fb98 	bl	8008e24 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80086f4:	4b26      	ldr	r3, [pc, #152]	; (8008790 <W25qxx_EraseSector+0xac>)
 80086f6:	2227      	movs	r2, #39	; 0x27
 80086f8:	5c9b      	ldrb	r3, [r3, r2]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d0f7      	beq.n	80086ee <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80086fe:	4b24      	ldr	r3, [pc, #144]	; (8008790 <W25qxx_EraseSector+0xac>)
 8008700:	2227      	movs	r2, #39	; 0x27
 8008702:	2101      	movs	r1, #1
 8008704:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8008706:	f7ff ff05 	bl	8008514 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 800870a:	4b21      	ldr	r3, [pc, #132]	; (8008790 <W25qxx_EraseSector+0xac>)
 800870c:	691a      	ldr	r2, [r3, #16]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4353      	muls	r3, r2
 8008712:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8008714:	f7ff fe8c 	bl	8008430 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008718:	4b1e      	ldr	r3, [pc, #120]	; (8008794 <W25qxx_EraseSector+0xb0>)
 800871a:	2200      	movs	r2, #0
 800871c:	2108      	movs	r1, #8
 800871e:	0018      	movs	r0, r3
 8008720:	f000 fecf 	bl	80094c2 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8008724:	4b1a      	ldr	r3, [pc, #104]	; (8008790 <W25qxx_EraseSector+0xac>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b08      	cmp	r3, #8
 800872a:	d909      	bls.n	8008740 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 800872c:	2021      	movs	r0, #33	; 0x21
 800872e:	f7ff fded 	bl	800830c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	0e1b      	lsrs	r3, r3, #24
 8008736:	b2db      	uxtb	r3, r3
 8008738:	0018      	movs	r0, r3
 800873a:	f7ff fde7 	bl	800830c <W25qxx_Spi>
 800873e:	e002      	b.n	8008746 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8008740:	2020      	movs	r0, #32
 8008742:	f7ff fde3 	bl	800830c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	0c1b      	lsrs	r3, r3, #16
 800874a:	b2db      	uxtb	r3, r3
 800874c:	0018      	movs	r0, r3
 800874e:	f7ff fddd 	bl	800830c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	0a1b      	lsrs	r3, r3, #8
 8008756:	b2db      	uxtb	r3, r3
 8008758:	0018      	movs	r0, r3
 800875a:	f7ff fdd7 	bl	800830c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	b2db      	uxtb	r3, r3
 8008762:	0018      	movs	r0, r3
 8008764:	f7ff fdd2 	bl	800830c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008768:	4b0a      	ldr	r3, [pc, #40]	; (8008794 <W25qxx_EraseSector+0xb0>)
 800876a:	2201      	movs	r2, #1
 800876c:	2108      	movs	r1, #8
 800876e:	0018      	movs	r0, r3
 8008770:	f000 fea7 	bl	80094c2 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8008774:	f7ff fece 	bl	8008514 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8008778:	2001      	movs	r0, #1
 800877a:	f000 fb53 	bl	8008e24 <HAL_Delay>
	w25qxx.Lock = 0;
 800877e:	4b04      	ldr	r3, [pc, #16]	; (8008790 <W25qxx_EraseSector+0xac>)
 8008780:	2227      	movs	r2, #39	; 0x27
 8008782:	2100      	movs	r1, #0
 8008784:	5499      	strb	r1, [r3, r2]
}
 8008786:	46c0      	nop			; (mov r8, r8)
 8008788:	46bd      	mov	sp, r7
 800878a:	b002      	add	sp, #8
 800878c:	bd80      	pop	{r7, pc}
 800878e:	46c0      	nop			; (mov r8, r8)
 8008790:	20000cbc 	.word	0x20000cbc
 8008794:	50000c00 	.word	0x50000c00

08008798 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80087a0:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <W25qxx_SectorToPage+0x28>)
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	435a      	muls	r2, r3
 80087a8:	4b05      	ldr	r3, [pc, #20]	; (80087c0 <W25qxx_SectorToPage+0x28>)
 80087aa:	895b      	ldrh	r3, [r3, #10]
 80087ac:	0019      	movs	r1, r3
 80087ae:	0010      	movs	r0, r2
 80087b0:	f7f7 fccc 	bl	800014c <__udivsi3>
 80087b4:	0003      	movs	r3, r0
}
 80087b6:	0018      	movs	r0, r3
 80087b8:	46bd      	mov	sp, r7
 80087ba:	b002      	add	sp, #8
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	46c0      	nop			; (mov r8, r8)
 80087c0:	20000cbc 	.word	0x20000cbc

080087c4 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80087d2:	e002      	b.n	80087da <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80087d4:	2001      	movs	r0, #1
 80087d6:	f000 fb25 	bl	8008e24 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80087da:	4b3a      	ldr	r3, [pc, #232]	; (80088c4 <W25qxx_WritePage+0x100>)
 80087dc:	2227      	movs	r2, #39	; 0x27
 80087de:	5c9b      	ldrb	r3, [r3, r2]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d0f7      	beq.n	80087d4 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80087e4:	4b37      	ldr	r3, [pc, #220]	; (80088c4 <W25qxx_WritePage+0x100>)
 80087e6:	2227      	movs	r2, #39	; 0x27
 80087e8:	2101      	movs	r1, #1
 80087ea:	5499      	strb	r1, [r3, r2]
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	18d3      	adds	r3, r2, r3
 80087f2:	4a34      	ldr	r2, [pc, #208]	; (80088c4 <W25qxx_WritePage+0x100>)
 80087f4:	8952      	ldrh	r2, [r2, #10]
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d802      	bhi.n	8008800 <W25qxx_WritePage+0x3c>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d105      	bne.n	800880c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8008800:	4b30      	ldr	r3, [pc, #192]	; (80088c4 <W25qxx_WritePage+0x100>)
 8008802:	895b      	ldrh	r3, [r3, #10]
 8008804:	001a      	movs	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	18d3      	adds	r3, r2, r3
 8008812:	4a2c      	ldr	r2, [pc, #176]	; (80088c4 <W25qxx_WritePage+0x100>)
 8008814:	8952      	ldrh	r2, [r2, #10]
 8008816:	4293      	cmp	r3, r2
 8008818:	d905      	bls.n	8008826 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800881a:	4b2a      	ldr	r3, [pc, #168]	; (80088c4 <W25qxx_WritePage+0x100>)
 800881c:	895b      	ldrh	r3, [r3, #10]
 800881e:	001a      	movs	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8008826:	f7ff fe75 	bl	8008514 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800882a:	f7ff fe01 	bl	8008430 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800882e:	4b26      	ldr	r3, [pc, #152]	; (80088c8 <W25qxx_WritePage+0x104>)
 8008830:	2200      	movs	r2, #0
 8008832:	2108      	movs	r1, #8
 8008834:	0018      	movs	r0, r3
 8008836:	f000 fe44 	bl	80094c2 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800883a:	4b22      	ldr	r3, [pc, #136]	; (80088c4 <W25qxx_WritePage+0x100>)
 800883c:	895b      	ldrh	r3, [r3, #10]
 800883e:	001a      	movs	r2, r3
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	4353      	muls	r3, r2
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	18d3      	adds	r3, r2, r3
 8008848:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800884a:	4b1e      	ldr	r3, [pc, #120]	; (80088c4 <W25qxx_WritePage+0x100>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	2b08      	cmp	r3, #8
 8008850:	d909      	bls.n	8008866 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8008852:	2012      	movs	r0, #18
 8008854:	f7ff fd5a 	bl	800830c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	0e1b      	lsrs	r3, r3, #24
 800885c:	b2db      	uxtb	r3, r3
 800885e:	0018      	movs	r0, r3
 8008860:	f7ff fd54 	bl	800830c <W25qxx_Spi>
 8008864:	e002      	b.n	800886c <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8008866:	2002      	movs	r0, #2
 8008868:	f7ff fd50 	bl	800830c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	0c1b      	lsrs	r3, r3, #16
 8008870:	b2db      	uxtb	r3, r3
 8008872:	0018      	movs	r0, r3
 8008874:	f7ff fd4a 	bl	800830c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	0a1b      	lsrs	r3, r3, #8
 800887c:	b2db      	uxtb	r3, r3
 800887e:	0018      	movs	r0, r3
 8008880:	f7ff fd44 	bl	800830c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	b2db      	uxtb	r3, r3
 8008888:	0018      	movs	r0, r3
 800888a:	f7ff fd3f 	bl	800830c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	b29a      	uxth	r2, r3
 8008892:	68f9      	ldr	r1, [r7, #12]
 8008894:	480d      	ldr	r0, [pc, #52]	; (80088cc <W25qxx_WritePage+0x108>)
 8008896:	2364      	movs	r3, #100	; 0x64
 8008898:	f001 fd3e 	bl	800a318 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800889c:	4b0a      	ldr	r3, [pc, #40]	; (80088c8 <W25qxx_WritePage+0x104>)
 800889e:	2201      	movs	r2, #1
 80088a0:	2108      	movs	r1, #8
 80088a2:	0018      	movs	r0, r3
 80088a4:	f000 fe0d 	bl	80094c2 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80088a8:	f7ff fe34 	bl	8008514 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80088ac:	2001      	movs	r0, #1
 80088ae:	f000 fab9 	bl	8008e24 <HAL_Delay>
	w25qxx.Lock = 0;
 80088b2:	4b04      	ldr	r3, [pc, #16]	; (80088c4 <W25qxx_WritePage+0x100>)
 80088b4:	2227      	movs	r2, #39	; 0x27
 80088b6:	2100      	movs	r1, #0
 80088b8:	5499      	strb	r1, [r3, r2]
}
 80088ba:	46c0      	nop			; (mov r8, r8)
 80088bc:	46bd      	mov	sp, r7
 80088be:	b004      	add	sp, #16
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	46c0      	nop			; (mov r8, r8)
 80088c4:	20000cbc 	.word	0x20000cbc
 80088c8:	50000c00 	.word	0x50000c00
 80088cc:	200002e4 	.word	0x200002e4

080088d0 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80088d0:	b590      	push	{r4, r7, lr}
 80088d2:	b089      	sub	sp, #36	; 0x24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
 80088dc:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 80088de:	4b2d      	ldr	r3, [pc, #180]	; (8008994 <W25qxx_WriteSector+0xc4>)
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d802      	bhi.n	80088ee <W25qxx_WriteSector+0x1e>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d102      	bne.n	80088f4 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80088ee:	4b29      	ldr	r3, [pc, #164]	; (8008994 <W25qxx_WriteSector+0xc4>)
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80088f4:	4b27      	ldr	r3, [pc, #156]	; (8008994 <W25qxx_WriteSector+0xc4>)
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d245      	bcs.n	800898a <W25qxx_WriteSector+0xba>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	18d2      	adds	r2, r2, r3
 8008904:	4b23      	ldr	r3, [pc, #140]	; (8008994 <W25qxx_WriteSector+0xc4>)
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	429a      	cmp	r2, r3
 800890a:	d905      	bls.n	8008918 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 800890c:	4b21      	ldr	r3, [pc, #132]	; (8008994 <W25qxx_WriteSector+0xc4>)
 800890e:	691a      	ldr	r2, [r3, #16]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	61bb      	str	r3, [r7, #24]
 8008916:	e001      	b.n	800891c <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	0018      	movs	r0, r3
 8008920:	f7ff ff3a 	bl	8008798 <W25qxx_SectorToPage>
 8008924:	0004      	movs	r4, r0
 8008926:	4b1b      	ldr	r3, [pc, #108]	; (8008994 <W25qxx_WriteSector+0xc4>)
 8008928:	895b      	ldrh	r3, [r3, #10]
 800892a:	0019      	movs	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7f7 fc0d 	bl	800014c <__udivsi3>
 8008932:	0003      	movs	r3, r0
 8008934:	18e3      	adds	r3, r4, r3
 8008936:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8008938:	4b16      	ldr	r3, [pc, #88]	; (8008994 <W25qxx_WriteSector+0xc4>)
 800893a:	895b      	ldrh	r3, [r3, #10]
 800893c:	001a      	movs	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	0011      	movs	r1, r2
 8008942:	0018      	movs	r0, r3
 8008944:	f7f7 fc88 	bl	8000258 <__aeabi_uidivmod>
 8008948:	000b      	movs	r3, r1
 800894a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	69f9      	ldr	r1, [r7, #28]
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f7ff ff36 	bl	80087c4 <W25qxx_WritePage>
		StartPage++;
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	3301      	adds	r3, #1
 800895c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800895e:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <W25qxx_WriteSector+0xc4>)
 8008960:	895b      	ldrh	r3, [r3, #10]
 8008962:	001a      	movs	r2, r3
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	1a9a      	subs	r2, r3, r2
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	18d3      	adds	r3, r2, r3
 800896c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800896e:	4b09      	ldr	r3, [pc, #36]	; (8008994 <W25qxx_WriteSector+0xc4>)
 8008970:	895b      	ldrh	r3, [r3, #10]
 8008972:	001a      	movs	r2, r3
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	18d3      	adds	r3, r2, r3
 800897c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	2b00      	cmp	r3, #0
 8008986:	dce1      	bgt.n	800894c <W25qxx_WriteSector+0x7c>
 8008988:	e000      	b.n	800898c <W25qxx_WriteSector+0xbc>
		return;
 800898a:	46c0      	nop			; (mov r8, r8)
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800898c:	46bd      	mov	sp, r7
 800898e:	b009      	add	sp, #36	; 0x24
 8008990:	bd90      	pop	{r4, r7, pc}
 8008992:	46c0      	nop			; (mov r8, r8)
 8008994:	20000cbc 	.word	0x20000cbc

08008998 <W25qxx_ReadByte>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_ReadByte(uint8_t *pBuffer, uint32_t Bytes_Address)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
	while (w25qxx.Lock == 1)
 80089a2:	e002      	b.n	80089aa <W25qxx_ReadByte+0x12>
		W25qxx_Delay(1);
 80089a4:	2001      	movs	r0, #1
 80089a6:	f000 fa3d 	bl	8008e24 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80089aa:	4b24      	ldr	r3, [pc, #144]	; (8008a3c <W25qxx_ReadByte+0xa4>)
 80089ac:	2227      	movs	r2, #39	; 0x27
 80089ae:	5c9b      	ldrb	r3, [r3, r2]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d0f7      	beq.n	80089a4 <W25qxx_ReadByte+0xc>
	w25qxx.Lock = 1;
 80089b4:	4b21      	ldr	r3, [pc, #132]	; (8008a3c <W25qxx_ReadByte+0xa4>)
 80089b6:	2227      	movs	r2, #39	; 0x27
 80089b8:	2101      	movs	r1, #1
 80089ba:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx ReadByte at address %d begin...\r\n", Bytes_Address);
#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80089bc:	4b20      	ldr	r3, [pc, #128]	; (8008a40 <W25qxx_ReadByte+0xa8>)
 80089be:	2200      	movs	r2, #0
 80089c0:	2108      	movs	r1, #8
 80089c2:	0018      	movs	r0, r3
 80089c4:	f000 fd7d 	bl	80094c2 <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 80089c8:	4b1c      	ldr	r3, [pc, #112]	; (8008a3c <W25qxx_ReadByte+0xa4>)
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b08      	cmp	r3, #8
 80089ce:	d909      	bls.n	80089e4 <W25qxx_ReadByte+0x4c>
	{
		W25qxx_Spi(0x0C);
 80089d0:	200c      	movs	r0, #12
 80089d2:	f7ff fc9b 	bl	800830c <W25qxx_Spi>
		W25qxx_Spi((Bytes_Address & 0xFF000000) >> 24);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	0e1b      	lsrs	r3, r3, #24
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	0018      	movs	r0, r3
 80089de:	f7ff fc95 	bl	800830c <W25qxx_Spi>
 80089e2:	e002      	b.n	80089ea <W25qxx_ReadByte+0x52>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80089e4:	200b      	movs	r0, #11
 80089e6:	f7ff fc91 	bl	800830c <W25qxx_Spi>
	}
	W25qxx_Spi((Bytes_Address & 0xFF0000) >> 16);
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	0c1b      	lsrs	r3, r3, #16
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	0018      	movs	r0, r3
 80089f2:	f7ff fc8b 	bl	800830c <W25qxx_Spi>
	W25qxx_Spi((Bytes_Address & 0xFF00) >> 8);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	0a1b      	lsrs	r3, r3, #8
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	0018      	movs	r0, r3
 80089fe:	f7ff fc85 	bl	800830c <W25qxx_Spi>
	W25qxx_Spi(Bytes_Address & 0xFF);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	0018      	movs	r0, r3
 8008a08:	f7ff fc80 	bl	800830c <W25qxx_Spi>
	W25qxx_Spi(0);
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	f7ff fc7d 	bl	800830c <W25qxx_Spi>
	*pBuffer = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8008a12:	20a5      	movs	r0, #165	; 0xa5
 8008a14:	f7ff fc7a 	bl	800830c <W25qxx_Spi>
 8008a18:	0003      	movs	r3, r0
 8008a1a:	001a      	movs	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008a20:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <W25qxx_ReadByte+0xa8>)
 8008a22:	2201      	movs	r2, #1
 8008a24:	2108      	movs	r1, #8
 8008a26:	0018      	movs	r0, r3
 8008a28:	f000 fd4b 	bl	80094c2 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadByte 0x%02X done after %d ms\r\n", *pBuffer, HAL_GetTick() - StartTime);
#endif
	w25qxx.Lock = 0;
 8008a2c:	4b03      	ldr	r3, [pc, #12]	; (8008a3c <W25qxx_ReadByte+0xa4>)
 8008a2e:	2227      	movs	r2, #39	; 0x27
 8008a30:	2100      	movs	r1, #0
 8008a32:	5499      	strb	r1, [r3, r2]
}
 8008a34:	46c0      	nop			; (mov r8, r8)
 8008a36:	46bd      	mov	sp, r7
 8008a38:	b002      	add	sp, #8
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	20000cbc 	.word	0x20000cbc
 8008a40:	50000c00 	.word	0x50000c00

08008a44 <W25qxx_ReadBytes>:
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
	while (w25qxx.Lock == 1)
 8008a50:	e002      	b.n	8008a58 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 8008a52:	2001      	movs	r0, #1
 8008a54:	f000 f9e6 	bl	8008e24 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8008a58:	4b26      	ldr	r3, [pc, #152]	; (8008af4 <W25qxx_ReadBytes+0xb0>)
 8008a5a:	2227      	movs	r2, #39	; 0x27
 8008a5c:	5c9b      	ldrb	r3, [r3, r2]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d0f7      	beq.n	8008a52 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock = 1;
 8008a62:	4b24      	ldr	r3, [pc, #144]	; (8008af4 <W25qxx_ReadBytes+0xb0>)
 8008a64:	2227      	movs	r2, #39	; 0x27
 8008a66:	2101      	movs	r1, #1
 8008a68:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n", ReadAddr, NumByteToRead);
#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008a6a:	4b23      	ldr	r3, [pc, #140]	; (8008af8 <W25qxx_ReadBytes+0xb4>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2108      	movs	r1, #8
 8008a70:	0018      	movs	r0, r3
 8008a72:	f000 fd26 	bl	80094c2 <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 8008a76:	4b1f      	ldr	r3, [pc, #124]	; (8008af4 <W25qxx_ReadBytes+0xb0>)
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	2b08      	cmp	r3, #8
 8008a7c:	d909      	bls.n	8008a92 <W25qxx_ReadBytes+0x4e>
	{
		W25qxx_Spi(0x0C);
 8008a7e:	200c      	movs	r0, #12
 8008a80:	f7ff fc44 	bl	800830c <W25qxx_Spi>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	0e1b      	lsrs	r3, r3, #24
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	f7ff fc3e 	bl	800830c <W25qxx_Spi>
 8008a90:	e002      	b.n	8008a98 <W25qxx_ReadBytes+0x54>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8008a92:	200b      	movs	r0, #11
 8008a94:	f7ff fc3a 	bl	800830c <W25qxx_Spi>
	}
	W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	0c1b      	lsrs	r3, r3, #16
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	0018      	movs	r0, r3
 8008aa0:	f7ff fc34 	bl	800830c <W25qxx_Spi>
	W25qxx_Spi((ReadAddr & 0xFF00) >> 8);
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	0a1b      	lsrs	r3, r3, #8
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	0018      	movs	r0, r3
 8008aac:	f7ff fc2e 	bl	800830c <W25qxx_Spi>
	W25qxx_Spi(ReadAddr & 0xFF);
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f7ff fc29 	bl	800830c <W25qxx_Spi>
	W25qxx_Spi(0);
 8008aba:	2000      	movs	r0, #0
 8008abc:	f7ff fc26 	bl	800830c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead, 2000);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	23fa      	movs	r3, #250	; 0xfa
 8008ac6:	00db      	lsls	r3, r3, #3
 8008ac8:	68f9      	ldr	r1, [r7, #12]
 8008aca:	480c      	ldr	r0, [pc, #48]	; (8008afc <W25qxx_ReadBytes+0xb8>)
 8008acc:	f001 fd7c 	bl	800a5c8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008ad0:	4b09      	ldr	r3, [pc, #36]	; (8008af8 <W25qxx_ReadBytes+0xb4>)
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	2108      	movs	r1, #8
 8008ad6:	0018      	movs	r0, r3
 8008ad8:	f000 fcf3 	bl	80094c2 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8008adc:	2001      	movs	r0, #1
 8008ade:	f000 f9a1 	bl	8008e24 <HAL_Delay>
	w25qxx.Lock = 0;
 8008ae2:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <W25qxx_ReadBytes+0xb0>)
 8008ae4:	2227      	movs	r2, #39	; 0x27
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	5499      	strb	r1, [r3, r2]
}
 8008aea:	46c0      	nop			; (mov r8, r8)
 8008aec:	46bd      	mov	sp, r7
 8008aee:	b004      	add	sp, #16
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	46c0      	nop			; (mov r8, r8)
 8008af4:	20000cbc 	.word	0x20000cbc
 8008af8:	50000c00 	.word	0x50000c00
 8008afc:	200002e4 	.word	0x200002e4

08008b00 <W25qxx_ReadPage>:
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8008b0e:	e002      	b.n	8008b16 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8008b10:	2001      	movs	r0, #1
 8008b12:	f000 f987 	bl	8008e24 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8008b16:	4b36      	ldr	r3, [pc, #216]	; (8008bf0 <W25qxx_ReadPage+0xf0>)
 8008b18:	2227      	movs	r2, #39	; 0x27
 8008b1a:	5c9b      	ldrb	r3, [r3, r2]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d0f7      	beq.n	8008b10 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8008b20:	4b33      	ldr	r3, [pc, #204]	; (8008bf0 <W25qxx_ReadPage+0xf0>)
 8008b22:	2227      	movs	r2, #39	; 0x27
 8008b24:	2101      	movs	r1, #1
 8008b26:	5499      	strb	r1, [r3, r2]
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8008b28:	4b31      	ldr	r3, [pc, #196]	; (8008bf0 <W25qxx_ReadPage+0xf0>)
 8008b2a:	895b      	ldrh	r3, [r3, #10]
 8008b2c:	001a      	movs	r2, r3
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d802      	bhi.n	8008b3a <W25qxx_ReadPage+0x3a>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8008b3a:	4b2d      	ldr	r3, [pc, #180]	; (8008bf0 <W25qxx_ReadPage+0xf0>)
 8008b3c:	895b      	ldrh	r3, [r3, #10]
 8008b3e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	18d3      	adds	r3, r2, r3
 8008b46:	4a2a      	ldr	r2, [pc, #168]	; (8008bf0 <W25qxx_ReadPage+0xf0>)
 8008b48:	8952      	ldrh	r2, [r2, #10]
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d905      	bls.n	8008b5a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8008b4e:	4b28      	ldr	r3, [pc, #160]	; (8008bf0 <W25qxx_ReadPage+0xf0>)
 8008b50:	895b      	ldrh	r3, [r3, #10]
 8008b52:	001a      	movs	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8008b5a:	4b25      	ldr	r3, [pc, #148]	; (8008bf0 <W25qxx_ReadPage+0xf0>)
 8008b5c:	895b      	ldrh	r3, [r3, #10]
 8008b5e:	001a      	movs	r2, r3
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	4353      	muls	r3, r2
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	18d3      	adds	r3, r2, r3
 8008b68:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8008b6a:	4b22      	ldr	r3, [pc, #136]	; (8008bf4 <W25qxx_ReadPage+0xf4>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2108      	movs	r1, #8
 8008b70:	0018      	movs	r0, r3
 8008b72:	f000 fca6 	bl	80094c2 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8008b76:	4b1e      	ldr	r3, [pc, #120]	; (8008bf0 <W25qxx_ReadPage+0xf0>)
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	2b08      	cmp	r3, #8
 8008b7c:	d909      	bls.n	8008b92 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8008b7e:	200c      	movs	r0, #12
 8008b80:	f7ff fbc4 	bl	800830c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	0e1b      	lsrs	r3, r3, #24
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	0018      	movs	r0, r3
 8008b8c:	f7ff fbbe 	bl	800830c <W25qxx_Spi>
 8008b90:	e002      	b.n	8008b98 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8008b92:	200b      	movs	r0, #11
 8008b94:	f7ff fbba 	bl	800830c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	0c1b      	lsrs	r3, r3, #16
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	0018      	movs	r0, r3
 8008ba0:	f7ff fbb4 	bl	800830c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	0a1b      	lsrs	r3, r3, #8
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	0018      	movs	r0, r3
 8008bac:	f7ff fbae 	bl	800830c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	f7ff fba9 	bl	800830c <W25qxx_Spi>
	W25qxx_Spi(0);
 8008bba:	2000      	movs	r0, #0
 8008bbc:	f7ff fba6 	bl	800830c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	68f9      	ldr	r1, [r7, #12]
 8008bc6:	480c      	ldr	r0, [pc, #48]	; (8008bf8 <W25qxx_ReadPage+0xf8>)
 8008bc8:	2364      	movs	r3, #100	; 0x64
 8008bca:	f001 fcfd 	bl	800a5c8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8008bce:	4b09      	ldr	r3, [pc, #36]	; (8008bf4 <W25qxx_ReadPage+0xf4>)
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	2108      	movs	r1, #8
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	f000 fc74 	bl	80094c2 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8008bda:	2001      	movs	r0, #1
 8008bdc:	f000 f922 	bl	8008e24 <HAL_Delay>
	w25qxx.Lock = 0;
 8008be0:	4b03      	ldr	r3, [pc, #12]	; (8008bf0 <W25qxx_ReadPage+0xf0>)
 8008be2:	2227      	movs	r2, #39	; 0x27
 8008be4:	2100      	movs	r1, #0
 8008be6:	5499      	strb	r1, [r3, r2]
}
 8008be8:	46c0      	nop			; (mov r8, r8)
 8008bea:	46bd      	mov	sp, r7
 8008bec:	b004      	add	sp, #16
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20000cbc 	.word	0x20000cbc
 8008bf4:	50000c00 	.word	0x50000c00
 8008bf8:	200002e4 	.word	0x200002e4

08008bfc <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8008bfc:	b590      	push	{r4, r7, lr}
 8008bfe:	b089      	sub	sp, #36	; 0x24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8008c0a:	4b2d      	ldr	r3, [pc, #180]	; (8008cc0 <W25qxx_ReadSector+0xc4>)
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d802      	bhi.n	8008c1a <W25qxx_ReadSector+0x1e>
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d102      	bne.n	8008c20 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8008c1a:	4b29      	ldr	r3, [pc, #164]	; (8008cc0 <W25qxx_ReadSector+0xc4>)
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8008c20:	4b27      	ldr	r3, [pc, #156]	; (8008cc0 <W25qxx_ReadSector+0xc4>)
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d245      	bcs.n	8008cb6 <W25qxx_ReadSector+0xba>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	18d2      	adds	r2, r2, r3
 8008c30:	4b23      	ldr	r3, [pc, #140]	; (8008cc0 <W25qxx_ReadSector+0xc4>)
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d905      	bls.n	8008c44 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8008c38:	4b21      	ldr	r3, [pc, #132]	; (8008cc0 <W25qxx_ReadSector+0xc4>)
 8008c3a:	691a      	ldr	r2, [r3, #16]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	61bb      	str	r3, [r7, #24]
 8008c42:	e001      	b.n	8008c48 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	f7ff fda4 	bl	8008798 <W25qxx_SectorToPage>
 8008c50:	0004      	movs	r4, r0
 8008c52:	4b1b      	ldr	r3, [pc, #108]	; (8008cc0 <W25qxx_ReadSector+0xc4>)
 8008c54:	895b      	ldrh	r3, [r3, #10]
 8008c56:	0019      	movs	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7f7 fa77 	bl	800014c <__udivsi3>
 8008c5e:	0003      	movs	r3, r0
 8008c60:	18e3      	adds	r3, r4, r3
 8008c62:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8008c64:	4b16      	ldr	r3, [pc, #88]	; (8008cc0 <W25qxx_ReadSector+0xc4>)
 8008c66:	895b      	ldrh	r3, [r3, #10]
 8008c68:	001a      	movs	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	0011      	movs	r1, r2
 8008c6e:	0018      	movs	r0, r3
 8008c70:	f7f7 faf2 	bl	8000258 <__aeabi_uidivmod>
 8008c74:	000b      	movs	r3, r1
 8008c76:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	69f9      	ldr	r1, [r7, #28]
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f7ff ff3e 	bl	8008b00 <W25qxx_ReadPage>
		StartPage++;
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	3301      	adds	r3, #1
 8008c88:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8008c8a:	4b0d      	ldr	r3, [pc, #52]	; (8008cc0 <W25qxx_ReadSector+0xc4>)
 8008c8c:	895b      	ldrh	r3, [r3, #10]
 8008c8e:	001a      	movs	r2, r3
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	1a9a      	subs	r2, r3, r2
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	18d3      	adds	r3, r2, r3
 8008c98:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8008c9a:	4b09      	ldr	r3, [pc, #36]	; (8008cc0 <W25qxx_ReadSector+0xc4>)
 8008c9c:	895b      	ldrh	r3, [r3, #10]
 8008c9e:	001a      	movs	r2, r3
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	18d3      	adds	r3, r2, r3
 8008ca8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	dce1      	bgt.n	8008c78 <W25qxx_ReadSector+0x7c>
 8008cb4:	e000      	b.n	8008cb8 <W25qxx_ReadSector+0xbc>
		return;
 8008cb6:	46c0      	nop			; (mov r8, r8)
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif

}
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	b009      	add	sp, #36	; 0x24
 8008cbc:	bd90      	pop	{r4, r7, pc}
 8008cbe:	46c0      	nop			; (mov r8, r8)
 8008cc0:	20000cbc 	.word	0x20000cbc

08008cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008cc4:	480d      	ldr	r0, [pc, #52]	; (8008cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008cc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008cc8:	f7ff fb1a 	bl	8008300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ccc:	480c      	ldr	r0, [pc, #48]	; (8008d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8008cce:	490d      	ldr	r1, [pc, #52]	; (8008d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008cd0:	4a0d      	ldr	r2, [pc, #52]	; (8008d08 <LoopForever+0xe>)
  movs r3, #0
 8008cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008cd4:	e002      	b.n	8008cdc <LoopCopyDataInit>

08008cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008cda:	3304      	adds	r3, #4

08008cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ce0:	d3f9      	bcc.n	8008cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008ce2:	4a0a      	ldr	r2, [pc, #40]	; (8008d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008ce4:	4c0a      	ldr	r4, [pc, #40]	; (8008d10 <LoopForever+0x16>)
  movs r3, #0
 8008ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ce8:	e001      	b.n	8008cee <LoopFillZerobss>

08008cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008cec:	3204      	adds	r2, #4

08008cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008cf0:	d3fb      	bcc.n	8008cea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008cf2:	f005 fa03 	bl	800e0fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008cf6:	f7fa fd77 	bl	80037e8 <main>

08008cfa <LoopForever>:

LoopForever:
  b LoopForever
 8008cfa:	e7fe      	b.n	8008cfa <LoopForever>
  ldr   r0, =_estack
 8008cfc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8008d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008d04:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 8008d08:	08012fc8 	.word	0x08012fc8
  ldr r2, =_sbss
 8008d0c:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8008d10:	20000cf8 	.word	0x20000cf8

08008d14 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008d14:	e7fe      	b.n	8008d14 <ADC1_IRQHandler>
	...

08008d18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008d1e:	1dfb      	adds	r3, r7, #7
 8008d20:	2200      	movs	r2, #0
 8008d22:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d24:	4b0b      	ldr	r3, [pc, #44]	; (8008d54 <HAL_Init+0x3c>)
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	4b0a      	ldr	r3, [pc, #40]	; (8008d54 <HAL_Init+0x3c>)
 8008d2a:	2180      	movs	r1, #128	; 0x80
 8008d2c:	0049      	lsls	r1, r1, #1
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008d32:	2000      	movs	r0, #0
 8008d34:	f000 f810 	bl	8008d58 <HAL_InitTick>
 8008d38:	1e03      	subs	r3, r0, #0
 8008d3a:	d003      	beq.n	8008d44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008d3c:	1dfb      	adds	r3, r7, #7
 8008d3e:	2201      	movs	r2, #1
 8008d40:	701a      	strb	r2, [r3, #0]
 8008d42:	e001      	b.n	8008d48 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008d44:	f7fe ff20 	bl	8007b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008d48:	1dfb      	adds	r3, r7, #7
 8008d4a:	781b      	ldrb	r3, [r3, #0]
}
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	b002      	add	sp, #8
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	40022000 	.word	0x40022000

08008d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d58:	b590      	push	{r4, r7, lr}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008d60:	230f      	movs	r3, #15
 8008d62:	18fb      	adds	r3, r7, r3
 8008d64:	2200      	movs	r2, #0
 8008d66:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8008d68:	4b1d      	ldr	r3, [pc, #116]	; (8008de0 <HAL_InitTick+0x88>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d02b      	beq.n	8008dc8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8008d70:	4b1c      	ldr	r3, [pc, #112]	; (8008de4 <HAL_InitTick+0x8c>)
 8008d72:	681c      	ldr	r4, [r3, #0]
 8008d74:	4b1a      	ldr	r3, [pc, #104]	; (8008de0 <HAL_InitTick+0x88>)
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	0019      	movs	r1, r3
 8008d7a:	23fa      	movs	r3, #250	; 0xfa
 8008d7c:	0098      	lsls	r0, r3, #2
 8008d7e:	f7f7 f9e5 	bl	800014c <__udivsi3>
 8008d82:	0003      	movs	r3, r0
 8008d84:	0019      	movs	r1, r3
 8008d86:	0020      	movs	r0, r4
 8008d88:	f7f7 f9e0 	bl	800014c <__udivsi3>
 8008d8c:	0003      	movs	r3, r0
 8008d8e:	0018      	movs	r0, r3
 8008d90:	f000 f93d 	bl	800900e <HAL_SYSTICK_Config>
 8008d94:	1e03      	subs	r3, r0, #0
 8008d96:	d112      	bne.n	8008dbe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d80a      	bhi.n	8008db4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d9e:	6879      	ldr	r1, [r7, #4]
 8008da0:	2301      	movs	r3, #1
 8008da2:	425b      	negs	r3, r3
 8008da4:	2200      	movs	r2, #0
 8008da6:	0018      	movs	r0, r3
 8008da8:	f000 f90c 	bl	8008fc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008dac:	4b0e      	ldr	r3, [pc, #56]	; (8008de8 <HAL_InitTick+0x90>)
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	601a      	str	r2, [r3, #0]
 8008db2:	e00d      	b.n	8008dd0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8008db4:	230f      	movs	r3, #15
 8008db6:	18fb      	adds	r3, r7, r3
 8008db8:	2201      	movs	r2, #1
 8008dba:	701a      	strb	r2, [r3, #0]
 8008dbc:	e008      	b.n	8008dd0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008dbe:	230f      	movs	r3, #15
 8008dc0:	18fb      	adds	r3, r7, r3
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	701a      	strb	r2, [r3, #0]
 8008dc6:	e003      	b.n	8008dd0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008dc8:	230f      	movs	r3, #15
 8008dca:	18fb      	adds	r3, r7, r3
 8008dcc:	2201      	movs	r2, #1
 8008dce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008dd0:	230f      	movs	r3, #15
 8008dd2:	18fb      	adds	r3, r7, r3
 8008dd4:	781b      	ldrb	r3, [r3, #0]
}
 8008dd6:	0018      	movs	r0, r3
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	b005      	add	sp, #20
 8008ddc:	bd90      	pop	{r4, r7, pc}
 8008dde:	46c0      	nop			; (mov r8, r8)
 8008de0:	200000dc 	.word	0x200000dc
 8008de4:	200000d4 	.word	0x200000d4
 8008de8:	200000d8 	.word	0x200000d8

08008dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008df0:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <HAL_IncTick+0x1c>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	001a      	movs	r2, r3
 8008df6:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <HAL_IncTick+0x20>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	18d2      	adds	r2, r2, r3
 8008dfc:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <HAL_IncTick+0x20>)
 8008dfe:	601a      	str	r2, [r3, #0]
}
 8008e00:	46c0      	nop			; (mov r8, r8)
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	46c0      	nop			; (mov r8, r8)
 8008e08:	200000dc 	.word	0x200000dc
 8008e0c:	20000ce4 	.word	0x20000ce4

08008e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  return uwTick;
 8008e14:	4b02      	ldr	r3, [pc, #8]	; (8008e20 <HAL_GetTick+0x10>)
 8008e16:	681b      	ldr	r3, [r3, #0]
}
 8008e18:	0018      	movs	r0, r3
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	46c0      	nop			; (mov r8, r8)
 8008e20:	20000ce4 	.word	0x20000ce4

08008e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e2c:	f7ff fff0 	bl	8008e10 <HAL_GetTick>
 8008e30:	0003      	movs	r3, r0
 8008e32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	d005      	beq.n	8008e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e3e:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <HAL_Delay+0x44>)
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	001a      	movs	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	189b      	adds	r3, r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008e4a:	46c0      	nop			; (mov r8, r8)
 8008e4c:	f7ff ffe0 	bl	8008e10 <HAL_GetTick>
 8008e50:	0002      	movs	r2, r0
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d8f7      	bhi.n	8008e4c <HAL_Delay+0x28>
  {
  }
}
 8008e5c:	46c0      	nop			; (mov r8, r8)
 8008e5e:	46c0      	nop			; (mov r8, r8)
 8008e60:	46bd      	mov	sp, r7
 8008e62:	b004      	add	sp, #16
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	46c0      	nop			; (mov r8, r8)
 8008e68:	200000dc 	.word	0x200000dc

08008e6c <__NVIC_EnableIRQ>:
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	0002      	movs	r2, r0
 8008e74:	1dfb      	adds	r3, r7, #7
 8008e76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008e78:	1dfb      	adds	r3, r7, #7
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8008e7e:	d809      	bhi.n	8008e94 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008e80:	1dfb      	adds	r3, r7, #7
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	001a      	movs	r2, r3
 8008e86:	231f      	movs	r3, #31
 8008e88:	401a      	ands	r2, r3
 8008e8a:	4b04      	ldr	r3, [pc, #16]	; (8008e9c <__NVIC_EnableIRQ+0x30>)
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	4091      	lsls	r1, r2
 8008e90:	000a      	movs	r2, r1
 8008e92:	601a      	str	r2, [r3, #0]
}
 8008e94:	46c0      	nop			; (mov r8, r8)
 8008e96:	46bd      	mov	sp, r7
 8008e98:	b002      	add	sp, #8
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	e000e100 	.word	0xe000e100

08008ea0 <__NVIC_SetPriority>:
{
 8008ea0:	b590      	push	{r4, r7, lr}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	0002      	movs	r2, r0
 8008ea8:	6039      	str	r1, [r7, #0]
 8008eaa:	1dfb      	adds	r3, r7, #7
 8008eac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008eae:	1dfb      	adds	r3, r7, #7
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8008eb4:	d828      	bhi.n	8008f08 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008eb6:	4a2f      	ldr	r2, [pc, #188]	; (8008f74 <__NVIC_SetPriority+0xd4>)
 8008eb8:	1dfb      	adds	r3, r7, #7
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	b25b      	sxtb	r3, r3
 8008ebe:	089b      	lsrs	r3, r3, #2
 8008ec0:	33c0      	adds	r3, #192	; 0xc0
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	589b      	ldr	r3, [r3, r2]
 8008ec6:	1dfa      	adds	r2, r7, #7
 8008ec8:	7812      	ldrb	r2, [r2, #0]
 8008eca:	0011      	movs	r1, r2
 8008ecc:	2203      	movs	r2, #3
 8008ece:	400a      	ands	r2, r1
 8008ed0:	00d2      	lsls	r2, r2, #3
 8008ed2:	21ff      	movs	r1, #255	; 0xff
 8008ed4:	4091      	lsls	r1, r2
 8008ed6:	000a      	movs	r2, r1
 8008ed8:	43d2      	mvns	r2, r2
 8008eda:	401a      	ands	r2, r3
 8008edc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	019b      	lsls	r3, r3, #6
 8008ee2:	22ff      	movs	r2, #255	; 0xff
 8008ee4:	401a      	ands	r2, r3
 8008ee6:	1dfb      	adds	r3, r7, #7
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	0018      	movs	r0, r3
 8008eec:	2303      	movs	r3, #3
 8008eee:	4003      	ands	r3, r0
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008ef4:	481f      	ldr	r0, [pc, #124]	; (8008f74 <__NVIC_SetPriority+0xd4>)
 8008ef6:	1dfb      	adds	r3, r7, #7
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	b25b      	sxtb	r3, r3
 8008efc:	089b      	lsrs	r3, r3, #2
 8008efe:	430a      	orrs	r2, r1
 8008f00:	33c0      	adds	r3, #192	; 0xc0
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	501a      	str	r2, [r3, r0]
}
 8008f06:	e031      	b.n	8008f6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008f08:	4a1b      	ldr	r2, [pc, #108]	; (8008f78 <__NVIC_SetPriority+0xd8>)
 8008f0a:	1dfb      	adds	r3, r7, #7
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	0019      	movs	r1, r3
 8008f10:	230f      	movs	r3, #15
 8008f12:	400b      	ands	r3, r1
 8008f14:	3b08      	subs	r3, #8
 8008f16:	089b      	lsrs	r3, r3, #2
 8008f18:	3306      	adds	r3, #6
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	18d3      	adds	r3, r2, r3
 8008f1e:	3304      	adds	r3, #4
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	1dfa      	adds	r2, r7, #7
 8008f24:	7812      	ldrb	r2, [r2, #0]
 8008f26:	0011      	movs	r1, r2
 8008f28:	2203      	movs	r2, #3
 8008f2a:	400a      	ands	r2, r1
 8008f2c:	00d2      	lsls	r2, r2, #3
 8008f2e:	21ff      	movs	r1, #255	; 0xff
 8008f30:	4091      	lsls	r1, r2
 8008f32:	000a      	movs	r2, r1
 8008f34:	43d2      	mvns	r2, r2
 8008f36:	401a      	ands	r2, r3
 8008f38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	019b      	lsls	r3, r3, #6
 8008f3e:	22ff      	movs	r2, #255	; 0xff
 8008f40:	401a      	ands	r2, r3
 8008f42:	1dfb      	adds	r3, r7, #7
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	0018      	movs	r0, r3
 8008f48:	2303      	movs	r3, #3
 8008f4a:	4003      	ands	r3, r0
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008f50:	4809      	ldr	r0, [pc, #36]	; (8008f78 <__NVIC_SetPriority+0xd8>)
 8008f52:	1dfb      	adds	r3, r7, #7
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	001c      	movs	r4, r3
 8008f58:	230f      	movs	r3, #15
 8008f5a:	4023      	ands	r3, r4
 8008f5c:	3b08      	subs	r3, #8
 8008f5e:	089b      	lsrs	r3, r3, #2
 8008f60:	430a      	orrs	r2, r1
 8008f62:	3306      	adds	r3, #6
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	18c3      	adds	r3, r0, r3
 8008f68:	3304      	adds	r3, #4
 8008f6a:	601a      	str	r2, [r3, #0]
}
 8008f6c:	46c0      	nop			; (mov r8, r8)
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	b003      	add	sp, #12
 8008f72:	bd90      	pop	{r4, r7, pc}
 8008f74:	e000e100 	.word	0xe000e100
 8008f78:	e000ed00 	.word	0xe000ed00

08008f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	1e5a      	subs	r2, r3, #1
 8008f88:	2380      	movs	r3, #128	; 0x80
 8008f8a:	045b      	lsls	r3, r3, #17
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d301      	bcc.n	8008f94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008f90:	2301      	movs	r3, #1
 8008f92:	e010      	b.n	8008fb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008f94:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <SysTick_Config+0x44>)
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	3a01      	subs	r2, #1
 8008f9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	425b      	negs	r3, r3
 8008fa0:	2103      	movs	r1, #3
 8008fa2:	0018      	movs	r0, r3
 8008fa4:	f7ff ff7c 	bl	8008ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008fa8:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <SysTick_Config+0x44>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008fae:	4b04      	ldr	r3, [pc, #16]	; (8008fc0 <SysTick_Config+0x44>)
 8008fb0:	2207      	movs	r2, #7
 8008fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	0018      	movs	r0, r3
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	b002      	add	sp, #8
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	46c0      	nop			; (mov r8, r8)
 8008fc0:	e000e010 	.word	0xe000e010

08008fc4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	607a      	str	r2, [r7, #4]
 8008fce:	210f      	movs	r1, #15
 8008fd0:	187b      	adds	r3, r7, r1
 8008fd2:	1c02      	adds	r2, r0, #0
 8008fd4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	187b      	adds	r3, r7, r1
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	b25b      	sxtb	r3, r3
 8008fde:	0011      	movs	r1, r2
 8008fe0:	0018      	movs	r0, r3
 8008fe2:	f7ff ff5d 	bl	8008ea0 <__NVIC_SetPriority>
}
 8008fe6:	46c0      	nop			; (mov r8, r8)
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	b004      	add	sp, #16
 8008fec:	bd80      	pop	{r7, pc}

08008fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b082      	sub	sp, #8
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	0002      	movs	r2, r0
 8008ff6:	1dfb      	adds	r3, r7, #7
 8008ff8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ffa:	1dfb      	adds	r3, r7, #7
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	b25b      	sxtb	r3, r3
 8009000:	0018      	movs	r0, r3
 8009002:	f7ff ff33 	bl	8008e6c <__NVIC_EnableIRQ>
}
 8009006:	46c0      	nop			; (mov r8, r8)
 8009008:	46bd      	mov	sp, r7
 800900a:	b002      	add	sp, #8
 800900c:	bd80      	pop	{r7, pc}

0800900e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	0018      	movs	r0, r3
 800901a:	f7ff ffaf 	bl	8008f7c <SysTick_Config>
 800901e:	0003      	movs	r3, r0
}
 8009020:	0018      	movs	r0, r3
 8009022:	46bd      	mov	sp, r7
 8009024:	b002      	add	sp, #8
 8009026:	bd80      	pop	{r7, pc}

08009028 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e050      	b.n	80090dc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2225      	movs	r2, #37	; 0x25
 800903e:	5c9b      	ldrb	r3, [r3, r2]
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b02      	cmp	r3, #2
 8009044:	d008      	beq.n	8009058 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2204      	movs	r2, #4
 800904a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2224      	movs	r2, #36	; 0x24
 8009050:	2100      	movs	r1, #0
 8009052:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e041      	b.n	80090dc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	210e      	movs	r1, #14
 8009064:	438a      	bics	r2, r1
 8009066:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009072:	491c      	ldr	r1, [pc, #112]	; (80090e4 <HAL_DMA_Abort+0xbc>)
 8009074:	400a      	ands	r2, r1
 8009076:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2101      	movs	r1, #1
 8009084:	438a      	bics	r2, r1
 8009086:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8009088:	4b17      	ldr	r3, [pc, #92]	; (80090e8 <HAL_DMA_Abort+0xc0>)
 800908a:	6859      	ldr	r1, [r3, #4]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009090:	221c      	movs	r2, #28
 8009092:	4013      	ands	r3, r2
 8009094:	2201      	movs	r2, #1
 8009096:	409a      	lsls	r2, r3
 8009098:	4b13      	ldr	r3, [pc, #76]	; (80090e8 <HAL_DMA_Abort+0xc0>)
 800909a:	430a      	orrs	r2, r1
 800909c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80090a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00c      	beq.n	80090ca <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ba:	490a      	ldr	r1, [pc, #40]	; (80090e4 <HAL_DMA_Abort+0xbc>)
 80090bc:	400a      	ands	r2, r1
 80090be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80090c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2225      	movs	r2, #37	; 0x25
 80090ce:	2101      	movs	r1, #1
 80090d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2224      	movs	r2, #36	; 0x24
 80090d6:	2100      	movs	r1, #0
 80090d8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	0018      	movs	r0, r3
 80090de:	46bd      	mov	sp, r7
 80090e0:	b002      	add	sp, #8
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	fffffeff 	.word	0xfffffeff
 80090e8:	40020000 	.word	0x40020000

080090ec <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090f4:	210f      	movs	r1, #15
 80090f6:	187b      	adds	r3, r7, r1
 80090f8:	2200      	movs	r2, #0
 80090fa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2225      	movs	r2, #37	; 0x25
 8009100:	5c9b      	ldrb	r3, [r3, r2]
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b02      	cmp	r3, #2
 8009106:	d006      	beq.n	8009116 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2204      	movs	r2, #4
 800910c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800910e:	187b      	adds	r3, r7, r1
 8009110:	2201      	movs	r2, #1
 8009112:	701a      	strb	r2, [r3, #0]
 8009114:	e049      	b.n	80091aa <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	210e      	movs	r1, #14
 8009122:	438a      	bics	r2, r1
 8009124:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2101      	movs	r1, #1
 8009132:	438a      	bics	r2, r1
 8009134:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009140:	491d      	ldr	r1, [pc, #116]	; (80091b8 <HAL_DMA_Abort_IT+0xcc>)
 8009142:	400a      	ands	r2, r1
 8009144:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8009146:	4b1d      	ldr	r3, [pc, #116]	; (80091bc <HAL_DMA_Abort_IT+0xd0>)
 8009148:	6859      	ldr	r1, [r3, #4]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914e:	221c      	movs	r2, #28
 8009150:	4013      	ands	r3, r2
 8009152:	2201      	movs	r2, #1
 8009154:	409a      	lsls	r2, r3
 8009156:	4b19      	ldr	r3, [pc, #100]	; (80091bc <HAL_DMA_Abort_IT+0xd0>)
 8009158:	430a      	orrs	r2, r1
 800915a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009164:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00c      	beq.n	8009188 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009178:	490f      	ldr	r1, [pc, #60]	; (80091b8 <HAL_DMA_Abort_IT+0xcc>)
 800917a:	400a      	ands	r2, r1
 800917c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009186:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2225      	movs	r2, #37	; 0x25
 800918c:	2101      	movs	r1, #1
 800918e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2224      	movs	r2, #36	; 0x24
 8009194:	2100      	movs	r1, #0
 8009196:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919c:	2b00      	cmp	r3, #0
 800919e:	d004      	beq.n	80091aa <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	0010      	movs	r0, r2
 80091a8:	4798      	blx	r3
    }
  }
  return status;
 80091aa:	230f      	movs	r3, #15
 80091ac:	18fb      	adds	r3, r7, r3
 80091ae:	781b      	ldrb	r3, [r3, #0]
}
 80091b0:	0018      	movs	r0, r3
 80091b2:	46bd      	mov	sp, r7
 80091b4:	b004      	add	sp, #16
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	fffffeff 	.word	0xfffffeff
 80091bc:	40020000 	.word	0x40020000

080091c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80091ca:	2300      	movs	r3, #0
 80091cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091ce:	e147      	b.n	8009460 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2101      	movs	r1, #1
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4091      	lsls	r1, r2
 80091da:	000a      	movs	r2, r1
 80091dc:	4013      	ands	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d100      	bne.n	80091e8 <HAL_GPIO_Init+0x28>
 80091e6:	e138      	b.n	800945a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	2203      	movs	r2, #3
 80091ee:	4013      	ands	r3, r2
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d005      	beq.n	8009200 <HAL_GPIO_Init+0x40>
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	2203      	movs	r2, #3
 80091fa:	4013      	ands	r3, r2
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d130      	bne.n	8009262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	2203      	movs	r2, #3
 800920c:	409a      	lsls	r2, r3
 800920e:	0013      	movs	r3, r2
 8009210:	43da      	mvns	r2, r3
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	4013      	ands	r3, r2
 8009216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	68da      	ldr	r2, [r3, #12]
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	005b      	lsls	r3, r3, #1
 8009220:	409a      	lsls	r2, r3
 8009222:	0013      	movs	r3, r2
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	4313      	orrs	r3, r2
 8009228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009236:	2201      	movs	r2, #1
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	409a      	lsls	r2, r3
 800923c:	0013      	movs	r3, r2
 800923e:	43da      	mvns	r2, r3
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	4013      	ands	r3, r2
 8009244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	091b      	lsrs	r3, r3, #4
 800924c:	2201      	movs	r2, #1
 800924e:	401a      	ands	r2, r3
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	409a      	lsls	r2, r3
 8009254:	0013      	movs	r3, r2
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	4313      	orrs	r3, r2
 800925a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	2203      	movs	r2, #3
 8009268:	4013      	ands	r3, r2
 800926a:	2b03      	cmp	r3, #3
 800926c:	d017      	beq.n	800929e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	005b      	lsls	r3, r3, #1
 8009278:	2203      	movs	r2, #3
 800927a:	409a      	lsls	r2, r3
 800927c:	0013      	movs	r3, r2
 800927e:	43da      	mvns	r2, r3
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	4013      	ands	r3, r2
 8009284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	689a      	ldr	r2, [r3, #8]
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	409a      	lsls	r2, r3
 8009290:	0013      	movs	r3, r2
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	4313      	orrs	r3, r2
 8009296:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	2203      	movs	r2, #3
 80092a4:	4013      	ands	r3, r2
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d123      	bne.n	80092f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	08da      	lsrs	r2, r3, #3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	3208      	adds	r2, #8
 80092b2:	0092      	lsls	r2, r2, #2
 80092b4:	58d3      	ldr	r3, [r2, r3]
 80092b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	2207      	movs	r2, #7
 80092bc:	4013      	ands	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	220f      	movs	r2, #15
 80092c2:	409a      	lsls	r2, r3
 80092c4:	0013      	movs	r3, r2
 80092c6:	43da      	mvns	r2, r3
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	4013      	ands	r3, r2
 80092cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	691a      	ldr	r2, [r3, #16]
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	2107      	movs	r1, #7
 80092d6:	400b      	ands	r3, r1
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	409a      	lsls	r2, r3
 80092dc:	0013      	movs	r3, r2
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	08da      	lsrs	r2, r3, #3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3208      	adds	r2, #8
 80092ec:	0092      	lsls	r2, r2, #2
 80092ee:	6939      	ldr	r1, [r7, #16]
 80092f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	2203      	movs	r2, #3
 80092fe:	409a      	lsls	r2, r3
 8009300:	0013      	movs	r3, r2
 8009302:	43da      	mvns	r2, r3
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	4013      	ands	r3, r2
 8009308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	2203      	movs	r2, #3
 8009310:	401a      	ands	r2, r3
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	409a      	lsls	r2, r3
 8009318:	0013      	movs	r3, r2
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	4313      	orrs	r3, r2
 800931e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	23c0      	movs	r3, #192	; 0xc0
 800932c:	029b      	lsls	r3, r3, #10
 800932e:	4013      	ands	r3, r2
 8009330:	d100      	bne.n	8009334 <HAL_GPIO_Init+0x174>
 8009332:	e092      	b.n	800945a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8009334:	4a50      	ldr	r2, [pc, #320]	; (8009478 <HAL_GPIO_Init+0x2b8>)
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	089b      	lsrs	r3, r3, #2
 800933a:	3318      	adds	r3, #24
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	589b      	ldr	r3, [r3, r2]
 8009340:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2203      	movs	r2, #3
 8009346:	4013      	ands	r3, r2
 8009348:	00db      	lsls	r3, r3, #3
 800934a:	220f      	movs	r2, #15
 800934c:	409a      	lsls	r2, r3
 800934e:	0013      	movs	r3, r2
 8009350:	43da      	mvns	r2, r3
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	4013      	ands	r3, r2
 8009356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	23a0      	movs	r3, #160	; 0xa0
 800935c:	05db      	lsls	r3, r3, #23
 800935e:	429a      	cmp	r2, r3
 8009360:	d013      	beq.n	800938a <HAL_GPIO_Init+0x1ca>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a45      	ldr	r2, [pc, #276]	; (800947c <HAL_GPIO_Init+0x2bc>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d00d      	beq.n	8009386 <HAL_GPIO_Init+0x1c6>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a44      	ldr	r2, [pc, #272]	; (8009480 <HAL_GPIO_Init+0x2c0>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d007      	beq.n	8009382 <HAL_GPIO_Init+0x1c2>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a43      	ldr	r2, [pc, #268]	; (8009484 <HAL_GPIO_Init+0x2c4>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d101      	bne.n	800937e <HAL_GPIO_Init+0x1be>
 800937a:	2303      	movs	r3, #3
 800937c:	e006      	b.n	800938c <HAL_GPIO_Init+0x1cc>
 800937e:	2305      	movs	r3, #5
 8009380:	e004      	b.n	800938c <HAL_GPIO_Init+0x1cc>
 8009382:	2302      	movs	r3, #2
 8009384:	e002      	b.n	800938c <HAL_GPIO_Init+0x1cc>
 8009386:	2301      	movs	r3, #1
 8009388:	e000      	b.n	800938c <HAL_GPIO_Init+0x1cc>
 800938a:	2300      	movs	r3, #0
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	2103      	movs	r1, #3
 8009390:	400a      	ands	r2, r1
 8009392:	00d2      	lsls	r2, r2, #3
 8009394:	4093      	lsls	r3, r2
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	4313      	orrs	r3, r2
 800939a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800939c:	4936      	ldr	r1, [pc, #216]	; (8009478 <HAL_GPIO_Init+0x2b8>)
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	089b      	lsrs	r3, r3, #2
 80093a2:	3318      	adds	r3, #24
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	693a      	ldr	r2, [r7, #16]
 80093a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80093aa:	4b33      	ldr	r3, [pc, #204]	; (8009478 <HAL_GPIO_Init+0x2b8>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	43da      	mvns	r2, r3
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	4013      	ands	r3, r2
 80093b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	2380      	movs	r3, #128	; 0x80
 80093c0:	035b      	lsls	r3, r3, #13
 80093c2:	4013      	ands	r3, r2
 80093c4:	d003      	beq.n	80093ce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80093ce:	4b2a      	ldr	r3, [pc, #168]	; (8009478 <HAL_GPIO_Init+0x2b8>)
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80093d4:	4b28      	ldr	r3, [pc, #160]	; (8009478 <HAL_GPIO_Init+0x2b8>)
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	43da      	mvns	r2, r3
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	4013      	ands	r3, r2
 80093e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	2380      	movs	r3, #128	; 0x80
 80093ea:	039b      	lsls	r3, r3, #14
 80093ec:	4013      	ands	r3, r2
 80093ee:	d003      	beq.n	80093f8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80093f8:	4b1f      	ldr	r3, [pc, #124]	; (8009478 <HAL_GPIO_Init+0x2b8>)
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80093fe:	4a1e      	ldr	r2, [pc, #120]	; (8009478 <HAL_GPIO_Init+0x2b8>)
 8009400:	2384      	movs	r3, #132	; 0x84
 8009402:	58d3      	ldr	r3, [r2, r3]
 8009404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	43da      	mvns	r2, r3
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	4013      	ands	r3, r2
 800940e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	2380      	movs	r3, #128	; 0x80
 8009416:	029b      	lsls	r3, r3, #10
 8009418:	4013      	ands	r3, r2
 800941a:	d003      	beq.n	8009424 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	4313      	orrs	r3, r2
 8009422:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009424:	4914      	ldr	r1, [pc, #80]	; (8009478 <HAL_GPIO_Init+0x2b8>)
 8009426:	2284      	movs	r2, #132	; 0x84
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800942c:	4a12      	ldr	r2, [pc, #72]	; (8009478 <HAL_GPIO_Init+0x2b8>)
 800942e:	2380      	movs	r3, #128	; 0x80
 8009430:	58d3      	ldr	r3, [r2, r3]
 8009432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	43da      	mvns	r2, r3
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	4013      	ands	r3, r2
 800943c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	685a      	ldr	r2, [r3, #4]
 8009442:	2380      	movs	r3, #128	; 0x80
 8009444:	025b      	lsls	r3, r3, #9
 8009446:	4013      	ands	r3, r2
 8009448:	d003      	beq.n	8009452 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4313      	orrs	r3, r2
 8009450:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009452:	4909      	ldr	r1, [pc, #36]	; (8009478 <HAL_GPIO_Init+0x2b8>)
 8009454:	2280      	movs	r2, #128	; 0x80
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	3301      	adds	r3, #1
 800945e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	40da      	lsrs	r2, r3
 8009468:	1e13      	subs	r3, r2, #0
 800946a:	d000      	beq.n	800946e <HAL_GPIO_Init+0x2ae>
 800946c:	e6b0      	b.n	80091d0 <HAL_GPIO_Init+0x10>
  }
}
 800946e:	46c0      	nop			; (mov r8, r8)
 8009470:	46c0      	nop			; (mov r8, r8)
 8009472:	46bd      	mov	sp, r7
 8009474:	b006      	add	sp, #24
 8009476:	bd80      	pop	{r7, pc}
 8009478:	40021800 	.word	0x40021800
 800947c:	50000400 	.word	0x50000400
 8009480:	50000800 	.word	0x50000800
 8009484:	50000c00 	.word	0x50000c00

08009488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	000a      	movs	r2, r1
 8009492:	1cbb      	adds	r3, r7, #2
 8009494:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	1cba      	adds	r2, r7, #2
 800949c:	8812      	ldrh	r2, [r2, #0]
 800949e:	4013      	ands	r3, r2
 80094a0:	d004      	beq.n	80094ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80094a2:	230f      	movs	r3, #15
 80094a4:	18fb      	adds	r3, r7, r3
 80094a6:	2201      	movs	r2, #1
 80094a8:	701a      	strb	r2, [r3, #0]
 80094aa:	e003      	b.n	80094b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80094ac:	230f      	movs	r3, #15
 80094ae:	18fb      	adds	r3, r7, r3
 80094b0:	2200      	movs	r2, #0
 80094b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80094b4:	230f      	movs	r3, #15
 80094b6:	18fb      	adds	r3, r7, r3
 80094b8:	781b      	ldrb	r3, [r3, #0]
}
 80094ba:	0018      	movs	r0, r3
 80094bc:	46bd      	mov	sp, r7
 80094be:	b004      	add	sp, #16
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	0008      	movs	r0, r1
 80094cc:	0011      	movs	r1, r2
 80094ce:	1cbb      	adds	r3, r7, #2
 80094d0:	1c02      	adds	r2, r0, #0
 80094d2:	801a      	strh	r2, [r3, #0]
 80094d4:	1c7b      	adds	r3, r7, #1
 80094d6:	1c0a      	adds	r2, r1, #0
 80094d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80094da:	1c7b      	adds	r3, r7, #1
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d004      	beq.n	80094ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80094e2:	1cbb      	adds	r3, r7, #2
 80094e4:	881a      	ldrh	r2, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80094ea:	e003      	b.n	80094f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80094ec:	1cbb      	adds	r3, r7, #2
 80094ee:	881a      	ldrh	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80094f4:	46c0      	nop			; (mov r8, r8)
 80094f6:	46bd      	mov	sp, r7
 80094f8:	b002      	add	sp, #8
 80094fa:	bd80      	pop	{r7, pc}

080094fc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	000a      	movs	r2, r1
 8009506:	1cbb      	adds	r3, r7, #2
 8009508:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009510:	1cbb      	adds	r3, r7, #2
 8009512:	881b      	ldrh	r3, [r3, #0]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	4013      	ands	r3, r2
 8009518:	041a      	lsls	r2, r3, #16
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	43db      	mvns	r3, r3
 800951e:	1cb9      	adds	r1, r7, #2
 8009520:	8809      	ldrh	r1, [r1, #0]
 8009522:	400b      	ands	r3, r1
 8009524:	431a      	orrs	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	619a      	str	r2, [r3, #24]
}
 800952a:	46c0      	nop			; (mov r8, r8)
 800952c:	46bd      	mov	sp, r7
 800952e:	b004      	add	sp, #16
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800953c:	4b19      	ldr	r3, [pc, #100]	; (80095a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a19      	ldr	r2, [pc, #100]	; (80095a8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8009542:	4013      	ands	r3, r2
 8009544:	0019      	movs	r1, r3
 8009546:	4b17      	ldr	r3, [pc, #92]	; (80095a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	430a      	orrs	r2, r1
 800954c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	2380      	movs	r3, #128	; 0x80
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	429a      	cmp	r2, r3
 8009556:	d11f      	bne.n	8009598 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009558:	4b14      	ldr	r3, [pc, #80]	; (80095ac <HAL_PWREx_ControlVoltageScaling+0x78>)
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	0013      	movs	r3, r2
 800955e:	005b      	lsls	r3, r3, #1
 8009560:	189b      	adds	r3, r3, r2
 8009562:	005b      	lsls	r3, r3, #1
 8009564:	4912      	ldr	r1, [pc, #72]	; (80095b0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8009566:	0018      	movs	r0, r3
 8009568:	f7f6 fdf0 	bl	800014c <__udivsi3>
 800956c:	0003      	movs	r3, r0
 800956e:	3301      	adds	r3, #1
 8009570:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009572:	e008      	b.n	8009586 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d003      	beq.n	8009582 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	3b01      	subs	r3, #1
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	e001      	b.n	8009586 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e009      	b.n	800959a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009586:	4b07      	ldr	r3, [pc, #28]	; (80095a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009588:	695a      	ldr	r2, [r3, #20]
 800958a:	2380      	movs	r3, #128	; 0x80
 800958c:	00db      	lsls	r3, r3, #3
 800958e:	401a      	ands	r2, r3
 8009590:	2380      	movs	r3, #128	; 0x80
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	429a      	cmp	r2, r3
 8009596:	d0ed      	beq.n	8009574 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	0018      	movs	r0, r3
 800959c:	46bd      	mov	sp, r7
 800959e:	b004      	add	sp, #16
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	46c0      	nop			; (mov r8, r8)
 80095a4:	40007000 	.word	0x40007000
 80095a8:	fffff9ff 	.word	0xfffff9ff
 80095ac:	200000d4 	.word	0x200000d4
 80095b0:	000f4240 	.word	0x000f4240

080095b4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80095b8:	4b03      	ldr	r3, [pc, #12]	; (80095c8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	23e0      	movs	r3, #224	; 0xe0
 80095be:	01db      	lsls	r3, r3, #7
 80095c0:	4013      	ands	r3, r2
}
 80095c2:	0018      	movs	r0, r3
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	40021000 	.word	0x40021000

080095cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b088      	sub	sp, #32
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e2f3      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2201      	movs	r2, #1
 80095e4:	4013      	ands	r3, r2
 80095e6:	d100      	bne.n	80095ea <HAL_RCC_OscConfig+0x1e>
 80095e8:	e07c      	b.n	80096e4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095ea:	4bc3      	ldr	r3, [pc, #780]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	2238      	movs	r2, #56	; 0x38
 80095f0:	4013      	ands	r3, r2
 80095f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80095f4:	4bc0      	ldr	r3, [pc, #768]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	2203      	movs	r2, #3
 80095fa:	4013      	ands	r3, r2
 80095fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	2b10      	cmp	r3, #16
 8009602:	d102      	bne.n	800960a <HAL_RCC_OscConfig+0x3e>
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	2b03      	cmp	r3, #3
 8009608:	d002      	beq.n	8009610 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	2b08      	cmp	r3, #8
 800960e:	d10b      	bne.n	8009628 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009610:	4bb9      	ldr	r3, [pc, #740]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	2380      	movs	r3, #128	; 0x80
 8009616:	029b      	lsls	r3, r3, #10
 8009618:	4013      	ands	r3, r2
 800961a:	d062      	beq.n	80096e2 <HAL_RCC_OscConfig+0x116>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d15e      	bne.n	80096e2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e2ce      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	2380      	movs	r3, #128	; 0x80
 800962e:	025b      	lsls	r3, r3, #9
 8009630:	429a      	cmp	r2, r3
 8009632:	d107      	bne.n	8009644 <HAL_RCC_OscConfig+0x78>
 8009634:	4bb0      	ldr	r3, [pc, #704]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	4baf      	ldr	r3, [pc, #700]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 800963a:	2180      	movs	r1, #128	; 0x80
 800963c:	0249      	lsls	r1, r1, #9
 800963e:	430a      	orrs	r2, r1
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	e020      	b.n	8009686 <HAL_RCC_OscConfig+0xba>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	23a0      	movs	r3, #160	; 0xa0
 800964a:	02db      	lsls	r3, r3, #11
 800964c:	429a      	cmp	r2, r3
 800964e:	d10e      	bne.n	800966e <HAL_RCC_OscConfig+0xa2>
 8009650:	4ba9      	ldr	r3, [pc, #676]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	4ba8      	ldr	r3, [pc, #672]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009656:	2180      	movs	r1, #128	; 0x80
 8009658:	02c9      	lsls	r1, r1, #11
 800965a:	430a      	orrs	r2, r1
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	4ba6      	ldr	r3, [pc, #664]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	4ba5      	ldr	r3, [pc, #660]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009664:	2180      	movs	r1, #128	; 0x80
 8009666:	0249      	lsls	r1, r1, #9
 8009668:	430a      	orrs	r2, r1
 800966a:	601a      	str	r2, [r3, #0]
 800966c:	e00b      	b.n	8009686 <HAL_RCC_OscConfig+0xba>
 800966e:	4ba2      	ldr	r3, [pc, #648]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	4ba1      	ldr	r3, [pc, #644]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009674:	49a1      	ldr	r1, [pc, #644]	; (80098fc <HAL_RCC_OscConfig+0x330>)
 8009676:	400a      	ands	r2, r1
 8009678:	601a      	str	r2, [r3, #0]
 800967a:	4b9f      	ldr	r3, [pc, #636]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	4b9e      	ldr	r3, [pc, #632]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009680:	499f      	ldr	r1, [pc, #636]	; (8009900 <HAL_RCC_OscConfig+0x334>)
 8009682:	400a      	ands	r2, r1
 8009684:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d014      	beq.n	80096b8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800968e:	f7ff fbbf 	bl	8008e10 <HAL_GetTick>
 8009692:	0003      	movs	r3, r0
 8009694:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009696:	e008      	b.n	80096aa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009698:	f7ff fbba 	bl	8008e10 <HAL_GetTick>
 800969c:	0002      	movs	r2, r0
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	2b64      	cmp	r3, #100	; 0x64
 80096a4:	d901      	bls.n	80096aa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	e28d      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096aa:	4b93      	ldr	r3, [pc, #588]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	2380      	movs	r3, #128	; 0x80
 80096b0:	029b      	lsls	r3, r3, #10
 80096b2:	4013      	ands	r3, r2
 80096b4:	d0f0      	beq.n	8009698 <HAL_RCC_OscConfig+0xcc>
 80096b6:	e015      	b.n	80096e4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096b8:	f7ff fbaa 	bl	8008e10 <HAL_GetTick>
 80096bc:	0003      	movs	r3, r0
 80096be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80096c0:	e008      	b.n	80096d4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096c2:	f7ff fba5 	bl	8008e10 <HAL_GetTick>
 80096c6:	0002      	movs	r2, r0
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	2b64      	cmp	r3, #100	; 0x64
 80096ce:	d901      	bls.n	80096d4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80096d0:	2303      	movs	r3, #3
 80096d2:	e278      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80096d4:	4b88      	ldr	r3, [pc, #544]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	2380      	movs	r3, #128	; 0x80
 80096da:	029b      	lsls	r3, r3, #10
 80096dc:	4013      	ands	r3, r2
 80096de:	d1f0      	bne.n	80096c2 <HAL_RCC_OscConfig+0xf6>
 80096e0:	e000      	b.n	80096e4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2202      	movs	r2, #2
 80096ea:	4013      	ands	r3, r2
 80096ec:	d100      	bne.n	80096f0 <HAL_RCC_OscConfig+0x124>
 80096ee:	e099      	b.n	8009824 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096f0:	4b81      	ldr	r3, [pc, #516]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	2238      	movs	r2, #56	; 0x38
 80096f6:	4013      	ands	r3, r2
 80096f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80096fa:	4b7f      	ldr	r3, [pc, #508]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	2203      	movs	r2, #3
 8009700:	4013      	ands	r3, r2
 8009702:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	2b10      	cmp	r3, #16
 8009708:	d102      	bne.n	8009710 <HAL_RCC_OscConfig+0x144>
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	2b02      	cmp	r3, #2
 800970e:	d002      	beq.n	8009716 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d135      	bne.n	8009782 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009716:	4b78      	ldr	r3, [pc, #480]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	2380      	movs	r3, #128	; 0x80
 800971c:	00db      	lsls	r3, r3, #3
 800971e:	4013      	ands	r3, r2
 8009720:	d005      	beq.n	800972e <HAL_RCC_OscConfig+0x162>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e24b      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800972e:	4b72      	ldr	r3, [pc, #456]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	4a74      	ldr	r2, [pc, #464]	; (8009904 <HAL_RCC_OscConfig+0x338>)
 8009734:	4013      	ands	r3, r2
 8009736:	0019      	movs	r1, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	021a      	lsls	r2, r3, #8
 800973e:	4b6e      	ldr	r3, [pc, #440]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009740:	430a      	orrs	r2, r1
 8009742:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d112      	bne.n	8009770 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800974a:	4b6b      	ldr	r3, [pc, #428]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a6e      	ldr	r2, [pc, #440]	; (8009908 <HAL_RCC_OscConfig+0x33c>)
 8009750:	4013      	ands	r3, r2
 8009752:	0019      	movs	r1, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	691a      	ldr	r2, [r3, #16]
 8009758:	4b67      	ldr	r3, [pc, #412]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 800975a:	430a      	orrs	r2, r1
 800975c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800975e:	4b66      	ldr	r3, [pc, #408]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	0adb      	lsrs	r3, r3, #11
 8009764:	2207      	movs	r2, #7
 8009766:	4013      	ands	r3, r2
 8009768:	4a68      	ldr	r2, [pc, #416]	; (800990c <HAL_RCC_OscConfig+0x340>)
 800976a:	40da      	lsrs	r2, r3
 800976c:	4b68      	ldr	r3, [pc, #416]	; (8009910 <HAL_RCC_OscConfig+0x344>)
 800976e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009770:	4b68      	ldr	r3, [pc, #416]	; (8009914 <HAL_RCC_OscConfig+0x348>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	0018      	movs	r0, r3
 8009776:	f7ff faef 	bl	8008d58 <HAL_InitTick>
 800977a:	1e03      	subs	r3, r0, #0
 800977c:	d051      	beq.n	8009822 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e221      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d030      	beq.n	80097ec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800978a:	4b5b      	ldr	r3, [pc, #364]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a5e      	ldr	r2, [pc, #376]	; (8009908 <HAL_RCC_OscConfig+0x33c>)
 8009790:	4013      	ands	r3, r2
 8009792:	0019      	movs	r1, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	691a      	ldr	r2, [r3, #16]
 8009798:	4b57      	ldr	r3, [pc, #348]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 800979a:	430a      	orrs	r2, r1
 800979c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800979e:	4b56      	ldr	r3, [pc, #344]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	4b55      	ldr	r3, [pc, #340]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80097a4:	2180      	movs	r1, #128	; 0x80
 80097a6:	0049      	lsls	r1, r1, #1
 80097a8:	430a      	orrs	r2, r1
 80097aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097ac:	f7ff fb30 	bl	8008e10 <HAL_GetTick>
 80097b0:	0003      	movs	r3, r0
 80097b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80097b4:	e008      	b.n	80097c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097b6:	f7ff fb2b 	bl	8008e10 <HAL_GetTick>
 80097ba:	0002      	movs	r2, r0
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d901      	bls.n	80097c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80097c4:	2303      	movs	r3, #3
 80097c6:	e1fe      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80097c8:	4b4b      	ldr	r3, [pc, #300]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	2380      	movs	r3, #128	; 0x80
 80097ce:	00db      	lsls	r3, r3, #3
 80097d0:	4013      	ands	r3, r2
 80097d2:	d0f0      	beq.n	80097b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097d4:	4b48      	ldr	r3, [pc, #288]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	4a4a      	ldr	r2, [pc, #296]	; (8009904 <HAL_RCC_OscConfig+0x338>)
 80097da:	4013      	ands	r3, r2
 80097dc:	0019      	movs	r1, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	021a      	lsls	r2, r3, #8
 80097e4:	4b44      	ldr	r3, [pc, #272]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80097e6:	430a      	orrs	r2, r1
 80097e8:	605a      	str	r2, [r3, #4]
 80097ea:	e01b      	b.n	8009824 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80097ec:	4b42      	ldr	r3, [pc, #264]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	4b41      	ldr	r3, [pc, #260]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80097f2:	4949      	ldr	r1, [pc, #292]	; (8009918 <HAL_RCC_OscConfig+0x34c>)
 80097f4:	400a      	ands	r2, r1
 80097f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f8:	f7ff fb0a 	bl	8008e10 <HAL_GetTick>
 80097fc:	0003      	movs	r3, r0
 80097fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009800:	e008      	b.n	8009814 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009802:	f7ff fb05 	bl	8008e10 <HAL_GetTick>
 8009806:	0002      	movs	r2, r0
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	2b02      	cmp	r3, #2
 800980e:	d901      	bls.n	8009814 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e1d8      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009814:	4b38      	ldr	r3, [pc, #224]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	2380      	movs	r3, #128	; 0x80
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	4013      	ands	r3, r2
 800981e:	d1f0      	bne.n	8009802 <HAL_RCC_OscConfig+0x236>
 8009820:	e000      	b.n	8009824 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009822:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2208      	movs	r2, #8
 800982a:	4013      	ands	r3, r2
 800982c:	d047      	beq.n	80098be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800982e:	4b32      	ldr	r3, [pc, #200]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	2238      	movs	r2, #56	; 0x38
 8009834:	4013      	ands	r3, r2
 8009836:	2b18      	cmp	r3, #24
 8009838:	d10a      	bne.n	8009850 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800983a:	4b2f      	ldr	r3, [pc, #188]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 800983c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800983e:	2202      	movs	r2, #2
 8009840:	4013      	ands	r3, r2
 8009842:	d03c      	beq.n	80098be <HAL_RCC_OscConfig+0x2f2>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d138      	bne.n	80098be <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e1ba      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d019      	beq.n	800988c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8009858:	4b27      	ldr	r3, [pc, #156]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 800985a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800985c:	4b26      	ldr	r3, [pc, #152]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 800985e:	2101      	movs	r1, #1
 8009860:	430a      	orrs	r2, r1
 8009862:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009864:	f7ff fad4 	bl	8008e10 <HAL_GetTick>
 8009868:	0003      	movs	r3, r0
 800986a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800986c:	e008      	b.n	8009880 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800986e:	f7ff facf 	bl	8008e10 <HAL_GetTick>
 8009872:	0002      	movs	r2, r0
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	2b02      	cmp	r3, #2
 800987a:	d901      	bls.n	8009880 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800987c:	2303      	movs	r3, #3
 800987e:	e1a2      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009880:	4b1d      	ldr	r3, [pc, #116]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009884:	2202      	movs	r2, #2
 8009886:	4013      	ands	r3, r2
 8009888:	d0f1      	beq.n	800986e <HAL_RCC_OscConfig+0x2a2>
 800988a:	e018      	b.n	80098be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800988c:	4b1a      	ldr	r3, [pc, #104]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 800988e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009890:	4b19      	ldr	r3, [pc, #100]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 8009892:	2101      	movs	r1, #1
 8009894:	438a      	bics	r2, r1
 8009896:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009898:	f7ff faba 	bl	8008e10 <HAL_GetTick>
 800989c:	0003      	movs	r3, r0
 800989e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80098a0:	e008      	b.n	80098b4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098a2:	f7ff fab5 	bl	8008e10 <HAL_GetTick>
 80098a6:	0002      	movs	r2, r0
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d901      	bls.n	80098b4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e188      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80098b4:	4b10      	ldr	r3, [pc, #64]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80098b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b8:	2202      	movs	r2, #2
 80098ba:	4013      	ands	r3, r2
 80098bc:	d1f1      	bne.n	80098a2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2204      	movs	r2, #4
 80098c4:	4013      	ands	r3, r2
 80098c6:	d100      	bne.n	80098ca <HAL_RCC_OscConfig+0x2fe>
 80098c8:	e0c6      	b.n	8009a58 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098ca:	231f      	movs	r3, #31
 80098cc:	18fb      	adds	r3, r7, r3
 80098ce:	2200      	movs	r2, #0
 80098d0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80098d2:	4b09      	ldr	r3, [pc, #36]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	2238      	movs	r2, #56	; 0x38
 80098d8:	4013      	ands	r3, r2
 80098da:	2b20      	cmp	r3, #32
 80098dc:	d11e      	bne.n	800991c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80098de:	4b06      	ldr	r3, [pc, #24]	; (80098f8 <HAL_RCC_OscConfig+0x32c>)
 80098e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098e2:	2202      	movs	r2, #2
 80098e4:	4013      	ands	r3, r2
 80098e6:	d100      	bne.n	80098ea <HAL_RCC_OscConfig+0x31e>
 80098e8:	e0b6      	b.n	8009a58 <HAL_RCC_OscConfig+0x48c>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d000      	beq.n	80098f4 <HAL_RCC_OscConfig+0x328>
 80098f2:	e0b1      	b.n	8009a58 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e166      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
 80098f8:	40021000 	.word	0x40021000
 80098fc:	fffeffff 	.word	0xfffeffff
 8009900:	fffbffff 	.word	0xfffbffff
 8009904:	ffff80ff 	.word	0xffff80ff
 8009908:	ffffc7ff 	.word	0xffffc7ff
 800990c:	00f42400 	.word	0x00f42400
 8009910:	200000d4 	.word	0x200000d4
 8009914:	200000d8 	.word	0x200000d8
 8009918:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800991c:	4bac      	ldr	r3, [pc, #688]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 800991e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009920:	2380      	movs	r3, #128	; 0x80
 8009922:	055b      	lsls	r3, r3, #21
 8009924:	4013      	ands	r3, r2
 8009926:	d101      	bne.n	800992c <HAL_RCC_OscConfig+0x360>
 8009928:	2301      	movs	r3, #1
 800992a:	e000      	b.n	800992e <HAL_RCC_OscConfig+0x362>
 800992c:	2300      	movs	r3, #0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d011      	beq.n	8009956 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009932:	4ba7      	ldr	r3, [pc, #668]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009936:	4ba6      	ldr	r3, [pc, #664]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009938:	2180      	movs	r1, #128	; 0x80
 800993a:	0549      	lsls	r1, r1, #21
 800993c:	430a      	orrs	r2, r1
 800993e:	63da      	str	r2, [r3, #60]	; 0x3c
 8009940:	4ba3      	ldr	r3, [pc, #652]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009944:	2380      	movs	r3, #128	; 0x80
 8009946:	055b      	lsls	r3, r3, #21
 8009948:	4013      	ands	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800994e:	231f      	movs	r3, #31
 8009950:	18fb      	adds	r3, r7, r3
 8009952:	2201      	movs	r2, #1
 8009954:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009956:	4b9f      	ldr	r3, [pc, #636]	; (8009bd4 <HAL_RCC_OscConfig+0x608>)
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	2380      	movs	r3, #128	; 0x80
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	4013      	ands	r3, r2
 8009960:	d11a      	bne.n	8009998 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009962:	4b9c      	ldr	r3, [pc, #624]	; (8009bd4 <HAL_RCC_OscConfig+0x608>)
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	4b9b      	ldr	r3, [pc, #620]	; (8009bd4 <HAL_RCC_OscConfig+0x608>)
 8009968:	2180      	movs	r1, #128	; 0x80
 800996a:	0049      	lsls	r1, r1, #1
 800996c:	430a      	orrs	r2, r1
 800996e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009970:	f7ff fa4e 	bl	8008e10 <HAL_GetTick>
 8009974:	0003      	movs	r3, r0
 8009976:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009978:	e008      	b.n	800998c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800997a:	f7ff fa49 	bl	8008e10 <HAL_GetTick>
 800997e:	0002      	movs	r2, r0
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	2b02      	cmp	r3, #2
 8009986:	d901      	bls.n	800998c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8009988:	2303      	movs	r3, #3
 800998a:	e11c      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800998c:	4b91      	ldr	r3, [pc, #580]	; (8009bd4 <HAL_RCC_OscConfig+0x608>)
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	2380      	movs	r3, #128	; 0x80
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	4013      	ands	r3, r2
 8009996:	d0f0      	beq.n	800997a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d106      	bne.n	80099ae <HAL_RCC_OscConfig+0x3e2>
 80099a0:	4b8b      	ldr	r3, [pc, #556]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 80099a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80099a4:	4b8a      	ldr	r3, [pc, #552]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 80099a6:	2101      	movs	r1, #1
 80099a8:	430a      	orrs	r2, r1
 80099aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80099ac:	e01c      	b.n	80099e8 <HAL_RCC_OscConfig+0x41c>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	2b05      	cmp	r3, #5
 80099b4:	d10c      	bne.n	80099d0 <HAL_RCC_OscConfig+0x404>
 80099b6:	4b86      	ldr	r3, [pc, #536]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 80099b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80099ba:	4b85      	ldr	r3, [pc, #532]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 80099bc:	2104      	movs	r1, #4
 80099be:	430a      	orrs	r2, r1
 80099c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80099c2:	4b83      	ldr	r3, [pc, #524]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 80099c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80099c6:	4b82      	ldr	r3, [pc, #520]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 80099c8:	2101      	movs	r1, #1
 80099ca:	430a      	orrs	r2, r1
 80099cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80099ce:	e00b      	b.n	80099e8 <HAL_RCC_OscConfig+0x41c>
 80099d0:	4b7f      	ldr	r3, [pc, #508]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 80099d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80099d4:	4b7e      	ldr	r3, [pc, #504]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 80099d6:	2101      	movs	r1, #1
 80099d8:	438a      	bics	r2, r1
 80099da:	65da      	str	r2, [r3, #92]	; 0x5c
 80099dc:	4b7c      	ldr	r3, [pc, #496]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 80099de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80099e0:	4b7b      	ldr	r3, [pc, #492]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 80099e2:	2104      	movs	r1, #4
 80099e4:	438a      	bics	r2, r1
 80099e6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d014      	beq.n	8009a1a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f0:	f7ff fa0e 	bl	8008e10 <HAL_GetTick>
 80099f4:	0003      	movs	r3, r0
 80099f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099f8:	e009      	b.n	8009a0e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099fa:	f7ff fa09 	bl	8008e10 <HAL_GetTick>
 80099fe:	0002      	movs	r2, r0
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	4a74      	ldr	r2, [pc, #464]	; (8009bd8 <HAL_RCC_OscConfig+0x60c>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d901      	bls.n	8009a0e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e0db      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a0e:	4b70      	ldr	r3, [pc, #448]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a12:	2202      	movs	r2, #2
 8009a14:	4013      	ands	r3, r2
 8009a16:	d0f0      	beq.n	80099fa <HAL_RCC_OscConfig+0x42e>
 8009a18:	e013      	b.n	8009a42 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a1a:	f7ff f9f9 	bl	8008e10 <HAL_GetTick>
 8009a1e:	0003      	movs	r3, r0
 8009a20:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a22:	e009      	b.n	8009a38 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a24:	f7ff f9f4 	bl	8008e10 <HAL_GetTick>
 8009a28:	0002      	movs	r2, r0
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	4a6a      	ldr	r2, [pc, #424]	; (8009bd8 <HAL_RCC_OscConfig+0x60c>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d901      	bls.n	8009a38 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8009a34:	2303      	movs	r3, #3
 8009a36:	e0c6      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009a38:	4b65      	ldr	r3, [pc, #404]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a3c:	2202      	movs	r2, #2
 8009a3e:	4013      	ands	r3, r2
 8009a40:	d1f0      	bne.n	8009a24 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009a42:	231f      	movs	r3, #31
 8009a44:	18fb      	adds	r3, r7, r3
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d105      	bne.n	8009a58 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009a4c:	4b60      	ldr	r3, [pc, #384]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a50:	4b5f      	ldr	r3, [pc, #380]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009a52:	4962      	ldr	r1, [pc, #392]	; (8009bdc <HAL_RCC_OscConfig+0x610>)
 8009a54:	400a      	ands	r2, r1
 8009a56:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d100      	bne.n	8009a62 <HAL_RCC_OscConfig+0x496>
 8009a60:	e0b0      	b.n	8009bc4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a62:	4b5b      	ldr	r3, [pc, #364]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	2238      	movs	r2, #56	; 0x38
 8009a68:	4013      	ands	r3, r2
 8009a6a:	2b10      	cmp	r3, #16
 8009a6c:	d100      	bne.n	8009a70 <HAL_RCC_OscConfig+0x4a4>
 8009a6e:	e078      	b.n	8009b62 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	69db      	ldr	r3, [r3, #28]
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d153      	bne.n	8009b20 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a78:	4b55      	ldr	r3, [pc, #340]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	4b54      	ldr	r3, [pc, #336]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009a7e:	4958      	ldr	r1, [pc, #352]	; (8009be0 <HAL_RCC_OscConfig+0x614>)
 8009a80:	400a      	ands	r2, r1
 8009a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a84:	f7ff f9c4 	bl	8008e10 <HAL_GetTick>
 8009a88:	0003      	movs	r3, r0
 8009a8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009a8c:	e008      	b.n	8009aa0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a8e:	f7ff f9bf 	bl	8008e10 <HAL_GetTick>
 8009a92:	0002      	movs	r2, r0
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d901      	bls.n	8009aa0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e092      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009aa0:	4b4b      	ldr	r3, [pc, #300]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	2380      	movs	r3, #128	; 0x80
 8009aa6:	049b      	lsls	r3, r3, #18
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	d1f0      	bne.n	8009a8e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009aac:	4b48      	ldr	r3, [pc, #288]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	4a4c      	ldr	r2, [pc, #304]	; (8009be4 <HAL_RCC_OscConfig+0x618>)
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	0019      	movs	r1, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1a      	ldr	r2, [r3, #32]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abe:	431a      	orrs	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac4:	021b      	lsls	r3, r3, #8
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	431a      	orrs	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad2:	431a      	orrs	r2, r3
 8009ad4:	4b3e      	ldr	r3, [pc, #248]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ada:	4b3d      	ldr	r3, [pc, #244]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	4b3c      	ldr	r3, [pc, #240]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009ae0:	2180      	movs	r1, #128	; 0x80
 8009ae2:	0449      	lsls	r1, r1, #17
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009ae8:	4b39      	ldr	r3, [pc, #228]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009aea:	68da      	ldr	r2, [r3, #12]
 8009aec:	4b38      	ldr	r3, [pc, #224]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009aee:	2180      	movs	r1, #128	; 0x80
 8009af0:	0549      	lsls	r1, r1, #21
 8009af2:	430a      	orrs	r2, r1
 8009af4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009af6:	f7ff f98b 	bl	8008e10 <HAL_GetTick>
 8009afa:	0003      	movs	r3, r0
 8009afc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009afe:	e008      	b.n	8009b12 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b00:	f7ff f986 	bl	8008e10 <HAL_GetTick>
 8009b04:	0002      	movs	r2, r0
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d901      	bls.n	8009b12 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e059      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b12:	4b2f      	ldr	r3, [pc, #188]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	2380      	movs	r3, #128	; 0x80
 8009b18:	049b      	lsls	r3, r3, #18
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	d0f0      	beq.n	8009b00 <HAL_RCC_OscConfig+0x534>
 8009b1e:	e051      	b.n	8009bc4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b20:	4b2b      	ldr	r3, [pc, #172]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	4b2a      	ldr	r3, [pc, #168]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009b26:	492e      	ldr	r1, [pc, #184]	; (8009be0 <HAL_RCC_OscConfig+0x614>)
 8009b28:	400a      	ands	r2, r1
 8009b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b2c:	f7ff f970 	bl	8008e10 <HAL_GetTick>
 8009b30:	0003      	movs	r3, r0
 8009b32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b34:	e008      	b.n	8009b48 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b36:	f7ff f96b 	bl	8008e10 <HAL_GetTick>
 8009b3a:	0002      	movs	r2, r0
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d901      	bls.n	8009b48 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e03e      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b48:	4b21      	ldr	r3, [pc, #132]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	2380      	movs	r3, #128	; 0x80
 8009b4e:	049b      	lsls	r3, r3, #18
 8009b50:	4013      	ands	r3, r2
 8009b52:	d1f0      	bne.n	8009b36 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8009b54:	4b1e      	ldr	r3, [pc, #120]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	4b1d      	ldr	r3, [pc, #116]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009b5a:	4923      	ldr	r1, [pc, #140]	; (8009be8 <HAL_RCC_OscConfig+0x61c>)
 8009b5c:	400a      	ands	r2, r1
 8009b5e:	60da      	str	r2, [r3, #12]
 8009b60:	e030      	b.n	8009bc4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	69db      	ldr	r3, [r3, #28]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d101      	bne.n	8009b6e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e02b      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8009b6e:	4b18      	ldr	r3, [pc, #96]	; (8009bd0 <HAL_RCC_OscConfig+0x604>)
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	2203      	movs	r2, #3
 8009b78:	401a      	ands	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a1b      	ldr	r3, [r3, #32]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d11e      	bne.n	8009bc0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2270      	movs	r2, #112	; 0x70
 8009b86:	401a      	ands	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d117      	bne.n	8009bc0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	23fe      	movs	r3, #254	; 0xfe
 8009b94:	01db      	lsls	r3, r3, #7
 8009b96:	401a      	ands	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d10e      	bne.n	8009bc0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	23f8      	movs	r3, #248	; 0xf8
 8009ba6:	039b      	lsls	r3, r3, #14
 8009ba8:	401a      	ands	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d106      	bne.n	8009bc0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	0f5b      	lsrs	r3, r3, #29
 8009bb6:	075a      	lsls	r2, r3, #29
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d001      	beq.n	8009bc4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e000      	b.n	8009bc6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	0018      	movs	r0, r3
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	b008      	add	sp, #32
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	46c0      	nop			; (mov r8, r8)
 8009bd0:	40021000 	.word	0x40021000
 8009bd4:	40007000 	.word	0x40007000
 8009bd8:	00001388 	.word	0x00001388
 8009bdc:	efffffff 	.word	0xefffffff
 8009be0:	feffffff 	.word	0xfeffffff
 8009be4:	1fc1808c 	.word	0x1fc1808c
 8009be8:	effefffc 	.word	0xeffefffc

08009bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e0e9      	b.n	8009dd4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c00:	4b76      	ldr	r3, [pc, #472]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2207      	movs	r2, #7
 8009c06:	4013      	ands	r3, r2
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d91e      	bls.n	8009c4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c0e:	4b73      	ldr	r3, [pc, #460]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2207      	movs	r2, #7
 8009c14:	4393      	bics	r3, r2
 8009c16:	0019      	movs	r1, r3
 8009c18:	4b70      	ldr	r3, [pc, #448]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	430a      	orrs	r2, r1
 8009c1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009c20:	f7ff f8f6 	bl	8008e10 <HAL_GetTick>
 8009c24:	0003      	movs	r3, r0
 8009c26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009c28:	e009      	b.n	8009c3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c2a:	f7ff f8f1 	bl	8008e10 <HAL_GetTick>
 8009c2e:	0002      	movs	r2, r0
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	4a6a      	ldr	r2, [pc, #424]	; (8009de0 <HAL_RCC_ClockConfig+0x1f4>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d901      	bls.n	8009c3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	e0ca      	b.n	8009dd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009c3e:	4b67      	ldr	r3, [pc, #412]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2207      	movs	r2, #7
 8009c44:	4013      	ands	r3, r2
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d1ee      	bne.n	8009c2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2202      	movs	r2, #2
 8009c52:	4013      	ands	r3, r2
 8009c54:	d015      	beq.n	8009c82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2204      	movs	r2, #4
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	d006      	beq.n	8009c6e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009c60:	4b60      	ldr	r3, [pc, #384]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009c62:	689a      	ldr	r2, [r3, #8]
 8009c64:	4b5f      	ldr	r3, [pc, #380]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009c66:	21e0      	movs	r1, #224	; 0xe0
 8009c68:	01c9      	lsls	r1, r1, #7
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c6e:	4b5d      	ldr	r3, [pc, #372]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	4a5d      	ldr	r2, [pc, #372]	; (8009de8 <HAL_RCC_ClockConfig+0x1fc>)
 8009c74:	4013      	ands	r3, r2
 8009c76:	0019      	movs	r1, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	689a      	ldr	r2, [r3, #8]
 8009c7c:	4b59      	ldr	r3, [pc, #356]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009c7e:	430a      	orrs	r2, r1
 8009c80:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2201      	movs	r2, #1
 8009c88:	4013      	ands	r3, r2
 8009c8a:	d057      	beq.n	8009d3c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d107      	bne.n	8009ca4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c94:	4b53      	ldr	r3, [pc, #332]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	2380      	movs	r3, #128	; 0x80
 8009c9a:	029b      	lsls	r3, r3, #10
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	d12b      	bne.n	8009cf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e097      	b.n	8009dd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d107      	bne.n	8009cbc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009cac:	4b4d      	ldr	r3, [pc, #308]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	2380      	movs	r3, #128	; 0x80
 8009cb2:	049b      	lsls	r3, r3, #18
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	d11f      	bne.n	8009cf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e08b      	b.n	8009dd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d107      	bne.n	8009cd4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009cc4:	4b47      	ldr	r3, [pc, #284]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	2380      	movs	r3, #128	; 0x80
 8009cca:	00db      	lsls	r3, r3, #3
 8009ccc:	4013      	ands	r3, r2
 8009cce:	d113      	bne.n	8009cf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e07f      	b.n	8009dd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	2b03      	cmp	r3, #3
 8009cda:	d106      	bne.n	8009cea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009cdc:	4b41      	ldr	r3, [pc, #260]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	4013      	ands	r3, r2
 8009ce4:	d108      	bne.n	8009cf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e074      	b.n	8009dd4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009cea:	4b3e      	ldr	r3, [pc, #248]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cee:	2202      	movs	r2, #2
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	d101      	bne.n	8009cf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e06d      	b.n	8009dd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009cf8:	4b3a      	ldr	r3, [pc, #232]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	2207      	movs	r2, #7
 8009cfe:	4393      	bics	r3, r2
 8009d00:	0019      	movs	r1, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	685a      	ldr	r2, [r3, #4]
 8009d06:	4b37      	ldr	r3, [pc, #220]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009d08:	430a      	orrs	r2, r1
 8009d0a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d0c:	f7ff f880 	bl	8008e10 <HAL_GetTick>
 8009d10:	0003      	movs	r3, r0
 8009d12:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d14:	e009      	b.n	8009d2a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d16:	f7ff f87b 	bl	8008e10 <HAL_GetTick>
 8009d1a:	0002      	movs	r2, r0
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	4a2f      	ldr	r2, [pc, #188]	; (8009de0 <HAL_RCC_ClockConfig+0x1f4>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d901      	bls.n	8009d2a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e054      	b.n	8009dd4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d2a:	4b2e      	ldr	r3, [pc, #184]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	2238      	movs	r2, #56	; 0x38
 8009d30:	401a      	ands	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	00db      	lsls	r3, r3, #3
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d1ec      	bne.n	8009d16 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009d3c:	4b27      	ldr	r3, [pc, #156]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2207      	movs	r2, #7
 8009d42:	4013      	ands	r3, r2
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d21e      	bcs.n	8009d88 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d4a:	4b24      	ldr	r3, [pc, #144]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2207      	movs	r2, #7
 8009d50:	4393      	bics	r3, r2
 8009d52:	0019      	movs	r1, r3
 8009d54:	4b21      	ldr	r3, [pc, #132]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	430a      	orrs	r2, r1
 8009d5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009d5c:	f7ff f858 	bl	8008e10 <HAL_GetTick>
 8009d60:	0003      	movs	r3, r0
 8009d62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009d64:	e009      	b.n	8009d7a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d66:	f7ff f853 	bl	8008e10 <HAL_GetTick>
 8009d6a:	0002      	movs	r2, r0
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	4a1b      	ldr	r2, [pc, #108]	; (8009de0 <HAL_RCC_ClockConfig+0x1f4>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d901      	bls.n	8009d7a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8009d76:	2303      	movs	r3, #3
 8009d78:	e02c      	b.n	8009dd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009d7a:	4b18      	ldr	r3, [pc, #96]	; (8009ddc <HAL_RCC_ClockConfig+0x1f0>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2207      	movs	r2, #7
 8009d80:	4013      	ands	r3, r2
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d1ee      	bne.n	8009d66 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2204      	movs	r2, #4
 8009d8e:	4013      	ands	r3, r2
 8009d90:	d009      	beq.n	8009da6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009d92:	4b14      	ldr	r3, [pc, #80]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	4a15      	ldr	r2, [pc, #84]	; (8009dec <HAL_RCC_ClockConfig+0x200>)
 8009d98:	4013      	ands	r3, r2
 8009d9a:	0019      	movs	r1, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	68da      	ldr	r2, [r3, #12]
 8009da0:	4b10      	ldr	r3, [pc, #64]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009da2:	430a      	orrs	r2, r1
 8009da4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8009da6:	f000 f829 	bl	8009dfc <HAL_RCC_GetSysClockFreq>
 8009daa:	0001      	movs	r1, r0
 8009dac:	4b0d      	ldr	r3, [pc, #52]	; (8009de4 <HAL_RCC_ClockConfig+0x1f8>)
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	0a1b      	lsrs	r3, r3, #8
 8009db2:	220f      	movs	r2, #15
 8009db4:	401a      	ands	r2, r3
 8009db6:	4b0e      	ldr	r3, [pc, #56]	; (8009df0 <HAL_RCC_ClockConfig+0x204>)
 8009db8:	0092      	lsls	r2, r2, #2
 8009dba:	58d3      	ldr	r3, [r2, r3]
 8009dbc:	221f      	movs	r2, #31
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	000a      	movs	r2, r1
 8009dc2:	40da      	lsrs	r2, r3
 8009dc4:	4b0b      	ldr	r3, [pc, #44]	; (8009df4 <HAL_RCC_ClockConfig+0x208>)
 8009dc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009dc8:	4b0b      	ldr	r3, [pc, #44]	; (8009df8 <HAL_RCC_ClockConfig+0x20c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	0018      	movs	r0, r3
 8009dce:	f7fe ffc3 	bl	8008d58 <HAL_InitTick>
 8009dd2:	0003      	movs	r3, r0
}
 8009dd4:	0018      	movs	r0, r3
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	b004      	add	sp, #16
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	40022000 	.word	0x40022000
 8009de0:	00001388 	.word	0x00001388
 8009de4:	40021000 	.word	0x40021000
 8009de8:	fffff0ff 	.word	0xfffff0ff
 8009dec:	ffff8fff 	.word	0xffff8fff
 8009df0:	08012a64 	.word	0x08012a64
 8009df4:	200000d4 	.word	0x200000d4
 8009df8:	200000d8 	.word	0x200000d8

08009dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009e02:	4b3c      	ldr	r3, [pc, #240]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	2238      	movs	r2, #56	; 0x38
 8009e08:	4013      	ands	r3, r2
 8009e0a:	d10f      	bne.n	8009e2c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009e0c:	4b39      	ldr	r3, [pc, #228]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	0adb      	lsrs	r3, r3, #11
 8009e12:	2207      	movs	r2, #7
 8009e14:	4013      	ands	r3, r2
 8009e16:	2201      	movs	r2, #1
 8009e18:	409a      	lsls	r2, r3
 8009e1a:	0013      	movs	r3, r2
 8009e1c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	4835      	ldr	r0, [pc, #212]	; (8009ef8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009e22:	f7f6 f993 	bl	800014c <__udivsi3>
 8009e26:	0003      	movs	r3, r0
 8009e28:	613b      	str	r3, [r7, #16]
 8009e2a:	e05d      	b.n	8009ee8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009e2c:	4b31      	ldr	r3, [pc, #196]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	2238      	movs	r2, #56	; 0x38
 8009e32:	4013      	ands	r3, r2
 8009e34:	2b08      	cmp	r3, #8
 8009e36:	d102      	bne.n	8009e3e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009e38:	4b30      	ldr	r3, [pc, #192]	; (8009efc <HAL_RCC_GetSysClockFreq+0x100>)
 8009e3a:	613b      	str	r3, [r7, #16]
 8009e3c:	e054      	b.n	8009ee8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e3e:	4b2d      	ldr	r3, [pc, #180]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	2238      	movs	r2, #56	; 0x38
 8009e44:	4013      	ands	r3, r2
 8009e46:	2b10      	cmp	r3, #16
 8009e48:	d138      	bne.n	8009ebc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009e4a:	4b2a      	ldr	r3, [pc, #168]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	2203      	movs	r2, #3
 8009e50:	4013      	ands	r3, r2
 8009e52:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e54:	4b27      	ldr	r3, [pc, #156]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	091b      	lsrs	r3, r3, #4
 8009e5a:	2207      	movs	r2, #7
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	3301      	adds	r3, #1
 8009e60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2b03      	cmp	r3, #3
 8009e66:	d10d      	bne.n	8009e84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009e68:	68b9      	ldr	r1, [r7, #8]
 8009e6a:	4824      	ldr	r0, [pc, #144]	; (8009efc <HAL_RCC_GetSysClockFreq+0x100>)
 8009e6c:	f7f6 f96e 	bl	800014c <__udivsi3>
 8009e70:	0003      	movs	r3, r0
 8009e72:	0019      	movs	r1, r3
 8009e74:	4b1f      	ldr	r3, [pc, #124]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	0a1b      	lsrs	r3, r3, #8
 8009e7a:	227f      	movs	r2, #127	; 0x7f
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	434b      	muls	r3, r1
 8009e80:	617b      	str	r3, [r7, #20]
        break;
 8009e82:	e00d      	b.n	8009ea0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009e84:	68b9      	ldr	r1, [r7, #8]
 8009e86:	481c      	ldr	r0, [pc, #112]	; (8009ef8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009e88:	f7f6 f960 	bl	800014c <__udivsi3>
 8009e8c:	0003      	movs	r3, r0
 8009e8e:	0019      	movs	r1, r3
 8009e90:	4b18      	ldr	r3, [pc, #96]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	0a1b      	lsrs	r3, r3, #8
 8009e96:	227f      	movs	r2, #127	; 0x7f
 8009e98:	4013      	ands	r3, r2
 8009e9a:	434b      	muls	r3, r1
 8009e9c:	617b      	str	r3, [r7, #20]
        break;
 8009e9e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009ea0:	4b14      	ldr	r3, [pc, #80]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	0f5b      	lsrs	r3, r3, #29
 8009ea6:	2207      	movs	r2, #7
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	3301      	adds	r3, #1
 8009eac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8009eae:	6879      	ldr	r1, [r7, #4]
 8009eb0:	6978      	ldr	r0, [r7, #20]
 8009eb2:	f7f6 f94b 	bl	800014c <__udivsi3>
 8009eb6:	0003      	movs	r3, r0
 8009eb8:	613b      	str	r3, [r7, #16]
 8009eba:	e015      	b.n	8009ee8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009ebc:	4b0d      	ldr	r3, [pc, #52]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	2238      	movs	r2, #56	; 0x38
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	2b20      	cmp	r3, #32
 8009ec6:	d103      	bne.n	8009ed0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8009ec8:	2380      	movs	r3, #128	; 0x80
 8009eca:	021b      	lsls	r3, r3, #8
 8009ecc:	613b      	str	r3, [r7, #16]
 8009ece:	e00b      	b.n	8009ee8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009ed0:	4b08      	ldr	r3, [pc, #32]	; (8009ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	2238      	movs	r2, #56	; 0x38
 8009ed6:	4013      	ands	r3, r2
 8009ed8:	2b18      	cmp	r3, #24
 8009eda:	d103      	bne.n	8009ee4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8009edc:	23fa      	movs	r3, #250	; 0xfa
 8009ede:	01db      	lsls	r3, r3, #7
 8009ee0:	613b      	str	r3, [r7, #16]
 8009ee2:	e001      	b.n	8009ee8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009ee8:	693b      	ldr	r3, [r7, #16]
}
 8009eea:	0018      	movs	r0, r3
 8009eec:	46bd      	mov	sp, r7
 8009eee:	b006      	add	sp, #24
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	46c0      	nop			; (mov r8, r8)
 8009ef4:	40021000 	.word	0x40021000
 8009ef8:	00f42400 	.word	0x00f42400
 8009efc:	007a1200 	.word	0x007a1200

08009f00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f04:	4b02      	ldr	r3, [pc, #8]	; (8009f10 <HAL_RCC_GetHCLKFreq+0x10>)
 8009f06:	681b      	ldr	r3, [r3, #0]
}
 8009f08:	0018      	movs	r0, r3
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	46c0      	nop			; (mov r8, r8)
 8009f10:	200000d4 	.word	0x200000d4

08009f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f14:	b5b0      	push	{r4, r5, r7, lr}
 8009f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009f18:	f7ff fff2 	bl	8009f00 <HAL_RCC_GetHCLKFreq>
 8009f1c:	0004      	movs	r4, r0
 8009f1e:	f7ff fb49 	bl	80095b4 <LL_RCC_GetAPB1Prescaler>
 8009f22:	0003      	movs	r3, r0
 8009f24:	0b1a      	lsrs	r2, r3, #12
 8009f26:	4b05      	ldr	r3, [pc, #20]	; (8009f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009f28:	0092      	lsls	r2, r2, #2
 8009f2a:	58d3      	ldr	r3, [r2, r3]
 8009f2c:	221f      	movs	r2, #31
 8009f2e:	4013      	ands	r3, r2
 8009f30:	40dc      	lsrs	r4, r3
 8009f32:	0023      	movs	r3, r4
}
 8009f34:	0018      	movs	r0, r3
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bdb0      	pop	{r4, r5, r7, pc}
 8009f3a:	46c0      	nop			; (mov r8, r8)
 8009f3c:	08012aa4 	.word	0x08012aa4

08009f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009f48:	2313      	movs	r3, #19
 8009f4a:	18fb      	adds	r3, r7, r3
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009f50:	2312      	movs	r3, #18
 8009f52:	18fb      	adds	r3, r7, r3
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	2380      	movs	r3, #128	; 0x80
 8009f5e:	029b      	lsls	r3, r3, #10
 8009f60:	4013      	ands	r3, r2
 8009f62:	d100      	bne.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8009f64:	e0a3      	b.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f66:	2011      	movs	r0, #17
 8009f68:	183b      	adds	r3, r7, r0
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f6e:	4b86      	ldr	r3, [pc, #536]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f72:	2380      	movs	r3, #128	; 0x80
 8009f74:	055b      	lsls	r3, r3, #21
 8009f76:	4013      	ands	r3, r2
 8009f78:	d110      	bne.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f7a:	4b83      	ldr	r3, [pc, #524]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f7e:	4b82      	ldr	r3, [pc, #520]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009f80:	2180      	movs	r1, #128	; 0x80
 8009f82:	0549      	lsls	r1, r1, #21
 8009f84:	430a      	orrs	r2, r1
 8009f86:	63da      	str	r2, [r3, #60]	; 0x3c
 8009f88:	4b7f      	ldr	r3, [pc, #508]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f8c:	2380      	movs	r3, #128	; 0x80
 8009f8e:	055b      	lsls	r3, r3, #21
 8009f90:	4013      	ands	r3, r2
 8009f92:	60bb      	str	r3, [r7, #8]
 8009f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009f96:	183b      	adds	r3, r7, r0
 8009f98:	2201      	movs	r2, #1
 8009f9a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f9c:	4b7b      	ldr	r3, [pc, #492]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	4b7a      	ldr	r3, [pc, #488]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8009fa2:	2180      	movs	r1, #128	; 0x80
 8009fa4:	0049      	lsls	r1, r1, #1
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009faa:	f7fe ff31 	bl	8008e10 <HAL_GetTick>
 8009fae:	0003      	movs	r3, r0
 8009fb0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fb2:	e00b      	b.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fb4:	f7fe ff2c 	bl	8008e10 <HAL_GetTick>
 8009fb8:	0002      	movs	r2, r0
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d904      	bls.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8009fc2:	2313      	movs	r3, #19
 8009fc4:	18fb      	adds	r3, r7, r3
 8009fc6:	2203      	movs	r2, #3
 8009fc8:	701a      	strb	r2, [r3, #0]
        break;
 8009fca:	e005      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fcc:	4b6f      	ldr	r3, [pc, #444]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	2380      	movs	r3, #128	; 0x80
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	d0ed      	beq.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8009fd8:	2313      	movs	r3, #19
 8009fda:	18fb      	adds	r3, r7, r3
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d154      	bne.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009fe2:	4b69      	ldr	r3, [pc, #420]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009fe4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009fe6:	23c0      	movs	r3, #192	; 0xc0
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4013      	ands	r3, r2
 8009fec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d019      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d014      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009ffe:	4b62      	ldr	r3, [pc, #392]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a002:	4a63      	ldr	r2, [pc, #396]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a004:	4013      	ands	r3, r2
 800a006:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a008:	4b5f      	ldr	r3, [pc, #380]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a00a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a00c:	4b5e      	ldr	r3, [pc, #376]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a00e:	2180      	movs	r1, #128	; 0x80
 800a010:	0249      	lsls	r1, r1, #9
 800a012:	430a      	orrs	r2, r1
 800a014:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a016:	4b5c      	ldr	r3, [pc, #368]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a018:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a01a:	4b5b      	ldr	r3, [pc, #364]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a01c:	495d      	ldr	r1, [pc, #372]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800a01e:	400a      	ands	r2, r1
 800a020:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a022:	4b59      	ldr	r3, [pc, #356]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	2201      	movs	r2, #1
 800a02c:	4013      	ands	r3, r2
 800a02e:	d016      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a030:	f7fe feee 	bl	8008e10 <HAL_GetTick>
 800a034:	0003      	movs	r3, r0
 800a036:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a038:	e00c      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a03a:	f7fe fee9 	bl	8008e10 <HAL_GetTick>
 800a03e:	0002      	movs	r2, r0
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	4a54      	ldr	r2, [pc, #336]	; (800a198 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d904      	bls.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a04a:	2313      	movs	r3, #19
 800a04c:	18fb      	adds	r3, r7, r3
 800a04e:	2203      	movs	r2, #3
 800a050:	701a      	strb	r2, [r3, #0]
            break;
 800a052:	e004      	b.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a054:	4b4c      	ldr	r3, [pc, #304]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a058:	2202      	movs	r2, #2
 800a05a:	4013      	ands	r3, r2
 800a05c:	d0ed      	beq.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a05e:	2313      	movs	r3, #19
 800a060:	18fb      	adds	r3, r7, r3
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10a      	bne.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a068:	4b47      	ldr	r3, [pc, #284]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a06a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a06c:	4a48      	ldr	r2, [pc, #288]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800a06e:	4013      	ands	r3, r2
 800a070:	0019      	movs	r1, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	699a      	ldr	r2, [r3, #24]
 800a076:	4b44      	ldr	r3, [pc, #272]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a078:	430a      	orrs	r2, r1
 800a07a:	65da      	str	r2, [r3, #92]	; 0x5c
 800a07c:	e00c      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a07e:	2312      	movs	r3, #18
 800a080:	18fb      	adds	r3, r7, r3
 800a082:	2213      	movs	r2, #19
 800a084:	18ba      	adds	r2, r7, r2
 800a086:	7812      	ldrb	r2, [r2, #0]
 800a088:	701a      	strb	r2, [r3, #0]
 800a08a:	e005      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a08c:	2312      	movs	r3, #18
 800a08e:	18fb      	adds	r3, r7, r3
 800a090:	2213      	movs	r2, #19
 800a092:	18ba      	adds	r2, r7, r2
 800a094:	7812      	ldrb	r2, [r2, #0]
 800a096:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a098:	2311      	movs	r3, #17
 800a09a:	18fb      	adds	r3, r7, r3
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d105      	bne.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0a2:	4b39      	ldr	r3, [pc, #228]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a0a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0a6:	4b38      	ldr	r3, [pc, #224]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a0a8:	493c      	ldr	r1, [pc, #240]	; (800a19c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800a0aa:	400a      	ands	r2, r1
 800a0ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	d009      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a0b8:	4b33      	ldr	r3, [pc, #204]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a0ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0bc:	2203      	movs	r2, #3
 800a0be:	4393      	bics	r3, r2
 800a0c0:	0019      	movs	r1, r3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	685a      	ldr	r2, [r3, #4]
 800a0c6:	4b30      	ldr	r3, [pc, #192]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a0c8:	430a      	orrs	r2, r1
 800a0ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	d009      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a0d6:	4b2c      	ldr	r3, [pc, #176]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0da:	220c      	movs	r2, #12
 800a0dc:	4393      	bics	r3, r2
 800a0de:	0019      	movs	r1, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	689a      	ldr	r2, [r3, #8]
 800a0e4:	4b28      	ldr	r3, [pc, #160]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	d009      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a0f4:	4b24      	ldr	r3, [pc, #144]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f8:	4a29      	ldr	r2, [pc, #164]	; (800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	0019      	movs	r1, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68da      	ldr	r2, [r3, #12]
 800a102:	4b21      	ldr	r3, [pc, #132]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a104:	430a      	orrs	r2, r1
 800a106:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	2380      	movs	r3, #128	; 0x80
 800a10e:	01db      	lsls	r3, r3, #7
 800a110:	4013      	ands	r3, r2
 800a112:	d015      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a114:	4b1c      	ldr	r3, [pc, #112]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	0899      	lsrs	r1, r3, #2
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	695a      	ldr	r2, [r3, #20]
 800a120:	4b19      	ldr	r3, [pc, #100]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a122:	430a      	orrs	r2, r1
 800a124:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	695a      	ldr	r2, [r3, #20]
 800a12a:	2380      	movs	r3, #128	; 0x80
 800a12c:	05db      	lsls	r3, r3, #23
 800a12e:	429a      	cmp	r2, r3
 800a130:	d106      	bne.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a132:	4b15      	ldr	r3, [pc, #84]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a134:	68da      	ldr	r2, [r3, #12]
 800a136:	4b14      	ldr	r3, [pc, #80]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a138:	2180      	movs	r1, #128	; 0x80
 800a13a:	0249      	lsls	r1, r1, #9
 800a13c:	430a      	orrs	r2, r1
 800a13e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	2380      	movs	r3, #128	; 0x80
 800a146:	011b      	lsls	r3, r3, #4
 800a148:	4013      	ands	r3, r2
 800a14a:	d016      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a14c:	4b0e      	ldr	r3, [pc, #56]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a14e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a150:	4a14      	ldr	r2, [pc, #80]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a152:	4013      	ands	r3, r2
 800a154:	0019      	movs	r1, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	691a      	ldr	r2, [r3, #16]
 800a15a:	4b0b      	ldr	r3, [pc, #44]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a15c:	430a      	orrs	r2, r1
 800a15e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	691a      	ldr	r2, [r3, #16]
 800a164:	2380      	movs	r3, #128	; 0x80
 800a166:	01db      	lsls	r3, r3, #7
 800a168:	429a      	cmp	r2, r3
 800a16a:	d106      	bne.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a16c:	4b06      	ldr	r3, [pc, #24]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a16e:	68da      	ldr	r2, [r3, #12]
 800a170:	4b05      	ldr	r3, [pc, #20]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800a172:	2180      	movs	r1, #128	; 0x80
 800a174:	0249      	lsls	r1, r1, #9
 800a176:	430a      	orrs	r2, r1
 800a178:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a17a:	2312      	movs	r3, #18
 800a17c:	18fb      	adds	r3, r7, r3
 800a17e:	781b      	ldrb	r3, [r3, #0]
}
 800a180:	0018      	movs	r0, r3
 800a182:	46bd      	mov	sp, r7
 800a184:	b006      	add	sp, #24
 800a186:	bd80      	pop	{r7, pc}
 800a188:	40021000 	.word	0x40021000
 800a18c:	40007000 	.word	0x40007000
 800a190:	fffffcff 	.word	0xfffffcff
 800a194:	fffeffff 	.word	0xfffeffff
 800a198:	00001388 	.word	0x00001388
 800a19c:	efffffff 	.word	0xefffffff
 800a1a0:	ffffcfff 	.word	0xffffcfff
 800a1a4:	ffff3fff 	.word	0xffff3fff

0800a1a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e0a8      	b.n	800a30c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d109      	bne.n	800a1d6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	2382      	movs	r3, #130	; 0x82
 800a1c8:	005b      	lsls	r3, r3, #1
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d009      	beq.n	800a1e2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	61da      	str	r2, [r3, #28]
 800a1d4:	e005      	b.n	800a1e2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	225d      	movs	r2, #93	; 0x5d
 800a1ec:	5c9b      	ldrb	r3, [r3, r2]
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d107      	bne.n	800a204 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	225c      	movs	r2, #92	; 0x5c
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	0018      	movs	r0, r3
 800a200:	f7fd fce6 	bl	8007bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	225d      	movs	r2, #93	; 0x5d
 800a208:	2102      	movs	r1, #2
 800a20a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2140      	movs	r1, #64	; 0x40
 800a218:	438a      	bics	r2, r1
 800a21a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	68da      	ldr	r2, [r3, #12]
 800a220:	23e0      	movs	r3, #224	; 0xe0
 800a222:	00db      	lsls	r3, r3, #3
 800a224:	429a      	cmp	r2, r3
 800a226:	d902      	bls.n	800a22e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a228:	2300      	movs	r3, #0
 800a22a:	60fb      	str	r3, [r7, #12]
 800a22c:	e002      	b.n	800a234 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a22e:	2380      	movs	r3, #128	; 0x80
 800a230:	015b      	lsls	r3, r3, #5
 800a232:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	68da      	ldr	r2, [r3, #12]
 800a238:	23f0      	movs	r3, #240	; 0xf0
 800a23a:	011b      	lsls	r3, r3, #4
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d008      	beq.n	800a252 <HAL_SPI_Init+0xaa>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	68da      	ldr	r2, [r3, #12]
 800a244:	23e0      	movs	r3, #224	; 0xe0
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	429a      	cmp	r2, r3
 800a24a:	d002      	beq.n	800a252 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685a      	ldr	r2, [r3, #4]
 800a256:	2382      	movs	r3, #130	; 0x82
 800a258:	005b      	lsls	r3, r3, #1
 800a25a:	401a      	ands	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6899      	ldr	r1, [r3, #8]
 800a260:	2384      	movs	r3, #132	; 0x84
 800a262:	021b      	lsls	r3, r3, #8
 800a264:	400b      	ands	r3, r1
 800a266:	431a      	orrs	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	2102      	movs	r1, #2
 800a26e:	400b      	ands	r3, r1
 800a270:	431a      	orrs	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	2101      	movs	r1, #1
 800a278:	400b      	ands	r3, r1
 800a27a:	431a      	orrs	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6999      	ldr	r1, [r3, #24]
 800a280:	2380      	movs	r3, #128	; 0x80
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	400b      	ands	r3, r1
 800a286:	431a      	orrs	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	69db      	ldr	r3, [r3, #28]
 800a28c:	2138      	movs	r1, #56	; 0x38
 800a28e:	400b      	ands	r3, r1
 800a290:	431a      	orrs	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	2180      	movs	r1, #128	; 0x80
 800a298:	400b      	ands	r3, r1
 800a29a:	431a      	orrs	r2, r3
 800a29c:	0011      	movs	r1, r2
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2a2:	2380      	movs	r3, #128	; 0x80
 800a2a4:	019b      	lsls	r3, r3, #6
 800a2a6:	401a      	ands	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	430a      	orrs	r2, r1
 800a2ae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	0c1b      	lsrs	r3, r3, #16
 800a2b6:	2204      	movs	r2, #4
 800a2b8:	401a      	ands	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2be:	2110      	movs	r1, #16
 800a2c0:	400b      	ands	r3, r1
 800a2c2:	431a      	orrs	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c8:	2108      	movs	r1, #8
 800a2ca:	400b      	ands	r3, r1
 800a2cc:	431a      	orrs	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	68d9      	ldr	r1, [r3, #12]
 800a2d2:	23f0      	movs	r3, #240	; 0xf0
 800a2d4:	011b      	lsls	r3, r3, #4
 800a2d6:	400b      	ands	r3, r1
 800a2d8:	431a      	orrs	r2, r3
 800a2da:	0011      	movs	r1, r2
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	2380      	movs	r3, #128	; 0x80
 800a2e0:	015b      	lsls	r3, r3, #5
 800a2e2:	401a      	ands	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	69da      	ldr	r2, [r3, #28]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4907      	ldr	r1, [pc, #28]	; (800a314 <HAL_SPI_Init+0x16c>)
 800a2f8:	400a      	ands	r2, r1
 800a2fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	225d      	movs	r2, #93	; 0x5d
 800a306:	2101      	movs	r1, #1
 800a308:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	0018      	movs	r0, r3
 800a30e:	46bd      	mov	sp, r7
 800a310:	b004      	add	sp, #16
 800a312:	bd80      	pop	{r7, pc}
 800a314:	fffff7ff 	.word	0xfffff7ff

0800a318 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b088      	sub	sp, #32
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	1dbb      	adds	r3, r7, #6
 800a326:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a328:	231f      	movs	r3, #31
 800a32a:	18fb      	adds	r3, r7, r3
 800a32c:	2200      	movs	r2, #0
 800a32e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	225c      	movs	r2, #92	; 0x5c
 800a334:	5c9b      	ldrb	r3, [r3, r2]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d101      	bne.n	800a33e <HAL_SPI_Transmit+0x26>
 800a33a:	2302      	movs	r3, #2
 800a33c:	e140      	b.n	800a5c0 <HAL_SPI_Transmit+0x2a8>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	225c      	movs	r2, #92	; 0x5c
 800a342:	2101      	movs	r1, #1
 800a344:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a346:	f7fe fd63 	bl	8008e10 <HAL_GetTick>
 800a34a:	0003      	movs	r3, r0
 800a34c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a34e:	2316      	movs	r3, #22
 800a350:	18fb      	adds	r3, r7, r3
 800a352:	1dba      	adds	r2, r7, #6
 800a354:	8812      	ldrh	r2, [r2, #0]
 800a356:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	225d      	movs	r2, #93	; 0x5d
 800a35c:	5c9b      	ldrb	r3, [r3, r2]
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	2b01      	cmp	r3, #1
 800a362:	d004      	beq.n	800a36e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800a364:	231f      	movs	r3, #31
 800a366:	18fb      	adds	r3, r7, r3
 800a368:	2202      	movs	r2, #2
 800a36a:	701a      	strb	r2, [r3, #0]
    goto error;
 800a36c:	e11d      	b.n	800a5aa <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d003      	beq.n	800a37c <HAL_SPI_Transmit+0x64>
 800a374:	1dbb      	adds	r3, r7, #6
 800a376:	881b      	ldrh	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d104      	bne.n	800a386 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800a37c:	231f      	movs	r3, #31
 800a37e:	18fb      	adds	r3, r7, r3
 800a380:	2201      	movs	r2, #1
 800a382:	701a      	strb	r2, [r3, #0]
    goto error;
 800a384:	e111      	b.n	800a5aa <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	225d      	movs	r2, #93	; 0x5d
 800a38a:	2103      	movs	r1, #3
 800a38c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2200      	movs	r2, #0
 800a392:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	1dba      	adds	r2, r7, #6
 800a39e:	8812      	ldrh	r2, [r2, #0]
 800a3a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	1dba      	adds	r2, r7, #6
 800a3a6:	8812      	ldrh	r2, [r2, #0]
 800a3a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2244      	movs	r2, #68	; 0x44
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2246      	movs	r2, #70	; 0x46
 800a3bc:	2100      	movs	r1, #0
 800a3be:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	689a      	ldr	r2, [r3, #8]
 800a3d0:	2380      	movs	r3, #128	; 0x80
 800a3d2:	021b      	lsls	r3, r3, #8
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d110      	bne.n	800a3fa <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2140      	movs	r1, #64	; 0x40
 800a3e4:	438a      	bics	r2, r1
 800a3e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2180      	movs	r1, #128	; 0x80
 800a3f4:	01c9      	lsls	r1, r1, #7
 800a3f6:	430a      	orrs	r2, r1
 800a3f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2240      	movs	r2, #64	; 0x40
 800a402:	4013      	ands	r3, r2
 800a404:	2b40      	cmp	r3, #64	; 0x40
 800a406:	d007      	beq.n	800a418 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2140      	movs	r1, #64	; 0x40
 800a414:	430a      	orrs	r2, r1
 800a416:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	68da      	ldr	r2, [r3, #12]
 800a41c:	23e0      	movs	r3, #224	; 0xe0
 800a41e:	00db      	lsls	r3, r3, #3
 800a420:	429a      	cmp	r2, r3
 800a422:	d94e      	bls.n	800a4c2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d004      	beq.n	800a436 <HAL_SPI_Transmit+0x11e>
 800a42c:	2316      	movs	r3, #22
 800a42e:	18fb      	adds	r3, r7, r3
 800a430:	881b      	ldrh	r3, [r3, #0]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d13f      	bne.n	800a4b6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43a:	881a      	ldrh	r2, [r3, #0]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a446:	1c9a      	adds	r2, r3, #2
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a450:	b29b      	uxth	r3, r3
 800a452:	3b01      	subs	r3, #1
 800a454:	b29a      	uxth	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a45a:	e02c      	b.n	800a4b6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	2202      	movs	r2, #2
 800a464:	4013      	ands	r3, r2
 800a466:	2b02      	cmp	r3, #2
 800a468:	d112      	bne.n	800a490 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46e:	881a      	ldrh	r2, [r3, #0]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47a:	1c9a      	adds	r2, r3, #2
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a484:	b29b      	uxth	r3, r3
 800a486:	3b01      	subs	r3, #1
 800a488:	b29a      	uxth	r2, r3
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a48e:	e012      	b.n	800a4b6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a490:	f7fe fcbe 	bl	8008e10 <HAL_GetTick>
 800a494:	0002      	movs	r2, r0
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d802      	bhi.n	800a4a6 <HAL_SPI_Transmit+0x18e>
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	d102      	bne.n	800a4ac <HAL_SPI_Transmit+0x194>
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d104      	bne.n	800a4b6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800a4ac:	231f      	movs	r3, #31
 800a4ae:	18fb      	adds	r3, r7, r3
 800a4b0:	2203      	movs	r2, #3
 800a4b2:	701a      	strb	r2, [r3, #0]
          goto error;
 800a4b4:	e079      	b.n	800a5aa <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1cd      	bne.n	800a45c <HAL_SPI_Transmit+0x144>
 800a4c0:	e04f      	b.n	800a562 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d004      	beq.n	800a4d4 <HAL_SPI_Transmit+0x1bc>
 800a4ca:	2316      	movs	r3, #22
 800a4cc:	18fb      	adds	r3, r7, r3
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d141      	bne.n	800a558 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	330c      	adds	r3, #12
 800a4de:	7812      	ldrb	r2, [r2, #0]
 800a4e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e6:	1c5a      	adds	r2, r3, #1
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800a4fa:	e02d      	b.n	800a558 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	2202      	movs	r2, #2
 800a504:	4013      	ands	r3, r2
 800a506:	2b02      	cmp	r3, #2
 800a508:	d113      	bne.n	800a532 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	330c      	adds	r3, #12
 800a514:	7812      	ldrb	r2, [r2, #0]
 800a516:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a526:	b29b      	uxth	r3, r3
 800a528:	3b01      	subs	r3, #1
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a530:	e012      	b.n	800a558 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a532:	f7fe fc6d 	bl	8008e10 <HAL_GetTick>
 800a536:	0002      	movs	r2, r0
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	683a      	ldr	r2, [r7, #0]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d802      	bhi.n	800a548 <HAL_SPI_Transmit+0x230>
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	3301      	adds	r3, #1
 800a546:	d102      	bne.n	800a54e <HAL_SPI_Transmit+0x236>
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d104      	bne.n	800a558 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800a54e:	231f      	movs	r3, #31
 800a550:	18fb      	adds	r3, r7, r3
 800a552:	2203      	movs	r2, #3
 800a554:	701a      	strb	r2, [r3, #0]
          goto error;
 800a556:	e028      	b.n	800a5aa <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1cc      	bne.n	800a4fc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a562:	69ba      	ldr	r2, [r7, #24]
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	0018      	movs	r0, r3
 800a56a:	f000 fdf5 	bl	800b158 <SPI_EndRxTxTransaction>
 800a56e:	1e03      	subs	r3, r0, #0
 800a570:	d002      	beq.n	800a578 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2220      	movs	r2, #32
 800a576:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10a      	bne.n	800a596 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a580:	2300      	movs	r3, #0
 800a582:	613b      	str	r3, [r7, #16]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	613b      	str	r3, [r7, #16]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	613b      	str	r3, [r7, #16]
 800a594:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d004      	beq.n	800a5a8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800a59e:	231f      	movs	r3, #31
 800a5a0:	18fb      	adds	r3, r7, r3
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	701a      	strb	r2, [r3, #0]
 800a5a6:	e000      	b.n	800a5aa <HAL_SPI_Transmit+0x292>
  }

error:
 800a5a8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	225d      	movs	r2, #93	; 0x5d
 800a5ae:	2101      	movs	r1, #1
 800a5b0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	225c      	movs	r2, #92	; 0x5c
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a5ba:	231f      	movs	r3, #31
 800a5bc:	18fb      	adds	r3, r7, r3
 800a5be:	781b      	ldrb	r3, [r3, #0]
}
 800a5c0:	0018      	movs	r0, r3
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	b008      	add	sp, #32
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5c8:	b590      	push	{r4, r7, lr}
 800a5ca:	b089      	sub	sp, #36	; 0x24
 800a5cc:	af02      	add	r7, sp, #8
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	603b      	str	r3, [r7, #0]
 800a5d4:	1dbb      	adds	r3, r7, #6
 800a5d6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a5d8:	2317      	movs	r3, #23
 800a5da:	18fb      	adds	r3, r7, r3
 800a5dc:	2200      	movs	r2, #0
 800a5de:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	685a      	ldr	r2, [r3, #4]
 800a5e4:	2382      	movs	r3, #130	; 0x82
 800a5e6:	005b      	lsls	r3, r3, #1
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d113      	bne.n	800a614 <HAL_SPI_Receive+0x4c>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10f      	bne.n	800a614 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	225d      	movs	r2, #93	; 0x5d
 800a5f8:	2104      	movs	r1, #4
 800a5fa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a5fc:	1dbb      	adds	r3, r7, #6
 800a5fe:	881c      	ldrh	r4, [r3, #0]
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	68b9      	ldr	r1, [r7, #8]
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	0023      	movs	r3, r4
 800a60c:	f000 f928 	bl	800a860 <HAL_SPI_TransmitReceive>
 800a610:	0003      	movs	r3, r0
 800a612:	e11c      	b.n	800a84e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	225c      	movs	r2, #92	; 0x5c
 800a618:	5c9b      	ldrb	r3, [r3, r2]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d101      	bne.n	800a622 <HAL_SPI_Receive+0x5a>
 800a61e:	2302      	movs	r3, #2
 800a620:	e115      	b.n	800a84e <HAL_SPI_Receive+0x286>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	225c      	movs	r2, #92	; 0x5c
 800a626:	2101      	movs	r1, #1
 800a628:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a62a:	f7fe fbf1 	bl	8008e10 <HAL_GetTick>
 800a62e:	0003      	movs	r3, r0
 800a630:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	225d      	movs	r2, #93	; 0x5d
 800a636:	5c9b      	ldrb	r3, [r3, r2]
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d004      	beq.n	800a648 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800a63e:	2317      	movs	r3, #23
 800a640:	18fb      	adds	r3, r7, r3
 800a642:	2202      	movs	r2, #2
 800a644:	701a      	strb	r2, [r3, #0]
    goto error;
 800a646:	e0f7      	b.n	800a838 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d003      	beq.n	800a656 <HAL_SPI_Receive+0x8e>
 800a64e:	1dbb      	adds	r3, r7, #6
 800a650:	881b      	ldrh	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d104      	bne.n	800a660 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800a656:	2317      	movs	r3, #23
 800a658:	18fb      	adds	r3, r7, r3
 800a65a:	2201      	movs	r2, #1
 800a65c:	701a      	strb	r2, [r3, #0]
    goto error;
 800a65e:	e0eb      	b.n	800a838 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	225d      	movs	r2, #93	; 0x5d
 800a664:	2104      	movs	r1, #4
 800a666:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	68ba      	ldr	r2, [r7, #8]
 800a672:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	1dba      	adds	r2, r7, #6
 800a678:	2144      	movs	r1, #68	; 0x44
 800a67a:	8812      	ldrh	r2, [r2, #0]
 800a67c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	1dba      	adds	r2, r7, #6
 800a682:	2146      	movs	r1, #70	; 0x46
 800a684:	8812      	ldrh	r2, [r2, #0]
 800a686:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2200      	movs	r2, #0
 800a69e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	68da      	ldr	r2, [r3, #12]
 800a6aa:	23e0      	movs	r3, #224	; 0xe0
 800a6ac:	00db      	lsls	r3, r3, #3
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d908      	bls.n	800a6c4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	685a      	ldr	r2, [r3, #4]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4966      	ldr	r1, [pc, #408]	; (800a858 <HAL_SPI_Receive+0x290>)
 800a6be:	400a      	ands	r2, r1
 800a6c0:	605a      	str	r2, [r3, #4]
 800a6c2:	e008      	b.n	800a6d6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	685a      	ldr	r2, [r3, #4]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2180      	movs	r1, #128	; 0x80
 800a6d0:	0149      	lsls	r1, r1, #5
 800a6d2:	430a      	orrs	r2, r1
 800a6d4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	689a      	ldr	r2, [r3, #8]
 800a6da:	2380      	movs	r3, #128	; 0x80
 800a6dc:	021b      	lsls	r3, r3, #8
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d10f      	bne.n	800a702 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2140      	movs	r1, #64	; 0x40
 800a6ee:	438a      	bics	r2, r1
 800a6f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4957      	ldr	r1, [pc, #348]	; (800a85c <HAL_SPI_Receive+0x294>)
 800a6fe:	400a      	ands	r2, r1
 800a700:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2240      	movs	r2, #64	; 0x40
 800a70a:	4013      	ands	r3, r2
 800a70c:	2b40      	cmp	r3, #64	; 0x40
 800a70e:	d007      	beq.n	800a720 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2140      	movs	r1, #64	; 0x40
 800a71c:	430a      	orrs	r2, r1
 800a71e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	68da      	ldr	r2, [r3, #12]
 800a724:	23e0      	movs	r3, #224	; 0xe0
 800a726:	00db      	lsls	r3, r3, #3
 800a728:	429a      	cmp	r2, r3
 800a72a:	d900      	bls.n	800a72e <HAL_SPI_Receive+0x166>
 800a72c:	e069      	b.n	800a802 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a72e:	e031      	b.n	800a794 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	2201      	movs	r2, #1
 800a738:	4013      	ands	r3, r2
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d117      	bne.n	800a76e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	330c      	adds	r3, #12
 800a744:	001a      	movs	r2, r3
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a74a:	7812      	ldrb	r2, [r2, #0]
 800a74c:	b2d2      	uxtb	r2, r2
 800a74e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a754:	1c5a      	adds	r2, r3, #1
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2246      	movs	r2, #70	; 0x46
 800a75e:	5a9b      	ldrh	r3, [r3, r2]
 800a760:	b29b      	uxth	r3, r3
 800a762:	3b01      	subs	r3, #1
 800a764:	b299      	uxth	r1, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2246      	movs	r2, #70	; 0x46
 800a76a:	5299      	strh	r1, [r3, r2]
 800a76c:	e012      	b.n	800a794 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a76e:	f7fe fb4f 	bl	8008e10 <HAL_GetTick>
 800a772:	0002      	movs	r2, r0
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d802      	bhi.n	800a784 <HAL_SPI_Receive+0x1bc>
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	3301      	adds	r3, #1
 800a782:	d102      	bne.n	800a78a <HAL_SPI_Receive+0x1c2>
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d104      	bne.n	800a794 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800a78a:	2317      	movs	r3, #23
 800a78c:	18fb      	adds	r3, r7, r3
 800a78e:	2203      	movs	r2, #3
 800a790:	701a      	strb	r2, [r3, #0]
          goto error;
 800a792:	e051      	b.n	800a838 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2246      	movs	r2, #70	; 0x46
 800a798:	5a9b      	ldrh	r3, [r3, r2]
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1c7      	bne.n	800a730 <HAL_SPI_Receive+0x168>
 800a7a0:	e035      	b.n	800a80e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d115      	bne.n	800a7dc <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68da      	ldr	r2, [r3, #12]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ba:	b292      	uxth	r2, r2
 800a7bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c2:	1c9a      	adds	r2, r3, #2
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2246      	movs	r2, #70	; 0x46
 800a7cc:	5a9b      	ldrh	r3, [r3, r2]
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	b299      	uxth	r1, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2246      	movs	r2, #70	; 0x46
 800a7d8:	5299      	strh	r1, [r3, r2]
 800a7da:	e012      	b.n	800a802 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7dc:	f7fe fb18 	bl	8008e10 <HAL_GetTick>
 800a7e0:	0002      	movs	r2, r0
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d802      	bhi.n	800a7f2 <HAL_SPI_Receive+0x22a>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	d102      	bne.n	800a7f8 <HAL_SPI_Receive+0x230>
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d104      	bne.n	800a802 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800a7f8:	2317      	movs	r3, #23
 800a7fa:	18fb      	adds	r3, r7, r3
 800a7fc:	2203      	movs	r2, #3
 800a7fe:	701a      	strb	r2, [r3, #0]
          goto error;
 800a800:	e01a      	b.n	800a838 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2246      	movs	r2, #70	; 0x46
 800a806:	5a9b      	ldrh	r3, [r3, r2]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1c9      	bne.n	800a7a2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	0018      	movs	r0, r3
 800a816:	f000 fc41 	bl	800b09c <SPI_EndRxTransaction>
 800a81a:	1e03      	subs	r3, r0, #0
 800a81c:	d002      	beq.n	800a824 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2220      	movs	r2, #32
 800a822:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d004      	beq.n	800a836 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800a82c:	2317      	movs	r3, #23
 800a82e:	18fb      	adds	r3, r7, r3
 800a830:	2201      	movs	r2, #1
 800a832:	701a      	strb	r2, [r3, #0]
 800a834:	e000      	b.n	800a838 <HAL_SPI_Receive+0x270>
  }

error :
 800a836:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	225d      	movs	r2, #93	; 0x5d
 800a83c:	2101      	movs	r1, #1
 800a83e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	225c      	movs	r2, #92	; 0x5c
 800a844:	2100      	movs	r1, #0
 800a846:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a848:	2317      	movs	r3, #23
 800a84a:	18fb      	adds	r3, r7, r3
 800a84c:	781b      	ldrb	r3, [r3, #0]
}
 800a84e:	0018      	movs	r0, r3
 800a850:	46bd      	mov	sp, r7
 800a852:	b007      	add	sp, #28
 800a854:	bd90      	pop	{r4, r7, pc}
 800a856:	46c0      	nop			; (mov r8, r8)
 800a858:	ffffefff 	.word	0xffffefff
 800a85c:	ffffbfff 	.word	0xffffbfff

0800a860 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b08a      	sub	sp, #40	; 0x28
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
 800a86c:	001a      	movs	r2, r3
 800a86e:	1cbb      	adds	r3, r7, #2
 800a870:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a872:	2301      	movs	r3, #1
 800a874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a876:	2323      	movs	r3, #35	; 0x23
 800a878:	18fb      	adds	r3, r7, r3
 800a87a:	2200      	movs	r2, #0
 800a87c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	225c      	movs	r2, #92	; 0x5c
 800a882:	5c9b      	ldrb	r3, [r3, r2]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d101      	bne.n	800a88c <HAL_SPI_TransmitReceive+0x2c>
 800a888:	2302      	movs	r3, #2
 800a88a:	e1b5      	b.n	800abf8 <HAL_SPI_TransmitReceive+0x398>
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	225c      	movs	r2, #92	; 0x5c
 800a890:	2101      	movs	r1, #1
 800a892:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a894:	f7fe fabc 	bl	8008e10 <HAL_GetTick>
 800a898:	0003      	movs	r3, r0
 800a89a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a89c:	201b      	movs	r0, #27
 800a89e:	183b      	adds	r3, r7, r0
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	215d      	movs	r1, #93	; 0x5d
 800a8a4:	5c52      	ldrb	r2, [r2, r1]
 800a8a6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a8ae:	2312      	movs	r3, #18
 800a8b0:	18fb      	adds	r3, r7, r3
 800a8b2:	1cba      	adds	r2, r7, #2
 800a8b4:	8812      	ldrh	r2, [r2, #0]
 800a8b6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a8b8:	183b      	adds	r3, r7, r0
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d011      	beq.n	800a8e4 <HAL_SPI_TransmitReceive+0x84>
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	2382      	movs	r3, #130	; 0x82
 800a8c4:	005b      	lsls	r3, r3, #1
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d107      	bne.n	800a8da <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d103      	bne.n	800a8da <HAL_SPI_TransmitReceive+0x7a>
 800a8d2:	183b      	adds	r3, r7, r0
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	2b04      	cmp	r3, #4
 800a8d8:	d004      	beq.n	800a8e4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800a8da:	2323      	movs	r3, #35	; 0x23
 800a8dc:	18fb      	adds	r3, r7, r3
 800a8de:	2202      	movs	r2, #2
 800a8e0:	701a      	strb	r2, [r3, #0]
    goto error;
 800a8e2:	e17e      	b.n	800abe2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d006      	beq.n	800a8f8 <HAL_SPI_TransmitReceive+0x98>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d003      	beq.n	800a8f8 <HAL_SPI_TransmitReceive+0x98>
 800a8f0:	1cbb      	adds	r3, r7, #2
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d104      	bne.n	800a902 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800a8f8:	2323      	movs	r3, #35	; 0x23
 800a8fa:	18fb      	adds	r3, r7, r3
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	701a      	strb	r2, [r3, #0]
    goto error;
 800a900:	e16f      	b.n	800abe2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	225d      	movs	r2, #93	; 0x5d
 800a906:	5c9b      	ldrb	r3, [r3, r2]
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b04      	cmp	r3, #4
 800a90c:	d003      	beq.n	800a916 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	225d      	movs	r2, #93	; 0x5d
 800a912:	2105      	movs	r1, #5
 800a914:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2200      	movs	r2, #0
 800a91a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	1cba      	adds	r2, r7, #2
 800a926:	2146      	movs	r1, #70	; 0x46
 800a928:	8812      	ldrh	r2, [r2, #0]
 800a92a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	1cba      	adds	r2, r7, #2
 800a930:	2144      	movs	r1, #68	; 0x44
 800a932:	8812      	ldrh	r2, [r2, #0]
 800a934:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	1cba      	adds	r2, r7, #2
 800a940:	8812      	ldrh	r2, [r2, #0]
 800a942:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	1cba      	adds	r2, r7, #2
 800a948:	8812      	ldrh	r2, [r2, #0]
 800a94a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2200      	movs	r2, #0
 800a950:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	68da      	ldr	r2, [r3, #12]
 800a95c:	23e0      	movs	r3, #224	; 0xe0
 800a95e:	00db      	lsls	r3, r3, #3
 800a960:	429a      	cmp	r2, r3
 800a962:	d908      	bls.n	800a976 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	685a      	ldr	r2, [r3, #4]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	49a4      	ldr	r1, [pc, #656]	; (800ac00 <HAL_SPI_TransmitReceive+0x3a0>)
 800a970:	400a      	ands	r2, r1
 800a972:	605a      	str	r2, [r3, #4]
 800a974:	e008      	b.n	800a988 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	685a      	ldr	r2, [r3, #4]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2180      	movs	r1, #128	; 0x80
 800a982:	0149      	lsls	r1, r1, #5
 800a984:	430a      	orrs	r2, r1
 800a986:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2240      	movs	r2, #64	; 0x40
 800a990:	4013      	ands	r3, r2
 800a992:	2b40      	cmp	r3, #64	; 0x40
 800a994:	d007      	beq.n	800a9a6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2140      	movs	r1, #64	; 0x40
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	68da      	ldr	r2, [r3, #12]
 800a9aa:	23e0      	movs	r3, #224	; 0xe0
 800a9ac:	00db      	lsls	r3, r3, #3
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d800      	bhi.n	800a9b4 <HAL_SPI_TransmitReceive+0x154>
 800a9b2:	e07f      	b.n	800aab4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d005      	beq.n	800a9c8 <HAL_SPI_TransmitReceive+0x168>
 800a9bc:	2312      	movs	r3, #18
 800a9be:	18fb      	adds	r3, r7, r3
 800a9c0:	881b      	ldrh	r3, [r3, #0]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d000      	beq.n	800a9c8 <HAL_SPI_TransmitReceive+0x168>
 800a9c6:	e069      	b.n	800aa9c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9cc:	881a      	ldrh	r2, [r3, #0]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d8:	1c9a      	adds	r2, r3, #2
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9ec:	e056      	b.n	800aa9c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	2202      	movs	r2, #2
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d11b      	bne.n	800aa34 <HAL_SPI_TransmitReceive+0x1d4>
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d016      	beq.n	800aa34 <HAL_SPI_TransmitReceive+0x1d4>
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d113      	bne.n	800aa34 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa10:	881a      	ldrh	r2, [r3, #0]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1c:	1c9a      	adds	r2, r3, #2
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa30:	2300      	movs	r3, #0
 800aa32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d11c      	bne.n	800aa7c <HAL_SPI_TransmitReceive+0x21c>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2246      	movs	r2, #70	; 0x46
 800aa46:	5a9b      	ldrh	r3, [r3, r2]
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d016      	beq.n	800aa7c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68da      	ldr	r2, [r3, #12]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa58:	b292      	uxth	r2, r2
 800aa5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa60:	1c9a      	adds	r2, r3, #2
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2246      	movs	r2, #70	; 0x46
 800aa6a:	5a9b      	ldrh	r3, [r3, r2]
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	b299      	uxth	r1, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2246      	movs	r2, #70	; 0x46
 800aa76:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800aa7c:	f7fe f9c8 	bl	8008e10 <HAL_GetTick>
 800aa80:	0002      	movs	r2, r0
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d807      	bhi.n	800aa9c <HAL_SPI_TransmitReceive+0x23c>
 800aa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8e:	3301      	adds	r3, #1
 800aa90:	d004      	beq.n	800aa9c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800aa92:	2323      	movs	r3, #35	; 0x23
 800aa94:	18fb      	adds	r3, r7, r3
 800aa96:	2203      	movs	r2, #3
 800aa98:	701a      	strb	r2, [r3, #0]
        goto error;
 800aa9a:	e0a2      	b.n	800abe2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1a3      	bne.n	800a9ee <HAL_SPI_TransmitReceive+0x18e>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2246      	movs	r2, #70	; 0x46
 800aaaa:	5a9b      	ldrh	r3, [r3, r2]
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d19d      	bne.n	800a9ee <HAL_SPI_TransmitReceive+0x18e>
 800aab2:	e085      	b.n	800abc0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d005      	beq.n	800aac8 <HAL_SPI_TransmitReceive+0x268>
 800aabc:	2312      	movs	r3, #18
 800aabe:	18fb      	adds	r3, r7, r3
 800aac0:	881b      	ldrh	r3, [r3, #0]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d000      	beq.n	800aac8 <HAL_SPI_TransmitReceive+0x268>
 800aac6:	e070      	b.n	800abaa <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	330c      	adds	r3, #12
 800aad2:	7812      	ldrb	r2, [r2, #0]
 800aad4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	3b01      	subs	r3, #1
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aaee:	e05c      	b.n	800abaa <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	4013      	ands	r3, r2
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d11c      	bne.n	800ab38 <HAL_SPI_TransmitReceive+0x2d8>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d017      	beq.n	800ab38 <HAL_SPI_TransmitReceive+0x2d8>
 800ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d114      	bne.n	800ab38 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	330c      	adds	r3, #12
 800ab18:	7812      	ldrb	r2, [r2, #0]
 800ab1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab20:	1c5a      	adds	r2, r3, #1
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ab34:	2300      	movs	r3, #0
 800ab36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	4013      	ands	r3, r2
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d11e      	bne.n	800ab84 <HAL_SPI_TransmitReceive+0x324>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2246      	movs	r2, #70	; 0x46
 800ab4a:	5a9b      	ldrh	r3, [r3, r2]
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d018      	beq.n	800ab84 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	330c      	adds	r3, #12
 800ab58:	001a      	movs	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5e:	7812      	ldrb	r2, [r2, #0]
 800ab60:	b2d2      	uxtb	r2, r2
 800ab62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2246      	movs	r2, #70	; 0x46
 800ab72:	5a9b      	ldrh	r3, [r3, r2]
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	3b01      	subs	r3, #1
 800ab78:	b299      	uxth	r1, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2246      	movs	r2, #70	; 0x46
 800ab7e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab80:	2301      	movs	r3, #1
 800ab82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ab84:	f7fe f944 	bl	8008e10 <HAL_GetTick>
 800ab88:	0002      	movs	r2, r0
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	1ad3      	subs	r3, r2, r3
 800ab8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d802      	bhi.n	800ab9a <HAL_SPI_TransmitReceive+0x33a>
 800ab94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab96:	3301      	adds	r3, #1
 800ab98:	d102      	bne.n	800aba0 <HAL_SPI_TransmitReceive+0x340>
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d104      	bne.n	800abaa <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800aba0:	2323      	movs	r3, #35	; 0x23
 800aba2:	18fb      	adds	r3, r7, r3
 800aba4:	2203      	movs	r2, #3
 800aba6:	701a      	strb	r2, [r3, #0]
        goto error;
 800aba8:	e01b      	b.n	800abe2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abae:	b29b      	uxth	r3, r3
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d19d      	bne.n	800aaf0 <HAL_SPI_TransmitReceive+0x290>
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2246      	movs	r2, #70	; 0x46
 800abb8:	5a9b      	ldrh	r3, [r3, r2]
 800abba:	b29b      	uxth	r3, r3
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d197      	bne.n	800aaf0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800abc0:	69fa      	ldr	r2, [r7, #28]
 800abc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	0018      	movs	r0, r3
 800abc8:	f000 fac6 	bl	800b158 <SPI_EndRxTxTransaction>
 800abcc:	1e03      	subs	r3, r0, #0
 800abce:	d007      	beq.n	800abe0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800abd0:	2323      	movs	r3, #35	; 0x23
 800abd2:	18fb      	adds	r3, r7, r3
 800abd4:	2201      	movs	r2, #1
 800abd6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2220      	movs	r2, #32
 800abdc:	661a      	str	r2, [r3, #96]	; 0x60
 800abde:	e000      	b.n	800abe2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800abe0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	225d      	movs	r2, #93	; 0x5d
 800abe6:	2101      	movs	r1, #1
 800abe8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	225c      	movs	r2, #92	; 0x5c
 800abee:	2100      	movs	r1, #0
 800abf0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800abf2:	2323      	movs	r3, #35	; 0x23
 800abf4:	18fb      	adds	r3, r7, r3
 800abf6:	781b      	ldrb	r3, [r3, #0]
}
 800abf8:	0018      	movs	r0, r3
 800abfa:	46bd      	mov	sp, r7
 800abfc:	b00a      	add	sp, #40	; 0x28
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	ffffefff 	.word	0xffffefff

0800ac04 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	099b      	lsrs	r3, r3, #6
 800ac20:	001a      	movs	r2, r3
 800ac22:	2301      	movs	r3, #1
 800ac24:	4013      	ands	r3, r2
 800ac26:	d10f      	bne.n	800ac48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ac2e:	d00b      	beq.n	800ac48 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	099b      	lsrs	r3, r3, #6
 800ac34:	001a      	movs	r2, r3
 800ac36:	2301      	movs	r3, #1
 800ac38:	4013      	ands	r3, r2
 800ac3a:	d005      	beq.n	800ac48 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	0010      	movs	r0, r2
 800ac44:	4798      	blx	r3
    return;
 800ac46:	e0d5      	b.n	800adf4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	085b      	lsrs	r3, r3, #1
 800ac4c:	001a      	movs	r2, r3
 800ac4e:	2301      	movs	r3, #1
 800ac50:	4013      	ands	r3, r2
 800ac52:	d00b      	beq.n	800ac6c <HAL_SPI_IRQHandler+0x68>
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	09db      	lsrs	r3, r3, #7
 800ac58:	001a      	movs	r2, r3
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	4013      	ands	r3, r2
 800ac5e:	d005      	beq.n	800ac6c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	0010      	movs	r0, r2
 800ac68:	4798      	blx	r3
    return;
 800ac6a:	e0c3      	b.n	800adf4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	095b      	lsrs	r3, r3, #5
 800ac70:	001a      	movs	r2, r3
 800ac72:	2301      	movs	r3, #1
 800ac74:	4013      	ands	r3, r2
 800ac76:	d10c      	bne.n	800ac92 <HAL_SPI_IRQHandler+0x8e>
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	099b      	lsrs	r3, r3, #6
 800ac7c:	001a      	movs	r2, r3
 800ac7e:	2301      	movs	r3, #1
 800ac80:	4013      	ands	r3, r2
 800ac82:	d106      	bne.n	800ac92 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	0a1b      	lsrs	r3, r3, #8
 800ac88:	001a      	movs	r2, r3
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	d100      	bne.n	800ac92 <HAL_SPI_IRQHandler+0x8e>
 800ac90:	e0b0      	b.n	800adf4 <HAL_SPI_IRQHandler+0x1f0>
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	095b      	lsrs	r3, r3, #5
 800ac96:	001a      	movs	r2, r3
 800ac98:	2301      	movs	r3, #1
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	d100      	bne.n	800aca0 <HAL_SPI_IRQHandler+0x9c>
 800ac9e:	e0a9      	b.n	800adf4 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	099b      	lsrs	r3, r3, #6
 800aca4:	001a      	movs	r2, r3
 800aca6:	2301      	movs	r3, #1
 800aca8:	4013      	ands	r3, r2
 800acaa:	d023      	beq.n	800acf4 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	225d      	movs	r2, #93	; 0x5d
 800acb0:	5c9b      	ldrb	r3, [r3, r2]
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	2b03      	cmp	r3, #3
 800acb6:	d011      	beq.n	800acdc <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acbc:	2204      	movs	r2, #4
 800acbe:	431a      	orrs	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acc4:	2300      	movs	r3, #0
 800acc6:	617b      	str	r3, [r7, #20]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	617b      	str	r3, [r7, #20]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	617b      	str	r3, [r7, #20]
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	e00b      	b.n	800acf4 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acdc:	2300      	movs	r3, #0
 800acde:	613b      	str	r3, [r7, #16]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	613b      	str	r3, [r7, #16]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	613b      	str	r3, [r7, #16]
 800acf0:	693b      	ldr	r3, [r7, #16]
        return;
 800acf2:	e07f      	b.n	800adf4 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	095b      	lsrs	r3, r3, #5
 800acf8:	001a      	movs	r2, r3
 800acfa:	2301      	movs	r3, #1
 800acfc:	4013      	ands	r3, r2
 800acfe:	d014      	beq.n	800ad2a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad04:	2201      	movs	r2, #1
 800ad06:	431a      	orrs	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	60fb      	str	r3, [r7, #12]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	60fb      	str	r3, [r7, #12]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2140      	movs	r1, #64	; 0x40
 800ad24:	438a      	bics	r2, r1
 800ad26:	601a      	str	r2, [r3, #0]
 800ad28:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	0a1b      	lsrs	r3, r3, #8
 800ad2e:	001a      	movs	r2, r3
 800ad30:	2301      	movs	r3, #1
 800ad32:	4013      	ands	r3, r2
 800ad34:	d00c      	beq.n	800ad50 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad3a:	2208      	movs	r2, #8
 800ad3c:	431a      	orrs	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ad42:	2300      	movs	r3, #0
 800ad44:	60bb      	str	r3, [r7, #8]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	60bb      	str	r3, [r7, #8]
 800ad4e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d04c      	beq.n	800adf2 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	685a      	ldr	r2, [r3, #4]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	21e0      	movs	r1, #224	; 0xe0
 800ad64:	438a      	bics	r2, r1
 800ad66:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	225d      	movs	r2, #93	; 0x5d
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	2202      	movs	r2, #2
 800ad74:	4013      	ands	r3, r2
 800ad76:	d103      	bne.n	800ad80 <HAL_SPI_IRQHandler+0x17c>
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	d032      	beq.n	800ade6 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	685a      	ldr	r2, [r3, #4]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2103      	movs	r1, #3
 800ad8c:	438a      	bics	r2, r1
 800ad8e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d010      	beq.n	800adba <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad9c:	4a17      	ldr	r2, [pc, #92]	; (800adfc <HAL_SPI_IRQHandler+0x1f8>)
 800ad9e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ada4:	0018      	movs	r0, r3
 800ada6:	f7fe f9a1 	bl	80090ec <HAL_DMA_Abort_IT>
 800adaa:	1e03      	subs	r3, r0, #0
 800adac:	d005      	beq.n	800adba <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adb2:	2240      	movs	r2, #64	; 0x40
 800adb4:	431a      	orrs	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d016      	beq.n	800adf0 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc6:	4a0d      	ldr	r2, [pc, #52]	; (800adfc <HAL_SPI_IRQHandler+0x1f8>)
 800adc8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adce:	0018      	movs	r0, r3
 800add0:	f7fe f98c 	bl	80090ec <HAL_DMA_Abort_IT>
 800add4:	1e03      	subs	r3, r0, #0
 800add6:	d00b      	beq.n	800adf0 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800addc:	2240      	movs	r2, #64	; 0x40
 800adde:	431a      	orrs	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800ade4:	e004      	b.n	800adf0 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	0018      	movs	r0, r3
 800adea:	f000 f809 	bl	800ae00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800adee:	e000      	b.n	800adf2 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800adf0:	46c0      	nop			; (mov r8, r8)
    return;
 800adf2:	46c0      	nop			; (mov r8, r8)
  }
}
 800adf4:	46bd      	mov	sp, r7
 800adf6:	b008      	add	sp, #32
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	46c0      	nop			; (mov r8, r8)
 800adfc:	0800ae11 	.word	0x0800ae11

0800ae00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ae08:	46c0      	nop			; (mov r8, r8)
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	b002      	add	sp, #8
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae1c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2246      	movs	r2, #70	; 0x46
 800ae22:	2100      	movs	r1, #0
 800ae24:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	0018      	movs	r0, r3
 800ae30:	f7ff ffe6 	bl	800ae00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae34:	46c0      	nop			; (mov r8, r8)
 800ae36:	46bd      	mov	sp, r7
 800ae38:	b004      	add	sp, #16
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b088      	sub	sp, #32
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	603b      	str	r3, [r7, #0]
 800ae48:	1dfb      	adds	r3, r7, #7
 800ae4a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ae4c:	f7fd ffe0 	bl	8008e10 <HAL_GetTick>
 800ae50:	0002      	movs	r2, r0
 800ae52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae54:	1a9b      	subs	r3, r3, r2
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	18d3      	adds	r3, r2, r3
 800ae5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ae5c:	f7fd ffd8 	bl	8008e10 <HAL_GetTick>
 800ae60:	0003      	movs	r3, r0
 800ae62:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ae64:	4b3a      	ldr	r3, [pc, #232]	; (800af50 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	015b      	lsls	r3, r3, #5
 800ae6a:	0d1b      	lsrs	r3, r3, #20
 800ae6c:	69fa      	ldr	r2, [r7, #28]
 800ae6e:	4353      	muls	r3, r2
 800ae70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae72:	e058      	b.n	800af26 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	3301      	adds	r3, #1
 800ae78:	d055      	beq.n	800af26 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ae7a:	f7fd ffc9 	bl	8008e10 <HAL_GetTick>
 800ae7e:	0002      	movs	r2, r0
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	1ad3      	subs	r3, r2, r3
 800ae84:	69fa      	ldr	r2, [r7, #28]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d902      	bls.n	800ae90 <SPI_WaitFlagStateUntilTimeout+0x54>
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d142      	bne.n	800af16 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	685a      	ldr	r2, [r3, #4]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	21e0      	movs	r1, #224	; 0xe0
 800ae9c:	438a      	bics	r2, r1
 800ae9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	2382      	movs	r3, #130	; 0x82
 800aea6:	005b      	lsls	r3, r3, #1
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d113      	bne.n	800aed4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	689a      	ldr	r2, [r3, #8]
 800aeb0:	2380      	movs	r3, #128	; 0x80
 800aeb2:	021b      	lsls	r3, r3, #8
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d005      	beq.n	800aec4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	689a      	ldr	r2, [r3, #8]
 800aebc:	2380      	movs	r3, #128	; 0x80
 800aebe:	00db      	lsls	r3, r3, #3
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d107      	bne.n	800aed4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2140      	movs	r1, #64	; 0x40
 800aed0:	438a      	bics	r2, r1
 800aed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aed8:	2380      	movs	r3, #128	; 0x80
 800aeda:	019b      	lsls	r3, r3, #6
 800aedc:	429a      	cmp	r2, r3
 800aede:	d110      	bne.n	800af02 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	491a      	ldr	r1, [pc, #104]	; (800af54 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800aeec:	400a      	ands	r2, r1
 800aeee:	601a      	str	r2, [r3, #0]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2180      	movs	r1, #128	; 0x80
 800aefc:	0189      	lsls	r1, r1, #6
 800aefe:	430a      	orrs	r2, r1
 800af00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	225d      	movs	r2, #93	; 0x5d
 800af06:	2101      	movs	r1, #1
 800af08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	225c      	movs	r2, #92	; 0x5c
 800af0e:	2100      	movs	r1, #0
 800af10:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800af12:	2303      	movs	r3, #3
 800af14:	e017      	b.n	800af46 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d101      	bne.n	800af20 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800af1c:	2300      	movs	r3, #0
 800af1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	3b01      	subs	r3, #1
 800af24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	4013      	ands	r3, r2
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	425a      	negs	r2, r3
 800af36:	4153      	adcs	r3, r2
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	001a      	movs	r2, r3
 800af3c:	1dfb      	adds	r3, r7, #7
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	429a      	cmp	r2, r3
 800af42:	d197      	bne.n	800ae74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800af44:	2300      	movs	r3, #0
}
 800af46:	0018      	movs	r0, r3
 800af48:	46bd      	mov	sp, r7
 800af4a:	b008      	add	sp, #32
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	46c0      	nop			; (mov r8, r8)
 800af50:	200000d4 	.word	0x200000d4
 800af54:	ffffdfff 	.word	0xffffdfff

0800af58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b08a      	sub	sp, #40	; 0x28
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
 800af64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800af66:	2317      	movs	r3, #23
 800af68:	18fb      	adds	r3, r7, r3
 800af6a:	2200      	movs	r2, #0
 800af6c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800af6e:	f7fd ff4f 	bl	8008e10 <HAL_GetTick>
 800af72:	0002      	movs	r2, r0
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	1a9b      	subs	r3, r3, r2
 800af78:	683a      	ldr	r2, [r7, #0]
 800af7a:	18d3      	adds	r3, r2, r3
 800af7c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800af7e:	f7fd ff47 	bl	8008e10 <HAL_GetTick>
 800af82:	0003      	movs	r3, r0
 800af84:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	330c      	adds	r3, #12
 800af8c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800af8e:	4b41      	ldr	r3, [pc, #260]	; (800b094 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	0013      	movs	r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	189b      	adds	r3, r3, r2
 800af98:	00da      	lsls	r2, r3, #3
 800af9a:	1ad3      	subs	r3, r2, r3
 800af9c:	0d1b      	lsrs	r3, r3, #20
 800af9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afa0:	4353      	muls	r3, r2
 800afa2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800afa4:	e068      	b.n	800b078 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	23c0      	movs	r3, #192	; 0xc0
 800afaa:	00db      	lsls	r3, r3, #3
 800afac:	429a      	cmp	r2, r3
 800afae:	d10a      	bne.n	800afc6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d107      	bne.n	800afc6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	b2da      	uxtb	r2, r3
 800afbc:	2117      	movs	r1, #23
 800afbe:	187b      	adds	r3, r7, r1
 800afc0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800afc2:	187b      	adds	r3, r7, r1
 800afc4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	3301      	adds	r3, #1
 800afca:	d055      	beq.n	800b078 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800afcc:	f7fd ff20 	bl	8008e10 <HAL_GetTick>
 800afd0:	0002      	movs	r2, r0
 800afd2:	6a3b      	ldr	r3, [r7, #32]
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd8:	429a      	cmp	r2, r3
 800afda:	d902      	bls.n	800afe2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d142      	bne.n	800b068 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	685a      	ldr	r2, [r3, #4]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	21e0      	movs	r1, #224	; 0xe0
 800afee:	438a      	bics	r2, r1
 800aff0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	685a      	ldr	r2, [r3, #4]
 800aff6:	2382      	movs	r3, #130	; 0x82
 800aff8:	005b      	lsls	r3, r3, #1
 800affa:	429a      	cmp	r2, r3
 800affc:	d113      	bne.n	800b026 <SPI_WaitFifoStateUntilTimeout+0xce>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	689a      	ldr	r2, [r3, #8]
 800b002:	2380      	movs	r3, #128	; 0x80
 800b004:	021b      	lsls	r3, r3, #8
 800b006:	429a      	cmp	r2, r3
 800b008:	d005      	beq.n	800b016 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	689a      	ldr	r2, [r3, #8]
 800b00e:	2380      	movs	r3, #128	; 0x80
 800b010:	00db      	lsls	r3, r3, #3
 800b012:	429a      	cmp	r2, r3
 800b014:	d107      	bne.n	800b026 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2140      	movs	r1, #64	; 0x40
 800b022:	438a      	bics	r2, r1
 800b024:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b02a:	2380      	movs	r3, #128	; 0x80
 800b02c:	019b      	lsls	r3, r3, #6
 800b02e:	429a      	cmp	r2, r3
 800b030:	d110      	bne.n	800b054 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4916      	ldr	r1, [pc, #88]	; (800b098 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800b03e:	400a      	ands	r2, r1
 800b040:	601a      	str	r2, [r3, #0]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2180      	movs	r1, #128	; 0x80
 800b04e:	0189      	lsls	r1, r1, #6
 800b050:	430a      	orrs	r2, r1
 800b052:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	225d      	movs	r2, #93	; 0x5d
 800b058:	2101      	movs	r1, #1
 800b05a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	225c      	movs	r2, #92	; 0x5c
 800b060:	2100      	movs	r1, #0
 800b062:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b064:	2303      	movs	r3, #3
 800b066:	e010      	b.n	800b08a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d101      	bne.n	800b072 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800b06e:	2300      	movs	r3, #0
 800b070:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	3b01      	subs	r3, #1
 800b076:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	68ba      	ldr	r2, [r7, #8]
 800b080:	4013      	ands	r3, r2
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	429a      	cmp	r2, r3
 800b086:	d18e      	bne.n	800afa6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	0018      	movs	r0, r3
 800b08c:	46bd      	mov	sp, r7
 800b08e:	b00a      	add	sp, #40	; 0x28
 800b090:	bd80      	pop	{r7, pc}
 800b092:	46c0      	nop			; (mov r8, r8)
 800b094:	200000d4 	.word	0x200000d4
 800b098:	ffffdfff 	.word	0xffffdfff

0800b09c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af02      	add	r7, sp, #8
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	685a      	ldr	r2, [r3, #4]
 800b0ac:	2382      	movs	r3, #130	; 0x82
 800b0ae:	005b      	lsls	r3, r3, #1
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d113      	bne.n	800b0dc <SPI_EndRxTransaction+0x40>
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	689a      	ldr	r2, [r3, #8]
 800b0b8:	2380      	movs	r3, #128	; 0x80
 800b0ba:	021b      	lsls	r3, r3, #8
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d005      	beq.n	800b0cc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	689a      	ldr	r2, [r3, #8]
 800b0c4:	2380      	movs	r3, #128	; 0x80
 800b0c6:	00db      	lsls	r3, r3, #3
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d107      	bne.n	800b0dc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2140      	movs	r1, #64	; 0x40
 800b0d8:	438a      	bics	r2, r1
 800b0da:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	0013      	movs	r3, r2
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	2180      	movs	r1, #128	; 0x80
 800b0ea:	f7ff fea7 	bl	800ae3c <SPI_WaitFlagStateUntilTimeout>
 800b0ee:	1e03      	subs	r3, r0, #0
 800b0f0:	d007      	beq.n	800b102 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0f6:	2220      	movs	r2, #32
 800b0f8:	431a      	orrs	r2, r3
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b0fe:	2303      	movs	r3, #3
 800b100:	e026      	b.n	800b150 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	2382      	movs	r3, #130	; 0x82
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d11f      	bne.n	800b14e <SPI_EndRxTransaction+0xb2>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	689a      	ldr	r2, [r3, #8]
 800b112:	2380      	movs	r3, #128	; 0x80
 800b114:	021b      	lsls	r3, r3, #8
 800b116:	429a      	cmp	r2, r3
 800b118:	d005      	beq.n	800b126 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	689a      	ldr	r2, [r3, #8]
 800b11e:	2380      	movs	r3, #128	; 0x80
 800b120:	00db      	lsls	r3, r3, #3
 800b122:	429a      	cmp	r2, r3
 800b124:	d113      	bne.n	800b14e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	23c0      	movs	r3, #192	; 0xc0
 800b12a:	00d9      	lsls	r1, r3, #3
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	0013      	movs	r3, r2
 800b134:	2200      	movs	r2, #0
 800b136:	f7ff ff0f 	bl	800af58 <SPI_WaitFifoStateUntilTimeout>
 800b13a:	1e03      	subs	r3, r0, #0
 800b13c:	d007      	beq.n	800b14e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b142:	2220      	movs	r2, #32
 800b144:	431a      	orrs	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b14a:	2303      	movs	r3, #3
 800b14c:	e000      	b.n	800b150 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	0018      	movs	r0, r3
 800b152:	46bd      	mov	sp, r7
 800b154:	b004      	add	sp, #16
 800b156:	bd80      	pop	{r7, pc}

0800b158 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af02      	add	r7, sp, #8
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	23c0      	movs	r3, #192	; 0xc0
 800b168:	0159      	lsls	r1, r3, #5
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	0013      	movs	r3, r2
 800b172:	2200      	movs	r2, #0
 800b174:	f7ff fef0 	bl	800af58 <SPI_WaitFifoStateUntilTimeout>
 800b178:	1e03      	subs	r3, r0, #0
 800b17a:	d007      	beq.n	800b18c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b180:	2220      	movs	r2, #32
 800b182:	431a      	orrs	r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b188:	2303      	movs	r3, #3
 800b18a:	e027      	b.n	800b1dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b18c:	68ba      	ldr	r2, [r7, #8]
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	0013      	movs	r3, r2
 800b196:	2200      	movs	r2, #0
 800b198:	2180      	movs	r1, #128	; 0x80
 800b19a:	f7ff fe4f 	bl	800ae3c <SPI_WaitFlagStateUntilTimeout>
 800b19e:	1e03      	subs	r3, r0, #0
 800b1a0:	d007      	beq.n	800b1b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1a6:	2220      	movs	r2, #32
 800b1a8:	431a      	orrs	r2, r3
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b1ae:	2303      	movs	r3, #3
 800b1b0:	e014      	b.n	800b1dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	23c0      	movs	r3, #192	; 0xc0
 800b1b6:	00d9      	lsls	r1, r3, #3
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	0013      	movs	r3, r2
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f7ff fec9 	bl	800af58 <SPI_WaitFifoStateUntilTimeout>
 800b1c6:	1e03      	subs	r3, r0, #0
 800b1c8:	d007      	beq.n	800b1da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1ce:	2220      	movs	r2, #32
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b1d6:	2303      	movs	r3, #3
 800b1d8:	e000      	b.n	800b1dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	0018      	movs	r0, r3
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	b004      	add	sp, #16
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d101      	bne.n	800b1f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e04a      	b.n	800b28c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	223d      	movs	r2, #61	; 0x3d
 800b1fa:	5c9b      	ldrb	r3, [r3, r2]
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d107      	bne.n	800b212 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	223c      	movs	r2, #60	; 0x3c
 800b206:	2100      	movs	r1, #0
 800b208:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	0018      	movs	r0, r3
 800b20e:	f7fc fd33 	bl	8007c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	223d      	movs	r2, #61	; 0x3d
 800b216:	2102      	movs	r1, #2
 800b218:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	3304      	adds	r3, #4
 800b222:	0019      	movs	r1, r3
 800b224:	0010      	movs	r0, r2
 800b226:	f000 fd0f 	bl	800bc48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2248      	movs	r2, #72	; 0x48
 800b22e:	2101      	movs	r1, #1
 800b230:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	223e      	movs	r2, #62	; 0x3e
 800b236:	2101      	movs	r1, #1
 800b238:	5499      	strb	r1, [r3, r2]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	223f      	movs	r2, #63	; 0x3f
 800b23e:	2101      	movs	r1, #1
 800b240:	5499      	strb	r1, [r3, r2]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2240      	movs	r2, #64	; 0x40
 800b246:	2101      	movs	r1, #1
 800b248:	5499      	strb	r1, [r3, r2]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2241      	movs	r2, #65	; 0x41
 800b24e:	2101      	movs	r1, #1
 800b250:	5499      	strb	r1, [r3, r2]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2242      	movs	r2, #66	; 0x42
 800b256:	2101      	movs	r1, #1
 800b258:	5499      	strb	r1, [r3, r2]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2243      	movs	r2, #67	; 0x43
 800b25e:	2101      	movs	r1, #1
 800b260:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2244      	movs	r2, #68	; 0x44
 800b266:	2101      	movs	r1, #1
 800b268:	5499      	strb	r1, [r3, r2]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2245      	movs	r2, #69	; 0x45
 800b26e:	2101      	movs	r1, #1
 800b270:	5499      	strb	r1, [r3, r2]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2246      	movs	r2, #70	; 0x46
 800b276:	2101      	movs	r1, #1
 800b278:	5499      	strb	r1, [r3, r2]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2247      	movs	r2, #71	; 0x47
 800b27e:	2101      	movs	r1, #1
 800b280:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	223d      	movs	r2, #61	; 0x3d
 800b286:	2101      	movs	r1, #1
 800b288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	0018      	movs	r0, r3
 800b28e:	46bd      	mov	sp, r7
 800b290:	b002      	add	sp, #8
 800b292:	bd80      	pop	{r7, pc}

0800b294 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	223d      	movs	r2, #61	; 0x3d
 800b2a0:	5c9b      	ldrb	r3, [r3, r2]
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d001      	beq.n	800b2ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e03c      	b.n	800b326 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	223d      	movs	r2, #61	; 0x3d
 800b2b0:	2102      	movs	r1, #2
 800b2b2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68da      	ldr	r2, [r3, #12]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2101      	movs	r1, #1
 800b2c0:	430a      	orrs	r2, r1
 800b2c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a19      	ldr	r2, [pc, #100]	; (800b330 <HAL_TIM_Base_Start_IT+0x9c>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d009      	beq.n	800b2e2 <HAL_TIM_Base_Start_IT+0x4e>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a18      	ldr	r2, [pc, #96]	; (800b334 <HAL_TIM_Base_Start_IT+0xa0>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d004      	beq.n	800b2e2 <HAL_TIM_Base_Start_IT+0x4e>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a16      	ldr	r2, [pc, #88]	; (800b338 <HAL_TIM_Base_Start_IT+0xa4>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d116      	bne.n	800b310 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	4a14      	ldr	r2, [pc, #80]	; (800b33c <HAL_TIM_Base_Start_IT+0xa8>)
 800b2ea:	4013      	ands	r3, r2
 800b2ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2b06      	cmp	r3, #6
 800b2f2:	d016      	beq.n	800b322 <HAL_TIM_Base_Start_IT+0x8e>
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	2380      	movs	r3, #128	; 0x80
 800b2f8:	025b      	lsls	r3, r3, #9
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d011      	beq.n	800b322 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2101      	movs	r1, #1
 800b30a:	430a      	orrs	r2, r1
 800b30c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b30e:	e008      	b.n	800b322 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2101      	movs	r1, #1
 800b31c:	430a      	orrs	r2, r1
 800b31e:	601a      	str	r2, [r3, #0]
 800b320:	e000      	b.n	800b324 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b322:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	0018      	movs	r0, r3
 800b328:	46bd      	mov	sp, r7
 800b32a:	b004      	add	sp, #16
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	46c0      	nop			; (mov r8, r8)
 800b330:	40012c00 	.word	0x40012c00
 800b334:	40000400 	.word	0x40000400
 800b338:	40014000 	.word	0x40014000
 800b33c:	00010007 	.word	0x00010007

0800b340 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68da      	ldr	r2, [r3, #12]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2101      	movs	r1, #1
 800b354:	438a      	bics	r2, r1
 800b356:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	4a0d      	ldr	r2, [pc, #52]	; (800b394 <HAL_TIM_Base_Stop_IT+0x54>)
 800b360:	4013      	ands	r3, r2
 800b362:	d10d      	bne.n	800b380 <HAL_TIM_Base_Stop_IT+0x40>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	6a1b      	ldr	r3, [r3, #32]
 800b36a:	4a0b      	ldr	r2, [pc, #44]	; (800b398 <HAL_TIM_Base_Stop_IT+0x58>)
 800b36c:	4013      	ands	r3, r2
 800b36e:	d107      	bne.n	800b380 <HAL_TIM_Base_Stop_IT+0x40>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2101      	movs	r1, #1
 800b37c:	438a      	bics	r2, r1
 800b37e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	223d      	movs	r2, #61	; 0x3d
 800b384:	2101      	movs	r1, #1
 800b386:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	0018      	movs	r0, r3
 800b38c:	46bd      	mov	sp, r7
 800b38e:	b002      	add	sp, #8
 800b390:	bd80      	pop	{r7, pc}
 800b392:	46c0      	nop			; (mov r8, r8)
 800b394:	00001111 	.word	0x00001111
 800b398:	00000444 	.word	0x00000444

0800b39c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d101      	bne.n	800b3ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e04a      	b.n	800b444 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	223d      	movs	r2, #61	; 0x3d
 800b3b2:	5c9b      	ldrb	r3, [r3, r2]
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d107      	bne.n	800b3ca <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	223c      	movs	r2, #60	; 0x3c
 800b3be:	2100      	movs	r1, #0
 800b3c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	0018      	movs	r0, r3
 800b3c6:	f000 f841 	bl	800b44c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	223d      	movs	r2, #61	; 0x3d
 800b3ce:	2102      	movs	r1, #2
 800b3d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	3304      	adds	r3, #4
 800b3da:	0019      	movs	r1, r3
 800b3dc:	0010      	movs	r0, r2
 800b3de:	f000 fc33 	bl	800bc48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2248      	movs	r2, #72	; 0x48
 800b3e6:	2101      	movs	r1, #1
 800b3e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	223e      	movs	r2, #62	; 0x3e
 800b3ee:	2101      	movs	r1, #1
 800b3f0:	5499      	strb	r1, [r3, r2]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	223f      	movs	r2, #63	; 0x3f
 800b3f6:	2101      	movs	r1, #1
 800b3f8:	5499      	strb	r1, [r3, r2]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2240      	movs	r2, #64	; 0x40
 800b3fe:	2101      	movs	r1, #1
 800b400:	5499      	strb	r1, [r3, r2]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2241      	movs	r2, #65	; 0x41
 800b406:	2101      	movs	r1, #1
 800b408:	5499      	strb	r1, [r3, r2]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2242      	movs	r2, #66	; 0x42
 800b40e:	2101      	movs	r1, #1
 800b410:	5499      	strb	r1, [r3, r2]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2243      	movs	r2, #67	; 0x43
 800b416:	2101      	movs	r1, #1
 800b418:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2244      	movs	r2, #68	; 0x44
 800b41e:	2101      	movs	r1, #1
 800b420:	5499      	strb	r1, [r3, r2]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2245      	movs	r2, #69	; 0x45
 800b426:	2101      	movs	r1, #1
 800b428:	5499      	strb	r1, [r3, r2]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2246      	movs	r2, #70	; 0x46
 800b42e:	2101      	movs	r1, #1
 800b430:	5499      	strb	r1, [r3, r2]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2247      	movs	r2, #71	; 0x47
 800b436:	2101      	movs	r1, #1
 800b438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	223d      	movs	r2, #61	; 0x3d
 800b43e:	2101      	movs	r1, #1
 800b440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	0018      	movs	r0, r3
 800b446:	46bd      	mov	sp, r7
 800b448:	b002      	add	sp, #8
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800b454:	46c0      	nop			; (mov r8, r8)
 800b456:	46bd      	mov	sp, r7
 800b458:	b002      	add	sp, #8
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b466:	230f      	movs	r3, #15
 800b468:	18fb      	adds	r3, r7, r3
 800b46a:	2200      	movs	r2, #0
 800b46c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d104      	bne.n	800b47e <HAL_TIM_IC_Start_IT+0x22>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	223e      	movs	r2, #62	; 0x3e
 800b478:	5c9b      	ldrb	r3, [r3, r2]
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	e023      	b.n	800b4c6 <HAL_TIM_IC_Start_IT+0x6a>
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	2b04      	cmp	r3, #4
 800b482:	d104      	bne.n	800b48e <HAL_TIM_IC_Start_IT+0x32>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	223f      	movs	r2, #63	; 0x3f
 800b488:	5c9b      	ldrb	r3, [r3, r2]
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	e01b      	b.n	800b4c6 <HAL_TIM_IC_Start_IT+0x6a>
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2b08      	cmp	r3, #8
 800b492:	d104      	bne.n	800b49e <HAL_TIM_IC_Start_IT+0x42>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2240      	movs	r2, #64	; 0x40
 800b498:	5c9b      	ldrb	r3, [r3, r2]
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	e013      	b.n	800b4c6 <HAL_TIM_IC_Start_IT+0x6a>
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b0c      	cmp	r3, #12
 800b4a2:	d104      	bne.n	800b4ae <HAL_TIM_IC_Start_IT+0x52>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2241      	movs	r2, #65	; 0x41
 800b4a8:	5c9b      	ldrb	r3, [r3, r2]
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	e00b      	b.n	800b4c6 <HAL_TIM_IC_Start_IT+0x6a>
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	2b10      	cmp	r3, #16
 800b4b2:	d104      	bne.n	800b4be <HAL_TIM_IC_Start_IT+0x62>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2242      	movs	r2, #66	; 0x42
 800b4b8:	5c9b      	ldrb	r3, [r3, r2]
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	e003      	b.n	800b4c6 <HAL_TIM_IC_Start_IT+0x6a>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2243      	movs	r2, #67	; 0x43
 800b4c2:	5c9b      	ldrb	r3, [r3, r2]
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	220e      	movs	r2, #14
 800b4c8:	18ba      	adds	r2, r7, r2
 800b4ca:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d104      	bne.n	800b4dc <HAL_TIM_IC_Start_IT+0x80>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2244      	movs	r2, #68	; 0x44
 800b4d6:	5c9b      	ldrb	r3, [r3, r2]
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	e013      	b.n	800b504 <HAL_TIM_IC_Start_IT+0xa8>
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2b04      	cmp	r3, #4
 800b4e0:	d104      	bne.n	800b4ec <HAL_TIM_IC_Start_IT+0x90>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2245      	movs	r2, #69	; 0x45
 800b4e6:	5c9b      	ldrb	r3, [r3, r2]
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	e00b      	b.n	800b504 <HAL_TIM_IC_Start_IT+0xa8>
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	2b08      	cmp	r3, #8
 800b4f0:	d104      	bne.n	800b4fc <HAL_TIM_IC_Start_IT+0xa0>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2246      	movs	r2, #70	; 0x46
 800b4f6:	5c9b      	ldrb	r3, [r3, r2]
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	e003      	b.n	800b504 <HAL_TIM_IC_Start_IT+0xa8>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2247      	movs	r2, #71	; 0x47
 800b500:	5c9b      	ldrb	r3, [r3, r2]
 800b502:	b2db      	uxtb	r3, r3
 800b504:	210d      	movs	r1, #13
 800b506:	187a      	adds	r2, r7, r1
 800b508:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800b50a:	230e      	movs	r3, #14
 800b50c:	18fb      	adds	r3, r7, r3
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d103      	bne.n	800b51c <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800b514:	187b      	adds	r3, r7, r1
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d001      	beq.n	800b520 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e0c2      	b.n	800b6a6 <HAL_TIM_IC_Start_IT+0x24a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d104      	bne.n	800b530 <HAL_TIM_IC_Start_IT+0xd4>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	223e      	movs	r2, #62	; 0x3e
 800b52a:	2102      	movs	r1, #2
 800b52c:	5499      	strb	r1, [r3, r2]
 800b52e:	e023      	b.n	800b578 <HAL_TIM_IC_Start_IT+0x11c>
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	2b04      	cmp	r3, #4
 800b534:	d104      	bne.n	800b540 <HAL_TIM_IC_Start_IT+0xe4>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	223f      	movs	r2, #63	; 0x3f
 800b53a:	2102      	movs	r1, #2
 800b53c:	5499      	strb	r1, [r3, r2]
 800b53e:	e01b      	b.n	800b578 <HAL_TIM_IC_Start_IT+0x11c>
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	2b08      	cmp	r3, #8
 800b544:	d104      	bne.n	800b550 <HAL_TIM_IC_Start_IT+0xf4>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2240      	movs	r2, #64	; 0x40
 800b54a:	2102      	movs	r1, #2
 800b54c:	5499      	strb	r1, [r3, r2]
 800b54e:	e013      	b.n	800b578 <HAL_TIM_IC_Start_IT+0x11c>
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	2b0c      	cmp	r3, #12
 800b554:	d104      	bne.n	800b560 <HAL_TIM_IC_Start_IT+0x104>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2241      	movs	r2, #65	; 0x41
 800b55a:	2102      	movs	r1, #2
 800b55c:	5499      	strb	r1, [r3, r2]
 800b55e:	e00b      	b.n	800b578 <HAL_TIM_IC_Start_IT+0x11c>
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	2b10      	cmp	r3, #16
 800b564:	d104      	bne.n	800b570 <HAL_TIM_IC_Start_IT+0x114>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2242      	movs	r2, #66	; 0x42
 800b56a:	2102      	movs	r1, #2
 800b56c:	5499      	strb	r1, [r3, r2]
 800b56e:	e003      	b.n	800b578 <HAL_TIM_IC_Start_IT+0x11c>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2243      	movs	r2, #67	; 0x43
 800b574:	2102      	movs	r1, #2
 800b576:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d104      	bne.n	800b588 <HAL_TIM_IC_Start_IT+0x12c>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2244      	movs	r2, #68	; 0x44
 800b582:	2102      	movs	r1, #2
 800b584:	5499      	strb	r1, [r3, r2]
 800b586:	e013      	b.n	800b5b0 <HAL_TIM_IC_Start_IT+0x154>
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	2b04      	cmp	r3, #4
 800b58c:	d104      	bne.n	800b598 <HAL_TIM_IC_Start_IT+0x13c>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2245      	movs	r2, #69	; 0x45
 800b592:	2102      	movs	r1, #2
 800b594:	5499      	strb	r1, [r3, r2]
 800b596:	e00b      	b.n	800b5b0 <HAL_TIM_IC_Start_IT+0x154>
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	2b08      	cmp	r3, #8
 800b59c:	d104      	bne.n	800b5a8 <HAL_TIM_IC_Start_IT+0x14c>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2246      	movs	r2, #70	; 0x46
 800b5a2:	2102      	movs	r1, #2
 800b5a4:	5499      	strb	r1, [r3, r2]
 800b5a6:	e003      	b.n	800b5b0 <HAL_TIM_IC_Start_IT+0x154>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2247      	movs	r2, #71	; 0x47
 800b5ac:	2102      	movs	r1, #2
 800b5ae:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	2b0c      	cmp	r3, #12
 800b5b4:	d02a      	beq.n	800b60c <HAL_TIM_IC_Start_IT+0x1b0>
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	2b0c      	cmp	r3, #12
 800b5ba:	d830      	bhi.n	800b61e <HAL_TIM_IC_Start_IT+0x1c2>
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	2b08      	cmp	r3, #8
 800b5c0:	d01b      	beq.n	800b5fa <HAL_TIM_IC_Start_IT+0x19e>
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	2b08      	cmp	r3, #8
 800b5c6:	d82a      	bhi.n	800b61e <HAL_TIM_IC_Start_IT+0x1c2>
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d003      	beq.n	800b5d6 <HAL_TIM_IC_Start_IT+0x17a>
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	2b04      	cmp	r3, #4
 800b5d2:	d009      	beq.n	800b5e8 <HAL_TIM_IC_Start_IT+0x18c>
 800b5d4:	e023      	b.n	800b61e <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68da      	ldr	r2, [r3, #12]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2102      	movs	r1, #2
 800b5e2:	430a      	orrs	r2, r1
 800b5e4:	60da      	str	r2, [r3, #12]
      break;
 800b5e6:	e01f      	b.n	800b628 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	68da      	ldr	r2, [r3, #12]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2104      	movs	r1, #4
 800b5f4:	430a      	orrs	r2, r1
 800b5f6:	60da      	str	r2, [r3, #12]
      break;
 800b5f8:	e016      	b.n	800b628 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	68da      	ldr	r2, [r3, #12]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2108      	movs	r1, #8
 800b606:	430a      	orrs	r2, r1
 800b608:	60da      	str	r2, [r3, #12]
      break;
 800b60a:	e00d      	b.n	800b628 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68da      	ldr	r2, [r3, #12]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2110      	movs	r1, #16
 800b618:	430a      	orrs	r2, r1
 800b61a:	60da      	str	r2, [r3, #12]
      break;
 800b61c:	e004      	b.n	800b628 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800b61e:	230f      	movs	r3, #15
 800b620:	18fb      	adds	r3, r7, r3
 800b622:	2201      	movs	r2, #1
 800b624:	701a      	strb	r2, [r3, #0]
      break;
 800b626:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800b628:	230f      	movs	r3, #15
 800b62a:	18fb      	adds	r3, r7, r3
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d136      	bne.n	800b6a0 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6839      	ldr	r1, [r7, #0]
 800b638:	2201      	movs	r2, #1
 800b63a:	0018      	movs	r0, r3
 800b63c:	f000 fd36 	bl	800c0ac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a1a      	ldr	r2, [pc, #104]	; (800b6b0 <HAL_TIM_IC_Start_IT+0x254>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d009      	beq.n	800b65e <HAL_TIM_IC_Start_IT+0x202>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a19      	ldr	r2, [pc, #100]	; (800b6b4 <HAL_TIM_IC_Start_IT+0x258>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d004      	beq.n	800b65e <HAL_TIM_IC_Start_IT+0x202>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a17      	ldr	r2, [pc, #92]	; (800b6b8 <HAL_TIM_IC_Start_IT+0x25c>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d116      	bne.n	800b68c <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	4a15      	ldr	r2, [pc, #84]	; (800b6bc <HAL_TIM_IC_Start_IT+0x260>)
 800b666:	4013      	ands	r3, r2
 800b668:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	2b06      	cmp	r3, #6
 800b66e:	d016      	beq.n	800b69e <HAL_TIM_IC_Start_IT+0x242>
 800b670:	68ba      	ldr	r2, [r7, #8]
 800b672:	2380      	movs	r3, #128	; 0x80
 800b674:	025b      	lsls	r3, r3, #9
 800b676:	429a      	cmp	r2, r3
 800b678:	d011      	beq.n	800b69e <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2101      	movs	r1, #1
 800b686:	430a      	orrs	r2, r1
 800b688:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b68a:	e008      	b.n	800b69e <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2101      	movs	r1, #1
 800b698:	430a      	orrs	r2, r1
 800b69a:	601a      	str	r2, [r3, #0]
 800b69c:	e000      	b.n	800b6a0 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b69e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800b6a0:	230f      	movs	r3, #15
 800b6a2:	18fb      	adds	r3, r7, r3
 800b6a4:	781b      	ldrb	r3, [r3, #0]
}
 800b6a6:	0018      	movs	r0, r3
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	b004      	add	sp, #16
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	46c0      	nop			; (mov r8, r8)
 800b6b0:	40012c00 	.word	0x40012c00
 800b6b4:	40000400 	.word	0x40000400
 800b6b8:	40014000 	.word	0x40014000
 800b6bc:	00010007 	.word	0x00010007

0800b6c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	2202      	movs	r2, #2
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	d124      	bne.n	800b720 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	2202      	movs	r2, #2
 800b6de:	4013      	ands	r3, r2
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d11d      	bne.n	800b720 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2203      	movs	r2, #3
 800b6ea:	4252      	negs	r2, r2
 800b6ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	699b      	ldr	r3, [r3, #24]
 800b6fa:	2203      	movs	r2, #3
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	d004      	beq.n	800b70a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	0018      	movs	r0, r3
 800b704:	f7fb fbde 	bl	8006ec4 <HAL_TIM_IC_CaptureCallback>
 800b708:	e007      	b.n	800b71a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	0018      	movs	r0, r3
 800b70e:	f000 fa83 	bl	800bc18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	0018      	movs	r0, r3
 800b716:	f000 fa87 	bl	800bc28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	2204      	movs	r2, #4
 800b728:	4013      	ands	r3, r2
 800b72a:	2b04      	cmp	r3, #4
 800b72c:	d125      	bne.n	800b77a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	2204      	movs	r2, #4
 800b736:	4013      	ands	r3, r2
 800b738:	2b04      	cmp	r3, #4
 800b73a:	d11e      	bne.n	800b77a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2205      	movs	r2, #5
 800b742:	4252      	negs	r2, r2
 800b744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2202      	movs	r2, #2
 800b74a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	699a      	ldr	r2, [r3, #24]
 800b752:	23c0      	movs	r3, #192	; 0xc0
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	4013      	ands	r3, r2
 800b758:	d004      	beq.n	800b764 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	0018      	movs	r0, r3
 800b75e:	f7fb fbb1 	bl	8006ec4 <HAL_TIM_IC_CaptureCallback>
 800b762:	e007      	b.n	800b774 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	0018      	movs	r0, r3
 800b768:	f000 fa56 	bl	800bc18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	0018      	movs	r0, r3
 800b770:	f000 fa5a 	bl	800bc28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	2208      	movs	r2, #8
 800b782:	4013      	ands	r3, r2
 800b784:	2b08      	cmp	r3, #8
 800b786:	d124      	bne.n	800b7d2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	2208      	movs	r2, #8
 800b790:	4013      	ands	r3, r2
 800b792:	2b08      	cmp	r3, #8
 800b794:	d11d      	bne.n	800b7d2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2209      	movs	r2, #9
 800b79c:	4252      	negs	r2, r2
 800b79e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2204      	movs	r2, #4
 800b7a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	69db      	ldr	r3, [r3, #28]
 800b7ac:	2203      	movs	r2, #3
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	d004      	beq.n	800b7bc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	0018      	movs	r0, r3
 800b7b6:	f7fb fb85 	bl	8006ec4 <HAL_TIM_IC_CaptureCallback>
 800b7ba:	e007      	b.n	800b7cc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	0018      	movs	r0, r3
 800b7c0:	f000 fa2a 	bl	800bc18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	0018      	movs	r0, r3
 800b7c8:	f000 fa2e 	bl	800bc28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	2210      	movs	r2, #16
 800b7da:	4013      	ands	r3, r2
 800b7dc:	2b10      	cmp	r3, #16
 800b7de:	d125      	bne.n	800b82c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	2210      	movs	r2, #16
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	2b10      	cmp	r3, #16
 800b7ec:	d11e      	bne.n	800b82c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2211      	movs	r2, #17
 800b7f4:	4252      	negs	r2, r2
 800b7f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2208      	movs	r2, #8
 800b7fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	69da      	ldr	r2, [r3, #28]
 800b804:	23c0      	movs	r3, #192	; 0xc0
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	4013      	ands	r3, r2
 800b80a:	d004      	beq.n	800b816 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	0018      	movs	r0, r3
 800b810:	f7fb fb58 	bl	8006ec4 <HAL_TIM_IC_CaptureCallback>
 800b814:	e007      	b.n	800b826 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	0018      	movs	r0, r3
 800b81a:	f000 f9fd 	bl	800bc18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	0018      	movs	r0, r3
 800b822:	f000 fa01 	bl	800bc28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	691b      	ldr	r3, [r3, #16]
 800b832:	2201      	movs	r2, #1
 800b834:	4013      	ands	r3, r2
 800b836:	2b01      	cmp	r3, #1
 800b838:	d10f      	bne.n	800b85a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	2201      	movs	r2, #1
 800b842:	4013      	ands	r3, r2
 800b844:	2b01      	cmp	r3, #1
 800b846:	d108      	bne.n	800b85a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2202      	movs	r2, #2
 800b84e:	4252      	negs	r2, r2
 800b850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	0018      	movs	r0, r3
 800b856:	f7f8 ff39 	bl	80046cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	2280      	movs	r2, #128	; 0x80
 800b862:	4013      	ands	r3, r2
 800b864:	2b80      	cmp	r3, #128	; 0x80
 800b866:	d10f      	bne.n	800b888 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	2280      	movs	r2, #128	; 0x80
 800b870:	4013      	ands	r3, r2
 800b872:	2b80      	cmp	r3, #128	; 0x80
 800b874:	d108      	bne.n	800b888 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2281      	movs	r2, #129	; 0x81
 800b87c:	4252      	negs	r2, r2
 800b87e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	0018      	movs	r0, r3
 800b884:	f000 fca6 	bl	800c1d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	691a      	ldr	r2, [r3, #16]
 800b88e:	2380      	movs	r3, #128	; 0x80
 800b890:	005b      	lsls	r3, r3, #1
 800b892:	401a      	ands	r2, r3
 800b894:	2380      	movs	r3, #128	; 0x80
 800b896:	005b      	lsls	r3, r3, #1
 800b898:	429a      	cmp	r2, r3
 800b89a:	d10e      	bne.n	800b8ba <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	2280      	movs	r2, #128	; 0x80
 800b8a4:	4013      	ands	r3, r2
 800b8a6:	2b80      	cmp	r3, #128	; 0x80
 800b8a8:	d107      	bne.n	800b8ba <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a1c      	ldr	r2, [pc, #112]	; (800b920 <HAL_TIM_IRQHandler+0x260>)
 800b8b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	0018      	movs	r0, r3
 800b8b6:	f000 fc95 	bl	800c1e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	2240      	movs	r2, #64	; 0x40
 800b8c2:	4013      	ands	r3, r2
 800b8c4:	2b40      	cmp	r3, #64	; 0x40
 800b8c6:	d10f      	bne.n	800b8e8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	2240      	movs	r2, #64	; 0x40
 800b8d0:	4013      	ands	r3, r2
 800b8d2:	2b40      	cmp	r3, #64	; 0x40
 800b8d4:	d108      	bne.n	800b8e8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2241      	movs	r2, #65	; 0x41
 800b8dc:	4252      	negs	r2, r2
 800b8de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	0018      	movs	r0, r3
 800b8e4:	f000 f9a8 	bl	800bc38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	2220      	movs	r2, #32
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	2b20      	cmp	r3, #32
 800b8f4:	d10f      	bne.n	800b916 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	2220      	movs	r2, #32
 800b8fe:	4013      	ands	r3, r2
 800b900:	2b20      	cmp	r3, #32
 800b902:	d108      	bne.n	800b916 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2221      	movs	r2, #33	; 0x21
 800b90a:	4252      	negs	r2, r2
 800b90c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	0018      	movs	r0, r3
 800b912:	f000 fc57 	bl	800c1c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b916:	46c0      	nop			; (mov r8, r8)
 800b918:	46bd      	mov	sp, r7
 800b91a:	b002      	add	sp, #8
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	46c0      	nop			; (mov r8, r8)
 800b920:	fffffeff 	.word	0xfffffeff

0800b924 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b930:	2317      	movs	r3, #23
 800b932:	18fb      	adds	r3, r7, r3
 800b934:	2200      	movs	r2, #0
 800b936:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	223c      	movs	r2, #60	; 0x3c
 800b93c:	5c9b      	ldrb	r3, [r3, r2]
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d101      	bne.n	800b946 <HAL_TIM_IC_ConfigChannel+0x22>
 800b942:	2302      	movs	r3, #2
 800b944:	e08c      	b.n	800ba60 <HAL_TIM_IC_ConfigChannel+0x13c>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	223c      	movs	r2, #60	; 0x3c
 800b94a:	2101      	movs	r1, #1
 800b94c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d11b      	bne.n	800b98c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6818      	ldr	r0, [r3, #0]
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	6819      	ldr	r1, [r3, #0]
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	685a      	ldr	r2, [r3, #4]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	f000 f9e6 	bl	800bd34 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	699a      	ldr	r2, [r3, #24]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	210c      	movs	r1, #12
 800b974:	438a      	bics	r2, r1
 800b976:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	6999      	ldr	r1, [r3, #24]
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	689a      	ldr	r2, [r3, #8]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	430a      	orrs	r2, r1
 800b988:	619a      	str	r2, [r3, #24]
 800b98a:	e062      	b.n	800ba52 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b04      	cmp	r3, #4
 800b990:	d11c      	bne.n	800b9cc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6818      	ldr	r0, [r3, #0]
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	6819      	ldr	r1, [r3, #0]
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	685a      	ldr	r2, [r3, #4]
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	f000 fa4d 	bl	800be40 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	699a      	ldr	r2, [r3, #24]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	492d      	ldr	r1, [pc, #180]	; (800ba68 <HAL_TIM_IC_ConfigChannel+0x144>)
 800b9b2:	400a      	ands	r2, r1
 800b9b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	6999      	ldr	r1, [r3, #24]
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	021a      	lsls	r2, r3, #8
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	430a      	orrs	r2, r1
 800b9c8:	619a      	str	r2, [r3, #24]
 800b9ca:	e042      	b.n	800ba52 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2b08      	cmp	r3, #8
 800b9d0:	d11b      	bne.n	800ba0a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6818      	ldr	r0, [r3, #0]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	6819      	ldr	r1, [r3, #0]
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	f000 faa1 	bl	800bf28 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	69da      	ldr	r2, [r3, #28]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	210c      	movs	r1, #12
 800b9f2:	438a      	bics	r2, r1
 800b9f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	69d9      	ldr	r1, [r3, #28]
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	689a      	ldr	r2, [r3, #8]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	430a      	orrs	r2, r1
 800ba06:	61da      	str	r2, [r3, #28]
 800ba08:	e023      	b.n	800ba52 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b0c      	cmp	r3, #12
 800ba0e:	d11c      	bne.n	800ba4a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6818      	ldr	r0, [r3, #0]
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	6819      	ldr	r1, [r3, #0]
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	685a      	ldr	r2, [r3, #4]
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	f000 fac2 	bl	800bfa8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	69da      	ldr	r2, [r3, #28]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	490e      	ldr	r1, [pc, #56]	; (800ba68 <HAL_TIM_IC_ConfigChannel+0x144>)
 800ba30:	400a      	ands	r2, r1
 800ba32:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	69d9      	ldr	r1, [r3, #28]
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	021a      	lsls	r2, r3, #8
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	430a      	orrs	r2, r1
 800ba46:	61da      	str	r2, [r3, #28]
 800ba48:	e003      	b.n	800ba52 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800ba4a:	2317      	movs	r3, #23
 800ba4c:	18fb      	adds	r3, r7, r3
 800ba4e:	2201      	movs	r2, #1
 800ba50:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	223c      	movs	r2, #60	; 0x3c
 800ba56:	2100      	movs	r1, #0
 800ba58:	5499      	strb	r1, [r3, r2]

  return status;
 800ba5a:	2317      	movs	r3, #23
 800ba5c:	18fb      	adds	r3, r7, r3
 800ba5e:	781b      	ldrb	r3, [r3, #0]
}
 800ba60:	0018      	movs	r0, r3
 800ba62:	46bd      	mov	sp, r7
 800ba64:	b006      	add	sp, #24
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	fffff3ff 	.word	0xfffff3ff

0800ba6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba76:	230f      	movs	r3, #15
 800ba78:	18fb      	adds	r3, r7, r3
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	223c      	movs	r2, #60	; 0x3c
 800ba82:	5c9b      	ldrb	r3, [r3, r2]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d101      	bne.n	800ba8c <HAL_TIM_ConfigClockSource+0x20>
 800ba88:	2302      	movs	r3, #2
 800ba8a:	e0bc      	b.n	800bc06 <HAL_TIM_ConfigClockSource+0x19a>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	223c      	movs	r2, #60	; 0x3c
 800ba90:	2101      	movs	r1, #1
 800ba92:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	223d      	movs	r2, #61	; 0x3d
 800ba98:	2102      	movs	r1, #2
 800ba9a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	4a5a      	ldr	r2, [pc, #360]	; (800bc10 <HAL_TIM_ConfigClockSource+0x1a4>)
 800baa8:	4013      	ands	r3, r2
 800baaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	4a59      	ldr	r2, [pc, #356]	; (800bc14 <HAL_TIM_ConfigClockSource+0x1a8>)
 800bab0:	4013      	ands	r3, r2
 800bab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68ba      	ldr	r2, [r7, #8]
 800baba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2280      	movs	r2, #128	; 0x80
 800bac2:	0192      	lsls	r2, r2, #6
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d040      	beq.n	800bb4a <HAL_TIM_ConfigClockSource+0xde>
 800bac8:	2280      	movs	r2, #128	; 0x80
 800baca:	0192      	lsls	r2, r2, #6
 800bacc:	4293      	cmp	r3, r2
 800bace:	d900      	bls.n	800bad2 <HAL_TIM_ConfigClockSource+0x66>
 800bad0:	e088      	b.n	800bbe4 <HAL_TIM_ConfigClockSource+0x178>
 800bad2:	2280      	movs	r2, #128	; 0x80
 800bad4:	0152      	lsls	r2, r2, #5
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d100      	bne.n	800badc <HAL_TIM_ConfigClockSource+0x70>
 800bada:	e088      	b.n	800bbee <HAL_TIM_ConfigClockSource+0x182>
 800badc:	2280      	movs	r2, #128	; 0x80
 800bade:	0152      	lsls	r2, r2, #5
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d900      	bls.n	800bae6 <HAL_TIM_ConfigClockSource+0x7a>
 800bae4:	e07e      	b.n	800bbe4 <HAL_TIM_ConfigClockSource+0x178>
 800bae6:	2b70      	cmp	r3, #112	; 0x70
 800bae8:	d018      	beq.n	800bb1c <HAL_TIM_ConfigClockSource+0xb0>
 800baea:	d900      	bls.n	800baee <HAL_TIM_ConfigClockSource+0x82>
 800baec:	e07a      	b.n	800bbe4 <HAL_TIM_ConfigClockSource+0x178>
 800baee:	2b60      	cmp	r3, #96	; 0x60
 800baf0:	d04f      	beq.n	800bb92 <HAL_TIM_ConfigClockSource+0x126>
 800baf2:	d900      	bls.n	800baf6 <HAL_TIM_ConfigClockSource+0x8a>
 800baf4:	e076      	b.n	800bbe4 <HAL_TIM_ConfigClockSource+0x178>
 800baf6:	2b50      	cmp	r3, #80	; 0x50
 800baf8:	d03b      	beq.n	800bb72 <HAL_TIM_ConfigClockSource+0x106>
 800bafa:	d900      	bls.n	800bafe <HAL_TIM_ConfigClockSource+0x92>
 800bafc:	e072      	b.n	800bbe4 <HAL_TIM_ConfigClockSource+0x178>
 800bafe:	2b40      	cmp	r3, #64	; 0x40
 800bb00:	d057      	beq.n	800bbb2 <HAL_TIM_ConfigClockSource+0x146>
 800bb02:	d900      	bls.n	800bb06 <HAL_TIM_ConfigClockSource+0x9a>
 800bb04:	e06e      	b.n	800bbe4 <HAL_TIM_ConfigClockSource+0x178>
 800bb06:	2b30      	cmp	r3, #48	; 0x30
 800bb08:	d063      	beq.n	800bbd2 <HAL_TIM_ConfigClockSource+0x166>
 800bb0a:	d86b      	bhi.n	800bbe4 <HAL_TIM_ConfigClockSource+0x178>
 800bb0c:	2b20      	cmp	r3, #32
 800bb0e:	d060      	beq.n	800bbd2 <HAL_TIM_ConfigClockSource+0x166>
 800bb10:	d868      	bhi.n	800bbe4 <HAL_TIM_ConfigClockSource+0x178>
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d05d      	beq.n	800bbd2 <HAL_TIM_ConfigClockSource+0x166>
 800bb16:	2b10      	cmp	r3, #16
 800bb18:	d05b      	beq.n	800bbd2 <HAL_TIM_ConfigClockSource+0x166>
 800bb1a:	e063      	b.n	800bbe4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6818      	ldr	r0, [r3, #0]
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	6899      	ldr	r1, [r3, #8]
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	685a      	ldr	r2, [r3, #4]
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	f000 fa9e 	bl	800c06c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	2277      	movs	r2, #119	; 0x77
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	68ba      	ldr	r2, [r7, #8]
 800bb46:	609a      	str	r2, [r3, #8]
      break;
 800bb48:	e052      	b.n	800bbf0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6818      	ldr	r0, [r3, #0]
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	6899      	ldr	r1, [r3, #8]
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	685a      	ldr	r2, [r3, #4]
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	f000 fa87 	bl	800c06c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	689a      	ldr	r2, [r3, #8]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2180      	movs	r1, #128	; 0x80
 800bb6a:	01c9      	lsls	r1, r1, #7
 800bb6c:	430a      	orrs	r2, r1
 800bb6e:	609a      	str	r2, [r3, #8]
      break;
 800bb70:	e03e      	b.n	800bbf0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6818      	ldr	r0, [r3, #0]
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	6859      	ldr	r1, [r3, #4]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	001a      	movs	r2, r3
 800bb80:	f000 f930 	bl	800bde4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2150      	movs	r1, #80	; 0x50
 800bb8a:	0018      	movs	r0, r3
 800bb8c:	f000 fa52 	bl	800c034 <TIM_ITRx_SetConfig>
      break;
 800bb90:	e02e      	b.n	800bbf0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6818      	ldr	r0, [r3, #0]
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	6859      	ldr	r1, [r3, #4]
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	001a      	movs	r2, r3
 800bba0:	f000 f990 	bl	800bec4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2160      	movs	r1, #96	; 0x60
 800bbaa:	0018      	movs	r0, r3
 800bbac:	f000 fa42 	bl	800c034 <TIM_ITRx_SetConfig>
      break;
 800bbb0:	e01e      	b.n	800bbf0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6818      	ldr	r0, [r3, #0]
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	6859      	ldr	r1, [r3, #4]
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	001a      	movs	r2, r3
 800bbc0:	f000 f910 	bl	800bde4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2140      	movs	r1, #64	; 0x40
 800bbca:	0018      	movs	r0, r3
 800bbcc:	f000 fa32 	bl	800c034 <TIM_ITRx_SetConfig>
      break;
 800bbd0:	e00e      	b.n	800bbf0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	0019      	movs	r1, r3
 800bbdc:	0010      	movs	r0, r2
 800bbde:	f000 fa29 	bl	800c034 <TIM_ITRx_SetConfig>
      break;
 800bbe2:	e005      	b.n	800bbf0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800bbe4:	230f      	movs	r3, #15
 800bbe6:	18fb      	adds	r3, r7, r3
 800bbe8:	2201      	movs	r2, #1
 800bbea:	701a      	strb	r2, [r3, #0]
      break;
 800bbec:	e000      	b.n	800bbf0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800bbee:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	223d      	movs	r2, #61	; 0x3d
 800bbf4:	2101      	movs	r1, #1
 800bbf6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	223c      	movs	r2, #60	; 0x3c
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	5499      	strb	r1, [r3, r2]

  return status;
 800bc00:	230f      	movs	r3, #15
 800bc02:	18fb      	adds	r3, r7, r3
 800bc04:	781b      	ldrb	r3, [r3, #0]
}
 800bc06:	0018      	movs	r0, r3
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	b004      	add	sp, #16
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	46c0      	nop			; (mov r8, r8)
 800bc10:	ffceff88 	.word	0xffceff88
 800bc14:	ffff00ff 	.word	0xffff00ff

0800bc18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc20:	46c0      	nop			; (mov r8, r8)
 800bc22:	46bd      	mov	sp, r7
 800bc24:	b002      	add	sp, #8
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc30:	46c0      	nop			; (mov r8, r8)
 800bc32:	46bd      	mov	sp, r7
 800bc34:	b002      	add	sp, #8
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc40:	46c0      	nop			; (mov r8, r8)
 800bc42:	46bd      	mov	sp, r7
 800bc44:	b002      	add	sp, #8
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a2f      	ldr	r2, [pc, #188]	; (800bd18 <TIM_Base_SetConfig+0xd0>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d003      	beq.n	800bc68 <TIM_Base_SetConfig+0x20>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	4a2e      	ldr	r2, [pc, #184]	; (800bd1c <TIM_Base_SetConfig+0xd4>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d108      	bne.n	800bc7a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2270      	movs	r2, #112	; 0x70
 800bc6c:	4393      	bics	r3, r2
 800bc6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	4313      	orrs	r3, r2
 800bc78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a26      	ldr	r2, [pc, #152]	; (800bd18 <TIM_Base_SetConfig+0xd0>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d013      	beq.n	800bcaa <TIM_Base_SetConfig+0x62>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a25      	ldr	r2, [pc, #148]	; (800bd1c <TIM_Base_SetConfig+0xd4>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d00f      	beq.n	800bcaa <TIM_Base_SetConfig+0x62>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a24      	ldr	r2, [pc, #144]	; (800bd20 <TIM_Base_SetConfig+0xd8>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d00b      	beq.n	800bcaa <TIM_Base_SetConfig+0x62>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4a23      	ldr	r2, [pc, #140]	; (800bd24 <TIM_Base_SetConfig+0xdc>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d007      	beq.n	800bcaa <TIM_Base_SetConfig+0x62>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4a22      	ldr	r2, [pc, #136]	; (800bd28 <TIM_Base_SetConfig+0xe0>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d003      	beq.n	800bcaa <TIM_Base_SetConfig+0x62>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4a21      	ldr	r2, [pc, #132]	; (800bd2c <TIM_Base_SetConfig+0xe4>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d108      	bne.n	800bcbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	4a20      	ldr	r2, [pc, #128]	; (800bd30 <TIM_Base_SetConfig+0xe8>)
 800bcae:	4013      	ands	r3, r2
 800bcb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	68fa      	ldr	r2, [r7, #12]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2280      	movs	r2, #128	; 0x80
 800bcc0:	4393      	bics	r3, r2
 800bcc2:	001a      	movs	r2, r3
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	695b      	ldr	r3, [r3, #20]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	689a      	ldr	r2, [r3, #8]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4a0c      	ldr	r2, [pc, #48]	; (800bd18 <TIM_Base_SetConfig+0xd0>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d00b      	beq.n	800bd02 <TIM_Base_SetConfig+0xba>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4a0d      	ldr	r2, [pc, #52]	; (800bd24 <TIM_Base_SetConfig+0xdc>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d007      	beq.n	800bd02 <TIM_Base_SetConfig+0xba>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a0c      	ldr	r2, [pc, #48]	; (800bd28 <TIM_Base_SetConfig+0xe0>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d003      	beq.n	800bd02 <TIM_Base_SetConfig+0xba>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4a0b      	ldr	r2, [pc, #44]	; (800bd2c <TIM_Base_SetConfig+0xe4>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d103      	bne.n	800bd0a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	691a      	ldr	r2, [r3, #16]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	615a      	str	r2, [r3, #20]
}
 800bd10:	46c0      	nop			; (mov r8, r8)
 800bd12:	46bd      	mov	sp, r7
 800bd14:	b004      	add	sp, #16
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	40012c00 	.word	0x40012c00
 800bd1c:	40000400 	.word	0x40000400
 800bd20:	40002000 	.word	0x40002000
 800bd24:	40014000 	.word	0x40014000
 800bd28:	40014400 	.word	0x40014400
 800bd2c:	40014800 	.word	0x40014800
 800bd30:	fffffcff 	.word	0xfffffcff

0800bd34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
 800bd40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6a1b      	ldr	r3, [r3, #32]
 800bd46:	2201      	movs	r2, #1
 800bd48:	4393      	bics	r3, r2
 800bd4a:	001a      	movs	r2, r3
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	699b      	ldr	r3, [r3, #24]
 800bd54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6a1b      	ldr	r3, [r3, #32]
 800bd5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4a1e      	ldr	r2, [pc, #120]	; (800bdd8 <TIM_TI1_SetConfig+0xa4>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d007      	beq.n	800bd74 <TIM_TI1_SetConfig+0x40>
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	4a1d      	ldr	r2, [pc, #116]	; (800bddc <TIM_TI1_SetConfig+0xa8>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d003      	beq.n	800bd74 <TIM_TI1_SetConfig+0x40>
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	4a1c      	ldr	r2, [pc, #112]	; (800bde0 <TIM_TI1_SetConfig+0xac>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d101      	bne.n	800bd78 <TIM_TI1_SetConfig+0x44>
 800bd74:	2301      	movs	r3, #1
 800bd76:	e000      	b.n	800bd7a <TIM_TI1_SetConfig+0x46>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d008      	beq.n	800bd90 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	2203      	movs	r2, #3
 800bd82:	4393      	bics	r3, r2
 800bd84:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800bd86:	697a      	ldr	r2, [r7, #20]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	617b      	str	r3, [r7, #20]
 800bd8e:	e003      	b.n	800bd98 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	2201      	movs	r2, #1
 800bd94:	4313      	orrs	r3, r2
 800bd96:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	22f0      	movs	r2, #240	; 0xf0
 800bd9c:	4393      	bics	r3, r2
 800bd9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	011b      	lsls	r3, r3, #4
 800bda4:	22ff      	movs	r2, #255	; 0xff
 800bda6:	4013      	ands	r3, r2
 800bda8:	697a      	ldr	r2, [r7, #20]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	220a      	movs	r2, #10
 800bdb2:	4393      	bics	r3, r2
 800bdb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	220a      	movs	r2, #10
 800bdba:	4013      	ands	r3, r2
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	697a      	ldr	r2, [r7, #20]
 800bdc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	621a      	str	r2, [r3, #32]
}
 800bdce:	46c0      	nop			; (mov r8, r8)
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	b006      	add	sp, #24
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	46c0      	nop			; (mov r8, r8)
 800bdd8:	40012c00 	.word	0x40012c00
 800bddc:	40000400 	.word	0x40000400
 800bde0:	40014000 	.word	0x40014000

0800bde4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b086      	sub	sp, #24
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6a1b      	ldr	r3, [r3, #32]
 800bdf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	4393      	bics	r3, r2
 800bdfe:	001a      	movs	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	699b      	ldr	r3, [r3, #24]
 800be08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	22f0      	movs	r2, #240	; 0xf0
 800be0e:	4393      	bics	r3, r2
 800be10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	011b      	lsls	r3, r3, #4
 800be16:	693a      	ldr	r2, [r7, #16]
 800be18:	4313      	orrs	r3, r2
 800be1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	220a      	movs	r2, #10
 800be20:	4393      	bics	r3, r2
 800be22:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be24:	697a      	ldr	r2, [r7, #20]
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	4313      	orrs	r3, r2
 800be2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	697a      	ldr	r2, [r7, #20]
 800be36:	621a      	str	r2, [r3, #32]
}
 800be38:	46c0      	nop			; (mov r8, r8)
 800be3a:	46bd      	mov	sp, r7
 800be3c:	b006      	add	sp, #24
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b086      	sub	sp, #24
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
 800be4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6a1b      	ldr	r3, [r3, #32]
 800be52:	2210      	movs	r2, #16
 800be54:	4393      	bics	r3, r2
 800be56:	001a      	movs	r2, r3
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	699b      	ldr	r3, [r3, #24]
 800be60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	4a14      	ldr	r2, [pc, #80]	; (800bebc <TIM_TI2_SetConfig+0x7c>)
 800be6c:	4013      	ands	r3, r2
 800be6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	021b      	lsls	r3, r3, #8
 800be74:	697a      	ldr	r2, [r7, #20]
 800be76:	4313      	orrs	r3, r2
 800be78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	4a10      	ldr	r2, [pc, #64]	; (800bec0 <TIM_TI2_SetConfig+0x80>)
 800be7e:	4013      	ands	r3, r2
 800be80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	031b      	lsls	r3, r3, #12
 800be86:	041b      	lsls	r3, r3, #16
 800be88:	0c1b      	lsrs	r3, r3, #16
 800be8a:	697a      	ldr	r2, [r7, #20]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	22a0      	movs	r2, #160	; 0xa0
 800be94:	4393      	bics	r3, r2
 800be96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	011b      	lsls	r3, r3, #4
 800be9c:	22a0      	movs	r2, #160	; 0xa0
 800be9e:	4013      	ands	r3, r2
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	693a      	ldr	r2, [r7, #16]
 800beb0:	621a      	str	r2, [r3, #32]
}
 800beb2:	46c0      	nop			; (mov r8, r8)
 800beb4:	46bd      	mov	sp, r7
 800beb6:	b006      	add	sp, #24
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	46c0      	nop			; (mov r8, r8)
 800bebc:	fffffcff 	.word	0xfffffcff
 800bec0:	ffff0fff 	.word	0xffff0fff

0800bec4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b086      	sub	sp, #24
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6a1b      	ldr	r3, [r3, #32]
 800bed4:	2210      	movs	r2, #16
 800bed6:	4393      	bics	r3, r2
 800bed8:	001a      	movs	r2, r3
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	699b      	ldr	r3, [r3, #24]
 800bee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	6a1b      	ldr	r3, [r3, #32]
 800bee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	4a0d      	ldr	r2, [pc, #52]	; (800bf24 <TIM_TI2_ConfigInputStage+0x60>)
 800beee:	4013      	ands	r3, r2
 800bef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	031b      	lsls	r3, r3, #12
 800bef6:	697a      	ldr	r2, [r7, #20]
 800bef8:	4313      	orrs	r3, r2
 800befa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	22a0      	movs	r2, #160	; 0xa0
 800bf00:	4393      	bics	r3, r2
 800bf02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	011b      	lsls	r3, r3, #4
 800bf08:	693a      	ldr	r2, [r7, #16]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	697a      	ldr	r2, [r7, #20]
 800bf12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	693a      	ldr	r2, [r7, #16]
 800bf18:	621a      	str	r2, [r3, #32]
}
 800bf1a:	46c0      	nop			; (mov r8, r8)
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	b006      	add	sp, #24
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	46c0      	nop			; (mov r8, r8)
 800bf24:	ffff0fff 	.word	0xffff0fff

0800bf28 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b086      	sub	sp, #24
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	607a      	str	r2, [r7, #4]
 800bf34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6a1b      	ldr	r3, [r3, #32]
 800bf3a:	4a19      	ldr	r2, [pc, #100]	; (800bfa0 <TIM_TI3_SetConfig+0x78>)
 800bf3c:	401a      	ands	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	69db      	ldr	r3, [r3, #28]
 800bf46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6a1b      	ldr	r3, [r3, #32]
 800bf4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	2203      	movs	r2, #3
 800bf52:	4393      	bics	r3, r2
 800bf54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800bf56:	697a      	ldr	r2, [r7, #20]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	22f0      	movs	r2, #240	; 0xf0
 800bf62:	4393      	bics	r3, r2
 800bf64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	011b      	lsls	r3, r3, #4
 800bf6a:	22ff      	movs	r2, #255	; 0xff
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	697a      	ldr	r2, [r7, #20]
 800bf70:	4313      	orrs	r3, r2
 800bf72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	4a0b      	ldr	r2, [pc, #44]	; (800bfa4 <TIM_TI3_SetConfig+0x7c>)
 800bf78:	4013      	ands	r3, r2
 800bf7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	021a      	lsls	r2, r3, #8
 800bf80:	23a0      	movs	r3, #160	; 0xa0
 800bf82:	011b      	lsls	r3, r3, #4
 800bf84:	4013      	ands	r3, r2
 800bf86:	693a      	ldr	r2, [r7, #16]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	697a      	ldr	r2, [r7, #20]
 800bf90:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	693a      	ldr	r2, [r7, #16]
 800bf96:	621a      	str	r2, [r3, #32]
}
 800bf98:	46c0      	nop			; (mov r8, r8)
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	b006      	add	sp, #24
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	fffffeff 	.word	0xfffffeff
 800bfa4:	fffff5ff 	.word	0xfffff5ff

0800bfa8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b086      	sub	sp, #24
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
 800bfb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6a1b      	ldr	r3, [r3, #32]
 800bfba:	4a1a      	ldr	r2, [pc, #104]	; (800c024 <TIM_TI4_SetConfig+0x7c>)
 800bfbc:	401a      	ands	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	69db      	ldr	r3, [r3, #28]
 800bfc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
 800bfcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	4a15      	ldr	r2, [pc, #84]	; (800c028 <TIM_TI4_SetConfig+0x80>)
 800bfd2:	4013      	ands	r3, r2
 800bfd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	021b      	lsls	r3, r3, #8
 800bfda:	697a      	ldr	r2, [r7, #20]
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	4a12      	ldr	r2, [pc, #72]	; (800c02c <TIM_TI4_SetConfig+0x84>)
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	031b      	lsls	r3, r3, #12
 800bfec:	041b      	lsls	r3, r3, #16
 800bfee:	0c1b      	lsrs	r3, r3, #16
 800bff0:	697a      	ldr	r2, [r7, #20]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	4a0d      	ldr	r2, [pc, #52]	; (800c030 <TIM_TI4_SetConfig+0x88>)
 800bffa:	4013      	ands	r3, r2
 800bffc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	031a      	lsls	r2, r3, #12
 800c002:	23a0      	movs	r3, #160	; 0xa0
 800c004:	021b      	lsls	r3, r3, #8
 800c006:	4013      	ands	r3, r2
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	4313      	orrs	r3, r2
 800c00c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	697a      	ldr	r2, [r7, #20]
 800c012:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	693a      	ldr	r2, [r7, #16]
 800c018:	621a      	str	r2, [r3, #32]
}
 800c01a:	46c0      	nop			; (mov r8, r8)
 800c01c:	46bd      	mov	sp, r7
 800c01e:	b006      	add	sp, #24
 800c020:	bd80      	pop	{r7, pc}
 800c022:	46c0      	nop			; (mov r8, r8)
 800c024:	ffffefff 	.word	0xffffefff
 800c028:	fffffcff 	.word	0xfffffcff
 800c02c:	ffff0fff 	.word	0xffff0fff
 800c030:	ffff5fff 	.word	0xffff5fff

0800c034 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	4a08      	ldr	r2, [pc, #32]	; (800c068 <TIM_ITRx_SetConfig+0x34>)
 800c048:	4013      	ands	r3, r2
 800c04a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c04c:	683a      	ldr	r2, [r7, #0]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	4313      	orrs	r3, r2
 800c052:	2207      	movs	r2, #7
 800c054:	4313      	orrs	r3, r2
 800c056:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	68fa      	ldr	r2, [r7, #12]
 800c05c:	609a      	str	r2, [r3, #8]
}
 800c05e:	46c0      	nop			; (mov r8, r8)
 800c060:	46bd      	mov	sp, r7
 800c062:	b004      	add	sp, #16
 800c064:	bd80      	pop	{r7, pc}
 800c066:	46c0      	nop			; (mov r8, r8)
 800c068:	ffcfff8f 	.word	0xffcfff8f

0800c06c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	607a      	str	r2, [r7, #4]
 800c078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	4a09      	ldr	r2, [pc, #36]	; (800c0a8 <TIM_ETR_SetConfig+0x3c>)
 800c084:	4013      	ands	r3, r2
 800c086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	021a      	lsls	r2, r3, #8
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	431a      	orrs	r2, r3
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	4313      	orrs	r3, r2
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	4313      	orrs	r3, r2
 800c098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	697a      	ldr	r2, [r7, #20]
 800c09e:	609a      	str	r2, [r3, #8]
}
 800c0a0:	46c0      	nop			; (mov r8, r8)
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	b006      	add	sp, #24
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	ffff00ff 	.word	0xffff00ff

0800c0ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b086      	sub	sp, #24
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	221f      	movs	r2, #31
 800c0bc:	4013      	ands	r3, r2
 800c0be:	2201      	movs	r2, #1
 800c0c0:	409a      	lsls	r2, r3
 800c0c2:	0013      	movs	r3, r2
 800c0c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6a1b      	ldr	r3, [r3, #32]
 800c0ca:	697a      	ldr	r2, [r7, #20]
 800c0cc:	43d2      	mvns	r2, r2
 800c0ce:	401a      	ands	r2, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6a1a      	ldr	r2, [r3, #32]
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	211f      	movs	r1, #31
 800c0dc:	400b      	ands	r3, r1
 800c0de:	6879      	ldr	r1, [r7, #4]
 800c0e0:	4099      	lsls	r1, r3
 800c0e2:	000b      	movs	r3, r1
 800c0e4:	431a      	orrs	r2, r3
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	621a      	str	r2, [r3, #32]
}
 800c0ea:	46c0      	nop			; (mov r8, r8)
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	b006      	add	sp, #24
 800c0f0:	bd80      	pop	{r7, pc}
	...

0800c0f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	223c      	movs	r2, #60	; 0x3c
 800c102:	5c9b      	ldrb	r3, [r3, r2]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d101      	bne.n	800c10c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c108:	2302      	movs	r3, #2
 800c10a:	e04f      	b.n	800c1ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	223c      	movs	r2, #60	; 0x3c
 800c110:	2101      	movs	r1, #1
 800c112:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	223d      	movs	r2, #61	; 0x3d
 800c118:	2102      	movs	r1, #2
 800c11a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a20      	ldr	r2, [pc, #128]	; (800c1b4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d108      	bne.n	800c148 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	4a1f      	ldr	r2, [pc, #124]	; (800c1b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c13a:	4013      	ands	r3, r2
 800c13c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	4313      	orrs	r3, r2
 800c146:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2270      	movs	r2, #112	; 0x70
 800c14c:	4393      	bics	r3, r2
 800c14e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	4313      	orrs	r3, r2
 800c158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a13      	ldr	r2, [pc, #76]	; (800c1b4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d009      	beq.n	800c180 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a12      	ldr	r2, [pc, #72]	; (800c1bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d004      	beq.n	800c180 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a11      	ldr	r2, [pc, #68]	; (800c1c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d10c      	bne.n	800c19a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	2280      	movs	r2, #128	; 0x80
 800c184:	4393      	bics	r3, r2
 800c186:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	4313      	orrs	r3, r2
 800c190:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68ba      	ldr	r2, [r7, #8]
 800c198:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	223d      	movs	r2, #61	; 0x3d
 800c19e:	2101      	movs	r1, #1
 800c1a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	223c      	movs	r2, #60	; 0x3c
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c1aa:	2300      	movs	r3, #0
}
 800c1ac:	0018      	movs	r0, r3
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	b004      	add	sp, #16
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	40012c00 	.word	0x40012c00
 800c1b8:	ff0fffff 	.word	0xff0fffff
 800c1bc:	40000400 	.word	0x40000400
 800c1c0:	40014000 	.word	0x40014000

0800c1c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1cc:	46c0      	nop			; (mov r8, r8)
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	b002      	add	sp, #8
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1dc:	46c0      	nop			; (mov r8, r8)
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	b002      	add	sp, #8
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c1ec:	46c0      	nop			; (mov r8, r8)
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	b002      	add	sp, #8
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d101      	bne.n	800c206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c202:	2301      	movs	r3, #1
 800c204:	e046      	b.n	800c294 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2288      	movs	r2, #136	; 0x88
 800c20a:	589b      	ldr	r3, [r3, r2]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d107      	bne.n	800c220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2284      	movs	r2, #132	; 0x84
 800c214:	2100      	movs	r1, #0
 800c216:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	0018      	movs	r0, r3
 800c21c:	f7fb fdd4 	bl	8007dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2288      	movs	r2, #136	; 0x88
 800c224:	2124      	movs	r1, #36	; 0x24
 800c226:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2101      	movs	r1, #1
 800c234:	438a      	bics	r2, r1
 800c236:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	0018      	movs	r0, r3
 800c23c:	f000 fc5e 	bl	800cafc <UART_SetConfig>
 800c240:	0003      	movs	r3, r0
 800c242:	2b01      	cmp	r3, #1
 800c244:	d101      	bne.n	800c24a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800c246:	2301      	movs	r3, #1
 800c248:	e024      	b.n	800c294 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d003      	beq.n	800c25a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	0018      	movs	r0, r3
 800c256:	f000 fdf5 	bl	800ce44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	685a      	ldr	r2, [r3, #4]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	490d      	ldr	r1, [pc, #52]	; (800c29c <HAL_UART_Init+0xa8>)
 800c266:	400a      	ands	r2, r1
 800c268:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	689a      	ldr	r2, [r3, #8]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	212a      	movs	r1, #42	; 0x2a
 800c276:	438a      	bics	r2, r1
 800c278:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2101      	movs	r1, #1
 800c286:	430a      	orrs	r2, r1
 800c288:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	0018      	movs	r0, r3
 800c28e:	f000 fe8d 	bl	800cfac <UART_CheckIdleState>
 800c292:	0003      	movs	r3, r0
}
 800c294:	0018      	movs	r0, r3
 800c296:	46bd      	mov	sp, r7
 800c298:	b002      	add	sp, #8
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	ffffb7ff 	.word	0xffffb7ff

0800c2a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b08a      	sub	sp, #40	; 0x28
 800c2a4:	af02      	add	r7, sp, #8
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	603b      	str	r3, [r7, #0]
 800c2ac:	1dbb      	adds	r3, r7, #6
 800c2ae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2288      	movs	r2, #136	; 0x88
 800c2b4:	589b      	ldr	r3, [r3, r2]
 800c2b6:	2b20      	cmp	r3, #32
 800c2b8:	d000      	beq.n	800c2bc <HAL_UART_Transmit+0x1c>
 800c2ba:	e088      	b.n	800c3ce <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d003      	beq.n	800c2ca <HAL_UART_Transmit+0x2a>
 800c2c2:	1dbb      	adds	r3, r7, #6
 800c2c4:	881b      	ldrh	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d101      	bne.n	800c2ce <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e080      	b.n	800c3d0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	689a      	ldr	r2, [r3, #8]
 800c2d2:	2380      	movs	r3, #128	; 0x80
 800c2d4:	015b      	lsls	r3, r3, #5
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d109      	bne.n	800c2ee <HAL_UART_Transmit+0x4e>
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	691b      	ldr	r3, [r3, #16]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d105      	bne.n	800c2ee <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	4013      	ands	r3, r2
 800c2e8:	d001      	beq.n	800c2ee <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e070      	b.n	800c3d0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2290      	movs	r2, #144	; 0x90
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2288      	movs	r2, #136	; 0x88
 800c2fa:	2121      	movs	r1, #33	; 0x21
 800c2fc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c2fe:	f7fc fd87 	bl	8008e10 <HAL_GetTick>
 800c302:	0003      	movs	r3, r0
 800c304:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	1dba      	adds	r2, r7, #6
 800c30a:	2154      	movs	r1, #84	; 0x54
 800c30c:	8812      	ldrh	r2, [r2, #0]
 800c30e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	1dba      	adds	r2, r7, #6
 800c314:	2156      	movs	r1, #86	; 0x56
 800c316:	8812      	ldrh	r2, [r2, #0]
 800c318:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	689a      	ldr	r2, [r3, #8]
 800c31e:	2380      	movs	r3, #128	; 0x80
 800c320:	015b      	lsls	r3, r3, #5
 800c322:	429a      	cmp	r2, r3
 800c324:	d108      	bne.n	800c338 <HAL_UART_Transmit+0x98>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d104      	bne.n	800c338 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800c32e:	2300      	movs	r3, #0
 800c330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	61bb      	str	r3, [r7, #24]
 800c336:	e003      	b.n	800c340 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c33c:	2300      	movs	r3, #0
 800c33e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c340:	e02c      	b.n	800c39c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c342:	697a      	ldr	r2, [r7, #20]
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	9300      	str	r3, [sp, #0]
 800c34a:	0013      	movs	r3, r2
 800c34c:	2200      	movs	r2, #0
 800c34e:	2180      	movs	r1, #128	; 0x80
 800c350:	f000 fe7a 	bl	800d048 <UART_WaitOnFlagUntilTimeout>
 800c354:	1e03      	subs	r3, r0, #0
 800c356:	d001      	beq.n	800c35c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800c358:	2303      	movs	r3, #3
 800c35a:	e039      	b.n	800c3d0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d10b      	bne.n	800c37a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	881b      	ldrh	r3, [r3, #0]
 800c366:	001a      	movs	r2, r3
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	05d2      	lsls	r2, r2, #23
 800c36e:	0dd2      	lsrs	r2, r2, #23
 800c370:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	3302      	adds	r3, #2
 800c376:	61bb      	str	r3, [r7, #24]
 800c378:	e007      	b.n	800c38a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	781a      	ldrb	r2, [r3, #0]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	3301      	adds	r3, #1
 800c388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2256      	movs	r2, #86	; 0x56
 800c38e:	5a9b      	ldrh	r3, [r3, r2]
 800c390:	b29b      	uxth	r3, r3
 800c392:	3b01      	subs	r3, #1
 800c394:	b299      	uxth	r1, r3
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2256      	movs	r2, #86	; 0x56
 800c39a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2256      	movs	r2, #86	; 0x56
 800c3a0:	5a9b      	ldrh	r3, [r3, r2]
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d1cc      	bne.n	800c342 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c3a8:	697a      	ldr	r2, [r7, #20]
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	9300      	str	r3, [sp, #0]
 800c3b0:	0013      	movs	r3, r2
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	2140      	movs	r1, #64	; 0x40
 800c3b6:	f000 fe47 	bl	800d048 <UART_WaitOnFlagUntilTimeout>
 800c3ba:	1e03      	subs	r3, r0, #0
 800c3bc:	d001      	beq.n	800c3c2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800c3be:	2303      	movs	r3, #3
 800c3c0:	e006      	b.n	800c3d0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2288      	movs	r2, #136	; 0x88
 800c3c6:	2120      	movs	r1, #32
 800c3c8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e000      	b.n	800c3d0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800c3ce:	2302      	movs	r3, #2
  }
}
 800c3d0:	0018      	movs	r0, r3
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	b008      	add	sp, #32
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b088      	sub	sp, #32
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	1dbb      	adds	r3, r7, #6
 800c3e4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	228c      	movs	r2, #140	; 0x8c
 800c3ea:	589b      	ldr	r3, [r3, r2]
 800c3ec:	2b20      	cmp	r3, #32
 800c3ee:	d145      	bne.n	800c47c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d003      	beq.n	800c3fe <HAL_UART_Receive_IT+0x26>
 800c3f6:	1dbb      	adds	r3, r7, #6
 800c3f8:	881b      	ldrh	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e03d      	b.n	800c47e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	689a      	ldr	r2, [r3, #8]
 800c406:	2380      	movs	r3, #128	; 0x80
 800c408:	015b      	lsls	r3, r3, #5
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d109      	bne.n	800c422 <HAL_UART_Receive_IT+0x4a>
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	691b      	ldr	r3, [r3, #16]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d105      	bne.n	800c422 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	2201      	movs	r2, #1
 800c41a:	4013      	ands	r3, r2
 800c41c:	d001      	beq.n	800c422 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	e02d      	b.n	800c47e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2200      	movs	r2, #0
 800c426:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	685a      	ldr	r2, [r3, #4]
 800c42e:	2380      	movs	r3, #128	; 0x80
 800c430:	041b      	lsls	r3, r3, #16
 800c432:	4013      	ands	r3, r2
 800c434:	d019      	beq.n	800c46a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c436:	f3ef 8310 	mrs	r3, PRIMASK
 800c43a:	613b      	str	r3, [r7, #16]
  return(result);
 800c43c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c43e:	61fb      	str	r3, [r7, #28]
 800c440:	2301      	movs	r3, #1
 800c442:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	f383 8810 	msr	PRIMASK, r3
}
 800c44a:	46c0      	nop			; (mov r8, r8)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2180      	movs	r1, #128	; 0x80
 800c458:	04c9      	lsls	r1, r1, #19
 800c45a:	430a      	orrs	r2, r1
 800c45c:	601a      	str	r2, [r3, #0]
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	f383 8810 	msr	PRIMASK, r3
}
 800c468:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c46a:	1dbb      	adds	r3, r7, #6
 800c46c:	881a      	ldrh	r2, [r3, #0]
 800c46e:	68b9      	ldr	r1, [r7, #8]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	0018      	movs	r0, r3
 800c474:	f000 feb0 	bl	800d1d8 <UART_Start_Receive_IT>
 800c478:	0003      	movs	r3, r0
 800c47a:	e000      	b.n	800c47e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800c47c:	2302      	movs	r3, #2
  }
}
 800c47e:	0018      	movs	r0, r3
 800c480:	46bd      	mov	sp, r7
 800c482:	b008      	add	sp, #32
 800c484:	bd80      	pop	{r7, pc}
	...

0800c488 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c488:	b5b0      	push	{r4, r5, r7, lr}
 800c48a:	b0aa      	sub	sp, #168	; 0xa8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	69db      	ldr	r3, [r3, #28]
 800c496:	22a4      	movs	r2, #164	; 0xa4
 800c498:	18b9      	adds	r1, r7, r2
 800c49a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	20a0      	movs	r0, #160	; 0xa0
 800c4a4:	1839      	adds	r1, r7, r0
 800c4a6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	249c      	movs	r4, #156	; 0x9c
 800c4b0:	1939      	adds	r1, r7, r4
 800c4b2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c4b4:	0011      	movs	r1, r2
 800c4b6:	18bb      	adds	r3, r7, r2
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4aa2      	ldr	r2, [pc, #648]	; (800c744 <HAL_UART_IRQHandler+0x2bc>)
 800c4bc:	4013      	ands	r3, r2
 800c4be:	2298      	movs	r2, #152	; 0x98
 800c4c0:	18bd      	adds	r5, r7, r2
 800c4c2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800c4c4:	18bb      	adds	r3, r7, r2
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d11a      	bne.n	800c502 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c4cc:	187b      	adds	r3, r7, r1
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2220      	movs	r2, #32
 800c4d2:	4013      	ands	r3, r2
 800c4d4:	d015      	beq.n	800c502 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c4d6:	183b      	adds	r3, r7, r0
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2220      	movs	r2, #32
 800c4dc:	4013      	ands	r3, r2
 800c4de:	d105      	bne.n	800c4ec <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c4e0:	193b      	adds	r3, r7, r4
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	2380      	movs	r3, #128	; 0x80
 800c4e6:	055b      	lsls	r3, r3, #21
 800c4e8:	4013      	ands	r3, r2
 800c4ea:	d00a      	beq.n	800c502 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d100      	bne.n	800c4f6 <HAL_UART_IRQHandler+0x6e>
 800c4f4:	e2dc      	b.n	800cab0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	0010      	movs	r0, r2
 800c4fe:	4798      	blx	r3
      }
      return;
 800c500:	e2d6      	b.n	800cab0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c502:	2398      	movs	r3, #152	; 0x98
 800c504:	18fb      	adds	r3, r7, r3
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d100      	bne.n	800c50e <HAL_UART_IRQHandler+0x86>
 800c50c:	e122      	b.n	800c754 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c50e:	239c      	movs	r3, #156	; 0x9c
 800c510:	18fb      	adds	r3, r7, r3
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a8c      	ldr	r2, [pc, #560]	; (800c748 <HAL_UART_IRQHandler+0x2c0>)
 800c516:	4013      	ands	r3, r2
 800c518:	d106      	bne.n	800c528 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c51a:	23a0      	movs	r3, #160	; 0xa0
 800c51c:	18fb      	adds	r3, r7, r3
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a8a      	ldr	r2, [pc, #552]	; (800c74c <HAL_UART_IRQHandler+0x2c4>)
 800c522:	4013      	ands	r3, r2
 800c524:	d100      	bne.n	800c528 <HAL_UART_IRQHandler+0xa0>
 800c526:	e115      	b.n	800c754 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c528:	23a4      	movs	r3, #164	; 0xa4
 800c52a:	18fb      	adds	r3, r7, r3
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2201      	movs	r2, #1
 800c530:	4013      	ands	r3, r2
 800c532:	d012      	beq.n	800c55a <HAL_UART_IRQHandler+0xd2>
 800c534:	23a0      	movs	r3, #160	; 0xa0
 800c536:	18fb      	adds	r3, r7, r3
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	2380      	movs	r3, #128	; 0x80
 800c53c:	005b      	lsls	r3, r3, #1
 800c53e:	4013      	ands	r3, r2
 800c540:	d00b      	beq.n	800c55a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2201      	movs	r2, #1
 800c548:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2290      	movs	r2, #144	; 0x90
 800c54e:	589b      	ldr	r3, [r3, r2]
 800c550:	2201      	movs	r2, #1
 800c552:	431a      	orrs	r2, r3
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2190      	movs	r1, #144	; 0x90
 800c558:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c55a:	23a4      	movs	r3, #164	; 0xa4
 800c55c:	18fb      	adds	r3, r7, r3
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2202      	movs	r2, #2
 800c562:	4013      	ands	r3, r2
 800c564:	d011      	beq.n	800c58a <HAL_UART_IRQHandler+0x102>
 800c566:	239c      	movs	r3, #156	; 0x9c
 800c568:	18fb      	adds	r3, r7, r3
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2201      	movs	r2, #1
 800c56e:	4013      	ands	r3, r2
 800c570:	d00b      	beq.n	800c58a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2202      	movs	r2, #2
 800c578:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2290      	movs	r2, #144	; 0x90
 800c57e:	589b      	ldr	r3, [r3, r2]
 800c580:	2204      	movs	r2, #4
 800c582:	431a      	orrs	r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2190      	movs	r1, #144	; 0x90
 800c588:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c58a:	23a4      	movs	r3, #164	; 0xa4
 800c58c:	18fb      	adds	r3, r7, r3
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2204      	movs	r2, #4
 800c592:	4013      	ands	r3, r2
 800c594:	d011      	beq.n	800c5ba <HAL_UART_IRQHandler+0x132>
 800c596:	239c      	movs	r3, #156	; 0x9c
 800c598:	18fb      	adds	r3, r7, r3
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2201      	movs	r2, #1
 800c59e:	4013      	ands	r3, r2
 800c5a0:	d00b      	beq.n	800c5ba <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2204      	movs	r2, #4
 800c5a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2290      	movs	r2, #144	; 0x90
 800c5ae:	589b      	ldr	r3, [r3, r2]
 800c5b0:	2202      	movs	r2, #2
 800c5b2:	431a      	orrs	r2, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2190      	movs	r1, #144	; 0x90
 800c5b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c5ba:	23a4      	movs	r3, #164	; 0xa4
 800c5bc:	18fb      	adds	r3, r7, r3
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2208      	movs	r2, #8
 800c5c2:	4013      	ands	r3, r2
 800c5c4:	d017      	beq.n	800c5f6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c5c6:	23a0      	movs	r3, #160	; 0xa0
 800c5c8:	18fb      	adds	r3, r7, r3
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2220      	movs	r2, #32
 800c5ce:	4013      	ands	r3, r2
 800c5d0:	d105      	bne.n	800c5de <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c5d2:	239c      	movs	r3, #156	; 0x9c
 800c5d4:	18fb      	adds	r3, r7, r3
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a5b      	ldr	r2, [pc, #364]	; (800c748 <HAL_UART_IRQHandler+0x2c0>)
 800c5da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c5dc:	d00b      	beq.n	800c5f6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2208      	movs	r2, #8
 800c5e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2290      	movs	r2, #144	; 0x90
 800c5ea:	589b      	ldr	r3, [r3, r2]
 800c5ec:	2208      	movs	r2, #8
 800c5ee:	431a      	orrs	r2, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2190      	movs	r1, #144	; 0x90
 800c5f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c5f6:	23a4      	movs	r3, #164	; 0xa4
 800c5f8:	18fb      	adds	r3, r7, r3
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	2380      	movs	r3, #128	; 0x80
 800c5fe:	011b      	lsls	r3, r3, #4
 800c600:	4013      	ands	r3, r2
 800c602:	d013      	beq.n	800c62c <HAL_UART_IRQHandler+0x1a4>
 800c604:	23a0      	movs	r3, #160	; 0xa0
 800c606:	18fb      	adds	r3, r7, r3
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	2380      	movs	r3, #128	; 0x80
 800c60c:	04db      	lsls	r3, r3, #19
 800c60e:	4013      	ands	r3, r2
 800c610:	d00c      	beq.n	800c62c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2280      	movs	r2, #128	; 0x80
 800c618:	0112      	lsls	r2, r2, #4
 800c61a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2290      	movs	r2, #144	; 0x90
 800c620:	589b      	ldr	r3, [r3, r2]
 800c622:	2220      	movs	r2, #32
 800c624:	431a      	orrs	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2190      	movs	r1, #144	; 0x90
 800c62a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2290      	movs	r2, #144	; 0x90
 800c630:	589b      	ldr	r3, [r3, r2]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d100      	bne.n	800c638 <HAL_UART_IRQHandler+0x1b0>
 800c636:	e23d      	b.n	800cab4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c638:	23a4      	movs	r3, #164	; 0xa4
 800c63a:	18fb      	adds	r3, r7, r3
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2220      	movs	r2, #32
 800c640:	4013      	ands	r3, r2
 800c642:	d015      	beq.n	800c670 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c644:	23a0      	movs	r3, #160	; 0xa0
 800c646:	18fb      	adds	r3, r7, r3
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2220      	movs	r2, #32
 800c64c:	4013      	ands	r3, r2
 800c64e:	d106      	bne.n	800c65e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c650:	239c      	movs	r3, #156	; 0x9c
 800c652:	18fb      	adds	r3, r7, r3
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	2380      	movs	r3, #128	; 0x80
 800c658:	055b      	lsls	r3, r3, #21
 800c65a:	4013      	ands	r3, r2
 800c65c:	d008      	beq.n	800c670 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c662:	2b00      	cmp	r3, #0
 800c664:	d004      	beq.n	800c670 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	0010      	movs	r0, r2
 800c66e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2290      	movs	r2, #144	; 0x90
 800c674:	589b      	ldr	r3, [r3, r2]
 800c676:	2194      	movs	r1, #148	; 0x94
 800c678:	187a      	adds	r2, r7, r1
 800c67a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	2240      	movs	r2, #64	; 0x40
 800c684:	4013      	ands	r3, r2
 800c686:	2b40      	cmp	r3, #64	; 0x40
 800c688:	d004      	beq.n	800c694 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c68a:	187b      	adds	r3, r7, r1
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2228      	movs	r2, #40	; 0x28
 800c690:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c692:	d04c      	beq.n	800c72e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	0018      	movs	r0, r3
 800c698:	f000 fec2 	bl	800d420 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	2240      	movs	r2, #64	; 0x40
 800c6a4:	4013      	ands	r3, r2
 800c6a6:	2b40      	cmp	r3, #64	; 0x40
 800c6a8:	d13c      	bne.n	800c724 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6aa:	f3ef 8310 	mrs	r3, PRIMASK
 800c6ae:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800c6b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6b2:	2090      	movs	r0, #144	; 0x90
 800c6b4:	183a      	adds	r2, r7, r0
 800c6b6:	6013      	str	r3, [r2, #0]
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6be:	f383 8810 	msr	PRIMASK, r3
}
 800c6c2:	46c0      	nop			; (mov r8, r8)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	689a      	ldr	r2, [r3, #8]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2140      	movs	r1, #64	; 0x40
 800c6d0:	438a      	bics	r2, r1
 800c6d2:	609a      	str	r2, [r3, #8]
 800c6d4:	183b      	adds	r3, r7, r0
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c6dc:	f383 8810 	msr	PRIMASK, r3
}
 800c6e0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2280      	movs	r2, #128	; 0x80
 800c6e6:	589b      	ldr	r3, [r3, r2]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d016      	beq.n	800c71a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2280      	movs	r2, #128	; 0x80
 800c6f0:	589b      	ldr	r3, [r3, r2]
 800c6f2:	4a17      	ldr	r2, [pc, #92]	; (800c750 <HAL_UART_IRQHandler+0x2c8>)
 800c6f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2280      	movs	r2, #128	; 0x80
 800c6fa:	589b      	ldr	r3, [r3, r2]
 800c6fc:	0018      	movs	r0, r3
 800c6fe:	f7fc fcf5 	bl	80090ec <HAL_DMA_Abort_IT>
 800c702:	1e03      	subs	r3, r0, #0
 800c704:	d01c      	beq.n	800c740 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2280      	movs	r2, #128	; 0x80
 800c70a:	589b      	ldr	r3, [r3, r2]
 800c70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	2180      	movs	r1, #128	; 0x80
 800c712:	5852      	ldr	r2, [r2, r1]
 800c714:	0010      	movs	r0, r2
 800c716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c718:	e012      	b.n	800c740 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	0018      	movs	r0, r3
 800c71e:	f7f7 fec1 	bl	80044a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c722:	e00d      	b.n	800c740 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	0018      	movs	r0, r3
 800c728:	f7f7 febc 	bl	80044a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c72c:	e008      	b.n	800c740 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	0018      	movs	r0, r3
 800c732:	f7f7 feb7 	bl	80044a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2290      	movs	r2, #144	; 0x90
 800c73a:	2100      	movs	r1, #0
 800c73c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800c73e:	e1b9      	b.n	800cab4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c740:	46c0      	nop			; (mov r8, r8)
    return;
 800c742:	e1b7      	b.n	800cab4 <HAL_UART_IRQHandler+0x62c>
 800c744:	0000080f 	.word	0x0000080f
 800c748:	10000001 	.word	0x10000001
 800c74c:	04000120 	.word	0x04000120
 800c750:	0800d4ed 	.word	0x0800d4ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d000      	beq.n	800c75e <HAL_UART_IRQHandler+0x2d6>
 800c75c:	e13e      	b.n	800c9dc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c75e:	23a4      	movs	r3, #164	; 0xa4
 800c760:	18fb      	adds	r3, r7, r3
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2210      	movs	r2, #16
 800c766:	4013      	ands	r3, r2
 800c768:	d100      	bne.n	800c76c <HAL_UART_IRQHandler+0x2e4>
 800c76a:	e137      	b.n	800c9dc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c76c:	23a0      	movs	r3, #160	; 0xa0
 800c76e:	18fb      	adds	r3, r7, r3
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2210      	movs	r2, #16
 800c774:	4013      	ands	r3, r2
 800c776:	d100      	bne.n	800c77a <HAL_UART_IRQHandler+0x2f2>
 800c778:	e130      	b.n	800c9dc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2210      	movs	r2, #16
 800c780:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	2240      	movs	r2, #64	; 0x40
 800c78a:	4013      	ands	r3, r2
 800c78c:	2b40      	cmp	r3, #64	; 0x40
 800c78e:	d000      	beq.n	800c792 <HAL_UART_IRQHandler+0x30a>
 800c790:	e0a4      	b.n	800c8dc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2280      	movs	r2, #128	; 0x80
 800c796:	589b      	ldr	r3, [r3, r2]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	685a      	ldr	r2, [r3, #4]
 800c79c:	217e      	movs	r1, #126	; 0x7e
 800c79e:	187b      	adds	r3, r7, r1
 800c7a0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800c7a2:	187b      	adds	r3, r7, r1
 800c7a4:	881b      	ldrh	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d100      	bne.n	800c7ac <HAL_UART_IRQHandler+0x324>
 800c7aa:	e185      	b.n	800cab8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	225c      	movs	r2, #92	; 0x5c
 800c7b0:	5a9b      	ldrh	r3, [r3, r2]
 800c7b2:	187a      	adds	r2, r7, r1
 800c7b4:	8812      	ldrh	r2, [r2, #0]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d300      	bcc.n	800c7bc <HAL_UART_IRQHandler+0x334>
 800c7ba:	e17d      	b.n	800cab8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	187a      	adds	r2, r7, r1
 800c7c0:	215e      	movs	r1, #94	; 0x5e
 800c7c2:	8812      	ldrh	r2, [r2, #0]
 800c7c4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2280      	movs	r2, #128	; 0x80
 800c7ca:	589b      	ldr	r3, [r3, r2]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2220      	movs	r2, #32
 800c7d2:	4013      	ands	r3, r2
 800c7d4:	d170      	bne.n	800c8b8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7d6:	f3ef 8310 	mrs	r3, PRIMASK
 800c7da:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800c7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7de:	67bb      	str	r3, [r7, #120]	; 0x78
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7e6:	f383 8810 	msr	PRIMASK, r3
}
 800c7ea:	46c0      	nop			; (mov r8, r8)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	49b4      	ldr	r1, [pc, #720]	; (800cac8 <HAL_UART_IRQHandler+0x640>)
 800c7f8:	400a      	ands	r2, r1
 800c7fa:	601a      	str	r2, [r3, #0]
 800c7fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c802:	f383 8810 	msr	PRIMASK, r3
}
 800c806:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c808:	f3ef 8310 	mrs	r3, PRIMASK
 800c80c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800c80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c810:	677b      	str	r3, [r7, #116]	; 0x74
 800c812:	2301      	movs	r3, #1
 800c814:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c818:	f383 8810 	msr	PRIMASK, r3
}
 800c81c:	46c0      	nop			; (mov r8, r8)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	689a      	ldr	r2, [r3, #8]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2101      	movs	r1, #1
 800c82a:	438a      	bics	r2, r1
 800c82c:	609a      	str	r2, [r3, #8]
 800c82e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c830:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c834:	f383 8810 	msr	PRIMASK, r3
}
 800c838:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c83a:	f3ef 8310 	mrs	r3, PRIMASK
 800c83e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800c840:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c842:	673b      	str	r3, [r7, #112]	; 0x70
 800c844:	2301      	movs	r3, #1
 800c846:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c84a:	f383 8810 	msr	PRIMASK, r3
}
 800c84e:	46c0      	nop			; (mov r8, r8)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	689a      	ldr	r2, [r3, #8]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2140      	movs	r1, #64	; 0x40
 800c85c:	438a      	bics	r2, r1
 800c85e:	609a      	str	r2, [r3, #8]
 800c860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c862:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c866:	f383 8810 	msr	PRIMASK, r3
}
 800c86a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	228c      	movs	r2, #140	; 0x8c
 800c870:	2120      	movs	r1, #32
 800c872:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c87a:	f3ef 8310 	mrs	r3, PRIMASK
 800c87e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800c880:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c882:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c884:	2301      	movs	r3, #1
 800c886:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c88a:	f383 8810 	msr	PRIMASK, r3
}
 800c88e:	46c0      	nop			; (mov r8, r8)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	681a      	ldr	r2, [r3, #0]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2110      	movs	r1, #16
 800c89c:	438a      	bics	r2, r1
 800c89e:	601a      	str	r2, [r3, #0]
 800c8a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8a6:	f383 8810 	msr	PRIMASK, r3
}
 800c8aa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2280      	movs	r2, #128	; 0x80
 800c8b0:	589b      	ldr	r3, [r3, r2]
 800c8b2:	0018      	movs	r0, r3
 800c8b4:	f7fc fbb8 	bl	8009028 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2202      	movs	r2, #2
 800c8bc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	225c      	movs	r2, #92	; 0x5c
 800c8c2:	5a9a      	ldrh	r2, [r3, r2]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	215e      	movs	r1, #94	; 0x5e
 800c8c8:	5a5b      	ldrh	r3, [r3, r1]
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	1ad3      	subs	r3, r2, r3
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	0011      	movs	r1, r2
 800c8d4:	0018      	movs	r0, r3
 800c8d6:	f000 f905 	bl	800cae4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c8da:	e0ed      	b.n	800cab8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	225c      	movs	r2, #92	; 0x5c
 800c8e0:	5a99      	ldrh	r1, [r3, r2]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	225e      	movs	r2, #94	; 0x5e
 800c8e6:	5a9b      	ldrh	r3, [r3, r2]
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	208e      	movs	r0, #142	; 0x8e
 800c8ec:	183b      	adds	r3, r7, r0
 800c8ee:	1a8a      	subs	r2, r1, r2
 800c8f0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	225e      	movs	r2, #94	; 0x5e
 800c8f6:	5a9b      	ldrh	r3, [r3, r2]
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d100      	bne.n	800c900 <HAL_UART_IRQHandler+0x478>
 800c8fe:	e0dd      	b.n	800cabc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800c900:	183b      	adds	r3, r7, r0
 800c902:	881b      	ldrh	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d100      	bne.n	800c90a <HAL_UART_IRQHandler+0x482>
 800c908:	e0d8      	b.n	800cabc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c90a:	f3ef 8310 	mrs	r3, PRIMASK
 800c90e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c910:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c912:	2488      	movs	r4, #136	; 0x88
 800c914:	193a      	adds	r2, r7, r4
 800c916:	6013      	str	r3, [r2, #0]
 800c918:	2301      	movs	r3, #1
 800c91a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	f383 8810 	msr	PRIMASK, r3
}
 800c922:	46c0      	nop			; (mov r8, r8)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4967      	ldr	r1, [pc, #412]	; (800cacc <HAL_UART_IRQHandler+0x644>)
 800c930:	400a      	ands	r2, r1
 800c932:	601a      	str	r2, [r3, #0]
 800c934:	193b      	adds	r3, r7, r4
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	f383 8810 	msr	PRIMASK, r3
}
 800c940:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c942:	f3ef 8310 	mrs	r3, PRIMASK
 800c946:	61bb      	str	r3, [r7, #24]
  return(result);
 800c948:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c94a:	2484      	movs	r4, #132	; 0x84
 800c94c:	193a      	adds	r2, r7, r4
 800c94e:	6013      	str	r3, [r2, #0]
 800c950:	2301      	movs	r3, #1
 800c952:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	f383 8810 	msr	PRIMASK, r3
}
 800c95a:	46c0      	nop			; (mov r8, r8)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	689a      	ldr	r2, [r3, #8]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	495a      	ldr	r1, [pc, #360]	; (800cad0 <HAL_UART_IRQHandler+0x648>)
 800c968:	400a      	ands	r2, r1
 800c96a:	609a      	str	r2, [r3, #8]
 800c96c:	193b      	adds	r3, r7, r4
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c972:	6a3b      	ldr	r3, [r7, #32]
 800c974:	f383 8810 	msr	PRIMASK, r3
}
 800c978:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	228c      	movs	r2, #140	; 0x8c
 800c97e:	2120      	movs	r1, #32
 800c980:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c98e:	f3ef 8310 	mrs	r3, PRIMASK
 800c992:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c996:	2480      	movs	r4, #128	; 0x80
 800c998:	193a      	adds	r2, r7, r4
 800c99a:	6013      	str	r3, [r2, #0]
 800c99c:	2301      	movs	r3, #1
 800c99e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a2:	f383 8810 	msr	PRIMASK, r3
}
 800c9a6:	46c0      	nop			; (mov r8, r8)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2110      	movs	r1, #16
 800c9b4:	438a      	bics	r2, r1
 800c9b6:	601a      	str	r2, [r3, #0]
 800c9b8:	193b      	adds	r3, r7, r4
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c0:	f383 8810 	msr	PRIMASK, r3
}
 800c9c4:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2202      	movs	r2, #2
 800c9ca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c9cc:	183b      	adds	r3, r7, r0
 800c9ce:	881a      	ldrh	r2, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	0011      	movs	r1, r2
 800c9d4:	0018      	movs	r0, r3
 800c9d6:	f000 f885 	bl	800cae4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c9da:	e06f      	b.n	800cabc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c9dc:	23a4      	movs	r3, #164	; 0xa4
 800c9de:	18fb      	adds	r3, r7, r3
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	2380      	movs	r3, #128	; 0x80
 800c9e4:	035b      	lsls	r3, r3, #13
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	d010      	beq.n	800ca0c <HAL_UART_IRQHandler+0x584>
 800c9ea:	239c      	movs	r3, #156	; 0x9c
 800c9ec:	18fb      	adds	r3, r7, r3
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	2380      	movs	r3, #128	; 0x80
 800c9f2:	03db      	lsls	r3, r3, #15
 800c9f4:	4013      	ands	r3, r2
 800c9f6:	d009      	beq.n	800ca0c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	2280      	movs	r2, #128	; 0x80
 800c9fe:	0352      	lsls	r2, r2, #13
 800ca00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	0018      	movs	r0, r3
 800ca06:	f001 fa15 	bl	800de34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca0a:	e05a      	b.n	800cac2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ca0c:	23a4      	movs	r3, #164	; 0xa4
 800ca0e:	18fb      	adds	r3, r7, r3
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2280      	movs	r2, #128	; 0x80
 800ca14:	4013      	ands	r3, r2
 800ca16:	d016      	beq.n	800ca46 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ca18:	23a0      	movs	r3, #160	; 0xa0
 800ca1a:	18fb      	adds	r3, r7, r3
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2280      	movs	r2, #128	; 0x80
 800ca20:	4013      	ands	r3, r2
 800ca22:	d106      	bne.n	800ca32 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ca24:	239c      	movs	r3, #156	; 0x9c
 800ca26:	18fb      	adds	r3, r7, r3
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	2380      	movs	r3, #128	; 0x80
 800ca2c:	041b      	lsls	r3, r3, #16
 800ca2e:	4013      	ands	r3, r2
 800ca30:	d009      	beq.n	800ca46 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d042      	beq.n	800cac0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	0010      	movs	r0, r2
 800ca42:	4798      	blx	r3
    }
    return;
 800ca44:	e03c      	b.n	800cac0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ca46:	23a4      	movs	r3, #164	; 0xa4
 800ca48:	18fb      	adds	r3, r7, r3
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2240      	movs	r2, #64	; 0x40
 800ca4e:	4013      	ands	r3, r2
 800ca50:	d00a      	beq.n	800ca68 <HAL_UART_IRQHandler+0x5e0>
 800ca52:	23a0      	movs	r3, #160	; 0xa0
 800ca54:	18fb      	adds	r3, r7, r3
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2240      	movs	r2, #64	; 0x40
 800ca5a:	4013      	ands	r3, r2
 800ca5c:	d004      	beq.n	800ca68 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	0018      	movs	r0, r3
 800ca62:	f000 fd5a 	bl	800d51a <UART_EndTransmit_IT>
    return;
 800ca66:	e02c      	b.n	800cac2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ca68:	23a4      	movs	r3, #164	; 0xa4
 800ca6a:	18fb      	adds	r3, r7, r3
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	2380      	movs	r3, #128	; 0x80
 800ca70:	041b      	lsls	r3, r3, #16
 800ca72:	4013      	ands	r3, r2
 800ca74:	d00b      	beq.n	800ca8e <HAL_UART_IRQHandler+0x606>
 800ca76:	23a0      	movs	r3, #160	; 0xa0
 800ca78:	18fb      	adds	r3, r7, r3
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	2380      	movs	r3, #128	; 0x80
 800ca7e:	05db      	lsls	r3, r3, #23
 800ca80:	4013      	ands	r3, r2
 800ca82:	d004      	beq.n	800ca8e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	0018      	movs	r0, r3
 800ca88:	f001 f9e4 	bl	800de54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca8c:	e019      	b.n	800cac2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ca8e:	23a4      	movs	r3, #164	; 0xa4
 800ca90:	18fb      	adds	r3, r7, r3
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	2380      	movs	r3, #128	; 0x80
 800ca96:	045b      	lsls	r3, r3, #17
 800ca98:	4013      	ands	r3, r2
 800ca9a:	d012      	beq.n	800cac2 <HAL_UART_IRQHandler+0x63a>
 800ca9c:	23a0      	movs	r3, #160	; 0xa0
 800ca9e:	18fb      	adds	r3, r7, r3
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	da0d      	bge.n	800cac2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	0018      	movs	r0, r3
 800caaa:	f001 f9cb 	bl	800de44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800caae:	e008      	b.n	800cac2 <HAL_UART_IRQHandler+0x63a>
      return;
 800cab0:	46c0      	nop			; (mov r8, r8)
 800cab2:	e006      	b.n	800cac2 <HAL_UART_IRQHandler+0x63a>
    return;
 800cab4:	46c0      	nop			; (mov r8, r8)
 800cab6:	e004      	b.n	800cac2 <HAL_UART_IRQHandler+0x63a>
      return;
 800cab8:	46c0      	nop			; (mov r8, r8)
 800caba:	e002      	b.n	800cac2 <HAL_UART_IRQHandler+0x63a>
      return;
 800cabc:	46c0      	nop			; (mov r8, r8)
 800cabe:	e000      	b.n	800cac2 <HAL_UART_IRQHandler+0x63a>
    return;
 800cac0:	46c0      	nop			; (mov r8, r8)
  }
}
 800cac2:	46bd      	mov	sp, r7
 800cac4:	b02a      	add	sp, #168	; 0xa8
 800cac6:	bdb0      	pop	{r4, r5, r7, pc}
 800cac8:	fffffeff 	.word	0xfffffeff
 800cacc:	fffffedf 	.word	0xfffffedf
 800cad0:	effffffe 	.word	0xeffffffe

0800cad4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cadc:	46c0      	nop			; (mov r8, r8)
 800cade:	46bd      	mov	sp, r7
 800cae0:	b002      	add	sp, #8
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	000a      	movs	r2, r1
 800caee:	1cbb      	adds	r3, r7, #2
 800caf0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800caf2:	46c0      	nop			; (mov r8, r8)
 800caf4:	46bd      	mov	sp, r7
 800caf6:	b002      	add	sp, #8
 800caf8:	bd80      	pop	{r7, pc}
	...

0800cafc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b088      	sub	sp, #32
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb04:	231a      	movs	r3, #26
 800cb06:	18fb      	adds	r3, r7, r3
 800cb08:	2200      	movs	r2, #0
 800cb0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	689a      	ldr	r2, [r3, #8]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	691b      	ldr	r3, [r3, #16]
 800cb14:	431a      	orrs	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	695b      	ldr	r3, [r3, #20]
 800cb1a:	431a      	orrs	r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	69db      	ldr	r3, [r3, #28]
 800cb20:	4313      	orrs	r3, r2
 800cb22:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4abc      	ldr	r2, [pc, #752]	; (800ce1c <UART_SetConfig+0x320>)
 800cb2c:	4013      	ands	r3, r2
 800cb2e:	0019      	movs	r1, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	69fa      	ldr	r2, [r7, #28]
 800cb36:	430a      	orrs	r2, r1
 800cb38:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	4ab7      	ldr	r2, [pc, #732]	; (800ce20 <UART_SetConfig+0x324>)
 800cb42:	4013      	ands	r3, r2
 800cb44:	0019      	movs	r1, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	68da      	ldr	r2, [r3, #12]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	430a      	orrs	r2, r1
 800cb50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	699b      	ldr	r3, [r3, #24]
 800cb56:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6a1b      	ldr	r3, [r3, #32]
 800cb5c:	69fa      	ldr	r2, [r7, #28]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	4aae      	ldr	r2, [pc, #696]	; (800ce24 <UART_SetConfig+0x328>)
 800cb6a:	4013      	ands	r3, r2
 800cb6c:	0019      	movs	r1, r3
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	69fa      	ldr	r2, [r7, #28]
 800cb74:	430a      	orrs	r2, r1
 800cb76:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb7e:	220f      	movs	r2, #15
 800cb80:	4393      	bics	r3, r2
 800cb82:	0019      	movs	r1, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	430a      	orrs	r2, r1
 800cb8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4aa4      	ldr	r2, [pc, #656]	; (800ce28 <UART_SetConfig+0x32c>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d127      	bne.n	800cbea <UART_SetConfig+0xee>
 800cb9a:	4ba4      	ldr	r3, [pc, #656]	; (800ce2c <UART_SetConfig+0x330>)
 800cb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb9e:	2203      	movs	r2, #3
 800cba0:	4013      	ands	r3, r2
 800cba2:	2b03      	cmp	r3, #3
 800cba4:	d017      	beq.n	800cbd6 <UART_SetConfig+0xda>
 800cba6:	d81b      	bhi.n	800cbe0 <UART_SetConfig+0xe4>
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d00a      	beq.n	800cbc2 <UART_SetConfig+0xc6>
 800cbac:	d818      	bhi.n	800cbe0 <UART_SetConfig+0xe4>
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d002      	beq.n	800cbb8 <UART_SetConfig+0xbc>
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d00a      	beq.n	800cbcc <UART_SetConfig+0xd0>
 800cbb6:	e013      	b.n	800cbe0 <UART_SetConfig+0xe4>
 800cbb8:	231b      	movs	r3, #27
 800cbba:	18fb      	adds	r3, r7, r3
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	701a      	strb	r2, [r3, #0]
 800cbc0:	e058      	b.n	800cc74 <UART_SetConfig+0x178>
 800cbc2:	231b      	movs	r3, #27
 800cbc4:	18fb      	adds	r3, r7, r3
 800cbc6:	2202      	movs	r2, #2
 800cbc8:	701a      	strb	r2, [r3, #0]
 800cbca:	e053      	b.n	800cc74 <UART_SetConfig+0x178>
 800cbcc:	231b      	movs	r3, #27
 800cbce:	18fb      	adds	r3, r7, r3
 800cbd0:	2204      	movs	r2, #4
 800cbd2:	701a      	strb	r2, [r3, #0]
 800cbd4:	e04e      	b.n	800cc74 <UART_SetConfig+0x178>
 800cbd6:	231b      	movs	r3, #27
 800cbd8:	18fb      	adds	r3, r7, r3
 800cbda:	2208      	movs	r2, #8
 800cbdc:	701a      	strb	r2, [r3, #0]
 800cbde:	e049      	b.n	800cc74 <UART_SetConfig+0x178>
 800cbe0:	231b      	movs	r3, #27
 800cbe2:	18fb      	adds	r3, r7, r3
 800cbe4:	2210      	movs	r2, #16
 800cbe6:	701a      	strb	r2, [r3, #0]
 800cbe8:	e044      	b.n	800cc74 <UART_SetConfig+0x178>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a90      	ldr	r2, [pc, #576]	; (800ce30 <UART_SetConfig+0x334>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d127      	bne.n	800cc44 <UART_SetConfig+0x148>
 800cbf4:	4b8d      	ldr	r3, [pc, #564]	; (800ce2c <UART_SetConfig+0x330>)
 800cbf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbf8:	220c      	movs	r2, #12
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	2b0c      	cmp	r3, #12
 800cbfe:	d017      	beq.n	800cc30 <UART_SetConfig+0x134>
 800cc00:	d81b      	bhi.n	800cc3a <UART_SetConfig+0x13e>
 800cc02:	2b08      	cmp	r3, #8
 800cc04:	d00a      	beq.n	800cc1c <UART_SetConfig+0x120>
 800cc06:	d818      	bhi.n	800cc3a <UART_SetConfig+0x13e>
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <UART_SetConfig+0x116>
 800cc0c:	2b04      	cmp	r3, #4
 800cc0e:	d00a      	beq.n	800cc26 <UART_SetConfig+0x12a>
 800cc10:	e013      	b.n	800cc3a <UART_SetConfig+0x13e>
 800cc12:	231b      	movs	r3, #27
 800cc14:	18fb      	adds	r3, r7, r3
 800cc16:	2200      	movs	r2, #0
 800cc18:	701a      	strb	r2, [r3, #0]
 800cc1a:	e02b      	b.n	800cc74 <UART_SetConfig+0x178>
 800cc1c:	231b      	movs	r3, #27
 800cc1e:	18fb      	adds	r3, r7, r3
 800cc20:	2202      	movs	r2, #2
 800cc22:	701a      	strb	r2, [r3, #0]
 800cc24:	e026      	b.n	800cc74 <UART_SetConfig+0x178>
 800cc26:	231b      	movs	r3, #27
 800cc28:	18fb      	adds	r3, r7, r3
 800cc2a:	2204      	movs	r2, #4
 800cc2c:	701a      	strb	r2, [r3, #0]
 800cc2e:	e021      	b.n	800cc74 <UART_SetConfig+0x178>
 800cc30:	231b      	movs	r3, #27
 800cc32:	18fb      	adds	r3, r7, r3
 800cc34:	2208      	movs	r2, #8
 800cc36:	701a      	strb	r2, [r3, #0]
 800cc38:	e01c      	b.n	800cc74 <UART_SetConfig+0x178>
 800cc3a:	231b      	movs	r3, #27
 800cc3c:	18fb      	adds	r3, r7, r3
 800cc3e:	2210      	movs	r2, #16
 800cc40:	701a      	strb	r2, [r3, #0]
 800cc42:	e017      	b.n	800cc74 <UART_SetConfig+0x178>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a7a      	ldr	r2, [pc, #488]	; (800ce34 <UART_SetConfig+0x338>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d104      	bne.n	800cc58 <UART_SetConfig+0x15c>
 800cc4e:	231b      	movs	r3, #27
 800cc50:	18fb      	adds	r3, r7, r3
 800cc52:	2200      	movs	r2, #0
 800cc54:	701a      	strb	r2, [r3, #0]
 800cc56:	e00d      	b.n	800cc74 <UART_SetConfig+0x178>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a76      	ldr	r2, [pc, #472]	; (800ce38 <UART_SetConfig+0x33c>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d104      	bne.n	800cc6c <UART_SetConfig+0x170>
 800cc62:	231b      	movs	r3, #27
 800cc64:	18fb      	adds	r3, r7, r3
 800cc66:	2200      	movs	r2, #0
 800cc68:	701a      	strb	r2, [r3, #0]
 800cc6a:	e003      	b.n	800cc74 <UART_SetConfig+0x178>
 800cc6c:	231b      	movs	r3, #27
 800cc6e:	18fb      	adds	r3, r7, r3
 800cc70:	2210      	movs	r2, #16
 800cc72:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	69da      	ldr	r2, [r3, #28]
 800cc78:	2380      	movs	r3, #128	; 0x80
 800cc7a:	021b      	lsls	r3, r3, #8
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d000      	beq.n	800cc82 <UART_SetConfig+0x186>
 800cc80:	e065      	b.n	800cd4e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800cc82:	231b      	movs	r3, #27
 800cc84:	18fb      	adds	r3, r7, r3
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	2b08      	cmp	r3, #8
 800cc8a:	d015      	beq.n	800ccb8 <UART_SetConfig+0x1bc>
 800cc8c:	dc18      	bgt.n	800ccc0 <UART_SetConfig+0x1c4>
 800cc8e:	2b04      	cmp	r3, #4
 800cc90:	d00d      	beq.n	800ccae <UART_SetConfig+0x1b2>
 800cc92:	dc15      	bgt.n	800ccc0 <UART_SetConfig+0x1c4>
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d002      	beq.n	800cc9e <UART_SetConfig+0x1a2>
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	d005      	beq.n	800cca8 <UART_SetConfig+0x1ac>
 800cc9c:	e010      	b.n	800ccc0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc9e:	f7fd f939 	bl	8009f14 <HAL_RCC_GetPCLK1Freq>
 800cca2:	0003      	movs	r3, r0
 800cca4:	617b      	str	r3, [r7, #20]
        break;
 800cca6:	e012      	b.n	800ccce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cca8:	4b64      	ldr	r3, [pc, #400]	; (800ce3c <UART_SetConfig+0x340>)
 800ccaa:	617b      	str	r3, [r7, #20]
        break;
 800ccac:	e00f      	b.n	800ccce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ccae:	f7fd f8a5 	bl	8009dfc <HAL_RCC_GetSysClockFreq>
 800ccb2:	0003      	movs	r3, r0
 800ccb4:	617b      	str	r3, [r7, #20]
        break;
 800ccb6:	e00a      	b.n	800ccce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccb8:	2380      	movs	r3, #128	; 0x80
 800ccba:	021b      	lsls	r3, r3, #8
 800ccbc:	617b      	str	r3, [r7, #20]
        break;
 800ccbe:	e006      	b.n	800ccce <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ccc4:	231a      	movs	r3, #26
 800ccc6:	18fb      	adds	r3, r7, r3
 800ccc8:	2201      	movs	r2, #1
 800ccca:	701a      	strb	r2, [r3, #0]
        break;
 800cccc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d100      	bne.n	800ccd6 <UART_SetConfig+0x1da>
 800ccd4:	e08d      	b.n	800cdf2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccda:	4b59      	ldr	r3, [pc, #356]	; (800ce40 <UART_SetConfig+0x344>)
 800ccdc:	0052      	lsls	r2, r2, #1
 800ccde:	5ad3      	ldrh	r3, [r2, r3]
 800cce0:	0019      	movs	r1, r3
 800cce2:	6978      	ldr	r0, [r7, #20]
 800cce4:	f7f3 fa32 	bl	800014c <__udivsi3>
 800cce8:	0003      	movs	r3, r0
 800ccea:	005a      	lsls	r2, r3, #1
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	085b      	lsrs	r3, r3, #1
 800ccf2:	18d2      	adds	r2, r2, r3
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	0019      	movs	r1, r3
 800ccfa:	0010      	movs	r0, r2
 800ccfc:	f7f3 fa26 	bl	800014c <__udivsi3>
 800cd00:	0003      	movs	r3, r0
 800cd02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	2b0f      	cmp	r3, #15
 800cd08:	d91c      	bls.n	800cd44 <UART_SetConfig+0x248>
 800cd0a:	693a      	ldr	r2, [r7, #16]
 800cd0c:	2380      	movs	r3, #128	; 0x80
 800cd0e:	025b      	lsls	r3, r3, #9
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d217      	bcs.n	800cd44 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	200e      	movs	r0, #14
 800cd1a:	183b      	adds	r3, r7, r0
 800cd1c:	210f      	movs	r1, #15
 800cd1e:	438a      	bics	r2, r1
 800cd20:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	085b      	lsrs	r3, r3, #1
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	2207      	movs	r2, #7
 800cd2a:	4013      	ands	r3, r2
 800cd2c:	b299      	uxth	r1, r3
 800cd2e:	183b      	adds	r3, r7, r0
 800cd30:	183a      	adds	r2, r7, r0
 800cd32:	8812      	ldrh	r2, [r2, #0]
 800cd34:	430a      	orrs	r2, r1
 800cd36:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	183a      	adds	r2, r7, r0
 800cd3e:	8812      	ldrh	r2, [r2, #0]
 800cd40:	60da      	str	r2, [r3, #12]
 800cd42:	e056      	b.n	800cdf2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800cd44:	231a      	movs	r3, #26
 800cd46:	18fb      	adds	r3, r7, r3
 800cd48:	2201      	movs	r2, #1
 800cd4a:	701a      	strb	r2, [r3, #0]
 800cd4c:	e051      	b.n	800cdf2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd4e:	231b      	movs	r3, #27
 800cd50:	18fb      	adds	r3, r7, r3
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	2b08      	cmp	r3, #8
 800cd56:	d015      	beq.n	800cd84 <UART_SetConfig+0x288>
 800cd58:	dc18      	bgt.n	800cd8c <UART_SetConfig+0x290>
 800cd5a:	2b04      	cmp	r3, #4
 800cd5c:	d00d      	beq.n	800cd7a <UART_SetConfig+0x27e>
 800cd5e:	dc15      	bgt.n	800cd8c <UART_SetConfig+0x290>
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d002      	beq.n	800cd6a <UART_SetConfig+0x26e>
 800cd64:	2b02      	cmp	r3, #2
 800cd66:	d005      	beq.n	800cd74 <UART_SetConfig+0x278>
 800cd68:	e010      	b.n	800cd8c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd6a:	f7fd f8d3 	bl	8009f14 <HAL_RCC_GetPCLK1Freq>
 800cd6e:	0003      	movs	r3, r0
 800cd70:	617b      	str	r3, [r7, #20]
        break;
 800cd72:	e012      	b.n	800cd9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd74:	4b31      	ldr	r3, [pc, #196]	; (800ce3c <UART_SetConfig+0x340>)
 800cd76:	617b      	str	r3, [r7, #20]
        break;
 800cd78:	e00f      	b.n	800cd9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd7a:	f7fd f83f 	bl	8009dfc <HAL_RCC_GetSysClockFreq>
 800cd7e:	0003      	movs	r3, r0
 800cd80:	617b      	str	r3, [r7, #20]
        break;
 800cd82:	e00a      	b.n	800cd9a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd84:	2380      	movs	r3, #128	; 0x80
 800cd86:	021b      	lsls	r3, r3, #8
 800cd88:	617b      	str	r3, [r7, #20]
        break;
 800cd8a:	e006      	b.n	800cd9a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cd90:	231a      	movs	r3, #26
 800cd92:	18fb      	adds	r3, r7, r3
 800cd94:	2201      	movs	r2, #1
 800cd96:	701a      	strb	r2, [r3, #0]
        break;
 800cd98:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d028      	beq.n	800cdf2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cda4:	4b26      	ldr	r3, [pc, #152]	; (800ce40 <UART_SetConfig+0x344>)
 800cda6:	0052      	lsls	r2, r2, #1
 800cda8:	5ad3      	ldrh	r3, [r2, r3]
 800cdaa:	0019      	movs	r1, r3
 800cdac:	6978      	ldr	r0, [r7, #20]
 800cdae:	f7f3 f9cd 	bl	800014c <__udivsi3>
 800cdb2:	0003      	movs	r3, r0
 800cdb4:	001a      	movs	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	085b      	lsrs	r3, r3, #1
 800cdbc:	18d2      	adds	r2, r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	0019      	movs	r1, r3
 800cdc4:	0010      	movs	r0, r2
 800cdc6:	f7f3 f9c1 	bl	800014c <__udivsi3>
 800cdca:	0003      	movs	r3, r0
 800cdcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	2b0f      	cmp	r3, #15
 800cdd2:	d90a      	bls.n	800cdea <UART_SetConfig+0x2ee>
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	2380      	movs	r3, #128	; 0x80
 800cdd8:	025b      	lsls	r3, r3, #9
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d205      	bcs.n	800cdea <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	60da      	str	r2, [r3, #12]
 800cde8:	e003      	b.n	800cdf2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800cdea:	231a      	movs	r3, #26
 800cdec:	18fb      	adds	r3, r7, r3
 800cdee:	2201      	movs	r2, #1
 800cdf0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	226a      	movs	r2, #106	; 0x6a
 800cdf6:	2101      	movs	r1, #1
 800cdf8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2268      	movs	r2, #104	; 0x68
 800cdfe:	2101      	movs	r1, #1
 800ce00:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ce0e:	231a      	movs	r3, #26
 800ce10:	18fb      	adds	r3, r7, r3
 800ce12:	781b      	ldrb	r3, [r3, #0]
}
 800ce14:	0018      	movs	r0, r3
 800ce16:	46bd      	mov	sp, r7
 800ce18:	b008      	add	sp, #32
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	cfff69f3 	.word	0xcfff69f3
 800ce20:	ffffcfff 	.word	0xffffcfff
 800ce24:	11fff4ff 	.word	0x11fff4ff
 800ce28:	40013800 	.word	0x40013800
 800ce2c:	40021000 	.word	0x40021000
 800ce30:	40004400 	.word	0x40004400
 800ce34:	40004800 	.word	0x40004800
 800ce38:	40004c00 	.word	0x40004c00
 800ce3c:	00f42400 	.word	0x00f42400
 800ce40:	08012b04 	.word	0x08012b04

0800ce44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce50:	2201      	movs	r2, #1
 800ce52:	4013      	ands	r3, r2
 800ce54:	d00b      	beq.n	800ce6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	4a4a      	ldr	r2, [pc, #296]	; (800cf88 <UART_AdvFeatureConfig+0x144>)
 800ce5e:	4013      	ands	r3, r2
 800ce60:	0019      	movs	r1, r3
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	430a      	orrs	r2, r1
 800ce6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce72:	2202      	movs	r2, #2
 800ce74:	4013      	ands	r3, r2
 800ce76:	d00b      	beq.n	800ce90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	4a43      	ldr	r2, [pc, #268]	; (800cf8c <UART_AdvFeatureConfig+0x148>)
 800ce80:	4013      	ands	r3, r2
 800ce82:	0019      	movs	r1, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	430a      	orrs	r2, r1
 800ce8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce94:	2204      	movs	r2, #4
 800ce96:	4013      	ands	r3, r2
 800ce98:	d00b      	beq.n	800ceb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	4a3b      	ldr	r2, [pc, #236]	; (800cf90 <UART_AdvFeatureConfig+0x14c>)
 800cea2:	4013      	ands	r3, r2
 800cea4:	0019      	movs	r1, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	430a      	orrs	r2, r1
 800ceb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceb6:	2208      	movs	r2, #8
 800ceb8:	4013      	ands	r3, r2
 800ceba:	d00b      	beq.n	800ced4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	4a34      	ldr	r2, [pc, #208]	; (800cf94 <UART_AdvFeatureConfig+0x150>)
 800cec4:	4013      	ands	r3, r2
 800cec6:	0019      	movs	r1, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	430a      	orrs	r2, r1
 800ced2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced8:	2210      	movs	r2, #16
 800ceda:	4013      	ands	r3, r2
 800cedc:	d00b      	beq.n	800cef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	4a2c      	ldr	r2, [pc, #176]	; (800cf98 <UART_AdvFeatureConfig+0x154>)
 800cee6:	4013      	ands	r3, r2
 800cee8:	0019      	movs	r1, r3
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	430a      	orrs	r2, r1
 800cef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cefa:	2220      	movs	r2, #32
 800cefc:	4013      	ands	r3, r2
 800cefe:	d00b      	beq.n	800cf18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	4a25      	ldr	r2, [pc, #148]	; (800cf9c <UART_AdvFeatureConfig+0x158>)
 800cf08:	4013      	ands	r3, r2
 800cf0a:	0019      	movs	r1, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	430a      	orrs	r2, r1
 800cf16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf1c:	2240      	movs	r2, #64	; 0x40
 800cf1e:	4013      	ands	r3, r2
 800cf20:	d01d      	beq.n	800cf5e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	4a1d      	ldr	r2, [pc, #116]	; (800cfa0 <UART_AdvFeatureConfig+0x15c>)
 800cf2a:	4013      	ands	r3, r2
 800cf2c:	0019      	movs	r1, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	430a      	orrs	r2, r1
 800cf38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf3e:	2380      	movs	r3, #128	; 0x80
 800cf40:	035b      	lsls	r3, r3, #13
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d10b      	bne.n	800cf5e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	4a15      	ldr	r2, [pc, #84]	; (800cfa4 <UART_AdvFeatureConfig+0x160>)
 800cf4e:	4013      	ands	r3, r2
 800cf50:	0019      	movs	r1, r3
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	430a      	orrs	r2, r1
 800cf5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf62:	2280      	movs	r2, #128	; 0x80
 800cf64:	4013      	ands	r3, r2
 800cf66:	d00b      	beq.n	800cf80 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	4a0e      	ldr	r2, [pc, #56]	; (800cfa8 <UART_AdvFeatureConfig+0x164>)
 800cf70:	4013      	ands	r3, r2
 800cf72:	0019      	movs	r1, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	430a      	orrs	r2, r1
 800cf7e:	605a      	str	r2, [r3, #4]
  }
}
 800cf80:	46c0      	nop			; (mov r8, r8)
 800cf82:	46bd      	mov	sp, r7
 800cf84:	b002      	add	sp, #8
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	fffdffff 	.word	0xfffdffff
 800cf8c:	fffeffff 	.word	0xfffeffff
 800cf90:	fffbffff 	.word	0xfffbffff
 800cf94:	ffff7fff 	.word	0xffff7fff
 800cf98:	ffffefff 	.word	0xffffefff
 800cf9c:	ffffdfff 	.word	0xffffdfff
 800cfa0:	ffefffff 	.word	0xffefffff
 800cfa4:	ff9fffff 	.word	0xff9fffff
 800cfa8:	fff7ffff 	.word	0xfff7ffff

0800cfac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b086      	sub	sp, #24
 800cfb0:	af02      	add	r7, sp, #8
 800cfb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2290      	movs	r2, #144	; 0x90
 800cfb8:	2100      	movs	r1, #0
 800cfba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cfbc:	f7fb ff28 	bl	8008e10 <HAL_GetTick>
 800cfc0:	0003      	movs	r3, r0
 800cfc2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2208      	movs	r2, #8
 800cfcc:	4013      	ands	r3, r2
 800cfce:	2b08      	cmp	r3, #8
 800cfd0:	d10c      	bne.n	800cfec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2280      	movs	r2, #128	; 0x80
 800cfd6:	0391      	lsls	r1, r2, #14
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	4a1a      	ldr	r2, [pc, #104]	; (800d044 <UART_CheckIdleState+0x98>)
 800cfdc:	9200      	str	r2, [sp, #0]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f000 f832 	bl	800d048 <UART_WaitOnFlagUntilTimeout>
 800cfe4:	1e03      	subs	r3, r0, #0
 800cfe6:	d001      	beq.n	800cfec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfe8:	2303      	movs	r3, #3
 800cfea:	e026      	b.n	800d03a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2204      	movs	r2, #4
 800cff4:	4013      	ands	r3, r2
 800cff6:	2b04      	cmp	r3, #4
 800cff8:	d10c      	bne.n	800d014 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2280      	movs	r2, #128	; 0x80
 800cffe:	03d1      	lsls	r1, r2, #15
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	4a10      	ldr	r2, [pc, #64]	; (800d044 <UART_CheckIdleState+0x98>)
 800d004:	9200      	str	r2, [sp, #0]
 800d006:	2200      	movs	r2, #0
 800d008:	f000 f81e 	bl	800d048 <UART_WaitOnFlagUntilTimeout>
 800d00c:	1e03      	subs	r3, r0, #0
 800d00e:	d001      	beq.n	800d014 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d010:	2303      	movs	r3, #3
 800d012:	e012      	b.n	800d03a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2288      	movs	r2, #136	; 0x88
 800d018:	2120      	movs	r1, #32
 800d01a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	228c      	movs	r2, #140	; 0x8c
 800d020:	2120      	movs	r1, #32
 800d022:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2200      	movs	r2, #0
 800d02e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2284      	movs	r2, #132	; 0x84
 800d034:	2100      	movs	r1, #0
 800d036:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d038:	2300      	movs	r3, #0
}
 800d03a:	0018      	movs	r0, r3
 800d03c:	46bd      	mov	sp, r7
 800d03e:	b004      	add	sp, #16
 800d040:	bd80      	pop	{r7, pc}
 800d042:	46c0      	nop			; (mov r8, r8)
 800d044:	01ffffff 	.word	0x01ffffff

0800d048 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b094      	sub	sp, #80	; 0x50
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	603b      	str	r3, [r7, #0]
 800d054:	1dfb      	adds	r3, r7, #7
 800d056:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d058:	e0a7      	b.n	800d1aa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d05a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d05c:	3301      	adds	r3, #1
 800d05e:	d100      	bne.n	800d062 <UART_WaitOnFlagUntilTimeout+0x1a>
 800d060:	e0a3      	b.n	800d1aa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d062:	f7fb fed5 	bl	8008e10 <HAL_GetTick>
 800d066:	0002      	movs	r2, r0
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d06e:	429a      	cmp	r2, r3
 800d070:	d302      	bcc.n	800d078 <UART_WaitOnFlagUntilTimeout+0x30>
 800d072:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d074:	2b00      	cmp	r3, #0
 800d076:	d13f      	bne.n	800d0f8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d078:	f3ef 8310 	mrs	r3, PRIMASK
 800d07c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800d07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d080:	647b      	str	r3, [r7, #68]	; 0x44
 800d082:	2301      	movs	r3, #1
 800d084:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d088:	f383 8810 	msr	PRIMASK, r3
}
 800d08c:	46c0      	nop			; (mov r8, r8)
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	494e      	ldr	r1, [pc, #312]	; (800d1d4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800d09a:	400a      	ands	r2, r1
 800d09c:	601a      	str	r2, [r3, #0]
 800d09e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0a0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a4:	f383 8810 	msr	PRIMASK, r3
}
 800d0a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0aa:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800d0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0b2:	643b      	str	r3, [r7, #64]	; 0x40
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ba:	f383 8810 	msr	PRIMASK, r3
}
 800d0be:	46c0      	nop			; (mov r8, r8)
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	689a      	ldr	r2, [r3, #8]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2101      	movs	r1, #1
 800d0cc:	438a      	bics	r2, r1
 800d0ce:	609a      	str	r2, [r3, #8]
 800d0d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0d6:	f383 8810 	msr	PRIMASK, r3
}
 800d0da:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2288      	movs	r2, #136	; 0x88
 800d0e0:	2120      	movs	r1, #32
 800d0e2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	228c      	movs	r2, #140	; 0x8c
 800d0e8:	2120      	movs	r1, #32
 800d0ea:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2284      	movs	r2, #132	; 0x84
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	e069      	b.n	800d1cc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2204      	movs	r2, #4
 800d100:	4013      	ands	r3, r2
 800d102:	d052      	beq.n	800d1aa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	69da      	ldr	r2, [r3, #28]
 800d10a:	2380      	movs	r3, #128	; 0x80
 800d10c:	011b      	lsls	r3, r3, #4
 800d10e:	401a      	ands	r2, r3
 800d110:	2380      	movs	r3, #128	; 0x80
 800d112:	011b      	lsls	r3, r3, #4
 800d114:	429a      	cmp	r2, r3
 800d116:	d148      	bne.n	800d1aa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2280      	movs	r2, #128	; 0x80
 800d11e:	0112      	lsls	r2, r2, #4
 800d120:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d122:	f3ef 8310 	mrs	r3, PRIMASK
 800d126:	613b      	str	r3, [r7, #16]
  return(result);
 800d128:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d12a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d12c:	2301      	movs	r3, #1
 800d12e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	f383 8810 	msr	PRIMASK, r3
}
 800d136:	46c0      	nop			; (mov r8, r8)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4924      	ldr	r1, [pc, #144]	; (800d1d4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800d144:	400a      	ands	r2, r1
 800d146:	601a      	str	r2, [r3, #0]
 800d148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d14a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	f383 8810 	msr	PRIMASK, r3
}
 800d152:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d154:	f3ef 8310 	mrs	r3, PRIMASK
 800d158:	61fb      	str	r3, [r7, #28]
  return(result);
 800d15a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d15c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d15e:	2301      	movs	r3, #1
 800d160:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d162:	6a3b      	ldr	r3, [r7, #32]
 800d164:	f383 8810 	msr	PRIMASK, r3
}
 800d168:	46c0      	nop			; (mov r8, r8)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	689a      	ldr	r2, [r3, #8]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2101      	movs	r1, #1
 800d176:	438a      	bics	r2, r1
 800d178:	609a      	str	r2, [r3, #8]
 800d17a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d17c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d180:	f383 8810 	msr	PRIMASK, r3
}
 800d184:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2288      	movs	r2, #136	; 0x88
 800d18a:	2120      	movs	r1, #32
 800d18c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	228c      	movs	r2, #140	; 0x8c
 800d192:	2120      	movs	r1, #32
 800d194:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2290      	movs	r2, #144	; 0x90
 800d19a:	2120      	movs	r1, #32
 800d19c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2284      	movs	r2, #132	; 0x84
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d1a6:	2303      	movs	r3, #3
 800d1a8:	e010      	b.n	800d1cc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	69db      	ldr	r3, [r3, #28]
 800d1b0:	68ba      	ldr	r2, [r7, #8]
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	68ba      	ldr	r2, [r7, #8]
 800d1b6:	1ad3      	subs	r3, r2, r3
 800d1b8:	425a      	negs	r2, r3
 800d1ba:	4153      	adcs	r3, r2
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	001a      	movs	r2, r3
 800d1c0:	1dfb      	adds	r3, r7, #7
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d100      	bne.n	800d1ca <UART_WaitOnFlagUntilTimeout+0x182>
 800d1c8:	e747      	b.n	800d05a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d1ca:	2300      	movs	r3, #0
}
 800d1cc:	0018      	movs	r0, r3
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	b014      	add	sp, #80	; 0x50
 800d1d2:	bd80      	pop	{r7, pc}
 800d1d4:	fffffe5f 	.word	0xfffffe5f

0800d1d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b098      	sub	sp, #96	; 0x60
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	1dbb      	adds	r3, r7, #6
 800d1e4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	1dba      	adds	r2, r7, #6
 800d1f0:	215c      	movs	r1, #92	; 0x5c
 800d1f2:	8812      	ldrh	r2, [r2, #0]
 800d1f4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	1dba      	adds	r2, r7, #6
 800d1fa:	215e      	movs	r1, #94	; 0x5e
 800d1fc:	8812      	ldrh	r2, [r2, #0]
 800d1fe:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2200      	movs	r2, #0
 800d204:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	689a      	ldr	r2, [r3, #8]
 800d20a:	2380      	movs	r3, #128	; 0x80
 800d20c:	015b      	lsls	r3, r3, #5
 800d20e:	429a      	cmp	r2, r3
 800d210:	d10d      	bne.n	800d22e <UART_Start_Receive_IT+0x56>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	691b      	ldr	r3, [r3, #16]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d104      	bne.n	800d224 <UART_Start_Receive_IT+0x4c>
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2260      	movs	r2, #96	; 0x60
 800d21e:	497b      	ldr	r1, [pc, #492]	; (800d40c <UART_Start_Receive_IT+0x234>)
 800d220:	5299      	strh	r1, [r3, r2]
 800d222:	e02e      	b.n	800d282 <UART_Start_Receive_IT+0xaa>
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2260      	movs	r2, #96	; 0x60
 800d228:	21ff      	movs	r1, #255	; 0xff
 800d22a:	5299      	strh	r1, [r3, r2]
 800d22c:	e029      	b.n	800d282 <UART_Start_Receive_IT+0xaa>
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	689b      	ldr	r3, [r3, #8]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d10d      	bne.n	800d252 <UART_Start_Receive_IT+0x7a>
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	691b      	ldr	r3, [r3, #16]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d104      	bne.n	800d248 <UART_Start_Receive_IT+0x70>
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2260      	movs	r2, #96	; 0x60
 800d242:	21ff      	movs	r1, #255	; 0xff
 800d244:	5299      	strh	r1, [r3, r2]
 800d246:	e01c      	b.n	800d282 <UART_Start_Receive_IT+0xaa>
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2260      	movs	r2, #96	; 0x60
 800d24c:	217f      	movs	r1, #127	; 0x7f
 800d24e:	5299      	strh	r1, [r3, r2]
 800d250:	e017      	b.n	800d282 <UART_Start_Receive_IT+0xaa>
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	689a      	ldr	r2, [r3, #8]
 800d256:	2380      	movs	r3, #128	; 0x80
 800d258:	055b      	lsls	r3, r3, #21
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d10d      	bne.n	800d27a <UART_Start_Receive_IT+0xa2>
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	691b      	ldr	r3, [r3, #16]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d104      	bne.n	800d270 <UART_Start_Receive_IT+0x98>
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2260      	movs	r2, #96	; 0x60
 800d26a:	217f      	movs	r1, #127	; 0x7f
 800d26c:	5299      	strh	r1, [r3, r2]
 800d26e:	e008      	b.n	800d282 <UART_Start_Receive_IT+0xaa>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2260      	movs	r2, #96	; 0x60
 800d274:	213f      	movs	r1, #63	; 0x3f
 800d276:	5299      	strh	r1, [r3, r2]
 800d278:	e003      	b.n	800d282 <UART_Start_Receive_IT+0xaa>
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2260      	movs	r2, #96	; 0x60
 800d27e:	2100      	movs	r1, #0
 800d280:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2290      	movs	r2, #144	; 0x90
 800d286:	2100      	movs	r1, #0
 800d288:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	228c      	movs	r2, #140	; 0x8c
 800d28e:	2122      	movs	r1, #34	; 0x22
 800d290:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d292:	f3ef 8310 	mrs	r3, PRIMASK
 800d296:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800d298:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d29a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d29c:	2301      	movs	r3, #1
 800d29e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2a2:	f383 8810 	msr	PRIMASK, r3
}
 800d2a6:	46c0      	nop			; (mov r8, r8)
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	689a      	ldr	r2, [r3, #8]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2101      	movs	r1, #1
 800d2b4:	430a      	orrs	r2, r1
 800d2b6:	609a      	str	r2, [r3, #8]
 800d2b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2ba:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2be:	f383 8810 	msr	PRIMASK, r3
}
 800d2c2:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d2c8:	2380      	movs	r3, #128	; 0x80
 800d2ca:	059b      	lsls	r3, r3, #22
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d150      	bne.n	800d372 <UART_Start_Receive_IT+0x19a>
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2268      	movs	r2, #104	; 0x68
 800d2d4:	5a9b      	ldrh	r3, [r3, r2]
 800d2d6:	1dba      	adds	r2, r7, #6
 800d2d8:	8812      	ldrh	r2, [r2, #0]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d349      	bcc.n	800d372 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	689a      	ldr	r2, [r3, #8]
 800d2e2:	2380      	movs	r3, #128	; 0x80
 800d2e4:	015b      	lsls	r3, r3, #5
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d107      	bne.n	800d2fa <UART_Start_Receive_IT+0x122>
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d103      	bne.n	800d2fa <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	4a46      	ldr	r2, [pc, #280]	; (800d410 <UART_Start_Receive_IT+0x238>)
 800d2f6:	675a      	str	r2, [r3, #116]	; 0x74
 800d2f8:	e002      	b.n	800d300 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	4a45      	ldr	r2, [pc, #276]	; (800d414 <UART_Start_Receive_IT+0x23c>)
 800d2fe:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	691b      	ldr	r3, [r3, #16]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d019      	beq.n	800d33c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d308:	f3ef 8310 	mrs	r3, PRIMASK
 800d30c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800d30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d310:	65bb      	str	r3, [r7, #88]	; 0x58
 800d312:	2301      	movs	r3, #1
 800d314:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d318:	f383 8810 	msr	PRIMASK, r3
}
 800d31c:	46c0      	nop			; (mov r8, r8)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	2180      	movs	r1, #128	; 0x80
 800d32a:	0049      	lsls	r1, r1, #1
 800d32c:	430a      	orrs	r2, r1
 800d32e:	601a      	str	r2, [r3, #0]
 800d330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d332:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d336:	f383 8810 	msr	PRIMASK, r3
}
 800d33a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d33c:	f3ef 8310 	mrs	r3, PRIMASK
 800d340:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800d342:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d344:	657b      	str	r3, [r7, #84]	; 0x54
 800d346:	2301      	movs	r3, #1
 800d348:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34c:	f383 8810 	msr	PRIMASK, r3
}
 800d350:	46c0      	nop			; (mov r8, r8)
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	689a      	ldr	r2, [r3, #8]
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2180      	movs	r1, #128	; 0x80
 800d35e:	0549      	lsls	r1, r1, #21
 800d360:	430a      	orrs	r2, r1
 800d362:	609a      	str	r2, [r3, #8]
 800d364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d366:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36a:	f383 8810 	msr	PRIMASK, r3
}
 800d36e:	46c0      	nop			; (mov r8, r8)
 800d370:	e047      	b.n	800d402 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	689a      	ldr	r2, [r3, #8]
 800d376:	2380      	movs	r3, #128	; 0x80
 800d378:	015b      	lsls	r3, r3, #5
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d107      	bne.n	800d38e <UART_Start_Receive_IT+0x1b6>
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	691b      	ldr	r3, [r3, #16]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d103      	bne.n	800d38e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	4a23      	ldr	r2, [pc, #140]	; (800d418 <UART_Start_Receive_IT+0x240>)
 800d38a:	675a      	str	r2, [r3, #116]	; 0x74
 800d38c:	e002      	b.n	800d394 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	4a22      	ldr	r2, [pc, #136]	; (800d41c <UART_Start_Receive_IT+0x244>)
 800d392:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	691b      	ldr	r3, [r3, #16]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d019      	beq.n	800d3d0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d39c:	f3ef 8310 	mrs	r3, PRIMASK
 800d3a0:	61fb      	str	r3, [r7, #28]
  return(result);
 800d3a2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d3a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3aa:	6a3b      	ldr	r3, [r7, #32]
 800d3ac:	f383 8810 	msr	PRIMASK, r3
}
 800d3b0:	46c0      	nop			; (mov r8, r8)
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2190      	movs	r1, #144	; 0x90
 800d3be:	0049      	lsls	r1, r1, #1
 800d3c0:	430a      	orrs	r2, r1
 800d3c2:	601a      	str	r2, [r3, #0]
 800d3c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ca:	f383 8810 	msr	PRIMASK, r3
}
 800d3ce:	e018      	b.n	800d402 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3d0:	f3ef 8310 	mrs	r3, PRIMASK
 800d3d4:	613b      	str	r3, [r7, #16]
  return(result);
 800d3d6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d3d8:	653b      	str	r3, [r7, #80]	; 0x50
 800d3da:	2301      	movs	r3, #1
 800d3dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	f383 8810 	msr	PRIMASK, r3
}
 800d3e4:	46c0      	nop			; (mov r8, r8)
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2120      	movs	r1, #32
 800d3f2:	430a      	orrs	r2, r1
 800d3f4:	601a      	str	r2, [r3, #0]
 800d3f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	f383 8810 	msr	PRIMASK, r3
}
 800d400:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800d402:	2300      	movs	r3, #0
}
 800d404:	0018      	movs	r0, r3
 800d406:	46bd      	mov	sp, r7
 800d408:	b018      	add	sp, #96	; 0x60
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	000001ff 	.word	0x000001ff
 800d410:	0800db49 	.word	0x0800db49
 800d414:	0800d85d 	.word	0x0800d85d
 800d418:	0800d6e9 	.word	0x0800d6e9
 800d41c:	0800d575 	.word	0x0800d575

0800d420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b08e      	sub	sp, #56	; 0x38
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d428:	f3ef 8310 	mrs	r3, PRIMASK
 800d42c:	617b      	str	r3, [r7, #20]
  return(result);
 800d42e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d430:	637b      	str	r3, [r7, #52]	; 0x34
 800d432:	2301      	movs	r3, #1
 800d434:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	f383 8810 	msr	PRIMASK, r3
}
 800d43c:	46c0      	nop			; (mov r8, r8)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4926      	ldr	r1, [pc, #152]	; (800d4e4 <UART_EndRxTransfer+0xc4>)
 800d44a:	400a      	ands	r2, r1
 800d44c:	601a      	str	r2, [r3, #0]
 800d44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d450:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	f383 8810 	msr	PRIMASK, r3
}
 800d458:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d45a:	f3ef 8310 	mrs	r3, PRIMASK
 800d45e:	623b      	str	r3, [r7, #32]
  return(result);
 800d460:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d462:	633b      	str	r3, [r7, #48]	; 0x30
 800d464:	2301      	movs	r3, #1
 800d466:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46a:	f383 8810 	msr	PRIMASK, r3
}
 800d46e:	46c0      	nop			; (mov r8, r8)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	689a      	ldr	r2, [r3, #8]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	491b      	ldr	r1, [pc, #108]	; (800d4e8 <UART_EndRxTransfer+0xc8>)
 800d47c:	400a      	ands	r2, r1
 800d47e:	609a      	str	r2, [r3, #8]
 800d480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d482:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d486:	f383 8810 	msr	PRIMASK, r3
}
 800d48a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d490:	2b01      	cmp	r3, #1
 800d492:	d118      	bne.n	800d4c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d494:	f3ef 8310 	mrs	r3, PRIMASK
 800d498:	60bb      	str	r3, [r7, #8]
  return(result);
 800d49a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d49c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d49e:	2301      	movs	r3, #1
 800d4a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f383 8810 	msr	PRIMASK, r3
}
 800d4a8:	46c0      	nop			; (mov r8, r8)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	2110      	movs	r1, #16
 800d4b6:	438a      	bics	r2, r1
 800d4b8:	601a      	str	r2, [r3, #0]
 800d4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	f383 8810 	msr	PRIMASK, r3
}
 800d4c4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	228c      	movs	r2, #140	; 0x8c
 800d4ca:	2120      	movs	r1, #32
 800d4cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d4da:	46c0      	nop			; (mov r8, r8)
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	b00e      	add	sp, #56	; 0x38
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	46c0      	nop			; (mov r8, r8)
 800d4e4:	fffffedf 	.word	0xfffffedf
 800d4e8:	effffffe 	.word	0xeffffffe

0800d4ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	225e      	movs	r2, #94	; 0x5e
 800d4fe:	2100      	movs	r1, #0
 800d500:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2256      	movs	r2, #86	; 0x56
 800d506:	2100      	movs	r1, #0
 800d508:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	0018      	movs	r0, r3
 800d50e:	f7f6 ffc9 	bl	80044a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d512:	46c0      	nop			; (mov r8, r8)
 800d514:	46bd      	mov	sp, r7
 800d516:	b004      	add	sp, #16
 800d518:	bd80      	pop	{r7, pc}

0800d51a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b086      	sub	sp, #24
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d522:	f3ef 8310 	mrs	r3, PRIMASK
 800d526:	60bb      	str	r3, [r7, #8]
  return(result);
 800d528:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d52a:	617b      	str	r3, [r7, #20]
 800d52c:	2301      	movs	r3, #1
 800d52e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f383 8810 	msr	PRIMASK, r3
}
 800d536:	46c0      	nop			; (mov r8, r8)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2140      	movs	r1, #64	; 0x40
 800d544:	438a      	bics	r2, r1
 800d546:	601a      	str	r2, [r3, #0]
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	f383 8810 	msr	PRIMASK, r3
}
 800d552:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2288      	movs	r2, #136	; 0x88
 800d558:	2120      	movs	r1, #32
 800d55a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2200      	movs	r2, #0
 800d560:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	0018      	movs	r0, r3
 800d566:	f7ff fab5 	bl	800cad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d56a:	46c0      	nop			; (mov r8, r8)
 800d56c:	46bd      	mov	sp, r7
 800d56e:	b006      	add	sp, #24
 800d570:	bd80      	pop	{r7, pc}
	...

0800d574 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b090      	sub	sp, #64	; 0x40
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d57c:	203e      	movs	r0, #62	; 0x3e
 800d57e:	183b      	adds	r3, r7, r0
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	2160      	movs	r1, #96	; 0x60
 800d584:	5a52      	ldrh	r2, [r2, r1]
 800d586:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	228c      	movs	r2, #140	; 0x8c
 800d58c:	589b      	ldr	r3, [r3, r2]
 800d58e:	2b22      	cmp	r3, #34	; 0x22
 800d590:	d000      	beq.n	800d594 <UART_RxISR_8BIT+0x20>
 800d592:	e09a      	b.n	800d6ca <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d59a:	213c      	movs	r1, #60	; 0x3c
 800d59c:	187b      	adds	r3, r7, r1
 800d59e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d5a0:	187b      	adds	r3, r7, r1
 800d5a2:	881b      	ldrh	r3, [r3, #0]
 800d5a4:	b2da      	uxtb	r2, r3
 800d5a6:	183b      	adds	r3, r7, r0
 800d5a8:	881b      	ldrh	r3, [r3, #0]
 800d5aa:	b2d9      	uxtb	r1, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5b0:	400a      	ands	r2, r1
 800d5b2:	b2d2      	uxtb	r2, r2
 800d5b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5ba:	1c5a      	adds	r2, r3, #1
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	225e      	movs	r2, #94	; 0x5e
 800d5c4:	5a9b      	ldrh	r3, [r3, r2]
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	3b01      	subs	r3, #1
 800d5ca:	b299      	uxth	r1, r3
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	225e      	movs	r2, #94	; 0x5e
 800d5d0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	225e      	movs	r2, #94	; 0x5e
 800d5d6:	5a9b      	ldrh	r3, [r3, r2]
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d000      	beq.n	800d5e0 <UART_RxISR_8BIT+0x6c>
 800d5de:	e07c      	b.n	800d6da <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5e0:	f3ef 8310 	mrs	r3, PRIMASK
 800d5e4:	61bb      	str	r3, [r7, #24]
  return(result);
 800d5e6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5e8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5ee:	69fb      	ldr	r3, [r7, #28]
 800d5f0:	f383 8810 	msr	PRIMASK, r3
}
 800d5f4:	46c0      	nop			; (mov r8, r8)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4938      	ldr	r1, [pc, #224]	; (800d6e4 <UART_RxISR_8BIT+0x170>)
 800d602:	400a      	ands	r2, r1
 800d604:	601a      	str	r2, [r3, #0]
 800d606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d608:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d60a:	6a3b      	ldr	r3, [r7, #32]
 800d60c:	f383 8810 	msr	PRIMASK, r3
}
 800d610:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d612:	f3ef 8310 	mrs	r3, PRIMASK
 800d616:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d61a:	637b      	str	r3, [r7, #52]	; 0x34
 800d61c:	2301      	movs	r3, #1
 800d61e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d622:	f383 8810 	msr	PRIMASK, r3
}
 800d626:	46c0      	nop			; (mov r8, r8)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	689a      	ldr	r2, [r3, #8]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2101      	movs	r1, #1
 800d634:	438a      	bics	r2, r1
 800d636:	609a      	str	r2, [r3, #8]
 800d638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d63a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63e:	f383 8810 	msr	PRIMASK, r3
}
 800d642:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	228c      	movs	r2, #140	; 0x8c
 800d648:	2120      	movs	r1, #32
 800d64a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d12f      	bne.n	800d6c0 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2200      	movs	r2, #0
 800d664:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d666:	f3ef 8310 	mrs	r3, PRIMASK
 800d66a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d66c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d66e:	633b      	str	r3, [r7, #48]	; 0x30
 800d670:	2301      	movs	r3, #1
 800d672:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	f383 8810 	msr	PRIMASK, r3
}
 800d67a:	46c0      	nop			; (mov r8, r8)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2110      	movs	r1, #16
 800d688:	438a      	bics	r2, r1
 800d68a:	601a      	str	r2, [r3, #0]
 800d68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	f383 8810 	msr	PRIMASK, r3
}
 800d696:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	69db      	ldr	r3, [r3, #28]
 800d69e:	2210      	movs	r2, #16
 800d6a0:	4013      	ands	r3, r2
 800d6a2:	2b10      	cmp	r3, #16
 800d6a4:	d103      	bne.n	800d6ae <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2210      	movs	r2, #16
 800d6ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	225c      	movs	r2, #92	; 0x5c
 800d6b2:	5a9a      	ldrh	r2, [r3, r2]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	0011      	movs	r1, r2
 800d6b8:	0018      	movs	r0, r3
 800d6ba:	f7ff fa13 	bl	800cae4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d6be:	e00c      	b.n	800d6da <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	0018      	movs	r0, r3
 800d6c4:	f7f6 ff26 	bl	8004514 <HAL_UART_RxCpltCallback>
}
 800d6c8:	e007      	b.n	800d6da <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	699a      	ldr	r2, [r3, #24]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2108      	movs	r1, #8
 800d6d6:	430a      	orrs	r2, r1
 800d6d8:	619a      	str	r2, [r3, #24]
}
 800d6da:	46c0      	nop			; (mov r8, r8)
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	b010      	add	sp, #64	; 0x40
 800d6e0:	bd80      	pop	{r7, pc}
 800d6e2:	46c0      	nop			; (mov r8, r8)
 800d6e4:	fffffedf 	.word	0xfffffedf

0800d6e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b090      	sub	sp, #64	; 0x40
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d6f0:	203e      	movs	r0, #62	; 0x3e
 800d6f2:	183b      	adds	r3, r7, r0
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	2160      	movs	r1, #96	; 0x60
 800d6f8:	5a52      	ldrh	r2, [r2, r1]
 800d6fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	228c      	movs	r2, #140	; 0x8c
 800d700:	589b      	ldr	r3, [r3, r2]
 800d702:	2b22      	cmp	r3, #34	; 0x22
 800d704:	d000      	beq.n	800d708 <UART_RxISR_16BIT+0x20>
 800d706:	e09a      	b.n	800d83e <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d70e:	213c      	movs	r1, #60	; 0x3c
 800d710:	187b      	adds	r3, r7, r1
 800d712:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d718:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800d71a:	187b      	adds	r3, r7, r1
 800d71c:	183a      	adds	r2, r7, r0
 800d71e:	881b      	ldrh	r3, [r3, #0]
 800d720:	8812      	ldrh	r2, [r2, #0]
 800d722:	4013      	ands	r3, r2
 800d724:	b29a      	uxth	r2, r3
 800d726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d728:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d72e:	1c9a      	adds	r2, r3, #2
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	225e      	movs	r2, #94	; 0x5e
 800d738:	5a9b      	ldrh	r3, [r3, r2]
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	3b01      	subs	r3, #1
 800d73e:	b299      	uxth	r1, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	225e      	movs	r2, #94	; 0x5e
 800d744:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	225e      	movs	r2, #94	; 0x5e
 800d74a:	5a9b      	ldrh	r3, [r3, r2]
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d000      	beq.n	800d754 <UART_RxISR_16BIT+0x6c>
 800d752:	e07c      	b.n	800d84e <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d754:	f3ef 8310 	mrs	r3, PRIMASK
 800d758:	617b      	str	r3, [r7, #20]
  return(result);
 800d75a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d75c:	637b      	str	r3, [r7, #52]	; 0x34
 800d75e:	2301      	movs	r3, #1
 800d760:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	f383 8810 	msr	PRIMASK, r3
}
 800d768:	46c0      	nop			; (mov r8, r8)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4938      	ldr	r1, [pc, #224]	; (800d858 <UART_RxISR_16BIT+0x170>)
 800d776:	400a      	ands	r2, r1
 800d778:	601a      	str	r2, [r3, #0]
 800d77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d77c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	f383 8810 	msr	PRIMASK, r3
}
 800d784:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d786:	f3ef 8310 	mrs	r3, PRIMASK
 800d78a:	623b      	str	r3, [r7, #32]
  return(result);
 800d78c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d78e:	633b      	str	r3, [r7, #48]	; 0x30
 800d790:	2301      	movs	r3, #1
 800d792:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d796:	f383 8810 	msr	PRIMASK, r3
}
 800d79a:	46c0      	nop			; (mov r8, r8)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	689a      	ldr	r2, [r3, #8]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2101      	movs	r1, #1
 800d7a8:	438a      	bics	r2, r1
 800d7aa:	609a      	str	r2, [r3, #8]
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b2:	f383 8810 	msr	PRIMASK, r3
}
 800d7b6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	228c      	movs	r2, #140	; 0x8c
 800d7bc:	2120      	movs	r1, #32
 800d7be:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d12f      	bne.n	800d834 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7da:	f3ef 8310 	mrs	r3, PRIMASK
 800d7de:	60bb      	str	r3, [r7, #8]
  return(result);
 800d7e0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f383 8810 	msr	PRIMASK, r3
}
 800d7ee:	46c0      	nop			; (mov r8, r8)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2110      	movs	r1, #16
 800d7fc:	438a      	bics	r2, r1
 800d7fe:	601a      	str	r2, [r3, #0]
 800d800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d802:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	f383 8810 	msr	PRIMASK, r3
}
 800d80a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	69db      	ldr	r3, [r3, #28]
 800d812:	2210      	movs	r2, #16
 800d814:	4013      	ands	r3, r2
 800d816:	2b10      	cmp	r3, #16
 800d818:	d103      	bne.n	800d822 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2210      	movs	r2, #16
 800d820:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	225c      	movs	r2, #92	; 0x5c
 800d826:	5a9a      	ldrh	r2, [r3, r2]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	0011      	movs	r1, r2
 800d82c:	0018      	movs	r0, r3
 800d82e:	f7ff f959 	bl	800cae4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d832:	e00c      	b.n	800d84e <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	0018      	movs	r0, r3
 800d838:	f7f6 fe6c 	bl	8004514 <HAL_UART_RxCpltCallback>
}
 800d83c:	e007      	b.n	800d84e <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	699a      	ldr	r2, [r3, #24]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2108      	movs	r1, #8
 800d84a:	430a      	orrs	r2, r1
 800d84c:	619a      	str	r2, [r3, #24]
}
 800d84e:	46c0      	nop			; (mov r8, r8)
 800d850:	46bd      	mov	sp, r7
 800d852:	b010      	add	sp, #64	; 0x40
 800d854:	bd80      	pop	{r7, pc}
 800d856:	46c0      	nop			; (mov r8, r8)
 800d858:	fffffedf 	.word	0xfffffedf

0800d85c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b09c      	sub	sp, #112	; 0x70
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d864:	236a      	movs	r3, #106	; 0x6a
 800d866:	18fb      	adds	r3, r7, r3
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	2160      	movs	r1, #96	; 0x60
 800d86c:	5a52      	ldrh	r2, [r2, r1]
 800d86e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	69db      	ldr	r3, [r3, #28]
 800d876:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	228c      	movs	r2, #140	; 0x8c
 800d88c:	589b      	ldr	r3, [r3, r2]
 800d88e:	2b22      	cmp	r3, #34	; 0x22
 800d890:	d000      	beq.n	800d894 <UART_RxISR_8BIT_FIFOEN+0x38>
 800d892:	e144      	b.n	800db1e <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d894:	235e      	movs	r3, #94	; 0x5e
 800d896:	18fb      	adds	r3, r7, r3
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	2168      	movs	r1, #104	; 0x68
 800d89c:	5a52      	ldrh	r2, [r2, r1]
 800d89e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d8a0:	e0eb      	b.n	800da7a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8a8:	215c      	movs	r1, #92	; 0x5c
 800d8aa:	187b      	adds	r3, r7, r1
 800d8ac:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d8ae:	187b      	adds	r3, r7, r1
 800d8b0:	881b      	ldrh	r3, [r3, #0]
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	236a      	movs	r3, #106	; 0x6a
 800d8b6:	18fb      	adds	r3, r7, r3
 800d8b8:	881b      	ldrh	r3, [r3, #0]
 800d8ba:	b2d9      	uxtb	r1, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8c0:	400a      	ands	r2, r1
 800d8c2:	b2d2      	uxtb	r2, r2
 800d8c4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8ca:	1c5a      	adds	r2, r3, #1
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	225e      	movs	r2, #94	; 0x5e
 800d8d4:	5a9b      	ldrh	r3, [r3, r2]
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	b299      	uxth	r1, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	225e      	movs	r2, #94	; 0x5e
 800d8e0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	69db      	ldr	r3, [r3, #28]
 800d8e8:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d8ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8ec:	2207      	movs	r2, #7
 800d8ee:	4013      	ands	r3, r2
 800d8f0:	d049      	beq.n	800d986 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d8f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	4013      	ands	r3, r2
 800d8f8:	d010      	beq.n	800d91c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800d8fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d8fc:	2380      	movs	r3, #128	; 0x80
 800d8fe:	005b      	lsls	r3, r3, #1
 800d900:	4013      	ands	r3, r2
 800d902:	d00b      	beq.n	800d91c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2201      	movs	r2, #1
 800d90a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2290      	movs	r2, #144	; 0x90
 800d910:	589b      	ldr	r3, [r3, r2]
 800d912:	2201      	movs	r2, #1
 800d914:	431a      	orrs	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2190      	movs	r1, #144	; 0x90
 800d91a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d91c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d91e:	2202      	movs	r2, #2
 800d920:	4013      	ands	r3, r2
 800d922:	d00f      	beq.n	800d944 <UART_RxISR_8BIT_FIFOEN+0xe8>
 800d924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d926:	2201      	movs	r2, #1
 800d928:	4013      	ands	r3, r2
 800d92a:	d00b      	beq.n	800d944 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2202      	movs	r2, #2
 800d932:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2290      	movs	r2, #144	; 0x90
 800d938:	589b      	ldr	r3, [r3, r2]
 800d93a:	2204      	movs	r2, #4
 800d93c:	431a      	orrs	r2, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2190      	movs	r1, #144	; 0x90
 800d942:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d946:	2204      	movs	r2, #4
 800d948:	4013      	ands	r3, r2
 800d94a:	d00f      	beq.n	800d96c <UART_RxISR_8BIT_FIFOEN+0x110>
 800d94c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d94e:	2201      	movs	r2, #1
 800d950:	4013      	ands	r3, r2
 800d952:	d00b      	beq.n	800d96c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2204      	movs	r2, #4
 800d95a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2290      	movs	r2, #144	; 0x90
 800d960:	589b      	ldr	r3, [r3, r2]
 800d962:	2202      	movs	r2, #2
 800d964:	431a      	orrs	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2190      	movs	r1, #144	; 0x90
 800d96a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2290      	movs	r2, #144	; 0x90
 800d970:	589b      	ldr	r3, [r3, r2]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d007      	beq.n	800d986 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	0018      	movs	r0, r3
 800d97a:	f7f6 fd93 	bl	80044a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2290      	movs	r2, #144	; 0x90
 800d982:	2100      	movs	r1, #0
 800d984:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	225e      	movs	r2, #94	; 0x5e
 800d98a:	5a9b      	ldrh	r3, [r3, r2]
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d173      	bne.n	800da7a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d992:	f3ef 8310 	mrs	r3, PRIMASK
 800d996:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800d998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d99a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d99c:	2301      	movs	r3, #1
 800d99e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a2:	f383 8810 	msr	PRIMASK, r3
}
 800d9a6:	46c0      	nop			; (mov r8, r8)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4961      	ldr	r1, [pc, #388]	; (800db38 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800d9b4:	400a      	ands	r2, r1
 800d9b6:	601a      	str	r2, [r3, #0]
 800d9b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9be:	f383 8810 	msr	PRIMASK, r3
}
 800d9c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9c4:	f3ef 8310 	mrs	r3, PRIMASK
 800d9c8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800d9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9cc:	657b      	str	r3, [r7, #84]	; 0x54
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9d4:	f383 8810 	msr	PRIMASK, r3
}
 800d9d8:	46c0      	nop			; (mov r8, r8)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	689a      	ldr	r2, [r3, #8]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4955      	ldr	r1, [pc, #340]	; (800db3c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800d9e6:	400a      	ands	r2, r1
 800d9e8:	609a      	str	r2, [r3, #8]
 800d9ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9ec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9f0:	f383 8810 	msr	PRIMASK, r3
}
 800d9f4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	228c      	movs	r2, #140	; 0x8c
 800d9fa:	2120      	movs	r1, #32
 800d9fc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2200      	movs	r2, #0
 800da08:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d12f      	bne.n	800da72 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da18:	f3ef 8310 	mrs	r3, PRIMASK
 800da1c:	623b      	str	r3, [r7, #32]
  return(result);
 800da1e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da20:	653b      	str	r3, [r7, #80]	; 0x50
 800da22:	2301      	movs	r3, #1
 800da24:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	f383 8810 	msr	PRIMASK, r3
}
 800da2c:	46c0      	nop			; (mov r8, r8)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	2110      	movs	r1, #16
 800da3a:	438a      	bics	r2, r1
 800da3c:	601a      	str	r2, [r3, #0]
 800da3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da40:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da44:	f383 8810 	msr	PRIMASK, r3
}
 800da48:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	69db      	ldr	r3, [r3, #28]
 800da50:	2210      	movs	r2, #16
 800da52:	4013      	ands	r3, r2
 800da54:	2b10      	cmp	r3, #16
 800da56:	d103      	bne.n	800da60 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2210      	movs	r2, #16
 800da5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	225c      	movs	r2, #92	; 0x5c
 800da64:	5a9a      	ldrh	r2, [r3, r2]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	0011      	movs	r1, r2
 800da6a:	0018      	movs	r0, r3
 800da6c:	f7ff f83a 	bl	800cae4 <HAL_UARTEx_RxEventCallback>
 800da70:	e003      	b.n	800da7a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	0018      	movs	r0, r3
 800da76:	f7f6 fd4d 	bl	8004514 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800da7a:	235e      	movs	r3, #94	; 0x5e
 800da7c:	18fb      	adds	r3, r7, r3
 800da7e:	881b      	ldrh	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d004      	beq.n	800da8e <UART_RxISR_8BIT_FIFOEN+0x232>
 800da84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da86:	2220      	movs	r2, #32
 800da88:	4013      	ands	r3, r2
 800da8a:	d000      	beq.n	800da8e <UART_RxISR_8BIT_FIFOEN+0x232>
 800da8c:	e709      	b.n	800d8a2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800da8e:	204e      	movs	r0, #78	; 0x4e
 800da90:	183b      	adds	r3, r7, r0
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	215e      	movs	r1, #94	; 0x5e
 800da96:	5a52      	ldrh	r2, [r2, r1]
 800da98:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800da9a:	0001      	movs	r1, r0
 800da9c:	187b      	adds	r3, r7, r1
 800da9e:	881b      	ldrh	r3, [r3, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d044      	beq.n	800db2e <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2268      	movs	r2, #104	; 0x68
 800daa8:	5a9b      	ldrh	r3, [r3, r2]
 800daaa:	187a      	adds	r2, r7, r1
 800daac:	8812      	ldrh	r2, [r2, #0]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d23d      	bcs.n	800db2e <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dab2:	f3ef 8310 	mrs	r3, PRIMASK
 800dab6:	60bb      	str	r3, [r7, #8]
  return(result);
 800dab8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800daba:	64bb      	str	r3, [r7, #72]	; 0x48
 800dabc:	2301      	movs	r3, #1
 800dabe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f383 8810 	msr	PRIMASK, r3
}
 800dac6:	46c0      	nop			; (mov r8, r8)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	689a      	ldr	r2, [r3, #8]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	491b      	ldr	r1, [pc, #108]	; (800db40 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 800dad4:	400a      	ands	r2, r1
 800dad6:	609a      	str	r2, [r3, #8]
 800dad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dada:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	f383 8810 	msr	PRIMASK, r3
}
 800dae2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	4a17      	ldr	r2, [pc, #92]	; (800db44 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 800dae8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800daea:	f3ef 8310 	mrs	r3, PRIMASK
 800daee:	617b      	str	r3, [r7, #20]
  return(result);
 800daf0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800daf2:	647b      	str	r3, [r7, #68]	; 0x44
 800daf4:	2301      	movs	r3, #1
 800daf6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daf8:	69bb      	ldr	r3, [r7, #24]
 800dafa:	f383 8810 	msr	PRIMASK, r3
}
 800dafe:	46c0      	nop			; (mov r8, r8)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2120      	movs	r1, #32
 800db0c:	430a      	orrs	r2, r1
 800db0e:	601a      	str	r2, [r3, #0]
 800db10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	f383 8810 	msr	PRIMASK, r3
}
 800db1a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800db1c:	e007      	b.n	800db2e <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	699a      	ldr	r2, [r3, #24]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2108      	movs	r1, #8
 800db2a:	430a      	orrs	r2, r1
 800db2c:	619a      	str	r2, [r3, #24]
}
 800db2e:	46c0      	nop			; (mov r8, r8)
 800db30:	46bd      	mov	sp, r7
 800db32:	b01c      	add	sp, #112	; 0x70
 800db34:	bd80      	pop	{r7, pc}
 800db36:	46c0      	nop			; (mov r8, r8)
 800db38:	fffffeff 	.word	0xfffffeff
 800db3c:	effffffe 	.word	0xeffffffe
 800db40:	efffffff 	.word	0xefffffff
 800db44:	0800d575 	.word	0x0800d575

0800db48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b09e      	sub	sp, #120	; 0x78
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800db50:	2372      	movs	r3, #114	; 0x72
 800db52:	18fb      	adds	r3, r7, r3
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	2160      	movs	r1, #96	; 0x60
 800db58:	5a52      	ldrh	r2, [r2, r1]
 800db5a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	69db      	ldr	r3, [r3, #28]
 800db62:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	689b      	ldr	r3, [r3, #8]
 800db72:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	228c      	movs	r2, #140	; 0x8c
 800db78:	589b      	ldr	r3, [r3, r2]
 800db7a:	2b22      	cmp	r3, #34	; 0x22
 800db7c:	d000      	beq.n	800db80 <UART_RxISR_16BIT_FIFOEN+0x38>
 800db7e:	e144      	b.n	800de0a <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800db80:	2366      	movs	r3, #102	; 0x66
 800db82:	18fb      	adds	r3, r7, r3
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	2168      	movs	r1, #104	; 0x68
 800db88:	5a52      	ldrh	r2, [r2, r1]
 800db8a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800db8c:	e0eb      	b.n	800dd66 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db94:	2164      	movs	r1, #100	; 0x64
 800db96:	187b      	adds	r3, r7, r1
 800db98:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db9e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800dba0:	187b      	adds	r3, r7, r1
 800dba2:	2272      	movs	r2, #114	; 0x72
 800dba4:	18ba      	adds	r2, r7, r2
 800dba6:	881b      	ldrh	r3, [r3, #0]
 800dba8:	8812      	ldrh	r2, [r2, #0]
 800dbaa:	4013      	ands	r3, r2
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbb6:	1c9a      	adds	r2, r3, #2
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	225e      	movs	r2, #94	; 0x5e
 800dbc0:	5a9b      	ldrh	r3, [r3, r2]
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	3b01      	subs	r3, #1
 800dbc6:	b299      	uxth	r1, r3
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	225e      	movs	r2, #94	; 0x5e
 800dbcc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	69db      	ldr	r3, [r3, #28]
 800dbd4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dbd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbd8:	2207      	movs	r2, #7
 800dbda:	4013      	ands	r3, r2
 800dbdc:	d049      	beq.n	800dc72 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dbde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	4013      	ands	r3, r2
 800dbe4:	d010      	beq.n	800dc08 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800dbe6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dbe8:	2380      	movs	r3, #128	; 0x80
 800dbea:	005b      	lsls	r3, r3, #1
 800dbec:	4013      	ands	r3, r2
 800dbee:	d00b      	beq.n	800dc08 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2290      	movs	r2, #144	; 0x90
 800dbfc:	589b      	ldr	r3, [r3, r2]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	431a      	orrs	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2190      	movs	r1, #144	; 0x90
 800dc06:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc0a:	2202      	movs	r2, #2
 800dc0c:	4013      	ands	r3, r2
 800dc0e:	d00f      	beq.n	800dc30 <UART_RxISR_16BIT_FIFOEN+0xe8>
 800dc10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc12:	2201      	movs	r2, #1
 800dc14:	4013      	ands	r3, r2
 800dc16:	d00b      	beq.n	800dc30 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2202      	movs	r2, #2
 800dc1e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2290      	movs	r2, #144	; 0x90
 800dc24:	589b      	ldr	r3, [r3, r2]
 800dc26:	2204      	movs	r2, #4
 800dc28:	431a      	orrs	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2190      	movs	r1, #144	; 0x90
 800dc2e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dc30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc32:	2204      	movs	r2, #4
 800dc34:	4013      	ands	r3, r2
 800dc36:	d00f      	beq.n	800dc58 <UART_RxISR_16BIT_FIFOEN+0x110>
 800dc38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	4013      	ands	r3, r2
 800dc3e:	d00b      	beq.n	800dc58 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	2204      	movs	r2, #4
 800dc46:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2290      	movs	r2, #144	; 0x90
 800dc4c:	589b      	ldr	r3, [r3, r2]
 800dc4e:	2202      	movs	r2, #2
 800dc50:	431a      	orrs	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2190      	movs	r1, #144	; 0x90
 800dc56:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2290      	movs	r2, #144	; 0x90
 800dc5c:	589b      	ldr	r3, [r3, r2]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d007      	beq.n	800dc72 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	0018      	movs	r0, r3
 800dc66:	f7f6 fc1d 	bl	80044a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2290      	movs	r2, #144	; 0x90
 800dc6e:	2100      	movs	r1, #0
 800dc70:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	225e      	movs	r2, #94	; 0x5e
 800dc76:	5a9b      	ldrh	r3, [r3, r2]
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d173      	bne.n	800dd66 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc7e:	f3ef 8310 	mrs	r3, PRIMASK
 800dc82:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800dc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc88:	2301      	movs	r3, #1
 800dc8a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc8e:	f383 8810 	msr	PRIMASK, r3
}
 800dc92:	46c0      	nop			; (mov r8, r8)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4961      	ldr	r1, [pc, #388]	; (800de24 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800dca0:	400a      	ands	r2, r1
 800dca2:	601a      	str	r2, [r3, #0]
 800dca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dca6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcaa:	f383 8810 	msr	PRIMASK, r3
}
 800dcae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcb0:	f3ef 8310 	mrs	r3, PRIMASK
 800dcb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800dcb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dcb8:	65bb      	str	r3, [r7, #88]	; 0x58
 800dcba:	2301      	movs	r3, #1
 800dcbc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcc0:	f383 8810 	msr	PRIMASK, r3
}
 800dcc4:	46c0      	nop			; (mov r8, r8)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	689a      	ldr	r2, [r3, #8]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4955      	ldr	r1, [pc, #340]	; (800de28 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800dcd2:	400a      	ands	r2, r1
 800dcd4:	609a      	str	r2, [r3, #8]
 800dcd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcd8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcdc:	f383 8810 	msr	PRIMASK, r3
}
 800dce0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	228c      	movs	r2, #140	; 0x8c
 800dce6:	2120      	movs	r1, #32
 800dce8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2200      	movs	r2, #0
 800dcee:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d12f      	bne.n	800dd5e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd04:	f3ef 8310 	mrs	r3, PRIMASK
 800dd08:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd0c:	657b      	str	r3, [r7, #84]	; 0x54
 800dd0e:	2301      	movs	r3, #1
 800dd10:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd14:	f383 8810 	msr	PRIMASK, r3
}
 800dd18:	46c0      	nop			; (mov r8, r8)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2110      	movs	r1, #16
 800dd26:	438a      	bics	r2, r1
 800dd28:	601a      	str	r2, [r3, #0]
 800dd2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd30:	f383 8810 	msr	PRIMASK, r3
}
 800dd34:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	69db      	ldr	r3, [r3, #28]
 800dd3c:	2210      	movs	r2, #16
 800dd3e:	4013      	ands	r3, r2
 800dd40:	2b10      	cmp	r3, #16
 800dd42:	d103      	bne.n	800dd4c <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	2210      	movs	r2, #16
 800dd4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	225c      	movs	r2, #92	; 0x5c
 800dd50:	5a9a      	ldrh	r2, [r3, r2]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	0011      	movs	r1, r2
 800dd56:	0018      	movs	r0, r3
 800dd58:	f7fe fec4 	bl	800cae4 <HAL_UARTEx_RxEventCallback>
 800dd5c:	e003      	b.n	800dd66 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	0018      	movs	r0, r3
 800dd62:	f7f6 fbd7 	bl	8004514 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dd66:	2366      	movs	r3, #102	; 0x66
 800dd68:	18fb      	adds	r3, r7, r3
 800dd6a:	881b      	ldrh	r3, [r3, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d004      	beq.n	800dd7a <UART_RxISR_16BIT_FIFOEN+0x232>
 800dd70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd72:	2220      	movs	r2, #32
 800dd74:	4013      	ands	r3, r2
 800dd76:	d000      	beq.n	800dd7a <UART_RxISR_16BIT_FIFOEN+0x232>
 800dd78:	e709      	b.n	800db8e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dd7a:	2052      	movs	r0, #82	; 0x52
 800dd7c:	183b      	adds	r3, r7, r0
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	215e      	movs	r1, #94	; 0x5e
 800dd82:	5a52      	ldrh	r2, [r2, r1]
 800dd84:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dd86:	0001      	movs	r1, r0
 800dd88:	187b      	adds	r3, r7, r1
 800dd8a:	881b      	ldrh	r3, [r3, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d044      	beq.n	800de1a <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2268      	movs	r2, #104	; 0x68
 800dd94:	5a9b      	ldrh	r3, [r3, r2]
 800dd96:	187a      	adds	r2, r7, r1
 800dd98:	8812      	ldrh	r2, [r2, #0]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d23d      	bcs.n	800de1a <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd9e:	f3ef 8310 	mrs	r3, PRIMASK
 800dda2:	60fb      	str	r3, [r7, #12]
  return(result);
 800dda4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dda6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dda8:	2301      	movs	r3, #1
 800ddaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	f383 8810 	msr	PRIMASK, r3
}
 800ddb2:	46c0      	nop			; (mov r8, r8)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	689a      	ldr	r2, [r3, #8]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	491b      	ldr	r1, [pc, #108]	; (800de2c <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800ddc0:	400a      	ands	r2, r1
 800ddc2:	609a      	str	r2, [r3, #8]
 800ddc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	f383 8810 	msr	PRIMASK, r3
}
 800ddce:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	4a17      	ldr	r2, [pc, #92]	; (800de30 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800ddd4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ddd6:	f3ef 8310 	mrs	r3, PRIMASK
 800ddda:	61bb      	str	r3, [r7, #24]
  return(result);
 800dddc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ddde:	64bb      	str	r3, [r7, #72]	; 0x48
 800dde0:	2301      	movs	r3, #1
 800dde2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	f383 8810 	msr	PRIMASK, r3
}
 800ddea:	46c0      	nop			; (mov r8, r8)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	2120      	movs	r1, #32
 800ddf8:	430a      	orrs	r2, r1
 800ddfa:	601a      	str	r2, [r3, #0]
 800ddfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de00:	6a3b      	ldr	r3, [r7, #32]
 800de02:	f383 8810 	msr	PRIMASK, r3
}
 800de06:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800de08:	e007      	b.n	800de1a <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	699a      	ldr	r2, [r3, #24]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	2108      	movs	r1, #8
 800de16:	430a      	orrs	r2, r1
 800de18:	619a      	str	r2, [r3, #24]
}
 800de1a:	46c0      	nop			; (mov r8, r8)
 800de1c:	46bd      	mov	sp, r7
 800de1e:	b01e      	add	sp, #120	; 0x78
 800de20:	bd80      	pop	{r7, pc}
 800de22:	46c0      	nop			; (mov r8, r8)
 800de24:	fffffeff 	.word	0xfffffeff
 800de28:	effffffe 	.word	0xeffffffe
 800de2c:	efffffff 	.word	0xefffffff
 800de30:	0800d6e9 	.word	0x0800d6e9

0800de34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800de3c:	46c0      	nop			; (mov r8, r8)
 800de3e:	46bd      	mov	sp, r7
 800de40:	b002      	add	sp, #8
 800de42:	bd80      	pop	{r7, pc}

0800de44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800de4c:	46c0      	nop			; (mov r8, r8)
 800de4e:	46bd      	mov	sp, r7
 800de50:	b002      	add	sp, #8
 800de52:	bd80      	pop	{r7, pc}

0800de54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800de5c:	46c0      	nop			; (mov r8, r8)
 800de5e:	46bd      	mov	sp, r7
 800de60:	b002      	add	sp, #8
 800de62:	bd80      	pop	{r7, pc}

0800de64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2284      	movs	r2, #132	; 0x84
 800de70:	5c9b      	ldrb	r3, [r3, r2]
 800de72:	2b01      	cmp	r3, #1
 800de74:	d101      	bne.n	800de7a <HAL_UARTEx_DisableFifoMode+0x16>
 800de76:	2302      	movs	r3, #2
 800de78:	e027      	b.n	800deca <HAL_UARTEx_DisableFifoMode+0x66>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2284      	movs	r2, #132	; 0x84
 800de7e:	2101      	movs	r1, #1
 800de80:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2288      	movs	r2, #136	; 0x88
 800de86:	2124      	movs	r1, #36	; 0x24
 800de88:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2101      	movs	r1, #1
 800de9e:	438a      	bics	r2, r1
 800dea0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	4a0b      	ldr	r2, [pc, #44]	; (800ded4 <HAL_UARTEx_DisableFifoMode+0x70>)
 800dea6:	4013      	ands	r3, r2
 800dea8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	68fa      	ldr	r2, [r7, #12]
 800deb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2288      	movs	r2, #136	; 0x88
 800debc:	2120      	movs	r1, #32
 800debe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2284      	movs	r2, #132	; 0x84
 800dec4:	2100      	movs	r1, #0
 800dec6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dec8:	2300      	movs	r3, #0
}
 800deca:	0018      	movs	r0, r3
 800decc:	46bd      	mov	sp, r7
 800dece:	b004      	add	sp, #16
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	46c0      	nop			; (mov r8, r8)
 800ded4:	dfffffff 	.word	0xdfffffff

0800ded8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2284      	movs	r2, #132	; 0x84
 800dee6:	5c9b      	ldrb	r3, [r3, r2]
 800dee8:	2b01      	cmp	r3, #1
 800deea:	d101      	bne.n	800def0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800deec:	2302      	movs	r3, #2
 800deee:	e02e      	b.n	800df4e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2284      	movs	r2, #132	; 0x84
 800def4:	2101      	movs	r1, #1
 800def6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2288      	movs	r2, #136	; 0x88
 800defc:	2124      	movs	r1, #36	; 0x24
 800defe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	2101      	movs	r1, #1
 800df14:	438a      	bics	r2, r1
 800df16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	689b      	ldr	r3, [r3, #8]
 800df1e:	00db      	lsls	r3, r3, #3
 800df20:	08d9      	lsrs	r1, r3, #3
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	683a      	ldr	r2, [r7, #0]
 800df28:	430a      	orrs	r2, r1
 800df2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	0018      	movs	r0, r3
 800df30:	f000 f854 	bl	800dfdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	68fa      	ldr	r2, [r7, #12]
 800df3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2288      	movs	r2, #136	; 0x88
 800df40:	2120      	movs	r1, #32
 800df42:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2284      	movs	r2, #132	; 0x84
 800df48:	2100      	movs	r1, #0
 800df4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800df4c:	2300      	movs	r3, #0
}
 800df4e:	0018      	movs	r0, r3
 800df50:	46bd      	mov	sp, r7
 800df52:	b004      	add	sp, #16
 800df54:	bd80      	pop	{r7, pc}
	...

0800df58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2284      	movs	r2, #132	; 0x84
 800df66:	5c9b      	ldrb	r3, [r3, r2]
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d101      	bne.n	800df70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800df6c:	2302      	movs	r3, #2
 800df6e:	e02f      	b.n	800dfd0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2284      	movs	r2, #132	; 0x84
 800df74:	2101      	movs	r1, #1
 800df76:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2288      	movs	r2, #136	; 0x88
 800df7c:	2124      	movs	r1, #36	; 0x24
 800df7e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2101      	movs	r1, #1
 800df94:	438a      	bics	r2, r1
 800df96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	4a0e      	ldr	r2, [pc, #56]	; (800dfd8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800dfa0:	4013      	ands	r3, r2
 800dfa2:	0019      	movs	r1, r3
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	683a      	ldr	r2, [r7, #0]
 800dfaa:	430a      	orrs	r2, r1
 800dfac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	0018      	movs	r0, r3
 800dfb2:	f000 f813 	bl	800dfdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	68fa      	ldr	r2, [r7, #12]
 800dfbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2288      	movs	r2, #136	; 0x88
 800dfc2:	2120      	movs	r1, #32
 800dfc4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2284      	movs	r2, #132	; 0x84
 800dfca:	2100      	movs	r1, #0
 800dfcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dfce:	2300      	movs	r3, #0
}
 800dfd0:	0018      	movs	r0, r3
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	b004      	add	sp, #16
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	f1ffffff 	.word	0xf1ffffff

0800dfdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfde:	b085      	sub	sp, #20
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d108      	bne.n	800dffe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	226a      	movs	r2, #106	; 0x6a
 800dff0:	2101      	movs	r1, #1
 800dff2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2268      	movs	r2, #104	; 0x68
 800dff8:	2101      	movs	r1, #1
 800dffa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dffc:	e043      	b.n	800e086 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dffe:	260f      	movs	r6, #15
 800e000:	19bb      	adds	r3, r7, r6
 800e002:	2208      	movs	r2, #8
 800e004:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e006:	200e      	movs	r0, #14
 800e008:	183b      	adds	r3, r7, r0
 800e00a:	2208      	movs	r2, #8
 800e00c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	689b      	ldr	r3, [r3, #8]
 800e014:	0e5b      	lsrs	r3, r3, #25
 800e016:	b2da      	uxtb	r2, r3
 800e018:	240d      	movs	r4, #13
 800e01a:	193b      	adds	r3, r7, r4
 800e01c:	2107      	movs	r1, #7
 800e01e:	400a      	ands	r2, r1
 800e020:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	0f5b      	lsrs	r3, r3, #29
 800e02a:	b2da      	uxtb	r2, r3
 800e02c:	250c      	movs	r5, #12
 800e02e:	197b      	adds	r3, r7, r5
 800e030:	2107      	movs	r1, #7
 800e032:	400a      	ands	r2, r1
 800e034:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e036:	183b      	adds	r3, r7, r0
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	197a      	adds	r2, r7, r5
 800e03c:	7812      	ldrb	r2, [r2, #0]
 800e03e:	4914      	ldr	r1, [pc, #80]	; (800e090 <UARTEx_SetNbDataToProcess+0xb4>)
 800e040:	5c8a      	ldrb	r2, [r1, r2]
 800e042:	435a      	muls	r2, r3
 800e044:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800e046:	197b      	adds	r3, r7, r5
 800e048:	781b      	ldrb	r3, [r3, #0]
 800e04a:	4a12      	ldr	r2, [pc, #72]	; (800e094 <UARTEx_SetNbDataToProcess+0xb8>)
 800e04c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e04e:	0019      	movs	r1, r3
 800e050:	f7f2 f906 	bl	8000260 <__divsi3>
 800e054:	0003      	movs	r3, r0
 800e056:	b299      	uxth	r1, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	226a      	movs	r2, #106	; 0x6a
 800e05c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e05e:	19bb      	adds	r3, r7, r6
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	193a      	adds	r2, r7, r4
 800e064:	7812      	ldrb	r2, [r2, #0]
 800e066:	490a      	ldr	r1, [pc, #40]	; (800e090 <UARTEx_SetNbDataToProcess+0xb4>)
 800e068:	5c8a      	ldrb	r2, [r1, r2]
 800e06a:	435a      	muls	r2, r3
 800e06c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800e06e:	193b      	adds	r3, r7, r4
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	4a08      	ldr	r2, [pc, #32]	; (800e094 <UARTEx_SetNbDataToProcess+0xb8>)
 800e074:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e076:	0019      	movs	r1, r3
 800e078:	f7f2 f8f2 	bl	8000260 <__divsi3>
 800e07c:	0003      	movs	r3, r0
 800e07e:	b299      	uxth	r1, r3
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2268      	movs	r2, #104	; 0x68
 800e084:	5299      	strh	r1, [r3, r2]
}
 800e086:	46c0      	nop			; (mov r8, r8)
 800e088:	46bd      	mov	sp, r7
 800e08a:	b005      	add	sp, #20
 800e08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e08e:	46c0      	nop			; (mov r8, r8)
 800e090:	08012b1c 	.word	0x08012b1c
 800e094:	08012b24 	.word	0x08012b24

0800e098 <atoi>:
 800e098:	b510      	push	{r4, lr}
 800e09a:	220a      	movs	r2, #10
 800e09c:	2100      	movs	r1, #0
 800e09e:	f000 ffd9 	bl	800f054 <strtol>
 800e0a2:	bd10      	pop	{r4, pc}

0800e0a4 <gcvt>:
 800e0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0a6:	001c      	movs	r4, r3
 800e0a8:	0015      	movs	r5, r2
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	b085      	sub	sp, #20
 800e0b0:	0006      	movs	r6, r0
 800e0b2:	000f      	movs	r7, r1
 800e0b4:	f7f2 f9d6 	bl	8000464 <__aeabi_dcmplt>
 800e0b8:	0023      	movs	r3, r4
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	d003      	beq.n	800e0c6 <gcvt+0x22>
 800e0be:	232d      	movs	r3, #45	; 0x2d
 800e0c0:	3d01      	subs	r5, #1
 800e0c2:	7023      	strb	r3, [r4, #0]
 800e0c4:	1c63      	adds	r3, r4, #1
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	4908      	ldr	r1, [pc, #32]	; (800e0ec <gcvt+0x48>)
 800e0ca:	9203      	str	r2, [sp, #12]
 800e0cc:	3267      	adds	r2, #103	; 0x67
 800e0ce:	9202      	str	r2, [sp, #8]
 800e0d0:	9301      	str	r3, [sp, #4]
 800e0d2:	9500      	str	r5, [sp, #0]
 800e0d4:	003b      	movs	r3, r7
 800e0d6:	0032      	movs	r2, r6
 800e0d8:	6808      	ldr	r0, [r1, #0]
 800e0da:	f001 f849 	bl	800f170 <_gcvt>
 800e0de:	1e43      	subs	r3, r0, #1
 800e0e0:	4198      	sbcs	r0, r3
 800e0e2:	4240      	negs	r0, r0
 800e0e4:	4004      	ands	r4, r0
 800e0e6:	0020      	movs	r0, r4
 800e0e8:	b005      	add	sp, #20
 800e0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0ec:	200000e0 	.word	0x200000e0

0800e0f0 <__errno>:
 800e0f0:	4b01      	ldr	r3, [pc, #4]	; (800e0f8 <__errno+0x8>)
 800e0f2:	6818      	ldr	r0, [r3, #0]
 800e0f4:	4770      	bx	lr
 800e0f6:	46c0      	nop			; (mov r8, r8)
 800e0f8:	200000e0 	.word	0x200000e0

0800e0fc <__libc_init_array>:
 800e0fc:	b570      	push	{r4, r5, r6, lr}
 800e0fe:	2600      	movs	r6, #0
 800e100:	4d0c      	ldr	r5, [pc, #48]	; (800e134 <__libc_init_array+0x38>)
 800e102:	4c0d      	ldr	r4, [pc, #52]	; (800e138 <__libc_init_array+0x3c>)
 800e104:	1b64      	subs	r4, r4, r5
 800e106:	10a4      	asrs	r4, r4, #2
 800e108:	42a6      	cmp	r6, r4
 800e10a:	d109      	bne.n	800e120 <__libc_init_array+0x24>
 800e10c:	2600      	movs	r6, #0
 800e10e:	f004 fa61 	bl	80125d4 <_init>
 800e112:	4d0a      	ldr	r5, [pc, #40]	; (800e13c <__libc_init_array+0x40>)
 800e114:	4c0a      	ldr	r4, [pc, #40]	; (800e140 <__libc_init_array+0x44>)
 800e116:	1b64      	subs	r4, r4, r5
 800e118:	10a4      	asrs	r4, r4, #2
 800e11a:	42a6      	cmp	r6, r4
 800e11c:	d105      	bne.n	800e12a <__libc_init_array+0x2e>
 800e11e:	bd70      	pop	{r4, r5, r6, pc}
 800e120:	00b3      	lsls	r3, r6, #2
 800e122:	58eb      	ldr	r3, [r5, r3]
 800e124:	4798      	blx	r3
 800e126:	3601      	adds	r6, #1
 800e128:	e7ee      	b.n	800e108 <__libc_init_array+0xc>
 800e12a:	00b3      	lsls	r3, r6, #2
 800e12c:	58eb      	ldr	r3, [r5, r3]
 800e12e:	4798      	blx	r3
 800e130:	3601      	adds	r6, #1
 800e132:	e7f2      	b.n	800e11a <__libc_init_array+0x1e>
 800e134:	08012fc0 	.word	0x08012fc0
 800e138:	08012fc0 	.word	0x08012fc0
 800e13c:	08012fc0 	.word	0x08012fc0
 800e140:	08012fc4 	.word	0x08012fc4

0800e144 <memcpy>:
 800e144:	2300      	movs	r3, #0
 800e146:	b510      	push	{r4, lr}
 800e148:	429a      	cmp	r2, r3
 800e14a:	d100      	bne.n	800e14e <memcpy+0xa>
 800e14c:	bd10      	pop	{r4, pc}
 800e14e:	5ccc      	ldrb	r4, [r1, r3]
 800e150:	54c4      	strb	r4, [r0, r3]
 800e152:	3301      	adds	r3, #1
 800e154:	e7f8      	b.n	800e148 <memcpy+0x4>

0800e156 <memset>:
 800e156:	0003      	movs	r3, r0
 800e158:	1882      	adds	r2, r0, r2
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d100      	bne.n	800e160 <memset+0xa>
 800e15e:	4770      	bx	lr
 800e160:	7019      	strb	r1, [r3, #0]
 800e162:	3301      	adds	r3, #1
 800e164:	e7f9      	b.n	800e15a <memset+0x4>
	...

0800e168 <siprintf>:
 800e168:	b40e      	push	{r1, r2, r3}
 800e16a:	b500      	push	{lr}
 800e16c:	490b      	ldr	r1, [pc, #44]	; (800e19c <siprintf+0x34>)
 800e16e:	b09c      	sub	sp, #112	; 0x70
 800e170:	ab1d      	add	r3, sp, #116	; 0x74
 800e172:	9002      	str	r0, [sp, #8]
 800e174:	9006      	str	r0, [sp, #24]
 800e176:	9107      	str	r1, [sp, #28]
 800e178:	9104      	str	r1, [sp, #16]
 800e17a:	4809      	ldr	r0, [pc, #36]	; (800e1a0 <siprintf+0x38>)
 800e17c:	4909      	ldr	r1, [pc, #36]	; (800e1a4 <siprintf+0x3c>)
 800e17e:	cb04      	ldmia	r3!, {r2}
 800e180:	9105      	str	r1, [sp, #20]
 800e182:	6800      	ldr	r0, [r0, #0]
 800e184:	a902      	add	r1, sp, #8
 800e186:	9301      	str	r3, [sp, #4]
 800e188:	f002 fa82 	bl	8010690 <_svfiprintf_r>
 800e18c:	2300      	movs	r3, #0
 800e18e:	9a02      	ldr	r2, [sp, #8]
 800e190:	7013      	strb	r3, [r2, #0]
 800e192:	b01c      	add	sp, #112	; 0x70
 800e194:	bc08      	pop	{r3}
 800e196:	b003      	add	sp, #12
 800e198:	4718      	bx	r3
 800e19a:	46c0      	nop			; (mov r8, r8)
 800e19c:	7fffffff 	.word	0x7fffffff
 800e1a0:	200000e0 	.word	0x200000e0
 800e1a4:	ffff0208 	.word	0xffff0208

0800e1a8 <strcat>:
 800e1a8:	0002      	movs	r2, r0
 800e1aa:	b510      	push	{r4, lr}
 800e1ac:	7813      	ldrb	r3, [r2, #0]
 800e1ae:	0014      	movs	r4, r2
 800e1b0:	3201      	adds	r2, #1
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d1fa      	bne.n	800e1ac <strcat+0x4>
 800e1b6:	5cca      	ldrb	r2, [r1, r3]
 800e1b8:	54e2      	strb	r2, [r4, r3]
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	2a00      	cmp	r2, #0
 800e1be:	d1fa      	bne.n	800e1b6 <strcat+0xe>
 800e1c0:	bd10      	pop	{r4, pc}

0800e1c2 <strchr>:
 800e1c2:	b2c9      	uxtb	r1, r1
 800e1c4:	7803      	ldrb	r3, [r0, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d004      	beq.n	800e1d4 <strchr+0x12>
 800e1ca:	428b      	cmp	r3, r1
 800e1cc:	d100      	bne.n	800e1d0 <strchr+0xe>
 800e1ce:	4770      	bx	lr
 800e1d0:	3001      	adds	r0, #1
 800e1d2:	e7f7      	b.n	800e1c4 <strchr+0x2>
 800e1d4:	424b      	negs	r3, r1
 800e1d6:	4159      	adcs	r1, r3
 800e1d8:	4249      	negs	r1, r1
 800e1da:	4008      	ands	r0, r1
 800e1dc:	e7f7      	b.n	800e1ce <strchr+0xc>

0800e1de <strncpy>:
 800e1de:	0003      	movs	r3, r0
 800e1e0:	b530      	push	{r4, r5, lr}
 800e1e2:	001d      	movs	r5, r3
 800e1e4:	2a00      	cmp	r2, #0
 800e1e6:	d006      	beq.n	800e1f6 <strncpy+0x18>
 800e1e8:	780c      	ldrb	r4, [r1, #0]
 800e1ea:	3a01      	subs	r2, #1
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	702c      	strb	r4, [r5, #0]
 800e1f0:	3101      	adds	r1, #1
 800e1f2:	2c00      	cmp	r4, #0
 800e1f4:	d1f5      	bne.n	800e1e2 <strncpy+0x4>
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	189a      	adds	r2, r3, r2
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d100      	bne.n	800e200 <strncpy+0x22>
 800e1fe:	bd30      	pop	{r4, r5, pc}
 800e200:	7019      	strb	r1, [r3, #0]
 800e202:	3301      	adds	r3, #1
 800e204:	e7f9      	b.n	800e1fa <strncpy+0x1c>

0800e206 <strstr>:
 800e206:	780a      	ldrb	r2, [r1, #0]
 800e208:	b530      	push	{r4, r5, lr}
 800e20a:	2a00      	cmp	r2, #0
 800e20c:	d10c      	bne.n	800e228 <strstr+0x22>
 800e20e:	bd30      	pop	{r4, r5, pc}
 800e210:	429a      	cmp	r2, r3
 800e212:	d108      	bne.n	800e226 <strstr+0x20>
 800e214:	2301      	movs	r3, #1
 800e216:	5ccc      	ldrb	r4, [r1, r3]
 800e218:	2c00      	cmp	r4, #0
 800e21a:	d0f8      	beq.n	800e20e <strstr+0x8>
 800e21c:	5cc5      	ldrb	r5, [r0, r3]
 800e21e:	42a5      	cmp	r5, r4
 800e220:	d101      	bne.n	800e226 <strstr+0x20>
 800e222:	3301      	adds	r3, #1
 800e224:	e7f7      	b.n	800e216 <strstr+0x10>
 800e226:	3001      	adds	r0, #1
 800e228:	7803      	ldrb	r3, [r0, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d1f0      	bne.n	800e210 <strstr+0xa>
 800e22e:	0018      	movs	r0, r3
 800e230:	e7ed      	b.n	800e20e <strstr+0x8>
	...

0800e234 <sulp>:
 800e234:	b570      	push	{r4, r5, r6, lr}
 800e236:	0016      	movs	r6, r2
 800e238:	000d      	movs	r5, r1
 800e23a:	f001 ff73 	bl	8010124 <__ulp>
 800e23e:	2e00      	cmp	r6, #0
 800e240:	d00d      	beq.n	800e25e <sulp+0x2a>
 800e242:	236b      	movs	r3, #107	; 0x6b
 800e244:	006a      	lsls	r2, r5, #1
 800e246:	0d52      	lsrs	r2, r2, #21
 800e248:	1a9b      	subs	r3, r3, r2
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	dd07      	ble.n	800e25e <sulp+0x2a>
 800e24e:	2400      	movs	r4, #0
 800e250:	4a03      	ldr	r2, [pc, #12]	; (800e260 <sulp+0x2c>)
 800e252:	051b      	lsls	r3, r3, #20
 800e254:	189d      	adds	r5, r3, r2
 800e256:	002b      	movs	r3, r5
 800e258:	0022      	movs	r2, r4
 800e25a:	f7f3 fbe5 	bl	8001a28 <__aeabi_dmul>
 800e25e:	bd70      	pop	{r4, r5, r6, pc}
 800e260:	3ff00000 	.word	0x3ff00000

0800e264 <_strtod_l>:
 800e264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e266:	001d      	movs	r5, r3
 800e268:	2300      	movs	r3, #0
 800e26a:	b0a5      	sub	sp, #148	; 0x94
 800e26c:	9320      	str	r3, [sp, #128]	; 0x80
 800e26e:	4bac      	ldr	r3, [pc, #688]	; (800e520 <_strtod_l+0x2bc>)
 800e270:	9005      	str	r0, [sp, #20]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	9108      	str	r1, [sp, #32]
 800e276:	0018      	movs	r0, r3
 800e278:	9307      	str	r3, [sp, #28]
 800e27a:	921b      	str	r2, [sp, #108]	; 0x6c
 800e27c:	f7f1 ff4a 	bl	8000114 <strlen>
 800e280:	2600      	movs	r6, #0
 800e282:	0004      	movs	r4, r0
 800e284:	2700      	movs	r7, #0
 800e286:	9b08      	ldr	r3, [sp, #32]
 800e288:	931f      	str	r3, [sp, #124]	; 0x7c
 800e28a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e28c:	7813      	ldrb	r3, [r2, #0]
 800e28e:	2b2b      	cmp	r3, #43	; 0x2b
 800e290:	d058      	beq.n	800e344 <_strtod_l+0xe0>
 800e292:	d844      	bhi.n	800e31e <_strtod_l+0xba>
 800e294:	2b0d      	cmp	r3, #13
 800e296:	d83d      	bhi.n	800e314 <_strtod_l+0xb0>
 800e298:	2b08      	cmp	r3, #8
 800e29a:	d83d      	bhi.n	800e318 <_strtod_l+0xb4>
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d047      	beq.n	800e330 <_strtod_l+0xcc>
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	930e      	str	r3, [sp, #56]	; 0x38
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e2a8:	920a      	str	r2, [sp, #40]	; 0x28
 800e2aa:	9306      	str	r3, [sp, #24]
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	2b30      	cmp	r3, #48	; 0x30
 800e2b0:	d000      	beq.n	800e2b4 <_strtod_l+0x50>
 800e2b2:	e07f      	b.n	800e3b4 <_strtod_l+0x150>
 800e2b4:	9b06      	ldr	r3, [sp, #24]
 800e2b6:	3220      	adds	r2, #32
 800e2b8:	785b      	ldrb	r3, [r3, #1]
 800e2ba:	4393      	bics	r3, r2
 800e2bc:	2b58      	cmp	r3, #88	; 0x58
 800e2be:	d000      	beq.n	800e2c2 <_strtod_l+0x5e>
 800e2c0:	e06e      	b.n	800e3a0 <_strtod_l+0x13c>
 800e2c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2c4:	9502      	str	r5, [sp, #8]
 800e2c6:	9301      	str	r3, [sp, #4]
 800e2c8:	ab20      	add	r3, sp, #128	; 0x80
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	4a95      	ldr	r2, [pc, #596]	; (800e524 <_strtod_l+0x2c0>)
 800e2ce:	ab21      	add	r3, sp, #132	; 0x84
 800e2d0:	9805      	ldr	r0, [sp, #20]
 800e2d2:	a91f      	add	r1, sp, #124	; 0x7c
 800e2d4:	f001 f886 	bl	800f3e4 <__gethex>
 800e2d8:	2307      	movs	r3, #7
 800e2da:	0005      	movs	r5, r0
 800e2dc:	0004      	movs	r4, r0
 800e2de:	401d      	ands	r5, r3
 800e2e0:	4218      	tst	r0, r3
 800e2e2:	d006      	beq.n	800e2f2 <_strtod_l+0x8e>
 800e2e4:	2d06      	cmp	r5, #6
 800e2e6:	d12f      	bne.n	800e348 <_strtod_l+0xe4>
 800e2e8:	9b06      	ldr	r3, [sp, #24]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	931f      	str	r3, [sp, #124]	; 0x7c
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	930e      	str	r3, [sp, #56]	; 0x38
 800e2f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d002      	beq.n	800e2fe <_strtod_l+0x9a>
 800e2f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e2fa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e2fc:	601a      	str	r2, [r3, #0]
 800e2fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e300:	2b00      	cmp	r3, #0
 800e302:	d01c      	beq.n	800e33e <_strtod_l+0xda>
 800e304:	2380      	movs	r3, #128	; 0x80
 800e306:	0032      	movs	r2, r6
 800e308:	061b      	lsls	r3, r3, #24
 800e30a:	18fb      	adds	r3, r7, r3
 800e30c:	0010      	movs	r0, r2
 800e30e:	0019      	movs	r1, r3
 800e310:	b025      	add	sp, #148	; 0x94
 800e312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e314:	2b20      	cmp	r3, #32
 800e316:	d1c3      	bne.n	800e2a0 <_strtod_l+0x3c>
 800e318:	3201      	adds	r2, #1
 800e31a:	921f      	str	r2, [sp, #124]	; 0x7c
 800e31c:	e7b5      	b.n	800e28a <_strtod_l+0x26>
 800e31e:	2b2d      	cmp	r3, #45	; 0x2d
 800e320:	d1be      	bne.n	800e2a0 <_strtod_l+0x3c>
 800e322:	3b2c      	subs	r3, #44	; 0x2c
 800e324:	930e      	str	r3, [sp, #56]	; 0x38
 800e326:	1c53      	adds	r3, r2, #1
 800e328:	931f      	str	r3, [sp, #124]	; 0x7c
 800e32a:	7853      	ldrb	r3, [r2, #1]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d1b9      	bne.n	800e2a4 <_strtod_l+0x40>
 800e330:	9b08      	ldr	r3, [sp, #32]
 800e332:	931f      	str	r3, [sp, #124]	; 0x7c
 800e334:	2300      	movs	r3, #0
 800e336:	930e      	str	r3, [sp, #56]	; 0x38
 800e338:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d1dc      	bne.n	800e2f8 <_strtod_l+0x94>
 800e33e:	0032      	movs	r2, r6
 800e340:	003b      	movs	r3, r7
 800e342:	e7e3      	b.n	800e30c <_strtod_l+0xa8>
 800e344:	2300      	movs	r3, #0
 800e346:	e7ed      	b.n	800e324 <_strtod_l+0xc0>
 800e348:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e34a:	2a00      	cmp	r2, #0
 800e34c:	d007      	beq.n	800e35e <_strtod_l+0xfa>
 800e34e:	2135      	movs	r1, #53	; 0x35
 800e350:	a822      	add	r0, sp, #136	; 0x88
 800e352:	f002 f803 	bl	801035c <__copybits>
 800e356:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e358:	9805      	ldr	r0, [sp, #20]
 800e35a:	f001 fba3 	bl	800faa4 <_Bfree>
 800e35e:	1e68      	subs	r0, r5, #1
 800e360:	2804      	cmp	r0, #4
 800e362:	d806      	bhi.n	800e372 <_strtod_l+0x10e>
 800e364:	f7f1 fede 	bl	8000124 <__gnu_thumb1_case_uqi>
 800e368:	1816030b 	.word	0x1816030b
 800e36c:	0b          	.byte	0x0b
 800e36d:	00          	.byte	0x00
 800e36e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800e370:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800e372:	0723      	lsls	r3, r4, #28
 800e374:	d5bd      	bpl.n	800e2f2 <_strtod_l+0x8e>
 800e376:	2380      	movs	r3, #128	; 0x80
 800e378:	061b      	lsls	r3, r3, #24
 800e37a:	431f      	orrs	r7, r3
 800e37c:	e7b9      	b.n	800e2f2 <_strtod_l+0x8e>
 800e37e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e380:	4a69      	ldr	r2, [pc, #420]	; (800e528 <_strtod_l+0x2c4>)
 800e382:	496a      	ldr	r1, [pc, #424]	; (800e52c <_strtod_l+0x2c8>)
 800e384:	401a      	ands	r2, r3
 800e386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e388:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800e38a:	185b      	adds	r3, r3, r1
 800e38c:	051b      	lsls	r3, r3, #20
 800e38e:	431a      	orrs	r2, r3
 800e390:	0017      	movs	r7, r2
 800e392:	e7ee      	b.n	800e372 <_strtod_l+0x10e>
 800e394:	4f66      	ldr	r7, [pc, #408]	; (800e530 <_strtod_l+0x2cc>)
 800e396:	e7ec      	b.n	800e372 <_strtod_l+0x10e>
 800e398:	2601      	movs	r6, #1
 800e39a:	4f66      	ldr	r7, [pc, #408]	; (800e534 <_strtod_l+0x2d0>)
 800e39c:	4276      	negs	r6, r6
 800e39e:	e7e8      	b.n	800e372 <_strtod_l+0x10e>
 800e3a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e3a2:	1c5a      	adds	r2, r3, #1
 800e3a4:	921f      	str	r2, [sp, #124]	; 0x7c
 800e3a6:	785b      	ldrb	r3, [r3, #1]
 800e3a8:	2b30      	cmp	r3, #48	; 0x30
 800e3aa:	d0f9      	beq.n	800e3a0 <_strtod_l+0x13c>
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d0a0      	beq.n	800e2f2 <_strtod_l+0x8e>
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	930a      	str	r3, [sp, #40]	; 0x28
 800e3b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e3b6:	220a      	movs	r2, #10
 800e3b8:	9310      	str	r3, [sp, #64]	; 0x40
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3be:	930b      	str	r3, [sp, #44]	; 0x2c
 800e3c0:	9309      	str	r3, [sp, #36]	; 0x24
 800e3c2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800e3c4:	7805      	ldrb	r5, [r0, #0]
 800e3c6:	002b      	movs	r3, r5
 800e3c8:	3b30      	subs	r3, #48	; 0x30
 800e3ca:	b2d9      	uxtb	r1, r3
 800e3cc:	2909      	cmp	r1, #9
 800e3ce:	d927      	bls.n	800e420 <_strtod_l+0x1bc>
 800e3d0:	0022      	movs	r2, r4
 800e3d2:	9907      	ldr	r1, [sp, #28]
 800e3d4:	f002 fc02 	bl	8010bdc <strncmp>
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d033      	beq.n	800e444 <_strtod_l+0x1e0>
 800e3dc:	2000      	movs	r0, #0
 800e3de:	002b      	movs	r3, r5
 800e3e0:	4684      	mov	ip, r0
 800e3e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3e4:	900c      	str	r0, [sp, #48]	; 0x30
 800e3e6:	9206      	str	r2, [sp, #24]
 800e3e8:	2220      	movs	r2, #32
 800e3ea:	0019      	movs	r1, r3
 800e3ec:	4391      	bics	r1, r2
 800e3ee:	000a      	movs	r2, r1
 800e3f0:	2100      	movs	r1, #0
 800e3f2:	9107      	str	r1, [sp, #28]
 800e3f4:	2a45      	cmp	r2, #69	; 0x45
 800e3f6:	d000      	beq.n	800e3fa <_strtod_l+0x196>
 800e3f8:	e0c5      	b.n	800e586 <_strtod_l+0x322>
 800e3fa:	9b06      	ldr	r3, [sp, #24]
 800e3fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3fe:	4303      	orrs	r3, r0
 800e400:	4313      	orrs	r3, r2
 800e402:	428b      	cmp	r3, r1
 800e404:	d094      	beq.n	800e330 <_strtod_l+0xcc>
 800e406:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e408:	9308      	str	r3, [sp, #32]
 800e40a:	3301      	adds	r3, #1
 800e40c:	931f      	str	r3, [sp, #124]	; 0x7c
 800e40e:	9b08      	ldr	r3, [sp, #32]
 800e410:	785b      	ldrb	r3, [r3, #1]
 800e412:	2b2b      	cmp	r3, #43	; 0x2b
 800e414:	d076      	beq.n	800e504 <_strtod_l+0x2a0>
 800e416:	000c      	movs	r4, r1
 800e418:	2b2d      	cmp	r3, #45	; 0x2d
 800e41a:	d179      	bne.n	800e510 <_strtod_l+0x2ac>
 800e41c:	2401      	movs	r4, #1
 800e41e:	e072      	b.n	800e506 <_strtod_l+0x2a2>
 800e420:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e422:	2908      	cmp	r1, #8
 800e424:	dc09      	bgt.n	800e43a <_strtod_l+0x1d6>
 800e426:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e428:	4351      	muls	r1, r2
 800e42a:	185b      	adds	r3, r3, r1
 800e42c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e430:	3001      	adds	r0, #1
 800e432:	3301      	adds	r3, #1
 800e434:	9309      	str	r3, [sp, #36]	; 0x24
 800e436:	901f      	str	r0, [sp, #124]	; 0x7c
 800e438:	e7c3      	b.n	800e3c2 <_strtod_l+0x15e>
 800e43a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e43c:	4351      	muls	r1, r2
 800e43e:	185b      	adds	r3, r3, r1
 800e440:	930f      	str	r3, [sp, #60]	; 0x3c
 800e442:	e7f4      	b.n	800e42e <_strtod_l+0x1ca>
 800e444:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e448:	191c      	adds	r4, r3, r4
 800e44a:	941f      	str	r4, [sp, #124]	; 0x7c
 800e44c:	7823      	ldrb	r3, [r4, #0]
 800e44e:	2a00      	cmp	r2, #0
 800e450:	d039      	beq.n	800e4c6 <_strtod_l+0x262>
 800e452:	900c      	str	r0, [sp, #48]	; 0x30
 800e454:	9206      	str	r2, [sp, #24]
 800e456:	001a      	movs	r2, r3
 800e458:	3a30      	subs	r2, #48	; 0x30
 800e45a:	2a09      	cmp	r2, #9
 800e45c:	d912      	bls.n	800e484 <_strtod_l+0x220>
 800e45e:	2201      	movs	r2, #1
 800e460:	4694      	mov	ip, r2
 800e462:	e7c1      	b.n	800e3e8 <_strtod_l+0x184>
 800e464:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e466:	3001      	adds	r0, #1
 800e468:	1c5a      	adds	r2, r3, #1
 800e46a:	921f      	str	r2, [sp, #124]	; 0x7c
 800e46c:	785b      	ldrb	r3, [r3, #1]
 800e46e:	2b30      	cmp	r3, #48	; 0x30
 800e470:	d0f8      	beq.n	800e464 <_strtod_l+0x200>
 800e472:	001a      	movs	r2, r3
 800e474:	3a31      	subs	r2, #49	; 0x31
 800e476:	2a08      	cmp	r2, #8
 800e478:	d83f      	bhi.n	800e4fa <_strtod_l+0x296>
 800e47a:	900c      	str	r0, [sp, #48]	; 0x30
 800e47c:	2000      	movs	r0, #0
 800e47e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e480:	9006      	str	r0, [sp, #24]
 800e482:	9210      	str	r2, [sp, #64]	; 0x40
 800e484:	001a      	movs	r2, r3
 800e486:	1c41      	adds	r1, r0, #1
 800e488:	3a30      	subs	r2, #48	; 0x30
 800e48a:	2b30      	cmp	r3, #48	; 0x30
 800e48c:	d015      	beq.n	800e4ba <_strtod_l+0x256>
 800e48e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e490:	185b      	adds	r3, r3, r1
 800e492:	210a      	movs	r1, #10
 800e494:	930c      	str	r3, [sp, #48]	; 0x30
 800e496:	9b06      	ldr	r3, [sp, #24]
 800e498:	18c4      	adds	r4, r0, r3
 800e49a:	42a3      	cmp	r3, r4
 800e49c:	d115      	bne.n	800e4ca <_strtod_l+0x266>
 800e49e:	9906      	ldr	r1, [sp, #24]
 800e4a0:	9b06      	ldr	r3, [sp, #24]
 800e4a2:	3101      	adds	r1, #1
 800e4a4:	1809      	adds	r1, r1, r0
 800e4a6:	181b      	adds	r3, r3, r0
 800e4a8:	9106      	str	r1, [sp, #24]
 800e4aa:	2b08      	cmp	r3, #8
 800e4ac:	dc1b      	bgt.n	800e4e6 <_strtod_l+0x282>
 800e4ae:	230a      	movs	r3, #10
 800e4b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4b2:	434b      	muls	r3, r1
 800e4b4:	2100      	movs	r1, #0
 800e4b6:	18d3      	adds	r3, r2, r3
 800e4b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e4bc:	0008      	movs	r0, r1
 800e4be:	1c5a      	adds	r2, r3, #1
 800e4c0:	921f      	str	r2, [sp, #124]	; 0x7c
 800e4c2:	785b      	ldrb	r3, [r3, #1]
 800e4c4:	e7c7      	b.n	800e456 <_strtod_l+0x1f2>
 800e4c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4c8:	e7d1      	b.n	800e46e <_strtod_l+0x20a>
 800e4ca:	2b08      	cmp	r3, #8
 800e4cc:	dc04      	bgt.n	800e4d8 <_strtod_l+0x274>
 800e4ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800e4d0:	434d      	muls	r5, r1
 800e4d2:	950b      	str	r5, [sp, #44]	; 0x2c
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	e7e0      	b.n	800e49a <_strtod_l+0x236>
 800e4d8:	1c5d      	adds	r5, r3, #1
 800e4da:	2d10      	cmp	r5, #16
 800e4dc:	dcfa      	bgt.n	800e4d4 <_strtod_l+0x270>
 800e4de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e4e0:	434d      	muls	r5, r1
 800e4e2:	950f      	str	r5, [sp, #60]	; 0x3c
 800e4e4:	e7f6      	b.n	800e4d4 <_strtod_l+0x270>
 800e4e6:	9b06      	ldr	r3, [sp, #24]
 800e4e8:	2100      	movs	r1, #0
 800e4ea:	2b10      	cmp	r3, #16
 800e4ec:	dce5      	bgt.n	800e4ba <_strtod_l+0x256>
 800e4ee:	230a      	movs	r3, #10
 800e4f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e4f2:	4343      	muls	r3, r0
 800e4f4:	18d3      	adds	r3, r2, r3
 800e4f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4f8:	e7df      	b.n	800e4ba <_strtod_l+0x256>
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	920c      	str	r2, [sp, #48]	; 0x30
 800e4fe:	9206      	str	r2, [sp, #24]
 800e500:	3201      	adds	r2, #1
 800e502:	e7ad      	b.n	800e460 <_strtod_l+0x1fc>
 800e504:	2400      	movs	r4, #0
 800e506:	9b08      	ldr	r3, [sp, #32]
 800e508:	3302      	adds	r3, #2
 800e50a:	931f      	str	r3, [sp, #124]	; 0x7c
 800e50c:	9b08      	ldr	r3, [sp, #32]
 800e50e:	789b      	ldrb	r3, [r3, #2]
 800e510:	001a      	movs	r2, r3
 800e512:	3a30      	subs	r2, #48	; 0x30
 800e514:	2a09      	cmp	r2, #9
 800e516:	d913      	bls.n	800e540 <_strtod_l+0x2dc>
 800e518:	9a08      	ldr	r2, [sp, #32]
 800e51a:	921f      	str	r2, [sp, #124]	; 0x7c
 800e51c:	2200      	movs	r2, #0
 800e51e:	e031      	b.n	800e584 <_strtod_l+0x320>
 800e520:	08012d00 	.word	0x08012d00
 800e524:	08012b38 	.word	0x08012b38
 800e528:	ffefffff 	.word	0xffefffff
 800e52c:	00000433 	.word	0x00000433
 800e530:	7ff00000 	.word	0x7ff00000
 800e534:	7fffffff 	.word	0x7fffffff
 800e538:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e53a:	1c5a      	adds	r2, r3, #1
 800e53c:	921f      	str	r2, [sp, #124]	; 0x7c
 800e53e:	785b      	ldrb	r3, [r3, #1]
 800e540:	2b30      	cmp	r3, #48	; 0x30
 800e542:	d0f9      	beq.n	800e538 <_strtod_l+0x2d4>
 800e544:	2200      	movs	r2, #0
 800e546:	9207      	str	r2, [sp, #28]
 800e548:	001a      	movs	r2, r3
 800e54a:	3a31      	subs	r2, #49	; 0x31
 800e54c:	2a08      	cmp	r2, #8
 800e54e:	d81a      	bhi.n	800e586 <_strtod_l+0x322>
 800e550:	3b30      	subs	r3, #48	; 0x30
 800e552:	001a      	movs	r2, r3
 800e554:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e556:	9307      	str	r3, [sp, #28]
 800e558:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e55a:	1c59      	adds	r1, r3, #1
 800e55c:	911f      	str	r1, [sp, #124]	; 0x7c
 800e55e:	785b      	ldrb	r3, [r3, #1]
 800e560:	001d      	movs	r5, r3
 800e562:	3d30      	subs	r5, #48	; 0x30
 800e564:	2d09      	cmp	r5, #9
 800e566:	d939      	bls.n	800e5dc <_strtod_l+0x378>
 800e568:	9d07      	ldr	r5, [sp, #28]
 800e56a:	1b49      	subs	r1, r1, r5
 800e56c:	4db0      	ldr	r5, [pc, #704]	; (800e830 <_strtod_l+0x5cc>)
 800e56e:	9507      	str	r5, [sp, #28]
 800e570:	2908      	cmp	r1, #8
 800e572:	dc03      	bgt.n	800e57c <_strtod_l+0x318>
 800e574:	9207      	str	r2, [sp, #28]
 800e576:	42aa      	cmp	r2, r5
 800e578:	dd00      	ble.n	800e57c <_strtod_l+0x318>
 800e57a:	9507      	str	r5, [sp, #28]
 800e57c:	2c00      	cmp	r4, #0
 800e57e:	d002      	beq.n	800e586 <_strtod_l+0x322>
 800e580:	9a07      	ldr	r2, [sp, #28]
 800e582:	4252      	negs	r2, r2
 800e584:	9207      	str	r2, [sp, #28]
 800e586:	9a06      	ldr	r2, [sp, #24]
 800e588:	2a00      	cmp	r2, #0
 800e58a:	d14b      	bne.n	800e624 <_strtod_l+0x3c0>
 800e58c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e58e:	4310      	orrs	r0, r2
 800e590:	d000      	beq.n	800e594 <_strtod_l+0x330>
 800e592:	e6ae      	b.n	800e2f2 <_strtod_l+0x8e>
 800e594:	4662      	mov	r2, ip
 800e596:	2a00      	cmp	r2, #0
 800e598:	d000      	beq.n	800e59c <_strtod_l+0x338>
 800e59a:	e6c9      	b.n	800e330 <_strtod_l+0xcc>
 800e59c:	2b69      	cmp	r3, #105	; 0x69
 800e59e:	d025      	beq.n	800e5ec <_strtod_l+0x388>
 800e5a0:	dc21      	bgt.n	800e5e6 <_strtod_l+0x382>
 800e5a2:	2b49      	cmp	r3, #73	; 0x49
 800e5a4:	d022      	beq.n	800e5ec <_strtod_l+0x388>
 800e5a6:	2b4e      	cmp	r3, #78	; 0x4e
 800e5a8:	d000      	beq.n	800e5ac <_strtod_l+0x348>
 800e5aa:	e6c1      	b.n	800e330 <_strtod_l+0xcc>
 800e5ac:	49a1      	ldr	r1, [pc, #644]	; (800e834 <_strtod_l+0x5d0>)
 800e5ae:	a81f      	add	r0, sp, #124	; 0x7c
 800e5b0:	f001 f966 	bl	800f880 <__match>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	d100      	bne.n	800e5ba <_strtod_l+0x356>
 800e5b8:	e6ba      	b.n	800e330 <_strtod_l+0xcc>
 800e5ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	2b28      	cmp	r3, #40	; 0x28
 800e5c0:	d12a      	bne.n	800e618 <_strtod_l+0x3b4>
 800e5c2:	499d      	ldr	r1, [pc, #628]	; (800e838 <_strtod_l+0x5d4>)
 800e5c4:	aa22      	add	r2, sp, #136	; 0x88
 800e5c6:	a81f      	add	r0, sp, #124	; 0x7c
 800e5c8:	f001 f96e 	bl	800f8a8 <__hexnan>
 800e5cc:	2805      	cmp	r0, #5
 800e5ce:	d123      	bne.n	800e618 <_strtod_l+0x3b4>
 800e5d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e5d2:	4a9a      	ldr	r2, [pc, #616]	; (800e83c <_strtod_l+0x5d8>)
 800e5d4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800e5d6:	431a      	orrs	r2, r3
 800e5d8:	0017      	movs	r7, r2
 800e5da:	e68a      	b.n	800e2f2 <_strtod_l+0x8e>
 800e5dc:	210a      	movs	r1, #10
 800e5de:	434a      	muls	r2, r1
 800e5e0:	18d2      	adds	r2, r2, r3
 800e5e2:	3a30      	subs	r2, #48	; 0x30
 800e5e4:	e7b8      	b.n	800e558 <_strtod_l+0x2f4>
 800e5e6:	2b6e      	cmp	r3, #110	; 0x6e
 800e5e8:	d0e0      	beq.n	800e5ac <_strtod_l+0x348>
 800e5ea:	e6a1      	b.n	800e330 <_strtod_l+0xcc>
 800e5ec:	4994      	ldr	r1, [pc, #592]	; (800e840 <_strtod_l+0x5dc>)
 800e5ee:	a81f      	add	r0, sp, #124	; 0x7c
 800e5f0:	f001 f946 	bl	800f880 <__match>
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	d100      	bne.n	800e5fa <_strtod_l+0x396>
 800e5f8:	e69a      	b.n	800e330 <_strtod_l+0xcc>
 800e5fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e5fc:	4991      	ldr	r1, [pc, #580]	; (800e844 <_strtod_l+0x5e0>)
 800e5fe:	3b01      	subs	r3, #1
 800e600:	a81f      	add	r0, sp, #124	; 0x7c
 800e602:	931f      	str	r3, [sp, #124]	; 0x7c
 800e604:	f001 f93c 	bl	800f880 <__match>
 800e608:	2800      	cmp	r0, #0
 800e60a:	d102      	bne.n	800e612 <_strtod_l+0x3ae>
 800e60c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e60e:	3301      	adds	r3, #1
 800e610:	931f      	str	r3, [sp, #124]	; 0x7c
 800e612:	2600      	movs	r6, #0
 800e614:	4f89      	ldr	r7, [pc, #548]	; (800e83c <_strtod_l+0x5d8>)
 800e616:	e66c      	b.n	800e2f2 <_strtod_l+0x8e>
 800e618:	488b      	ldr	r0, [pc, #556]	; (800e848 <_strtod_l+0x5e4>)
 800e61a:	f002 fabb 	bl	8010b94 <nan>
 800e61e:	0006      	movs	r6, r0
 800e620:	000f      	movs	r7, r1
 800e622:	e666      	b.n	800e2f2 <_strtod_l+0x8e>
 800e624:	9b07      	ldr	r3, [sp, #28]
 800e626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e628:	1a9b      	subs	r3, r3, r2
 800e62a:	930a      	str	r3, [sp, #40]	; 0x28
 800e62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d101      	bne.n	800e636 <_strtod_l+0x3d2>
 800e632:	9b06      	ldr	r3, [sp, #24]
 800e634:	9309      	str	r3, [sp, #36]	; 0x24
 800e636:	9c06      	ldr	r4, [sp, #24]
 800e638:	2c10      	cmp	r4, #16
 800e63a:	dd00      	ble.n	800e63e <_strtod_l+0x3da>
 800e63c:	2410      	movs	r4, #16
 800e63e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e640:	f7f4 f874 	bl	800272c <__aeabi_ui2d>
 800e644:	9b06      	ldr	r3, [sp, #24]
 800e646:	0006      	movs	r6, r0
 800e648:	000f      	movs	r7, r1
 800e64a:	2b09      	cmp	r3, #9
 800e64c:	dd15      	ble.n	800e67a <_strtod_l+0x416>
 800e64e:	0022      	movs	r2, r4
 800e650:	4b7e      	ldr	r3, [pc, #504]	; (800e84c <_strtod_l+0x5e8>)
 800e652:	3a09      	subs	r2, #9
 800e654:	00d2      	lsls	r2, r2, #3
 800e656:	189b      	adds	r3, r3, r2
 800e658:	681a      	ldr	r2, [r3, #0]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	f7f3 f9e4 	bl	8001a28 <__aeabi_dmul>
 800e660:	0006      	movs	r6, r0
 800e662:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e664:	000f      	movs	r7, r1
 800e666:	f7f4 f861 	bl	800272c <__aeabi_ui2d>
 800e66a:	0002      	movs	r2, r0
 800e66c:	000b      	movs	r3, r1
 800e66e:	0030      	movs	r0, r6
 800e670:	0039      	movs	r1, r7
 800e672:	f7f2 fa9b 	bl	8000bac <__aeabi_dadd>
 800e676:	0006      	movs	r6, r0
 800e678:	000f      	movs	r7, r1
 800e67a:	9b06      	ldr	r3, [sp, #24]
 800e67c:	2b0f      	cmp	r3, #15
 800e67e:	dc39      	bgt.n	800e6f4 <_strtod_l+0x490>
 800e680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e682:	2b00      	cmp	r3, #0
 800e684:	d100      	bne.n	800e688 <_strtod_l+0x424>
 800e686:	e634      	b.n	800e2f2 <_strtod_l+0x8e>
 800e688:	dd24      	ble.n	800e6d4 <_strtod_l+0x470>
 800e68a:	2b16      	cmp	r3, #22
 800e68c:	dc09      	bgt.n	800e6a2 <_strtod_l+0x43e>
 800e68e:	496f      	ldr	r1, [pc, #444]	; (800e84c <_strtod_l+0x5e8>)
 800e690:	00db      	lsls	r3, r3, #3
 800e692:	18c9      	adds	r1, r1, r3
 800e694:	0032      	movs	r2, r6
 800e696:	6808      	ldr	r0, [r1, #0]
 800e698:	6849      	ldr	r1, [r1, #4]
 800e69a:	003b      	movs	r3, r7
 800e69c:	f7f3 f9c4 	bl	8001a28 <__aeabi_dmul>
 800e6a0:	e7bd      	b.n	800e61e <_strtod_l+0x3ba>
 800e6a2:	2325      	movs	r3, #37	; 0x25
 800e6a4:	9a06      	ldr	r2, [sp, #24]
 800e6a6:	1a9b      	subs	r3, r3, r2
 800e6a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	db22      	blt.n	800e6f4 <_strtod_l+0x490>
 800e6ae:	240f      	movs	r4, #15
 800e6b0:	9b06      	ldr	r3, [sp, #24]
 800e6b2:	4d66      	ldr	r5, [pc, #408]	; (800e84c <_strtod_l+0x5e8>)
 800e6b4:	1ae4      	subs	r4, r4, r3
 800e6b6:	00e1      	lsls	r1, r4, #3
 800e6b8:	1869      	adds	r1, r5, r1
 800e6ba:	0032      	movs	r2, r6
 800e6bc:	6808      	ldr	r0, [r1, #0]
 800e6be:	6849      	ldr	r1, [r1, #4]
 800e6c0:	003b      	movs	r3, r7
 800e6c2:	f7f3 f9b1 	bl	8001a28 <__aeabi_dmul>
 800e6c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6c8:	1b1c      	subs	r4, r3, r4
 800e6ca:	00e4      	lsls	r4, r4, #3
 800e6cc:	192c      	adds	r4, r5, r4
 800e6ce:	6822      	ldr	r2, [r4, #0]
 800e6d0:	6863      	ldr	r3, [r4, #4]
 800e6d2:	e7e3      	b.n	800e69c <_strtod_l+0x438>
 800e6d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6d6:	3316      	adds	r3, #22
 800e6d8:	db0c      	blt.n	800e6f4 <_strtod_l+0x490>
 800e6da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6dc:	9a07      	ldr	r2, [sp, #28]
 800e6de:	0030      	movs	r0, r6
 800e6e0:	1a9a      	subs	r2, r3, r2
 800e6e2:	4b5a      	ldr	r3, [pc, #360]	; (800e84c <_strtod_l+0x5e8>)
 800e6e4:	00d2      	lsls	r2, r2, #3
 800e6e6:	189b      	adds	r3, r3, r2
 800e6e8:	0039      	movs	r1, r7
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	f7f2 fd99 	bl	8001224 <__aeabi_ddiv>
 800e6f2:	e794      	b.n	800e61e <_strtod_l+0x3ba>
 800e6f4:	9b06      	ldr	r3, [sp, #24]
 800e6f6:	1b1c      	subs	r4, r3, r4
 800e6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6fa:	18e4      	adds	r4, r4, r3
 800e6fc:	2c00      	cmp	r4, #0
 800e6fe:	dd72      	ble.n	800e7e6 <_strtod_l+0x582>
 800e700:	230f      	movs	r3, #15
 800e702:	0021      	movs	r1, r4
 800e704:	4019      	ands	r1, r3
 800e706:	421c      	tst	r4, r3
 800e708:	d00a      	beq.n	800e720 <_strtod_l+0x4bc>
 800e70a:	00cb      	lsls	r3, r1, #3
 800e70c:	494f      	ldr	r1, [pc, #316]	; (800e84c <_strtod_l+0x5e8>)
 800e70e:	0032      	movs	r2, r6
 800e710:	18c9      	adds	r1, r1, r3
 800e712:	6808      	ldr	r0, [r1, #0]
 800e714:	6849      	ldr	r1, [r1, #4]
 800e716:	003b      	movs	r3, r7
 800e718:	f7f3 f986 	bl	8001a28 <__aeabi_dmul>
 800e71c:	0006      	movs	r6, r0
 800e71e:	000f      	movs	r7, r1
 800e720:	230f      	movs	r3, #15
 800e722:	439c      	bics	r4, r3
 800e724:	d04a      	beq.n	800e7bc <_strtod_l+0x558>
 800e726:	3326      	adds	r3, #38	; 0x26
 800e728:	33ff      	adds	r3, #255	; 0xff
 800e72a:	429c      	cmp	r4, r3
 800e72c:	dd22      	ble.n	800e774 <_strtod_l+0x510>
 800e72e:	2300      	movs	r3, #0
 800e730:	9306      	str	r3, [sp, #24]
 800e732:	9307      	str	r3, [sp, #28]
 800e734:	930b      	str	r3, [sp, #44]	; 0x2c
 800e736:	9309      	str	r3, [sp, #36]	; 0x24
 800e738:	2322      	movs	r3, #34	; 0x22
 800e73a:	2600      	movs	r6, #0
 800e73c:	9a05      	ldr	r2, [sp, #20]
 800e73e:	4f3f      	ldr	r7, [pc, #252]	; (800e83c <_strtod_l+0x5d8>)
 800e740:	6013      	str	r3, [r2, #0]
 800e742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e744:	42b3      	cmp	r3, r6
 800e746:	d100      	bne.n	800e74a <_strtod_l+0x4e6>
 800e748:	e5d3      	b.n	800e2f2 <_strtod_l+0x8e>
 800e74a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e74c:	9805      	ldr	r0, [sp, #20]
 800e74e:	f001 f9a9 	bl	800faa4 <_Bfree>
 800e752:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e754:	9805      	ldr	r0, [sp, #20]
 800e756:	f001 f9a5 	bl	800faa4 <_Bfree>
 800e75a:	9907      	ldr	r1, [sp, #28]
 800e75c:	9805      	ldr	r0, [sp, #20]
 800e75e:	f001 f9a1 	bl	800faa4 <_Bfree>
 800e762:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e764:	9805      	ldr	r0, [sp, #20]
 800e766:	f001 f99d 	bl	800faa4 <_Bfree>
 800e76a:	9906      	ldr	r1, [sp, #24]
 800e76c:	9805      	ldr	r0, [sp, #20]
 800e76e:	f001 f999 	bl	800faa4 <_Bfree>
 800e772:	e5be      	b.n	800e2f2 <_strtod_l+0x8e>
 800e774:	2300      	movs	r3, #0
 800e776:	0030      	movs	r0, r6
 800e778:	0039      	movs	r1, r7
 800e77a:	4d35      	ldr	r5, [pc, #212]	; (800e850 <_strtod_l+0x5ec>)
 800e77c:	1124      	asrs	r4, r4, #4
 800e77e:	9308      	str	r3, [sp, #32]
 800e780:	2c01      	cmp	r4, #1
 800e782:	dc1e      	bgt.n	800e7c2 <_strtod_l+0x55e>
 800e784:	2b00      	cmp	r3, #0
 800e786:	d001      	beq.n	800e78c <_strtod_l+0x528>
 800e788:	0006      	movs	r6, r0
 800e78a:	000f      	movs	r7, r1
 800e78c:	4b31      	ldr	r3, [pc, #196]	; (800e854 <_strtod_l+0x5f0>)
 800e78e:	0032      	movs	r2, r6
 800e790:	18ff      	adds	r7, r7, r3
 800e792:	9b08      	ldr	r3, [sp, #32]
 800e794:	00dd      	lsls	r5, r3, #3
 800e796:	4b2e      	ldr	r3, [pc, #184]	; (800e850 <_strtod_l+0x5ec>)
 800e798:	195d      	adds	r5, r3, r5
 800e79a:	6828      	ldr	r0, [r5, #0]
 800e79c:	6869      	ldr	r1, [r5, #4]
 800e79e:	003b      	movs	r3, r7
 800e7a0:	f7f3 f942 	bl	8001a28 <__aeabi_dmul>
 800e7a4:	4b25      	ldr	r3, [pc, #148]	; (800e83c <_strtod_l+0x5d8>)
 800e7a6:	4a2c      	ldr	r2, [pc, #176]	; (800e858 <_strtod_l+0x5f4>)
 800e7a8:	0006      	movs	r6, r0
 800e7aa:	400b      	ands	r3, r1
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d8be      	bhi.n	800e72e <_strtod_l+0x4ca>
 800e7b0:	4a2a      	ldr	r2, [pc, #168]	; (800e85c <_strtod_l+0x5f8>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d913      	bls.n	800e7de <_strtod_l+0x57a>
 800e7b6:	2601      	movs	r6, #1
 800e7b8:	4f29      	ldr	r7, [pc, #164]	; (800e860 <_strtod_l+0x5fc>)
 800e7ba:	4276      	negs	r6, r6
 800e7bc:	2300      	movs	r3, #0
 800e7be:	9308      	str	r3, [sp, #32]
 800e7c0:	e087      	b.n	800e8d2 <_strtod_l+0x66e>
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	4214      	tst	r4, r2
 800e7c6:	d004      	beq.n	800e7d2 <_strtod_l+0x56e>
 800e7c8:	682a      	ldr	r2, [r5, #0]
 800e7ca:	686b      	ldr	r3, [r5, #4]
 800e7cc:	f7f3 f92c 	bl	8001a28 <__aeabi_dmul>
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	9a08      	ldr	r2, [sp, #32]
 800e7d4:	1064      	asrs	r4, r4, #1
 800e7d6:	3201      	adds	r2, #1
 800e7d8:	9208      	str	r2, [sp, #32]
 800e7da:	3508      	adds	r5, #8
 800e7dc:	e7d0      	b.n	800e780 <_strtod_l+0x51c>
 800e7de:	23d4      	movs	r3, #212	; 0xd4
 800e7e0:	049b      	lsls	r3, r3, #18
 800e7e2:	18cf      	adds	r7, r1, r3
 800e7e4:	e7ea      	b.n	800e7bc <_strtod_l+0x558>
 800e7e6:	2c00      	cmp	r4, #0
 800e7e8:	d0e8      	beq.n	800e7bc <_strtod_l+0x558>
 800e7ea:	4264      	negs	r4, r4
 800e7ec:	220f      	movs	r2, #15
 800e7ee:	0023      	movs	r3, r4
 800e7f0:	4013      	ands	r3, r2
 800e7f2:	4214      	tst	r4, r2
 800e7f4:	d00a      	beq.n	800e80c <_strtod_l+0x5a8>
 800e7f6:	00da      	lsls	r2, r3, #3
 800e7f8:	4b14      	ldr	r3, [pc, #80]	; (800e84c <_strtod_l+0x5e8>)
 800e7fa:	0030      	movs	r0, r6
 800e7fc:	189b      	adds	r3, r3, r2
 800e7fe:	0039      	movs	r1, r7
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	f7f2 fd0e 	bl	8001224 <__aeabi_ddiv>
 800e808:	0006      	movs	r6, r0
 800e80a:	000f      	movs	r7, r1
 800e80c:	1124      	asrs	r4, r4, #4
 800e80e:	d0d5      	beq.n	800e7bc <_strtod_l+0x558>
 800e810:	2c1f      	cmp	r4, #31
 800e812:	dd27      	ble.n	800e864 <_strtod_l+0x600>
 800e814:	2300      	movs	r3, #0
 800e816:	9306      	str	r3, [sp, #24]
 800e818:	9307      	str	r3, [sp, #28]
 800e81a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e81c:	9309      	str	r3, [sp, #36]	; 0x24
 800e81e:	2322      	movs	r3, #34	; 0x22
 800e820:	9a05      	ldr	r2, [sp, #20]
 800e822:	2600      	movs	r6, #0
 800e824:	6013      	str	r3, [r2, #0]
 800e826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e828:	2700      	movs	r7, #0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d18d      	bne.n	800e74a <_strtod_l+0x4e6>
 800e82e:	e560      	b.n	800e2f2 <_strtod_l+0x8e>
 800e830:	00004e1f 	.word	0x00004e1f
 800e834:	08012b33 	.word	0x08012b33
 800e838:	08012b4c 	.word	0x08012b4c
 800e83c:	7ff00000 	.word	0x7ff00000
 800e840:	08012b30 	.word	0x08012b30
 800e844:	08012ef6 	.word	0x08012ef6
 800e848:	08012ef2 	.word	0x08012ef2
 800e84c:	08012db0 	.word	0x08012db0
 800e850:	08012d88 	.word	0x08012d88
 800e854:	fcb00000 	.word	0xfcb00000
 800e858:	7ca00000 	.word	0x7ca00000
 800e85c:	7c900000 	.word	0x7c900000
 800e860:	7fefffff 	.word	0x7fefffff
 800e864:	2310      	movs	r3, #16
 800e866:	0022      	movs	r2, r4
 800e868:	401a      	ands	r2, r3
 800e86a:	9208      	str	r2, [sp, #32]
 800e86c:	421c      	tst	r4, r3
 800e86e:	d001      	beq.n	800e874 <_strtod_l+0x610>
 800e870:	335a      	adds	r3, #90	; 0x5a
 800e872:	9308      	str	r3, [sp, #32]
 800e874:	0030      	movs	r0, r6
 800e876:	0039      	movs	r1, r7
 800e878:	2300      	movs	r3, #0
 800e87a:	4dc5      	ldr	r5, [pc, #788]	; (800eb90 <_strtod_l+0x92c>)
 800e87c:	2201      	movs	r2, #1
 800e87e:	4214      	tst	r4, r2
 800e880:	d004      	beq.n	800e88c <_strtod_l+0x628>
 800e882:	682a      	ldr	r2, [r5, #0]
 800e884:	686b      	ldr	r3, [r5, #4]
 800e886:	f7f3 f8cf 	bl	8001a28 <__aeabi_dmul>
 800e88a:	2301      	movs	r3, #1
 800e88c:	1064      	asrs	r4, r4, #1
 800e88e:	3508      	adds	r5, #8
 800e890:	2c00      	cmp	r4, #0
 800e892:	d1f3      	bne.n	800e87c <_strtod_l+0x618>
 800e894:	2b00      	cmp	r3, #0
 800e896:	d001      	beq.n	800e89c <_strtod_l+0x638>
 800e898:	0006      	movs	r6, r0
 800e89a:	000f      	movs	r7, r1
 800e89c:	9b08      	ldr	r3, [sp, #32]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d00f      	beq.n	800e8c2 <_strtod_l+0x65e>
 800e8a2:	236b      	movs	r3, #107	; 0x6b
 800e8a4:	007a      	lsls	r2, r7, #1
 800e8a6:	0d52      	lsrs	r2, r2, #21
 800e8a8:	0039      	movs	r1, r7
 800e8aa:	1a9b      	subs	r3, r3, r2
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	dd08      	ble.n	800e8c2 <_strtod_l+0x65e>
 800e8b0:	2b1f      	cmp	r3, #31
 800e8b2:	dc00      	bgt.n	800e8b6 <_strtod_l+0x652>
 800e8b4:	e124      	b.n	800eb00 <_strtod_l+0x89c>
 800e8b6:	2600      	movs	r6, #0
 800e8b8:	2b34      	cmp	r3, #52	; 0x34
 800e8ba:	dc00      	bgt.n	800e8be <_strtod_l+0x65a>
 800e8bc:	e119      	b.n	800eaf2 <_strtod_l+0x88e>
 800e8be:	27dc      	movs	r7, #220	; 0xdc
 800e8c0:	04bf      	lsls	r7, r7, #18
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	0030      	movs	r0, r6
 800e8c8:	0039      	movs	r1, r7
 800e8ca:	f7f1 fdc5 	bl	8000458 <__aeabi_dcmpeq>
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	d1a0      	bne.n	800e814 <_strtod_l+0x5b0>
 800e8d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8d6:	9300      	str	r3, [sp, #0]
 800e8d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e8da:	9b06      	ldr	r3, [sp, #24]
 800e8dc:	9805      	ldr	r0, [sp, #20]
 800e8de:	f001 f949 	bl	800fb74 <__s2b>
 800e8e2:	900b      	str	r0, [sp, #44]	; 0x2c
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	d100      	bne.n	800e8ea <_strtod_l+0x686>
 800e8e8:	e721      	b.n	800e72e <_strtod_l+0x4ca>
 800e8ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8ec:	9907      	ldr	r1, [sp, #28]
 800e8ee:	17da      	asrs	r2, r3, #31
 800e8f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e8f2:	1a5b      	subs	r3, r3, r1
 800e8f4:	401a      	ands	r2, r3
 800e8f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8f8:	9215      	str	r2, [sp, #84]	; 0x54
 800e8fa:	43db      	mvns	r3, r3
 800e8fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8fe:	17db      	asrs	r3, r3, #31
 800e900:	401a      	ands	r2, r3
 800e902:	2300      	movs	r3, #0
 800e904:	921a      	str	r2, [sp, #104]	; 0x68
 800e906:	9306      	str	r3, [sp, #24]
 800e908:	9307      	str	r3, [sp, #28]
 800e90a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e90c:	9805      	ldr	r0, [sp, #20]
 800e90e:	6859      	ldr	r1, [r3, #4]
 800e910:	f001 f884 	bl	800fa1c <_Balloc>
 800e914:	9009      	str	r0, [sp, #36]	; 0x24
 800e916:	2800      	cmp	r0, #0
 800e918:	d100      	bne.n	800e91c <_strtod_l+0x6b8>
 800e91a:	e70d      	b.n	800e738 <_strtod_l+0x4d4>
 800e91c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e91e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e920:	691b      	ldr	r3, [r3, #16]
 800e922:	310c      	adds	r1, #12
 800e924:	1c9a      	adds	r2, r3, #2
 800e926:	0092      	lsls	r2, r2, #2
 800e928:	300c      	adds	r0, #12
 800e92a:	930c      	str	r3, [sp, #48]	; 0x30
 800e92c:	f7ff fc0a 	bl	800e144 <memcpy>
 800e930:	ab22      	add	r3, sp, #136	; 0x88
 800e932:	9301      	str	r3, [sp, #4]
 800e934:	ab21      	add	r3, sp, #132	; 0x84
 800e936:	9300      	str	r3, [sp, #0]
 800e938:	0032      	movs	r2, r6
 800e93a:	003b      	movs	r3, r7
 800e93c:	9805      	ldr	r0, [sp, #20]
 800e93e:	9612      	str	r6, [sp, #72]	; 0x48
 800e940:	9713      	str	r7, [sp, #76]	; 0x4c
 800e942:	f001 fc63 	bl	801020c <__d2b>
 800e946:	9020      	str	r0, [sp, #128]	; 0x80
 800e948:	2800      	cmp	r0, #0
 800e94a:	d100      	bne.n	800e94e <_strtod_l+0x6ea>
 800e94c:	e6f4      	b.n	800e738 <_strtod_l+0x4d4>
 800e94e:	2101      	movs	r1, #1
 800e950:	9805      	ldr	r0, [sp, #20]
 800e952:	f001 f9a3 	bl	800fc9c <__i2b>
 800e956:	9007      	str	r0, [sp, #28]
 800e958:	2800      	cmp	r0, #0
 800e95a:	d100      	bne.n	800e95e <_strtod_l+0x6fa>
 800e95c:	e6ec      	b.n	800e738 <_strtod_l+0x4d4>
 800e95e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e960:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e962:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e964:	1ad4      	subs	r4, r2, r3
 800e966:	2b00      	cmp	r3, #0
 800e968:	db01      	blt.n	800e96e <_strtod_l+0x70a>
 800e96a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800e96c:	195d      	adds	r5, r3, r5
 800e96e:	9908      	ldr	r1, [sp, #32]
 800e970:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e972:	1a5b      	subs	r3, r3, r1
 800e974:	2136      	movs	r1, #54	; 0x36
 800e976:	189b      	adds	r3, r3, r2
 800e978:	1a8a      	subs	r2, r1, r2
 800e97a:	4986      	ldr	r1, [pc, #536]	; (800eb94 <_strtod_l+0x930>)
 800e97c:	2001      	movs	r0, #1
 800e97e:	468c      	mov	ip, r1
 800e980:	2100      	movs	r1, #0
 800e982:	3b01      	subs	r3, #1
 800e984:	9110      	str	r1, [sp, #64]	; 0x40
 800e986:	9014      	str	r0, [sp, #80]	; 0x50
 800e988:	4563      	cmp	r3, ip
 800e98a:	da07      	bge.n	800e99c <_strtod_l+0x738>
 800e98c:	4661      	mov	r1, ip
 800e98e:	1ac9      	subs	r1, r1, r3
 800e990:	1a52      	subs	r2, r2, r1
 800e992:	291f      	cmp	r1, #31
 800e994:	dd00      	ble.n	800e998 <_strtod_l+0x734>
 800e996:	e0b8      	b.n	800eb0a <_strtod_l+0x8a6>
 800e998:	4088      	lsls	r0, r1
 800e99a:	9014      	str	r0, [sp, #80]	; 0x50
 800e99c:	18ab      	adds	r3, r5, r2
 800e99e:	930c      	str	r3, [sp, #48]	; 0x30
 800e9a0:	18a4      	adds	r4, r4, r2
 800e9a2:	9b08      	ldr	r3, [sp, #32]
 800e9a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9a6:	191c      	adds	r4, r3, r4
 800e9a8:	002b      	movs	r3, r5
 800e9aa:	4295      	cmp	r5, r2
 800e9ac:	dd00      	ble.n	800e9b0 <_strtod_l+0x74c>
 800e9ae:	0013      	movs	r3, r2
 800e9b0:	42a3      	cmp	r3, r4
 800e9b2:	dd00      	ble.n	800e9b6 <_strtod_l+0x752>
 800e9b4:	0023      	movs	r3, r4
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	dd04      	ble.n	800e9c4 <_strtod_l+0x760>
 800e9ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9bc:	1ae4      	subs	r4, r4, r3
 800e9be:	1ad2      	subs	r2, r2, r3
 800e9c0:	920c      	str	r2, [sp, #48]	; 0x30
 800e9c2:	1aed      	subs	r5, r5, r3
 800e9c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	dd17      	ble.n	800e9fa <_strtod_l+0x796>
 800e9ca:	001a      	movs	r2, r3
 800e9cc:	9907      	ldr	r1, [sp, #28]
 800e9ce:	9805      	ldr	r0, [sp, #20]
 800e9d0:	f001 fa2a 	bl	800fe28 <__pow5mult>
 800e9d4:	9007      	str	r0, [sp, #28]
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	d100      	bne.n	800e9dc <_strtod_l+0x778>
 800e9da:	e6ad      	b.n	800e738 <_strtod_l+0x4d4>
 800e9dc:	0001      	movs	r1, r0
 800e9de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e9e0:	9805      	ldr	r0, [sp, #20]
 800e9e2:	f001 f971 	bl	800fcc8 <__multiply>
 800e9e6:	900f      	str	r0, [sp, #60]	; 0x3c
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d100      	bne.n	800e9ee <_strtod_l+0x78a>
 800e9ec:	e6a4      	b.n	800e738 <_strtod_l+0x4d4>
 800e9ee:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e9f0:	9805      	ldr	r0, [sp, #20]
 800e9f2:	f001 f857 	bl	800faa4 <_Bfree>
 800e9f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9f8:	9320      	str	r3, [sp, #128]	; 0x80
 800e9fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	dd00      	ble.n	800ea02 <_strtod_l+0x79e>
 800ea00:	e089      	b.n	800eb16 <_strtod_l+0x8b2>
 800ea02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	dd08      	ble.n	800ea1a <_strtod_l+0x7b6>
 800ea08:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ea0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea0c:	9805      	ldr	r0, [sp, #20]
 800ea0e:	f001 fa0b 	bl	800fe28 <__pow5mult>
 800ea12:	9009      	str	r0, [sp, #36]	; 0x24
 800ea14:	2800      	cmp	r0, #0
 800ea16:	d100      	bne.n	800ea1a <_strtod_l+0x7b6>
 800ea18:	e68e      	b.n	800e738 <_strtod_l+0x4d4>
 800ea1a:	2c00      	cmp	r4, #0
 800ea1c:	dd08      	ble.n	800ea30 <_strtod_l+0x7cc>
 800ea1e:	0022      	movs	r2, r4
 800ea20:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea22:	9805      	ldr	r0, [sp, #20]
 800ea24:	f001 fa5c 	bl	800fee0 <__lshift>
 800ea28:	9009      	str	r0, [sp, #36]	; 0x24
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	d100      	bne.n	800ea30 <_strtod_l+0x7cc>
 800ea2e:	e683      	b.n	800e738 <_strtod_l+0x4d4>
 800ea30:	2d00      	cmp	r5, #0
 800ea32:	dd08      	ble.n	800ea46 <_strtod_l+0x7e2>
 800ea34:	002a      	movs	r2, r5
 800ea36:	9907      	ldr	r1, [sp, #28]
 800ea38:	9805      	ldr	r0, [sp, #20]
 800ea3a:	f001 fa51 	bl	800fee0 <__lshift>
 800ea3e:	9007      	str	r0, [sp, #28]
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d100      	bne.n	800ea46 <_strtod_l+0x7e2>
 800ea44:	e678      	b.n	800e738 <_strtod_l+0x4d4>
 800ea46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea48:	9920      	ldr	r1, [sp, #128]	; 0x80
 800ea4a:	9805      	ldr	r0, [sp, #20]
 800ea4c:	f001 fad2 	bl	800fff4 <__mdiff>
 800ea50:	9006      	str	r0, [sp, #24]
 800ea52:	2800      	cmp	r0, #0
 800ea54:	d100      	bne.n	800ea58 <_strtod_l+0x7f4>
 800ea56:	e66f      	b.n	800e738 <_strtod_l+0x4d4>
 800ea58:	2200      	movs	r2, #0
 800ea5a:	68c3      	ldr	r3, [r0, #12]
 800ea5c:	9907      	ldr	r1, [sp, #28]
 800ea5e:	60c2      	str	r2, [r0, #12]
 800ea60:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea62:	f001 faab 	bl	800ffbc <__mcmp>
 800ea66:	2800      	cmp	r0, #0
 800ea68:	da5f      	bge.n	800eb2a <_strtod_l+0x8c6>
 800ea6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea6c:	4333      	orrs	r3, r6
 800ea6e:	d000      	beq.n	800ea72 <_strtod_l+0x80e>
 800ea70:	e08a      	b.n	800eb88 <_strtod_l+0x924>
 800ea72:	033b      	lsls	r3, r7, #12
 800ea74:	d000      	beq.n	800ea78 <_strtod_l+0x814>
 800ea76:	e087      	b.n	800eb88 <_strtod_l+0x924>
 800ea78:	22d6      	movs	r2, #214	; 0xd6
 800ea7a:	4b47      	ldr	r3, [pc, #284]	; (800eb98 <_strtod_l+0x934>)
 800ea7c:	04d2      	lsls	r2, r2, #19
 800ea7e:	403b      	ands	r3, r7
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d800      	bhi.n	800ea86 <_strtod_l+0x822>
 800ea84:	e080      	b.n	800eb88 <_strtod_l+0x924>
 800ea86:	9b06      	ldr	r3, [sp, #24]
 800ea88:	695b      	ldr	r3, [r3, #20]
 800ea8a:	930a      	str	r3, [sp, #40]	; 0x28
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d104      	bne.n	800ea9a <_strtod_l+0x836>
 800ea90:	9b06      	ldr	r3, [sp, #24]
 800ea92:	691b      	ldr	r3, [r3, #16]
 800ea94:	930a      	str	r3, [sp, #40]	; 0x28
 800ea96:	2b01      	cmp	r3, #1
 800ea98:	dd76      	ble.n	800eb88 <_strtod_l+0x924>
 800ea9a:	9906      	ldr	r1, [sp, #24]
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	9805      	ldr	r0, [sp, #20]
 800eaa0:	f001 fa1e 	bl	800fee0 <__lshift>
 800eaa4:	9907      	ldr	r1, [sp, #28]
 800eaa6:	9006      	str	r0, [sp, #24]
 800eaa8:	f001 fa88 	bl	800ffbc <__mcmp>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	dd6b      	ble.n	800eb88 <_strtod_l+0x924>
 800eab0:	9908      	ldr	r1, [sp, #32]
 800eab2:	003b      	movs	r3, r7
 800eab4:	4a38      	ldr	r2, [pc, #224]	; (800eb98 <_strtod_l+0x934>)
 800eab6:	2900      	cmp	r1, #0
 800eab8:	d100      	bne.n	800eabc <_strtod_l+0x858>
 800eaba:	e092      	b.n	800ebe2 <_strtod_l+0x97e>
 800eabc:	0011      	movs	r1, r2
 800eabe:	20d6      	movs	r0, #214	; 0xd6
 800eac0:	4039      	ands	r1, r7
 800eac2:	04c0      	lsls	r0, r0, #19
 800eac4:	4281      	cmp	r1, r0
 800eac6:	dd00      	ble.n	800eaca <_strtod_l+0x866>
 800eac8:	e08b      	b.n	800ebe2 <_strtod_l+0x97e>
 800eaca:	23dc      	movs	r3, #220	; 0xdc
 800eacc:	049b      	lsls	r3, r3, #18
 800eace:	4299      	cmp	r1, r3
 800ead0:	dc00      	bgt.n	800ead4 <_strtod_l+0x870>
 800ead2:	e6a4      	b.n	800e81e <_strtod_l+0x5ba>
 800ead4:	0030      	movs	r0, r6
 800ead6:	0039      	movs	r1, r7
 800ead8:	2200      	movs	r2, #0
 800eada:	4b30      	ldr	r3, [pc, #192]	; (800eb9c <_strtod_l+0x938>)
 800eadc:	f7f2 ffa4 	bl	8001a28 <__aeabi_dmul>
 800eae0:	0006      	movs	r6, r0
 800eae2:	000f      	movs	r7, r1
 800eae4:	4308      	orrs	r0, r1
 800eae6:	d000      	beq.n	800eaea <_strtod_l+0x886>
 800eae8:	e62f      	b.n	800e74a <_strtod_l+0x4e6>
 800eaea:	2322      	movs	r3, #34	; 0x22
 800eaec:	9a05      	ldr	r2, [sp, #20]
 800eaee:	6013      	str	r3, [r2, #0]
 800eaf0:	e62b      	b.n	800e74a <_strtod_l+0x4e6>
 800eaf2:	234b      	movs	r3, #75	; 0x4b
 800eaf4:	1a9a      	subs	r2, r3, r2
 800eaf6:	3b4c      	subs	r3, #76	; 0x4c
 800eaf8:	4093      	lsls	r3, r2
 800eafa:	4019      	ands	r1, r3
 800eafc:	000f      	movs	r7, r1
 800eafe:	e6e0      	b.n	800e8c2 <_strtod_l+0x65e>
 800eb00:	2201      	movs	r2, #1
 800eb02:	4252      	negs	r2, r2
 800eb04:	409a      	lsls	r2, r3
 800eb06:	4016      	ands	r6, r2
 800eb08:	e6db      	b.n	800e8c2 <_strtod_l+0x65e>
 800eb0a:	4925      	ldr	r1, [pc, #148]	; (800eba0 <_strtod_l+0x93c>)
 800eb0c:	1acb      	subs	r3, r1, r3
 800eb0e:	0001      	movs	r1, r0
 800eb10:	4099      	lsls	r1, r3
 800eb12:	9110      	str	r1, [sp, #64]	; 0x40
 800eb14:	e741      	b.n	800e99a <_strtod_l+0x736>
 800eb16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb18:	9920      	ldr	r1, [sp, #128]	; 0x80
 800eb1a:	9805      	ldr	r0, [sp, #20]
 800eb1c:	f001 f9e0 	bl	800fee0 <__lshift>
 800eb20:	9020      	str	r0, [sp, #128]	; 0x80
 800eb22:	2800      	cmp	r0, #0
 800eb24:	d000      	beq.n	800eb28 <_strtod_l+0x8c4>
 800eb26:	e76c      	b.n	800ea02 <_strtod_l+0x79e>
 800eb28:	e606      	b.n	800e738 <_strtod_l+0x4d4>
 800eb2a:	970c      	str	r7, [sp, #48]	; 0x30
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d176      	bne.n	800ec1e <_strtod_l+0x9ba>
 800eb30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eb32:	033b      	lsls	r3, r7, #12
 800eb34:	0b1b      	lsrs	r3, r3, #12
 800eb36:	2a00      	cmp	r2, #0
 800eb38:	d038      	beq.n	800ebac <_strtod_l+0x948>
 800eb3a:	4a1a      	ldr	r2, [pc, #104]	; (800eba4 <_strtod_l+0x940>)
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d138      	bne.n	800ebb2 <_strtod_l+0x94e>
 800eb40:	2201      	movs	r2, #1
 800eb42:	9b08      	ldr	r3, [sp, #32]
 800eb44:	4252      	negs	r2, r2
 800eb46:	0031      	movs	r1, r6
 800eb48:	0010      	movs	r0, r2
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d00b      	beq.n	800eb66 <_strtod_l+0x902>
 800eb4e:	24d4      	movs	r4, #212	; 0xd4
 800eb50:	4b11      	ldr	r3, [pc, #68]	; (800eb98 <_strtod_l+0x934>)
 800eb52:	0010      	movs	r0, r2
 800eb54:	403b      	ands	r3, r7
 800eb56:	04e4      	lsls	r4, r4, #19
 800eb58:	42a3      	cmp	r3, r4
 800eb5a:	d804      	bhi.n	800eb66 <_strtod_l+0x902>
 800eb5c:	306c      	adds	r0, #108	; 0x6c
 800eb5e:	0d1b      	lsrs	r3, r3, #20
 800eb60:	1ac3      	subs	r3, r0, r3
 800eb62:	409a      	lsls	r2, r3
 800eb64:	0010      	movs	r0, r2
 800eb66:	4281      	cmp	r1, r0
 800eb68:	d123      	bne.n	800ebb2 <_strtod_l+0x94e>
 800eb6a:	4b0f      	ldr	r3, [pc, #60]	; (800eba8 <_strtod_l+0x944>)
 800eb6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d102      	bne.n	800eb78 <_strtod_l+0x914>
 800eb72:	1c4b      	adds	r3, r1, #1
 800eb74:	d100      	bne.n	800eb78 <_strtod_l+0x914>
 800eb76:	e5df      	b.n	800e738 <_strtod_l+0x4d4>
 800eb78:	4b07      	ldr	r3, [pc, #28]	; (800eb98 <_strtod_l+0x934>)
 800eb7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb7c:	2600      	movs	r6, #0
 800eb7e:	401a      	ands	r2, r3
 800eb80:	0013      	movs	r3, r2
 800eb82:	2280      	movs	r2, #128	; 0x80
 800eb84:	0352      	lsls	r2, r2, #13
 800eb86:	189f      	adds	r7, r3, r2
 800eb88:	9b08      	ldr	r3, [sp, #32]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d1a2      	bne.n	800ead4 <_strtod_l+0x870>
 800eb8e:	e5dc      	b.n	800e74a <_strtod_l+0x4e6>
 800eb90:	08012b60 	.word	0x08012b60
 800eb94:	fffffc02 	.word	0xfffffc02
 800eb98:	7ff00000 	.word	0x7ff00000
 800eb9c:	39500000 	.word	0x39500000
 800eba0:	fffffbe2 	.word	0xfffffbe2
 800eba4:	000fffff 	.word	0x000fffff
 800eba8:	7fefffff 	.word	0x7fefffff
 800ebac:	4333      	orrs	r3, r6
 800ebae:	d100      	bne.n	800ebb2 <_strtod_l+0x94e>
 800ebb0:	e77e      	b.n	800eab0 <_strtod_l+0x84c>
 800ebb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d01d      	beq.n	800ebf4 <_strtod_l+0x990>
 800ebb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ebbc:	4213      	tst	r3, r2
 800ebbe:	d0e3      	beq.n	800eb88 <_strtod_l+0x924>
 800ebc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebc2:	0030      	movs	r0, r6
 800ebc4:	0039      	movs	r1, r7
 800ebc6:	9a08      	ldr	r2, [sp, #32]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d017      	beq.n	800ebfc <_strtod_l+0x998>
 800ebcc:	f7ff fb32 	bl	800e234 <sulp>
 800ebd0:	0002      	movs	r2, r0
 800ebd2:	000b      	movs	r3, r1
 800ebd4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ebd6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ebd8:	f7f1 ffe8 	bl	8000bac <__aeabi_dadd>
 800ebdc:	0006      	movs	r6, r0
 800ebde:	000f      	movs	r7, r1
 800ebe0:	e7d2      	b.n	800eb88 <_strtod_l+0x924>
 800ebe2:	2601      	movs	r6, #1
 800ebe4:	4013      	ands	r3, r2
 800ebe6:	4a99      	ldr	r2, [pc, #612]	; (800ee4c <_strtod_l+0xbe8>)
 800ebe8:	4276      	negs	r6, r6
 800ebea:	189b      	adds	r3, r3, r2
 800ebec:	4a98      	ldr	r2, [pc, #608]	; (800ee50 <_strtod_l+0xbec>)
 800ebee:	431a      	orrs	r2, r3
 800ebf0:	0017      	movs	r7, r2
 800ebf2:	e7c9      	b.n	800eb88 <_strtod_l+0x924>
 800ebf4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ebf6:	4233      	tst	r3, r6
 800ebf8:	d0c6      	beq.n	800eb88 <_strtod_l+0x924>
 800ebfa:	e7e1      	b.n	800ebc0 <_strtod_l+0x95c>
 800ebfc:	f7ff fb1a 	bl	800e234 <sulp>
 800ec00:	0002      	movs	r2, r0
 800ec02:	000b      	movs	r3, r1
 800ec04:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ec06:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ec08:	f7f3 f97a 	bl	8001f00 <__aeabi_dsub>
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	2300      	movs	r3, #0
 800ec10:	0006      	movs	r6, r0
 800ec12:	000f      	movs	r7, r1
 800ec14:	f7f1 fc20 	bl	8000458 <__aeabi_dcmpeq>
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	d0b5      	beq.n	800eb88 <_strtod_l+0x924>
 800ec1c:	e5ff      	b.n	800e81e <_strtod_l+0x5ba>
 800ec1e:	9907      	ldr	r1, [sp, #28]
 800ec20:	9806      	ldr	r0, [sp, #24]
 800ec22:	f001 fb57 	bl	80102d4 <__ratio>
 800ec26:	2380      	movs	r3, #128	; 0x80
 800ec28:	2200      	movs	r2, #0
 800ec2a:	05db      	lsls	r3, r3, #23
 800ec2c:	0004      	movs	r4, r0
 800ec2e:	000d      	movs	r5, r1
 800ec30:	f7f1 fc22 	bl	8000478 <__aeabi_dcmple>
 800ec34:	2800      	cmp	r0, #0
 800ec36:	d075      	beq.n	800ed24 <_strtod_l+0xac0>
 800ec38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d047      	beq.n	800ecce <_strtod_l+0xa6a>
 800ec3e:	2300      	movs	r3, #0
 800ec40:	4c84      	ldr	r4, [pc, #528]	; (800ee54 <_strtod_l+0xbf0>)
 800ec42:	2500      	movs	r5, #0
 800ec44:	9310      	str	r3, [sp, #64]	; 0x40
 800ec46:	9411      	str	r4, [sp, #68]	; 0x44
 800ec48:	4c82      	ldr	r4, [pc, #520]	; (800ee54 <_strtod_l+0xbf0>)
 800ec4a:	4a83      	ldr	r2, [pc, #524]	; (800ee58 <_strtod_l+0xbf4>)
 800ec4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec4e:	4013      	ands	r3, r2
 800ec50:	9314      	str	r3, [sp, #80]	; 0x50
 800ec52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ec54:	4b81      	ldr	r3, [pc, #516]	; (800ee5c <_strtod_l+0xbf8>)
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d000      	beq.n	800ec5c <_strtod_l+0x9f8>
 800ec5a:	e0ac      	b.n	800edb6 <_strtod_l+0xb52>
 800ec5c:	4a80      	ldr	r2, [pc, #512]	; (800ee60 <_strtod_l+0xbfc>)
 800ec5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec60:	4694      	mov	ip, r2
 800ec62:	4463      	add	r3, ip
 800ec64:	001f      	movs	r7, r3
 800ec66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec6a:	0030      	movs	r0, r6
 800ec6c:	0039      	movs	r1, r7
 800ec6e:	920c      	str	r2, [sp, #48]	; 0x30
 800ec70:	930d      	str	r3, [sp, #52]	; 0x34
 800ec72:	f001 fa57 	bl	8010124 <__ulp>
 800ec76:	0002      	movs	r2, r0
 800ec78:	000b      	movs	r3, r1
 800ec7a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ec7c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ec7e:	f7f2 fed3 	bl	8001a28 <__aeabi_dmul>
 800ec82:	0032      	movs	r2, r6
 800ec84:	003b      	movs	r3, r7
 800ec86:	f7f1 ff91 	bl	8000bac <__aeabi_dadd>
 800ec8a:	4a73      	ldr	r2, [pc, #460]	; (800ee58 <_strtod_l+0xbf4>)
 800ec8c:	4b75      	ldr	r3, [pc, #468]	; (800ee64 <_strtod_l+0xc00>)
 800ec8e:	0006      	movs	r6, r0
 800ec90:	400a      	ands	r2, r1
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d95e      	bls.n	800ed54 <_strtod_l+0xaf0>
 800ec96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ec98:	4b73      	ldr	r3, [pc, #460]	; (800ee68 <_strtod_l+0xc04>)
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d103      	bne.n	800eca6 <_strtod_l+0xa42>
 800ec9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eca0:	3301      	adds	r3, #1
 800eca2:	d100      	bne.n	800eca6 <_strtod_l+0xa42>
 800eca4:	e548      	b.n	800e738 <_strtod_l+0x4d4>
 800eca6:	2601      	movs	r6, #1
 800eca8:	4f6f      	ldr	r7, [pc, #444]	; (800ee68 <_strtod_l+0xc04>)
 800ecaa:	4276      	negs	r6, r6
 800ecac:	9920      	ldr	r1, [sp, #128]	; 0x80
 800ecae:	9805      	ldr	r0, [sp, #20]
 800ecb0:	f000 fef8 	bl	800faa4 <_Bfree>
 800ecb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ecb6:	9805      	ldr	r0, [sp, #20]
 800ecb8:	f000 fef4 	bl	800faa4 <_Bfree>
 800ecbc:	9907      	ldr	r1, [sp, #28]
 800ecbe:	9805      	ldr	r0, [sp, #20]
 800ecc0:	f000 fef0 	bl	800faa4 <_Bfree>
 800ecc4:	9906      	ldr	r1, [sp, #24]
 800ecc6:	9805      	ldr	r0, [sp, #20]
 800ecc8:	f000 feec 	bl	800faa4 <_Bfree>
 800eccc:	e61d      	b.n	800e90a <_strtod_l+0x6a6>
 800ecce:	2e00      	cmp	r6, #0
 800ecd0:	d11c      	bne.n	800ed0c <_strtod_l+0xaa8>
 800ecd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ecd4:	031b      	lsls	r3, r3, #12
 800ecd6:	d11f      	bne.n	800ed18 <_strtod_l+0xab4>
 800ecd8:	2200      	movs	r2, #0
 800ecda:	0020      	movs	r0, r4
 800ecdc:	0029      	movs	r1, r5
 800ecde:	4b5d      	ldr	r3, [pc, #372]	; (800ee54 <_strtod_l+0xbf0>)
 800ece0:	f7f1 fbc0 	bl	8000464 <__aeabi_dcmplt>
 800ece4:	2800      	cmp	r0, #0
 800ece6:	d11a      	bne.n	800ed1e <_strtod_l+0xaba>
 800ece8:	0020      	movs	r0, r4
 800ecea:	0029      	movs	r1, r5
 800ecec:	2200      	movs	r2, #0
 800ecee:	4b5f      	ldr	r3, [pc, #380]	; (800ee6c <_strtod_l+0xc08>)
 800ecf0:	f7f2 fe9a 	bl	8001a28 <__aeabi_dmul>
 800ecf4:	0005      	movs	r5, r0
 800ecf6:	000c      	movs	r4, r1
 800ecf8:	2380      	movs	r3, #128	; 0x80
 800ecfa:	061b      	lsls	r3, r3, #24
 800ecfc:	18e3      	adds	r3, r4, r3
 800ecfe:	951c      	str	r5, [sp, #112]	; 0x70
 800ed00:	931d      	str	r3, [sp, #116]	; 0x74
 800ed02:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ed04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ed06:	9210      	str	r2, [sp, #64]	; 0x40
 800ed08:	9311      	str	r3, [sp, #68]	; 0x44
 800ed0a:	e79e      	b.n	800ec4a <_strtod_l+0x9e6>
 800ed0c:	2e01      	cmp	r6, #1
 800ed0e:	d103      	bne.n	800ed18 <_strtod_l+0xab4>
 800ed10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d100      	bne.n	800ed18 <_strtod_l+0xab4>
 800ed16:	e582      	b.n	800e81e <_strtod_l+0x5ba>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	4c55      	ldr	r4, [pc, #340]	; (800ee70 <_strtod_l+0xc0c>)
 800ed1c:	e791      	b.n	800ec42 <_strtod_l+0x9de>
 800ed1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ed20:	4c52      	ldr	r4, [pc, #328]	; (800ee6c <_strtod_l+0xc08>)
 800ed22:	e7e9      	b.n	800ecf8 <_strtod_l+0xa94>
 800ed24:	2200      	movs	r2, #0
 800ed26:	0020      	movs	r0, r4
 800ed28:	0029      	movs	r1, r5
 800ed2a:	4b50      	ldr	r3, [pc, #320]	; (800ee6c <_strtod_l+0xc08>)
 800ed2c:	f7f2 fe7c 	bl	8001a28 <__aeabi_dmul>
 800ed30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed32:	0005      	movs	r5, r0
 800ed34:	000b      	movs	r3, r1
 800ed36:	000c      	movs	r4, r1
 800ed38:	2a00      	cmp	r2, #0
 800ed3a:	d107      	bne.n	800ed4c <_strtod_l+0xae8>
 800ed3c:	2280      	movs	r2, #128	; 0x80
 800ed3e:	0612      	lsls	r2, r2, #24
 800ed40:	188b      	adds	r3, r1, r2
 800ed42:	9016      	str	r0, [sp, #88]	; 0x58
 800ed44:	9317      	str	r3, [sp, #92]	; 0x5c
 800ed46:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ed48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed4a:	e7dc      	b.n	800ed06 <_strtod_l+0xaa2>
 800ed4c:	0002      	movs	r2, r0
 800ed4e:	9216      	str	r2, [sp, #88]	; 0x58
 800ed50:	9317      	str	r3, [sp, #92]	; 0x5c
 800ed52:	e7f8      	b.n	800ed46 <_strtod_l+0xae2>
 800ed54:	23d4      	movs	r3, #212	; 0xd4
 800ed56:	049b      	lsls	r3, r3, #18
 800ed58:	18cf      	adds	r7, r1, r3
 800ed5a:	9b08      	ldr	r3, [sp, #32]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d1a5      	bne.n	800ecac <_strtod_l+0xa48>
 800ed60:	4b3d      	ldr	r3, [pc, #244]	; (800ee58 <_strtod_l+0xbf4>)
 800ed62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ed64:	403b      	ands	r3, r7
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d1a0      	bne.n	800ecac <_strtod_l+0xa48>
 800ed6a:	0028      	movs	r0, r5
 800ed6c:	0021      	movs	r1, r4
 800ed6e:	f7f1 fbf9 	bl	8000564 <__aeabi_d2lz>
 800ed72:	f7f1 fc33 	bl	80005dc <__aeabi_l2d>
 800ed76:	0002      	movs	r2, r0
 800ed78:	000b      	movs	r3, r1
 800ed7a:	0028      	movs	r0, r5
 800ed7c:	0021      	movs	r1, r4
 800ed7e:	f7f3 f8bf 	bl	8001f00 <__aeabi_dsub>
 800ed82:	033b      	lsls	r3, r7, #12
 800ed84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed86:	0b1b      	lsrs	r3, r3, #12
 800ed88:	4333      	orrs	r3, r6
 800ed8a:	4313      	orrs	r3, r2
 800ed8c:	0004      	movs	r4, r0
 800ed8e:	000d      	movs	r5, r1
 800ed90:	4a38      	ldr	r2, [pc, #224]	; (800ee74 <_strtod_l+0xc10>)
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d055      	beq.n	800ee42 <_strtod_l+0xbde>
 800ed96:	4b38      	ldr	r3, [pc, #224]	; (800ee78 <_strtod_l+0xc14>)
 800ed98:	f7f1 fb64 	bl	8000464 <__aeabi_dcmplt>
 800ed9c:	2800      	cmp	r0, #0
 800ed9e:	d000      	beq.n	800eda2 <_strtod_l+0xb3e>
 800eda0:	e4d3      	b.n	800e74a <_strtod_l+0x4e6>
 800eda2:	0020      	movs	r0, r4
 800eda4:	0029      	movs	r1, r5
 800eda6:	4a35      	ldr	r2, [pc, #212]	; (800ee7c <_strtod_l+0xc18>)
 800eda8:	4b30      	ldr	r3, [pc, #192]	; (800ee6c <_strtod_l+0xc08>)
 800edaa:	f7f1 fb6f 	bl	800048c <__aeabi_dcmpgt>
 800edae:	2800      	cmp	r0, #0
 800edb0:	d100      	bne.n	800edb4 <_strtod_l+0xb50>
 800edb2:	e77b      	b.n	800ecac <_strtod_l+0xa48>
 800edb4:	e4c9      	b.n	800e74a <_strtod_l+0x4e6>
 800edb6:	9b08      	ldr	r3, [sp, #32]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d02b      	beq.n	800ee14 <_strtod_l+0xbb0>
 800edbc:	23d4      	movs	r3, #212	; 0xd4
 800edbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800edc0:	04db      	lsls	r3, r3, #19
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d826      	bhi.n	800ee14 <_strtod_l+0xbb0>
 800edc6:	0028      	movs	r0, r5
 800edc8:	0021      	movs	r1, r4
 800edca:	4a2d      	ldr	r2, [pc, #180]	; (800ee80 <_strtod_l+0xc1c>)
 800edcc:	4b2d      	ldr	r3, [pc, #180]	; (800ee84 <_strtod_l+0xc20>)
 800edce:	f7f1 fb53 	bl	8000478 <__aeabi_dcmple>
 800edd2:	2800      	cmp	r0, #0
 800edd4:	d017      	beq.n	800ee06 <_strtod_l+0xba2>
 800edd6:	0028      	movs	r0, r5
 800edd8:	0021      	movs	r1, r4
 800edda:	f7f1 fba5 	bl	8000528 <__aeabi_d2uiz>
 800edde:	2800      	cmp	r0, #0
 800ede0:	d100      	bne.n	800ede4 <_strtod_l+0xb80>
 800ede2:	3001      	adds	r0, #1
 800ede4:	f7f3 fca2 	bl	800272c <__aeabi_ui2d>
 800ede8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800edea:	0005      	movs	r5, r0
 800edec:	000b      	movs	r3, r1
 800edee:	000c      	movs	r4, r1
 800edf0:	2a00      	cmp	r2, #0
 800edf2:	d122      	bne.n	800ee3a <_strtod_l+0xbd6>
 800edf4:	2280      	movs	r2, #128	; 0x80
 800edf6:	0612      	lsls	r2, r2, #24
 800edf8:	188b      	adds	r3, r1, r2
 800edfa:	9018      	str	r0, [sp, #96]	; 0x60
 800edfc:	9319      	str	r3, [sp, #100]	; 0x64
 800edfe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ee00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ee02:	9210      	str	r2, [sp, #64]	; 0x40
 800ee04:	9311      	str	r3, [sp, #68]	; 0x44
 800ee06:	22d6      	movs	r2, #214	; 0xd6
 800ee08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee0a:	04d2      	lsls	r2, r2, #19
 800ee0c:	189b      	adds	r3, r3, r2
 800ee0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ee10:	1a9b      	subs	r3, r3, r2
 800ee12:	9311      	str	r3, [sp, #68]	; 0x44
 800ee14:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ee16:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ee18:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800ee1a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800ee1c:	f001 f982 	bl	8010124 <__ulp>
 800ee20:	0002      	movs	r2, r0
 800ee22:	000b      	movs	r3, r1
 800ee24:	0030      	movs	r0, r6
 800ee26:	0039      	movs	r1, r7
 800ee28:	f7f2 fdfe 	bl	8001a28 <__aeabi_dmul>
 800ee2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ee2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ee30:	f7f1 febc 	bl	8000bac <__aeabi_dadd>
 800ee34:	0006      	movs	r6, r0
 800ee36:	000f      	movs	r7, r1
 800ee38:	e78f      	b.n	800ed5a <_strtod_l+0xaf6>
 800ee3a:	0002      	movs	r2, r0
 800ee3c:	9218      	str	r2, [sp, #96]	; 0x60
 800ee3e:	9319      	str	r3, [sp, #100]	; 0x64
 800ee40:	e7dd      	b.n	800edfe <_strtod_l+0xb9a>
 800ee42:	4b11      	ldr	r3, [pc, #68]	; (800ee88 <_strtod_l+0xc24>)
 800ee44:	f7f1 fb0e 	bl	8000464 <__aeabi_dcmplt>
 800ee48:	e7b1      	b.n	800edae <_strtod_l+0xb4a>
 800ee4a:	46c0      	nop			; (mov r8, r8)
 800ee4c:	fff00000 	.word	0xfff00000
 800ee50:	000fffff 	.word	0x000fffff
 800ee54:	3ff00000 	.word	0x3ff00000
 800ee58:	7ff00000 	.word	0x7ff00000
 800ee5c:	7fe00000 	.word	0x7fe00000
 800ee60:	fcb00000 	.word	0xfcb00000
 800ee64:	7c9fffff 	.word	0x7c9fffff
 800ee68:	7fefffff 	.word	0x7fefffff
 800ee6c:	3fe00000 	.word	0x3fe00000
 800ee70:	bff00000 	.word	0xbff00000
 800ee74:	94a03595 	.word	0x94a03595
 800ee78:	3fdfffff 	.word	0x3fdfffff
 800ee7c:	35afe535 	.word	0x35afe535
 800ee80:	ffc00000 	.word	0xffc00000
 800ee84:	41dfffff 	.word	0x41dfffff
 800ee88:	3fcfffff 	.word	0x3fcfffff

0800ee8c <strtof>:
 800ee8c:	000a      	movs	r2, r1
 800ee8e:	0001      	movs	r1, r0
 800ee90:	4824      	ldr	r0, [pc, #144]	; (800ef24 <strtof+0x98>)
 800ee92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee94:	6800      	ldr	r0, [r0, #0]
 800ee96:	4b24      	ldr	r3, [pc, #144]	; (800ef28 <strtof+0x9c>)
 800ee98:	f7ff f9e4 	bl	800e264 <_strtod_l>
 800ee9c:	0006      	movs	r6, r0
 800ee9e:	000c      	movs	r4, r1
 800eea0:	0002      	movs	r2, r0
 800eea2:	000b      	movs	r3, r1
 800eea4:	0030      	movs	r0, r6
 800eea6:	0021      	movs	r1, r4
 800eea8:	f7f3 fbbc 	bl	8002624 <__aeabi_dcmpun>
 800eeac:	2800      	cmp	r0, #0
 800eeae:	d00d      	beq.n	800eecc <strtof+0x40>
 800eeb0:	481e      	ldr	r0, [pc, #120]	; (800ef2c <strtof+0xa0>)
 800eeb2:	2c00      	cmp	r4, #0
 800eeb4:	da06      	bge.n	800eec4 <strtof+0x38>
 800eeb6:	f001 fe85 	bl	8010bc4 <nanf>
 800eeba:	2380      	movs	r3, #128	; 0x80
 800eebc:	061b      	lsls	r3, r3, #24
 800eebe:	18c5      	adds	r5, r0, r3
 800eec0:	1c28      	adds	r0, r5, #0
 800eec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eec4:	f001 fe7e 	bl	8010bc4 <nanf>
 800eec8:	1c05      	adds	r5, r0, #0
 800eeca:	e7f9      	b.n	800eec0 <strtof+0x34>
 800eecc:	0021      	movs	r1, r4
 800eece:	0030      	movs	r0, r6
 800eed0:	f7f3 fc9a 	bl	8002808 <__aeabi_d2f>
 800eed4:	0047      	lsls	r7, r0, #1
 800eed6:	087f      	lsrs	r7, r7, #1
 800eed8:	1c05      	adds	r5, r0, #0
 800eeda:	4915      	ldr	r1, [pc, #84]	; (800ef30 <strtof+0xa4>)
 800eedc:	1c38      	adds	r0, r7, #0
 800eede:	f7f1 fde1 	bl	8000aa4 <__aeabi_fcmpun>
 800eee2:	2800      	cmp	r0, #0
 800eee4:	d1ec      	bne.n	800eec0 <strtof+0x34>
 800eee6:	4912      	ldr	r1, [pc, #72]	; (800ef30 <strtof+0xa4>)
 800eee8:	1c38      	adds	r0, r7, #0
 800eeea:	f7f1 faff 	bl	80004ec <__aeabi_fcmple>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d1e6      	bne.n	800eec0 <strtof+0x34>
 800eef2:	2201      	movs	r2, #1
 800eef4:	0064      	lsls	r4, r4, #1
 800eef6:	0864      	lsrs	r4, r4, #1
 800eef8:	0030      	movs	r0, r6
 800eefa:	0021      	movs	r1, r4
 800eefc:	4b0d      	ldr	r3, [pc, #52]	; (800ef34 <strtof+0xa8>)
 800eefe:	4252      	negs	r2, r2
 800ef00:	f7f3 fb90 	bl	8002624 <__aeabi_dcmpun>
 800ef04:	2800      	cmp	r0, #0
 800ef06:	d108      	bne.n	800ef1a <strtof+0x8e>
 800ef08:	2201      	movs	r2, #1
 800ef0a:	0030      	movs	r0, r6
 800ef0c:	0021      	movs	r1, r4
 800ef0e:	4b09      	ldr	r3, [pc, #36]	; (800ef34 <strtof+0xa8>)
 800ef10:	4252      	negs	r2, r2
 800ef12:	f7f1 fab1 	bl	8000478 <__aeabi_dcmple>
 800ef16:	2800      	cmp	r0, #0
 800ef18:	d0d2      	beq.n	800eec0 <strtof+0x34>
 800ef1a:	2222      	movs	r2, #34	; 0x22
 800ef1c:	4b01      	ldr	r3, [pc, #4]	; (800ef24 <strtof+0x98>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	601a      	str	r2, [r3, #0]
 800ef22:	e7cd      	b.n	800eec0 <strtof+0x34>
 800ef24:	200000e0 	.word	0x200000e0
 800ef28:	20000148 	.word	0x20000148
 800ef2c:	08012ef2 	.word	0x08012ef2
 800ef30:	7f7fffff 	.word	0x7f7fffff
 800ef34:	7fefffff 	.word	0x7fefffff

0800ef38 <_strtol_l.constprop.0>:
 800ef38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef3a:	b087      	sub	sp, #28
 800ef3c:	001e      	movs	r6, r3
 800ef3e:	9005      	str	r0, [sp, #20]
 800ef40:	9101      	str	r1, [sp, #4]
 800ef42:	9202      	str	r2, [sp, #8]
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	d045      	beq.n	800efd4 <_strtol_l.constprop.0+0x9c>
 800ef48:	000b      	movs	r3, r1
 800ef4a:	2e24      	cmp	r6, #36	; 0x24
 800ef4c:	d842      	bhi.n	800efd4 <_strtol_l.constprop.0+0x9c>
 800ef4e:	4a3f      	ldr	r2, [pc, #252]	; (800f04c <_strtol_l.constprop.0+0x114>)
 800ef50:	2108      	movs	r1, #8
 800ef52:	4694      	mov	ip, r2
 800ef54:	001a      	movs	r2, r3
 800ef56:	4660      	mov	r0, ip
 800ef58:	7814      	ldrb	r4, [r2, #0]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	5d00      	ldrb	r0, [r0, r4]
 800ef5e:	001d      	movs	r5, r3
 800ef60:	0007      	movs	r7, r0
 800ef62:	400f      	ands	r7, r1
 800ef64:	4208      	tst	r0, r1
 800ef66:	d1f5      	bne.n	800ef54 <_strtol_l.constprop.0+0x1c>
 800ef68:	2c2d      	cmp	r4, #45	; 0x2d
 800ef6a:	d13a      	bne.n	800efe2 <_strtol_l.constprop.0+0xaa>
 800ef6c:	2701      	movs	r7, #1
 800ef6e:	781c      	ldrb	r4, [r3, #0]
 800ef70:	1c95      	adds	r5, r2, #2
 800ef72:	2e00      	cmp	r6, #0
 800ef74:	d065      	beq.n	800f042 <_strtol_l.constprop.0+0x10a>
 800ef76:	2e10      	cmp	r6, #16
 800ef78:	d109      	bne.n	800ef8e <_strtol_l.constprop.0+0x56>
 800ef7a:	2c30      	cmp	r4, #48	; 0x30
 800ef7c:	d107      	bne.n	800ef8e <_strtol_l.constprop.0+0x56>
 800ef7e:	2220      	movs	r2, #32
 800ef80:	782b      	ldrb	r3, [r5, #0]
 800ef82:	4393      	bics	r3, r2
 800ef84:	2b58      	cmp	r3, #88	; 0x58
 800ef86:	d157      	bne.n	800f038 <_strtol_l.constprop.0+0x100>
 800ef88:	2610      	movs	r6, #16
 800ef8a:	786c      	ldrb	r4, [r5, #1]
 800ef8c:	3502      	adds	r5, #2
 800ef8e:	4b30      	ldr	r3, [pc, #192]	; (800f050 <_strtol_l.constprop.0+0x118>)
 800ef90:	0031      	movs	r1, r6
 800ef92:	18fb      	adds	r3, r7, r3
 800ef94:	0018      	movs	r0, r3
 800ef96:	9303      	str	r3, [sp, #12]
 800ef98:	f7f1 f95e 	bl	8000258 <__aeabi_uidivmod>
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	2201      	movs	r2, #1
 800efa0:	4684      	mov	ip, r0
 800efa2:	0018      	movs	r0, r3
 800efa4:	9104      	str	r1, [sp, #16]
 800efa6:	4252      	negs	r2, r2
 800efa8:	0021      	movs	r1, r4
 800efaa:	3930      	subs	r1, #48	; 0x30
 800efac:	2909      	cmp	r1, #9
 800efae:	d81d      	bhi.n	800efec <_strtol_l.constprop.0+0xb4>
 800efb0:	000c      	movs	r4, r1
 800efb2:	42a6      	cmp	r6, r4
 800efb4:	dd28      	ble.n	800f008 <_strtol_l.constprop.0+0xd0>
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	db24      	blt.n	800f004 <_strtol_l.constprop.0+0xcc>
 800efba:	0013      	movs	r3, r2
 800efbc:	4584      	cmp	ip, r0
 800efbe:	d306      	bcc.n	800efce <_strtol_l.constprop.0+0x96>
 800efc0:	d102      	bne.n	800efc8 <_strtol_l.constprop.0+0x90>
 800efc2:	9904      	ldr	r1, [sp, #16]
 800efc4:	42a1      	cmp	r1, r4
 800efc6:	db02      	blt.n	800efce <_strtol_l.constprop.0+0x96>
 800efc8:	2301      	movs	r3, #1
 800efca:	4370      	muls	r0, r6
 800efcc:	1820      	adds	r0, r4, r0
 800efce:	782c      	ldrb	r4, [r5, #0]
 800efd0:	3501      	adds	r5, #1
 800efd2:	e7e9      	b.n	800efa8 <_strtol_l.constprop.0+0x70>
 800efd4:	f7ff f88c 	bl	800e0f0 <__errno>
 800efd8:	2316      	movs	r3, #22
 800efda:	6003      	str	r3, [r0, #0]
 800efdc:	2000      	movs	r0, #0
 800efde:	b007      	add	sp, #28
 800efe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efe2:	2c2b      	cmp	r4, #43	; 0x2b
 800efe4:	d1c5      	bne.n	800ef72 <_strtol_l.constprop.0+0x3a>
 800efe6:	781c      	ldrb	r4, [r3, #0]
 800efe8:	1c95      	adds	r5, r2, #2
 800efea:	e7c2      	b.n	800ef72 <_strtol_l.constprop.0+0x3a>
 800efec:	0021      	movs	r1, r4
 800efee:	3941      	subs	r1, #65	; 0x41
 800eff0:	2919      	cmp	r1, #25
 800eff2:	d801      	bhi.n	800eff8 <_strtol_l.constprop.0+0xc0>
 800eff4:	3c37      	subs	r4, #55	; 0x37
 800eff6:	e7dc      	b.n	800efb2 <_strtol_l.constprop.0+0x7a>
 800eff8:	0021      	movs	r1, r4
 800effa:	3961      	subs	r1, #97	; 0x61
 800effc:	2919      	cmp	r1, #25
 800effe:	d803      	bhi.n	800f008 <_strtol_l.constprop.0+0xd0>
 800f000:	3c57      	subs	r4, #87	; 0x57
 800f002:	e7d6      	b.n	800efb2 <_strtol_l.constprop.0+0x7a>
 800f004:	0013      	movs	r3, r2
 800f006:	e7e2      	b.n	800efce <_strtol_l.constprop.0+0x96>
 800f008:	2b00      	cmp	r3, #0
 800f00a:	da09      	bge.n	800f020 <_strtol_l.constprop.0+0xe8>
 800f00c:	2322      	movs	r3, #34	; 0x22
 800f00e:	9a05      	ldr	r2, [sp, #20]
 800f010:	9803      	ldr	r0, [sp, #12]
 800f012:	6013      	str	r3, [r2, #0]
 800f014:	9b02      	ldr	r3, [sp, #8]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d0e1      	beq.n	800efde <_strtol_l.constprop.0+0xa6>
 800f01a:	1e6b      	subs	r3, r5, #1
 800f01c:	9301      	str	r3, [sp, #4]
 800f01e:	e007      	b.n	800f030 <_strtol_l.constprop.0+0xf8>
 800f020:	2f00      	cmp	r7, #0
 800f022:	d000      	beq.n	800f026 <_strtol_l.constprop.0+0xee>
 800f024:	4240      	negs	r0, r0
 800f026:	9a02      	ldr	r2, [sp, #8]
 800f028:	2a00      	cmp	r2, #0
 800f02a:	d0d8      	beq.n	800efde <_strtol_l.constprop.0+0xa6>
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d1f4      	bne.n	800f01a <_strtol_l.constprop.0+0xe2>
 800f030:	9b02      	ldr	r3, [sp, #8]
 800f032:	9a01      	ldr	r2, [sp, #4]
 800f034:	601a      	str	r2, [r3, #0]
 800f036:	e7d2      	b.n	800efde <_strtol_l.constprop.0+0xa6>
 800f038:	2430      	movs	r4, #48	; 0x30
 800f03a:	2e00      	cmp	r6, #0
 800f03c:	d1a7      	bne.n	800ef8e <_strtol_l.constprop.0+0x56>
 800f03e:	3608      	adds	r6, #8
 800f040:	e7a5      	b.n	800ef8e <_strtol_l.constprop.0+0x56>
 800f042:	2c30      	cmp	r4, #48	; 0x30
 800f044:	d09b      	beq.n	800ef7e <_strtol_l.constprop.0+0x46>
 800f046:	260a      	movs	r6, #10
 800f048:	e7a1      	b.n	800ef8e <_strtol_l.constprop.0+0x56>
 800f04a:	46c0      	nop			; (mov r8, r8)
 800f04c:	08012b89 	.word	0x08012b89
 800f050:	7fffffff 	.word	0x7fffffff

0800f054 <strtol>:
 800f054:	b510      	push	{r4, lr}
 800f056:	0013      	movs	r3, r2
 800f058:	000a      	movs	r2, r1
 800f05a:	0001      	movs	r1, r0
 800f05c:	4802      	ldr	r0, [pc, #8]	; (800f068 <strtol+0x14>)
 800f05e:	6800      	ldr	r0, [r0, #0]
 800f060:	f7ff ff6a 	bl	800ef38 <_strtol_l.constprop.0>
 800f064:	bd10      	pop	{r4, pc}
 800f066:	46c0      	nop			; (mov r8, r8)
 800f068:	200000e0 	.word	0x200000e0

0800f06c <print_e>:
 800f06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f06e:	b08b      	sub	sp, #44	; 0x2c
 800f070:	000f      	movs	r7, r1
 800f072:	a910      	add	r1, sp, #64	; 0x40
 800f074:	c920      	ldmia	r1!, {r5}
 800f076:	780e      	ldrb	r6, [r1, #0]
 800f078:	a908      	add	r1, sp, #32
 800f07a:	9104      	str	r1, [sp, #16]
 800f07c:	a907      	add	r1, sp, #28
 800f07e:	9103      	str	r1, [sp, #12]
 800f080:	a909      	add	r1, sp, #36	; 0x24
 800f082:	9102      	str	r1, [sp, #8]
 800f084:	1c69      	adds	r1, r5, #1
 800f086:	9101      	str	r1, [sp, #4]
 800f088:	2102      	movs	r1, #2
 800f08a:	9100      	str	r1, [sp, #0]
 800f08c:	f001 fe70 	bl	8010d70 <_dtoa_r>
 800f090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f092:	4b36      	ldr	r3, [pc, #216]	; (800f16c <print_e+0x100>)
 800f094:	0001      	movs	r1, r0
 800f096:	429a      	cmp	r2, r3
 800f098:	d104      	bne.n	800f0a4 <print_e+0x38>
 800f09a:	0038      	movs	r0, r7
 800f09c:	f001 fd96 	bl	8010bcc <strcpy>
 800f0a0:	b00b      	add	sp, #44	; 0x2c
 800f0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0a4:	7801      	ldrb	r1, [r0, #0]
 800f0a6:	1c43      	adds	r3, r0, #1
 800f0a8:	1c7c      	adds	r4, r7, #1
 800f0aa:	7039      	strb	r1, [r7, #0]
 800f0ac:	2d00      	cmp	r5, #0
 800f0ae:	dd01      	ble.n	800f0b4 <print_e+0x48>
 800f0b0:	2101      	movs	r1, #1
 800f0b2:	9112      	str	r1, [sp, #72]	; 0x48
 800f0b4:	212e      	movs	r1, #46	; 0x2e
 800f0b6:	7818      	ldrb	r0, [r3, #0]
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d001      	beq.n	800f0c0 <print_e+0x54>
 800f0bc:	2d00      	cmp	r5, #0
 800f0be:	dc35      	bgt.n	800f12c <print_e+0xc0>
 800f0c0:	2e67      	cmp	r6, #103	; 0x67
 800f0c2:	d04b      	beq.n	800f15c <print_e+0xf0>
 800f0c4:	2e47      	cmp	r6, #71	; 0x47
 800f0c6:	d04b      	beq.n	800f160 <print_e+0xf4>
 800f0c8:	232e      	movs	r3, #46	; 0x2e
 800f0ca:	2130      	movs	r1, #48	; 0x30
 800f0cc:	2d00      	cmp	r5, #0
 800f0ce:	dc3a      	bgt.n	800f146 <print_e+0xda>
 800f0d0:	1e53      	subs	r3, r2, #1
 800f0d2:	7026      	strb	r6, [r4, #0]
 800f0d4:	9309      	str	r3, [sp, #36]	; 0x24
 800f0d6:	1ca5      	adds	r5, r4, #2
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	da43      	bge.n	800f164 <print_e+0xf8>
 800f0dc:	232d      	movs	r3, #45	; 0x2d
 800f0de:	7063      	strb	r3, [r4, #1]
 800f0e0:	3b2c      	subs	r3, #44	; 0x2c
 800f0e2:	1a9b      	subs	r3, r3, r2
 800f0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f0e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f0e8:	2e63      	cmp	r6, #99	; 0x63
 800f0ea:	dd0d      	ble.n	800f108 <print_e+0x9c>
 800f0ec:	2164      	movs	r1, #100	; 0x64
 800f0ee:	0030      	movs	r0, r6
 800f0f0:	f7f1 f8b6 	bl	8000260 <__divsi3>
 800f0f4:	0003      	movs	r3, r0
 800f0f6:	0002      	movs	r2, r0
 800f0f8:	2064      	movs	r0, #100	; 0x64
 800f0fa:	4240      	negs	r0, r0
 800f0fc:	4358      	muls	r0, r3
 800f0fe:	3230      	adds	r2, #48	; 0x30
 800f100:	1980      	adds	r0, r0, r6
 800f102:	1ce5      	adds	r5, r4, #3
 800f104:	70a2      	strb	r2, [r4, #2]
 800f106:	9009      	str	r0, [sp, #36]	; 0x24
 800f108:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f10a:	210a      	movs	r1, #10
 800f10c:	0020      	movs	r0, r4
 800f10e:	f7f1 f8a7 	bl	8000260 <__divsi3>
 800f112:	0003      	movs	r3, r0
 800f114:	0002      	movs	r2, r0
 800f116:	200a      	movs	r0, #10
 800f118:	4240      	negs	r0, r0
 800f11a:	4358      	muls	r0, r3
 800f11c:	2300      	movs	r3, #0
 800f11e:	1900      	adds	r0, r0, r4
 800f120:	3230      	adds	r2, #48	; 0x30
 800f122:	3030      	adds	r0, #48	; 0x30
 800f124:	702a      	strb	r2, [r5, #0]
 800f126:	7068      	strb	r0, [r5, #1]
 800f128:	70ab      	strb	r3, [r5, #2]
 800f12a:	e7b9      	b.n	800f0a0 <print_e+0x34>
 800f12c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f12e:	2800      	cmp	r0, #0
 800f130:	d001      	beq.n	800f136 <print_e+0xca>
 800f132:	7021      	strb	r1, [r4, #0]
 800f134:	3401      	adds	r4, #1
 800f136:	7818      	ldrb	r0, [r3, #0]
 800f138:	3d01      	subs	r5, #1
 800f13a:	7020      	strb	r0, [r4, #0]
 800f13c:	2000      	movs	r0, #0
 800f13e:	3301      	adds	r3, #1
 800f140:	3401      	adds	r4, #1
 800f142:	9012      	str	r0, [sp, #72]	; 0x48
 800f144:	e7b7      	b.n	800f0b6 <print_e+0x4a>
 800f146:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f148:	2800      	cmp	r0, #0
 800f14a:	d001      	beq.n	800f150 <print_e+0xe4>
 800f14c:	7023      	strb	r3, [r4, #0]
 800f14e:	3401      	adds	r4, #1
 800f150:	2000      	movs	r0, #0
 800f152:	7021      	strb	r1, [r4, #0]
 800f154:	3d01      	subs	r5, #1
 800f156:	3401      	adds	r4, #1
 800f158:	9012      	str	r0, [sp, #72]	; 0x48
 800f15a:	e7b7      	b.n	800f0cc <print_e+0x60>
 800f15c:	2665      	movs	r6, #101	; 0x65
 800f15e:	e7b7      	b.n	800f0d0 <print_e+0x64>
 800f160:	2645      	movs	r6, #69	; 0x45
 800f162:	e7b5      	b.n	800f0d0 <print_e+0x64>
 800f164:	232b      	movs	r3, #43	; 0x2b
 800f166:	7063      	strb	r3, [r4, #1]
 800f168:	e7bd      	b.n	800f0e6 <print_e+0x7a>
 800f16a:	46c0      	nop			; (mov r8, r8)
 800f16c:	0000270f 	.word	0x0000270f

0800f170 <_gcvt>:
 800f170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f172:	0016      	movs	r6, r2
 800f174:	001d      	movs	r5, r3
 800f176:	b08d      	sub	sp, #52	; 0x34
 800f178:	ab14      	add	r3, sp, #80	; 0x50
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	0007      	movs	r7, r0
 800f17e:	9307      	str	r3, [sp, #28]
 800f180:	2200      	movs	r2, #0
 800f182:	2300      	movs	r3, #0
 800f184:	0030      	movs	r0, r6
 800f186:	0029      	movs	r1, r5
 800f188:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800f18a:	f7f1 f96b 	bl	8000464 <__aeabi_dcmplt>
 800f18e:	2800      	cmp	r0, #0
 800f190:	d002      	beq.n	800f198 <_gcvt+0x28>
 800f192:	2380      	movs	r3, #128	; 0x80
 800f194:	061b      	lsls	r3, r3, #24
 800f196:	18ed      	adds	r5, r5, r3
 800f198:	2200      	movs	r2, #0
 800f19a:	2300      	movs	r3, #0
 800f19c:	0030      	movs	r0, r6
 800f19e:	0029      	movs	r1, r5
 800f1a0:	f7f1 f95a 	bl	8000458 <__aeabi_dcmpeq>
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	d006      	beq.n	800f1b6 <_gcvt+0x46>
 800f1a8:	2330      	movs	r3, #48	; 0x30
 800f1aa:	7023      	strb	r3, [r4, #0]
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	7063      	strb	r3, [r4, #1]
 800f1b0:	0020      	movs	r0, r4
 800f1b2:	b00d      	add	sp, #52	; 0x34
 800f1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1b6:	0030      	movs	r0, r6
 800f1b8:	0029      	movs	r1, r5
 800f1ba:	4a52      	ldr	r2, [pc, #328]	; (800f304 <_gcvt+0x194>)
 800f1bc:	4b52      	ldr	r3, [pc, #328]	; (800f308 <_gcvt+0x198>)
 800f1be:	f7f1 f95b 	bl	8000478 <__aeabi_dcmple>
 800f1c2:	2800      	cmp	r0, #0
 800f1c4:	d00d      	beq.n	800f1e2 <_gcvt+0x72>
 800f1c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1c8:	0032      	movs	r2, r6
 800f1ca:	9302      	str	r3, [sp, #8]
 800f1cc:	9b07      	ldr	r3, [sp, #28]
 800f1ce:	0021      	movs	r1, r4
 800f1d0:	9301      	str	r3, [sp, #4]
 800f1d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f1d4:	0038      	movs	r0, r7
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	9300      	str	r3, [sp, #0]
 800f1da:	002b      	movs	r3, r5
 800f1dc:	f7ff ff46 	bl	800f06c <print_e>
 800f1e0:	e7e6      	b.n	800f1b0 <_gcvt+0x40>
 800f1e2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f1e4:	f001 f8a0 	bl	8010328 <_mprec_log10>
 800f1e8:	0032      	movs	r2, r6
 800f1ea:	002b      	movs	r3, r5
 800f1ec:	f7f1 f944 	bl	8000478 <__aeabi_dcmple>
 800f1f0:	2800      	cmp	r0, #0
 800f1f2:	d1e8      	bne.n	800f1c6 <_gcvt+0x56>
 800f1f4:	ab0b      	add	r3, sp, #44	; 0x2c
 800f1f6:	9304      	str	r3, [sp, #16]
 800f1f8:	ab0a      	add	r3, sp, #40	; 0x28
 800f1fa:	9303      	str	r3, [sp, #12]
 800f1fc:	ab09      	add	r3, sp, #36	; 0x24
 800f1fe:	9302      	str	r3, [sp, #8]
 800f200:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f202:	0032      	movs	r2, r6
 800f204:	9301      	str	r3, [sp, #4]
 800f206:	2302      	movs	r3, #2
 800f208:	0038      	movs	r0, r7
 800f20a:	9300      	str	r3, [sp, #0]
 800f20c:	002b      	movs	r3, r5
 800f20e:	f001 fdaf 	bl	8010d70 <_dtoa_r>
 800f212:	4b3e      	ldr	r3, [pc, #248]	; (800f30c <_gcvt+0x19c>)
 800f214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f216:	0001      	movs	r1, r0
 800f218:	0020      	movs	r0, r4
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d00c      	beq.n	800f238 <_gcvt+0xc8>
 800f21e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f220:	18e5      	adds	r5, r4, r3
 800f222:	780e      	ldrb	r6, [r1, #0]
 800f224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f226:	1a2b      	subs	r3, r5, r0
 800f228:	2e00      	cmp	r6, #0
 800f22a:	d001      	beq.n	800f230 <_gcvt+0xc0>
 800f22c:	2a00      	cmp	r2, #0
 800f22e:	dc06      	bgt.n	800f23e <_gcvt+0xce>
 800f230:	2501      	movs	r5, #1
 800f232:	2600      	movs	r6, #0
 800f234:	46ac      	mov	ip, r5
 800f236:	e00d      	b.n	800f254 <_gcvt+0xe4>
 800f238:	f001 fcc8 	bl	8010bcc <strcpy>
 800f23c:	e7b8      	b.n	800f1b0 <_gcvt+0x40>
 800f23e:	3a01      	subs	r2, #1
 800f240:	7006      	strb	r6, [r0, #0]
 800f242:	3101      	adds	r1, #1
 800f244:	9209      	str	r2, [sp, #36]	; 0x24
 800f246:	3001      	adds	r0, #1
 800f248:	e7eb      	b.n	800f222 <_gcvt+0xb2>
 800f24a:	2530      	movs	r5, #48	; 0x30
 800f24c:	4666      	mov	r6, ip
 800f24e:	7005      	strb	r5, [r0, #0]
 800f250:	3b01      	subs	r3, #1
 800f252:	3001      	adds	r0, #1
 800f254:	0005      	movs	r5, r0
 800f256:	1e17      	subs	r7, r2, #0
 800f258:	dc35      	bgt.n	800f2c6 <_gcvt+0x156>
 800f25a:	2e00      	cmp	r6, #0
 800f25c:	d000      	beq.n	800f260 <_gcvt+0xf0>
 800f25e:	9209      	str	r2, [sp, #36]	; 0x24
 800f260:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f262:	2a00      	cmp	r2, #0
 800f264:	d102      	bne.n	800f26c <_gcvt+0xfc>
 800f266:	780a      	ldrb	r2, [r1, #0]
 800f268:	2a00      	cmp	r2, #0
 800f26a:	d029      	beq.n	800f2c0 <_gcvt+0x150>
 800f26c:	4284      	cmp	r4, r0
 800f26e:	d102      	bne.n	800f276 <_gcvt+0x106>
 800f270:	2230      	movs	r2, #48	; 0x30
 800f272:	1c65      	adds	r5, r4, #1
 800f274:	7022      	strb	r2, [r4, #0]
 800f276:	222e      	movs	r2, #46	; 0x2e
 800f278:	702a      	strb	r2, [r5, #0]
 800f27a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f27c:	0028      	movs	r0, r5
 800f27e:	1b57      	subs	r7, r2, r5
 800f280:	9707      	str	r7, [sp, #28]
 800f282:	2701      	movs	r7, #1
 800f284:	2600      	movs	r6, #0
 800f286:	46bc      	mov	ip, r7
 800f288:	9f07      	ldr	r7, [sp, #28]
 800f28a:	42c7      	cmn	r7, r0
 800f28c:	d422      	bmi.n	800f2d4 <_gcvt+0x164>
 800f28e:	2000      	movs	r0, #0
 800f290:	4257      	negs	r7, r2
 800f292:	4282      	cmp	r2, r0
 800f294:	dc00      	bgt.n	800f298 <_gcvt+0x128>
 800f296:	0038      	movs	r0, r7
 800f298:	3001      	adds	r0, #1
 800f29a:	182d      	adds	r5, r5, r0
 800f29c:	2000      	movs	r0, #0
 800f29e:	4282      	cmp	r2, r0
 800f2a0:	dc00      	bgt.n	800f2a4 <_gcvt+0x134>
 800f2a2:	0038      	movs	r0, r7
 800f2a4:	1810      	adds	r0, r2, r0
 800f2a6:	2e00      	cmp	r6, #0
 800f2a8:	d000      	beq.n	800f2ac <_gcvt+0x13c>
 800f2aa:	9009      	str	r0, [sp, #36]	; 0x24
 800f2ac:	002a      	movs	r2, r5
 800f2ae:	7808      	ldrb	r0, [r1, #0]
 800f2b0:	0015      	movs	r5, r2
 800f2b2:	2800      	cmp	r0, #0
 800f2b4:	d001      	beq.n	800f2ba <_gcvt+0x14a>
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	dc11      	bgt.n	800f2de <_gcvt+0x16e>
 800f2ba:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f2bc:	2900      	cmp	r1, #0
 800f2be:	d11d      	bne.n	800f2fc <_gcvt+0x18c>
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	702b      	strb	r3, [r5, #0]
 800f2c4:	e774      	b.n	800f1b0 <_gcvt+0x40>
 800f2c6:	3a01      	subs	r2, #1
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	dcbe      	bgt.n	800f24a <_gcvt+0xda>
 800f2cc:	2e00      	cmp	r6, #0
 800f2ce:	d0c7      	beq.n	800f260 <_gcvt+0xf0>
 800f2d0:	9709      	str	r7, [sp, #36]	; 0x24
 800f2d2:	e7c5      	b.n	800f260 <_gcvt+0xf0>
 800f2d4:	2630      	movs	r6, #48	; 0x30
 800f2d6:	3001      	adds	r0, #1
 800f2d8:	7006      	strb	r6, [r0, #0]
 800f2da:	4666      	mov	r6, ip
 800f2dc:	e7d4      	b.n	800f288 <_gcvt+0x118>
 800f2de:	7010      	strb	r0, [r2, #0]
 800f2e0:	3101      	adds	r1, #1
 800f2e2:	3b01      	subs	r3, #1
 800f2e4:	3201      	adds	r2, #1
 800f2e6:	e7e2      	b.n	800f2ae <_gcvt+0x13e>
 800f2e8:	700e      	strb	r6, [r1, #0]
 800f2ea:	3101      	adds	r1, #1
 800f2ec:	1a68      	subs	r0, r5, r1
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	dcfa      	bgt.n	800f2e8 <_gcvt+0x178>
 800f2f2:	43dd      	mvns	r5, r3
 800f2f4:	17ed      	asrs	r5, r5, #31
 800f2f6:	401d      	ands	r5, r3
 800f2f8:	1955      	adds	r5, r2, r5
 800f2fa:	e7e1      	b.n	800f2c0 <_gcvt+0x150>
 800f2fc:	0011      	movs	r1, r2
 800f2fe:	2630      	movs	r6, #48	; 0x30
 800f300:	189d      	adds	r5, r3, r2
 800f302:	e7f3      	b.n	800f2ec <_gcvt+0x17c>
 800f304:	eb1c432d 	.word	0xeb1c432d
 800f308:	3f1a36e2 	.word	0x3f1a36e2
 800f30c:	0000270f 	.word	0x0000270f

0800f310 <rshift>:
 800f310:	0002      	movs	r2, r0
 800f312:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f314:	6904      	ldr	r4, [r0, #16]
 800f316:	3214      	adds	r2, #20
 800f318:	0013      	movs	r3, r2
 800f31a:	b085      	sub	sp, #20
 800f31c:	114f      	asrs	r7, r1, #5
 800f31e:	42bc      	cmp	r4, r7
 800f320:	dd31      	ble.n	800f386 <rshift+0x76>
 800f322:	00bb      	lsls	r3, r7, #2
 800f324:	18d3      	adds	r3, r2, r3
 800f326:	261f      	movs	r6, #31
 800f328:	9301      	str	r3, [sp, #4]
 800f32a:	000b      	movs	r3, r1
 800f32c:	00a5      	lsls	r5, r4, #2
 800f32e:	4033      	ands	r3, r6
 800f330:	1955      	adds	r5, r2, r5
 800f332:	9302      	str	r3, [sp, #8]
 800f334:	4231      	tst	r1, r6
 800f336:	d10c      	bne.n	800f352 <rshift+0x42>
 800f338:	0016      	movs	r6, r2
 800f33a:	9901      	ldr	r1, [sp, #4]
 800f33c:	428d      	cmp	r5, r1
 800f33e:	d838      	bhi.n	800f3b2 <rshift+0xa2>
 800f340:	9901      	ldr	r1, [sp, #4]
 800f342:	2300      	movs	r3, #0
 800f344:	3903      	subs	r1, #3
 800f346:	428d      	cmp	r5, r1
 800f348:	d301      	bcc.n	800f34e <rshift+0x3e>
 800f34a:	1be3      	subs	r3, r4, r7
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	18d3      	adds	r3, r2, r3
 800f350:	e019      	b.n	800f386 <rshift+0x76>
 800f352:	2120      	movs	r1, #32
 800f354:	9b02      	ldr	r3, [sp, #8]
 800f356:	9e01      	ldr	r6, [sp, #4]
 800f358:	1acb      	subs	r3, r1, r3
 800f35a:	9303      	str	r3, [sp, #12]
 800f35c:	ce02      	ldmia	r6!, {r1}
 800f35e:	9b02      	ldr	r3, [sp, #8]
 800f360:	4694      	mov	ip, r2
 800f362:	40d9      	lsrs	r1, r3
 800f364:	9100      	str	r1, [sp, #0]
 800f366:	42b5      	cmp	r5, r6
 800f368:	d816      	bhi.n	800f398 <rshift+0x88>
 800f36a:	9e01      	ldr	r6, [sp, #4]
 800f36c:	2300      	movs	r3, #0
 800f36e:	3601      	adds	r6, #1
 800f370:	42b5      	cmp	r5, r6
 800f372:	d302      	bcc.n	800f37a <rshift+0x6a>
 800f374:	1be3      	subs	r3, r4, r7
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	3b04      	subs	r3, #4
 800f37a:	9900      	ldr	r1, [sp, #0]
 800f37c:	18d3      	adds	r3, r2, r3
 800f37e:	6019      	str	r1, [r3, #0]
 800f380:	2900      	cmp	r1, #0
 800f382:	d000      	beq.n	800f386 <rshift+0x76>
 800f384:	3304      	adds	r3, #4
 800f386:	1a99      	subs	r1, r3, r2
 800f388:	1089      	asrs	r1, r1, #2
 800f38a:	6101      	str	r1, [r0, #16]
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d101      	bne.n	800f394 <rshift+0x84>
 800f390:	2300      	movs	r3, #0
 800f392:	6143      	str	r3, [r0, #20]
 800f394:	b005      	add	sp, #20
 800f396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f398:	6833      	ldr	r3, [r6, #0]
 800f39a:	9903      	ldr	r1, [sp, #12]
 800f39c:	408b      	lsls	r3, r1
 800f39e:	9900      	ldr	r1, [sp, #0]
 800f3a0:	4319      	orrs	r1, r3
 800f3a2:	4663      	mov	r3, ip
 800f3a4:	c302      	stmia	r3!, {r1}
 800f3a6:	469c      	mov	ip, r3
 800f3a8:	ce02      	ldmia	r6!, {r1}
 800f3aa:	9b02      	ldr	r3, [sp, #8]
 800f3ac:	40d9      	lsrs	r1, r3
 800f3ae:	9100      	str	r1, [sp, #0]
 800f3b0:	e7d9      	b.n	800f366 <rshift+0x56>
 800f3b2:	c908      	ldmia	r1!, {r3}
 800f3b4:	c608      	stmia	r6!, {r3}
 800f3b6:	e7c1      	b.n	800f33c <rshift+0x2c>

0800f3b8 <__hexdig_fun>:
 800f3b8:	0002      	movs	r2, r0
 800f3ba:	3a30      	subs	r2, #48	; 0x30
 800f3bc:	0003      	movs	r3, r0
 800f3be:	2a09      	cmp	r2, #9
 800f3c0:	d802      	bhi.n	800f3c8 <__hexdig_fun+0x10>
 800f3c2:	3b20      	subs	r3, #32
 800f3c4:	b2d8      	uxtb	r0, r3
 800f3c6:	4770      	bx	lr
 800f3c8:	0002      	movs	r2, r0
 800f3ca:	3a61      	subs	r2, #97	; 0x61
 800f3cc:	2a05      	cmp	r2, #5
 800f3ce:	d801      	bhi.n	800f3d4 <__hexdig_fun+0x1c>
 800f3d0:	3b47      	subs	r3, #71	; 0x47
 800f3d2:	e7f7      	b.n	800f3c4 <__hexdig_fun+0xc>
 800f3d4:	001a      	movs	r2, r3
 800f3d6:	3a41      	subs	r2, #65	; 0x41
 800f3d8:	2000      	movs	r0, #0
 800f3da:	2a05      	cmp	r2, #5
 800f3dc:	d8f3      	bhi.n	800f3c6 <__hexdig_fun+0xe>
 800f3de:	3b27      	subs	r3, #39	; 0x27
 800f3e0:	e7f0      	b.n	800f3c4 <__hexdig_fun+0xc>
	...

0800f3e4 <__gethex>:
 800f3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3e6:	b08d      	sub	sp, #52	; 0x34
 800f3e8:	930a      	str	r3, [sp, #40]	; 0x28
 800f3ea:	4bbf      	ldr	r3, [pc, #764]	; (800f6e8 <__gethex+0x304>)
 800f3ec:	9005      	str	r0, [sp, #20]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	9109      	str	r1, [sp, #36]	; 0x24
 800f3f2:	0018      	movs	r0, r3
 800f3f4:	9202      	str	r2, [sp, #8]
 800f3f6:	9307      	str	r3, [sp, #28]
 800f3f8:	f7f0 fe8c 	bl	8000114 <strlen>
 800f3fc:	2202      	movs	r2, #2
 800f3fe:	9b07      	ldr	r3, [sp, #28]
 800f400:	4252      	negs	r2, r2
 800f402:	181b      	adds	r3, r3, r0
 800f404:	3b01      	subs	r3, #1
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	9003      	str	r0, [sp, #12]
 800f40a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f40e:	6819      	ldr	r1, [r3, #0]
 800f410:	1c8b      	adds	r3, r1, #2
 800f412:	1a52      	subs	r2, r2, r1
 800f414:	18d1      	adds	r1, r2, r3
 800f416:	9301      	str	r3, [sp, #4]
 800f418:	9108      	str	r1, [sp, #32]
 800f41a:	9901      	ldr	r1, [sp, #4]
 800f41c:	3301      	adds	r3, #1
 800f41e:	7808      	ldrb	r0, [r1, #0]
 800f420:	2830      	cmp	r0, #48	; 0x30
 800f422:	d0f7      	beq.n	800f414 <__gethex+0x30>
 800f424:	f7ff ffc8 	bl	800f3b8 <__hexdig_fun>
 800f428:	2300      	movs	r3, #0
 800f42a:	001c      	movs	r4, r3
 800f42c:	9304      	str	r3, [sp, #16]
 800f42e:	4298      	cmp	r0, r3
 800f430:	d11f      	bne.n	800f472 <__gethex+0x8e>
 800f432:	9a03      	ldr	r2, [sp, #12]
 800f434:	9907      	ldr	r1, [sp, #28]
 800f436:	9801      	ldr	r0, [sp, #4]
 800f438:	f001 fbd0 	bl	8010bdc <strncmp>
 800f43c:	0007      	movs	r7, r0
 800f43e:	42a0      	cmp	r0, r4
 800f440:	d000      	beq.n	800f444 <__gethex+0x60>
 800f442:	e06b      	b.n	800f51c <__gethex+0x138>
 800f444:	9b01      	ldr	r3, [sp, #4]
 800f446:	9a03      	ldr	r2, [sp, #12]
 800f448:	5c98      	ldrb	r0, [r3, r2]
 800f44a:	189d      	adds	r5, r3, r2
 800f44c:	f7ff ffb4 	bl	800f3b8 <__hexdig_fun>
 800f450:	2301      	movs	r3, #1
 800f452:	9304      	str	r3, [sp, #16]
 800f454:	42a0      	cmp	r0, r4
 800f456:	d030      	beq.n	800f4ba <__gethex+0xd6>
 800f458:	9501      	str	r5, [sp, #4]
 800f45a:	9b01      	ldr	r3, [sp, #4]
 800f45c:	7818      	ldrb	r0, [r3, #0]
 800f45e:	2830      	cmp	r0, #48	; 0x30
 800f460:	d009      	beq.n	800f476 <__gethex+0x92>
 800f462:	f7ff ffa9 	bl	800f3b8 <__hexdig_fun>
 800f466:	4242      	negs	r2, r0
 800f468:	4142      	adcs	r2, r0
 800f46a:	2301      	movs	r3, #1
 800f46c:	002c      	movs	r4, r5
 800f46e:	9204      	str	r2, [sp, #16]
 800f470:	9308      	str	r3, [sp, #32]
 800f472:	9d01      	ldr	r5, [sp, #4]
 800f474:	e004      	b.n	800f480 <__gethex+0x9c>
 800f476:	9b01      	ldr	r3, [sp, #4]
 800f478:	3301      	adds	r3, #1
 800f47a:	9301      	str	r3, [sp, #4]
 800f47c:	e7ed      	b.n	800f45a <__gethex+0x76>
 800f47e:	3501      	adds	r5, #1
 800f480:	7828      	ldrb	r0, [r5, #0]
 800f482:	f7ff ff99 	bl	800f3b8 <__hexdig_fun>
 800f486:	1e07      	subs	r7, r0, #0
 800f488:	d1f9      	bne.n	800f47e <__gethex+0x9a>
 800f48a:	0028      	movs	r0, r5
 800f48c:	9a03      	ldr	r2, [sp, #12]
 800f48e:	9907      	ldr	r1, [sp, #28]
 800f490:	f001 fba4 	bl	8010bdc <strncmp>
 800f494:	2800      	cmp	r0, #0
 800f496:	d10e      	bne.n	800f4b6 <__gethex+0xd2>
 800f498:	2c00      	cmp	r4, #0
 800f49a:	d107      	bne.n	800f4ac <__gethex+0xc8>
 800f49c:	9b03      	ldr	r3, [sp, #12]
 800f49e:	18ed      	adds	r5, r5, r3
 800f4a0:	002c      	movs	r4, r5
 800f4a2:	7828      	ldrb	r0, [r5, #0]
 800f4a4:	f7ff ff88 	bl	800f3b8 <__hexdig_fun>
 800f4a8:	2800      	cmp	r0, #0
 800f4aa:	d102      	bne.n	800f4b2 <__gethex+0xce>
 800f4ac:	1b64      	subs	r4, r4, r5
 800f4ae:	00a7      	lsls	r7, r4, #2
 800f4b0:	e003      	b.n	800f4ba <__gethex+0xd6>
 800f4b2:	3501      	adds	r5, #1
 800f4b4:	e7f5      	b.n	800f4a2 <__gethex+0xbe>
 800f4b6:	2c00      	cmp	r4, #0
 800f4b8:	d1f8      	bne.n	800f4ac <__gethex+0xc8>
 800f4ba:	2220      	movs	r2, #32
 800f4bc:	782b      	ldrb	r3, [r5, #0]
 800f4be:	002e      	movs	r6, r5
 800f4c0:	4393      	bics	r3, r2
 800f4c2:	2b50      	cmp	r3, #80	; 0x50
 800f4c4:	d11d      	bne.n	800f502 <__gethex+0x11e>
 800f4c6:	786b      	ldrb	r3, [r5, #1]
 800f4c8:	2b2b      	cmp	r3, #43	; 0x2b
 800f4ca:	d02c      	beq.n	800f526 <__gethex+0x142>
 800f4cc:	2b2d      	cmp	r3, #45	; 0x2d
 800f4ce:	d02e      	beq.n	800f52e <__gethex+0x14a>
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	1c6e      	adds	r6, r5, #1
 800f4d4:	9306      	str	r3, [sp, #24]
 800f4d6:	7830      	ldrb	r0, [r6, #0]
 800f4d8:	f7ff ff6e 	bl	800f3b8 <__hexdig_fun>
 800f4dc:	1e43      	subs	r3, r0, #1
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	2b18      	cmp	r3, #24
 800f4e2:	d82b      	bhi.n	800f53c <__gethex+0x158>
 800f4e4:	3810      	subs	r0, #16
 800f4e6:	0004      	movs	r4, r0
 800f4e8:	7870      	ldrb	r0, [r6, #1]
 800f4ea:	f7ff ff65 	bl	800f3b8 <__hexdig_fun>
 800f4ee:	1e43      	subs	r3, r0, #1
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	3601      	adds	r6, #1
 800f4f4:	2b18      	cmp	r3, #24
 800f4f6:	d91c      	bls.n	800f532 <__gethex+0x14e>
 800f4f8:	9b06      	ldr	r3, [sp, #24]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d000      	beq.n	800f500 <__gethex+0x11c>
 800f4fe:	4264      	negs	r4, r4
 800f500:	193f      	adds	r7, r7, r4
 800f502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f504:	601e      	str	r6, [r3, #0]
 800f506:	9b04      	ldr	r3, [sp, #16]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d019      	beq.n	800f540 <__gethex+0x15c>
 800f50c:	2600      	movs	r6, #0
 800f50e:	9b08      	ldr	r3, [sp, #32]
 800f510:	42b3      	cmp	r3, r6
 800f512:	d100      	bne.n	800f516 <__gethex+0x132>
 800f514:	3606      	adds	r6, #6
 800f516:	0030      	movs	r0, r6
 800f518:	b00d      	add	sp, #52	; 0x34
 800f51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f51c:	2301      	movs	r3, #1
 800f51e:	2700      	movs	r7, #0
 800f520:	9d01      	ldr	r5, [sp, #4]
 800f522:	9304      	str	r3, [sp, #16]
 800f524:	e7c9      	b.n	800f4ba <__gethex+0xd6>
 800f526:	2300      	movs	r3, #0
 800f528:	9306      	str	r3, [sp, #24]
 800f52a:	1cae      	adds	r6, r5, #2
 800f52c:	e7d3      	b.n	800f4d6 <__gethex+0xf2>
 800f52e:	2301      	movs	r3, #1
 800f530:	e7fa      	b.n	800f528 <__gethex+0x144>
 800f532:	230a      	movs	r3, #10
 800f534:	435c      	muls	r4, r3
 800f536:	1824      	adds	r4, r4, r0
 800f538:	3c10      	subs	r4, #16
 800f53a:	e7d5      	b.n	800f4e8 <__gethex+0x104>
 800f53c:	002e      	movs	r6, r5
 800f53e:	e7e0      	b.n	800f502 <__gethex+0x11e>
 800f540:	9b01      	ldr	r3, [sp, #4]
 800f542:	9904      	ldr	r1, [sp, #16]
 800f544:	1aeb      	subs	r3, r5, r3
 800f546:	3b01      	subs	r3, #1
 800f548:	2b07      	cmp	r3, #7
 800f54a:	dc0a      	bgt.n	800f562 <__gethex+0x17e>
 800f54c:	9805      	ldr	r0, [sp, #20]
 800f54e:	f000 fa65 	bl	800fa1c <_Balloc>
 800f552:	1e04      	subs	r4, r0, #0
 800f554:	d108      	bne.n	800f568 <__gethex+0x184>
 800f556:	0002      	movs	r2, r0
 800f558:	21de      	movs	r1, #222	; 0xde
 800f55a:	4b64      	ldr	r3, [pc, #400]	; (800f6ec <__gethex+0x308>)
 800f55c:	4864      	ldr	r0, [pc, #400]	; (800f6f0 <__gethex+0x30c>)
 800f55e:	f001 fb5d 	bl	8010c1c <__assert_func>
 800f562:	3101      	adds	r1, #1
 800f564:	105b      	asrs	r3, r3, #1
 800f566:	e7ef      	b.n	800f548 <__gethex+0x164>
 800f568:	0003      	movs	r3, r0
 800f56a:	3314      	adds	r3, #20
 800f56c:	9304      	str	r3, [sp, #16]
 800f56e:	9309      	str	r3, [sp, #36]	; 0x24
 800f570:	2300      	movs	r3, #0
 800f572:	001e      	movs	r6, r3
 800f574:	9306      	str	r3, [sp, #24]
 800f576:	9b01      	ldr	r3, [sp, #4]
 800f578:	42ab      	cmp	r3, r5
 800f57a:	d340      	bcc.n	800f5fe <__gethex+0x21a>
 800f57c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f57e:	9b04      	ldr	r3, [sp, #16]
 800f580:	c540      	stmia	r5!, {r6}
 800f582:	1aed      	subs	r5, r5, r3
 800f584:	10ad      	asrs	r5, r5, #2
 800f586:	0030      	movs	r0, r6
 800f588:	6125      	str	r5, [r4, #16]
 800f58a:	f000 fb3f 	bl	800fc0c <__hi0bits>
 800f58e:	9b02      	ldr	r3, [sp, #8]
 800f590:	016d      	lsls	r5, r5, #5
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	1a2e      	subs	r6, r5, r0
 800f596:	9301      	str	r3, [sp, #4]
 800f598:	429e      	cmp	r6, r3
 800f59a:	dd5a      	ble.n	800f652 <__gethex+0x26e>
 800f59c:	1af6      	subs	r6, r6, r3
 800f59e:	0031      	movs	r1, r6
 800f5a0:	0020      	movs	r0, r4
 800f5a2:	f000 fefc 	bl	801039e <__any_on>
 800f5a6:	1e05      	subs	r5, r0, #0
 800f5a8:	d016      	beq.n	800f5d8 <__gethex+0x1f4>
 800f5aa:	2501      	movs	r5, #1
 800f5ac:	211f      	movs	r1, #31
 800f5ae:	0028      	movs	r0, r5
 800f5b0:	1e73      	subs	r3, r6, #1
 800f5b2:	4019      	ands	r1, r3
 800f5b4:	4088      	lsls	r0, r1
 800f5b6:	0001      	movs	r1, r0
 800f5b8:	115a      	asrs	r2, r3, #5
 800f5ba:	9804      	ldr	r0, [sp, #16]
 800f5bc:	0092      	lsls	r2, r2, #2
 800f5be:	5812      	ldr	r2, [r2, r0]
 800f5c0:	420a      	tst	r2, r1
 800f5c2:	d009      	beq.n	800f5d8 <__gethex+0x1f4>
 800f5c4:	42ab      	cmp	r3, r5
 800f5c6:	dd06      	ble.n	800f5d6 <__gethex+0x1f2>
 800f5c8:	0020      	movs	r0, r4
 800f5ca:	1eb1      	subs	r1, r6, #2
 800f5cc:	f000 fee7 	bl	801039e <__any_on>
 800f5d0:	3502      	adds	r5, #2
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	d100      	bne.n	800f5d8 <__gethex+0x1f4>
 800f5d6:	2502      	movs	r5, #2
 800f5d8:	0031      	movs	r1, r6
 800f5da:	0020      	movs	r0, r4
 800f5dc:	f7ff fe98 	bl	800f310 <rshift>
 800f5e0:	19bf      	adds	r7, r7, r6
 800f5e2:	9b02      	ldr	r3, [sp, #8]
 800f5e4:	689b      	ldr	r3, [r3, #8]
 800f5e6:	9303      	str	r3, [sp, #12]
 800f5e8:	42bb      	cmp	r3, r7
 800f5ea:	da42      	bge.n	800f672 <__gethex+0x28e>
 800f5ec:	0021      	movs	r1, r4
 800f5ee:	9805      	ldr	r0, [sp, #20]
 800f5f0:	f000 fa58 	bl	800faa4 <_Bfree>
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f5f8:	26a3      	movs	r6, #163	; 0xa3
 800f5fa:	6013      	str	r3, [r2, #0]
 800f5fc:	e78b      	b.n	800f516 <__gethex+0x132>
 800f5fe:	1e6b      	subs	r3, r5, #1
 800f600:	9308      	str	r3, [sp, #32]
 800f602:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	4293      	cmp	r3, r2
 800f608:	d014      	beq.n	800f634 <__gethex+0x250>
 800f60a:	9b06      	ldr	r3, [sp, #24]
 800f60c:	2b20      	cmp	r3, #32
 800f60e:	d104      	bne.n	800f61a <__gethex+0x236>
 800f610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f612:	c340      	stmia	r3!, {r6}
 800f614:	2600      	movs	r6, #0
 800f616:	9309      	str	r3, [sp, #36]	; 0x24
 800f618:	9606      	str	r6, [sp, #24]
 800f61a:	9b08      	ldr	r3, [sp, #32]
 800f61c:	7818      	ldrb	r0, [r3, #0]
 800f61e:	f7ff fecb 	bl	800f3b8 <__hexdig_fun>
 800f622:	230f      	movs	r3, #15
 800f624:	4018      	ands	r0, r3
 800f626:	9b06      	ldr	r3, [sp, #24]
 800f628:	9d08      	ldr	r5, [sp, #32]
 800f62a:	4098      	lsls	r0, r3
 800f62c:	3304      	adds	r3, #4
 800f62e:	4306      	orrs	r6, r0
 800f630:	9306      	str	r3, [sp, #24]
 800f632:	e7a0      	b.n	800f576 <__gethex+0x192>
 800f634:	2301      	movs	r3, #1
 800f636:	9a03      	ldr	r2, [sp, #12]
 800f638:	1a9d      	subs	r5, r3, r2
 800f63a:	9b08      	ldr	r3, [sp, #32]
 800f63c:	195d      	adds	r5, r3, r5
 800f63e:	9b01      	ldr	r3, [sp, #4]
 800f640:	429d      	cmp	r5, r3
 800f642:	d3e2      	bcc.n	800f60a <__gethex+0x226>
 800f644:	0028      	movs	r0, r5
 800f646:	9907      	ldr	r1, [sp, #28]
 800f648:	f001 fac8 	bl	8010bdc <strncmp>
 800f64c:	2800      	cmp	r0, #0
 800f64e:	d1dc      	bne.n	800f60a <__gethex+0x226>
 800f650:	e791      	b.n	800f576 <__gethex+0x192>
 800f652:	9b01      	ldr	r3, [sp, #4]
 800f654:	2500      	movs	r5, #0
 800f656:	429e      	cmp	r6, r3
 800f658:	dac3      	bge.n	800f5e2 <__gethex+0x1fe>
 800f65a:	1b9e      	subs	r6, r3, r6
 800f65c:	0021      	movs	r1, r4
 800f65e:	0032      	movs	r2, r6
 800f660:	9805      	ldr	r0, [sp, #20]
 800f662:	f000 fc3d 	bl	800fee0 <__lshift>
 800f666:	0003      	movs	r3, r0
 800f668:	3314      	adds	r3, #20
 800f66a:	0004      	movs	r4, r0
 800f66c:	1bbf      	subs	r7, r7, r6
 800f66e:	9304      	str	r3, [sp, #16]
 800f670:	e7b7      	b.n	800f5e2 <__gethex+0x1fe>
 800f672:	9b02      	ldr	r3, [sp, #8]
 800f674:	685e      	ldr	r6, [r3, #4]
 800f676:	42be      	cmp	r6, r7
 800f678:	dd71      	ble.n	800f75e <__gethex+0x37a>
 800f67a:	9b01      	ldr	r3, [sp, #4]
 800f67c:	1bf6      	subs	r6, r6, r7
 800f67e:	42b3      	cmp	r3, r6
 800f680:	dc38      	bgt.n	800f6f4 <__gethex+0x310>
 800f682:	9b02      	ldr	r3, [sp, #8]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	2b02      	cmp	r3, #2
 800f688:	d026      	beq.n	800f6d8 <__gethex+0x2f4>
 800f68a:	2b03      	cmp	r3, #3
 800f68c:	d028      	beq.n	800f6e0 <__gethex+0x2fc>
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d119      	bne.n	800f6c6 <__gethex+0x2e2>
 800f692:	9b01      	ldr	r3, [sp, #4]
 800f694:	42b3      	cmp	r3, r6
 800f696:	d116      	bne.n	800f6c6 <__gethex+0x2e2>
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d10d      	bne.n	800f6b8 <__gethex+0x2d4>
 800f69c:	9b02      	ldr	r3, [sp, #8]
 800f69e:	2662      	movs	r6, #98	; 0x62
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	9301      	str	r3, [sp, #4]
 800f6a4:	9a01      	ldr	r2, [sp, #4]
 800f6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6a8:	601a      	str	r2, [r3, #0]
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	9a04      	ldr	r2, [sp, #16]
 800f6ae:	6123      	str	r3, [r4, #16]
 800f6b0:	6013      	str	r3, [r2, #0]
 800f6b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f6b4:	601c      	str	r4, [r3, #0]
 800f6b6:	e72e      	b.n	800f516 <__gethex+0x132>
 800f6b8:	9901      	ldr	r1, [sp, #4]
 800f6ba:	0020      	movs	r0, r4
 800f6bc:	3901      	subs	r1, #1
 800f6be:	f000 fe6e 	bl	801039e <__any_on>
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	d1ea      	bne.n	800f69c <__gethex+0x2b8>
 800f6c6:	0021      	movs	r1, r4
 800f6c8:	9805      	ldr	r0, [sp, #20]
 800f6ca:	f000 f9eb 	bl	800faa4 <_Bfree>
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f6d2:	2650      	movs	r6, #80	; 0x50
 800f6d4:	6013      	str	r3, [r2, #0]
 800f6d6:	e71e      	b.n	800f516 <__gethex+0x132>
 800f6d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d1f3      	bne.n	800f6c6 <__gethex+0x2e2>
 800f6de:	e7dd      	b.n	800f69c <__gethex+0x2b8>
 800f6e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d1da      	bne.n	800f69c <__gethex+0x2b8>
 800f6e6:	e7ee      	b.n	800f6c6 <__gethex+0x2e2>
 800f6e8:	08012d00 	.word	0x08012d00
 800f6ec:	08012c89 	.word	0x08012c89
 800f6f0:	08012c9a 	.word	0x08012c9a
 800f6f4:	1e77      	subs	r7, r6, #1
 800f6f6:	2d00      	cmp	r5, #0
 800f6f8:	d12f      	bne.n	800f75a <__gethex+0x376>
 800f6fa:	2f00      	cmp	r7, #0
 800f6fc:	d004      	beq.n	800f708 <__gethex+0x324>
 800f6fe:	0039      	movs	r1, r7
 800f700:	0020      	movs	r0, r4
 800f702:	f000 fe4c 	bl	801039e <__any_on>
 800f706:	0005      	movs	r5, r0
 800f708:	231f      	movs	r3, #31
 800f70a:	117a      	asrs	r2, r7, #5
 800f70c:	401f      	ands	r7, r3
 800f70e:	3b1e      	subs	r3, #30
 800f710:	40bb      	lsls	r3, r7
 800f712:	9904      	ldr	r1, [sp, #16]
 800f714:	0092      	lsls	r2, r2, #2
 800f716:	5852      	ldr	r2, [r2, r1]
 800f718:	421a      	tst	r2, r3
 800f71a:	d001      	beq.n	800f720 <__gethex+0x33c>
 800f71c:	2302      	movs	r3, #2
 800f71e:	431d      	orrs	r5, r3
 800f720:	9b01      	ldr	r3, [sp, #4]
 800f722:	0031      	movs	r1, r6
 800f724:	1b9b      	subs	r3, r3, r6
 800f726:	2602      	movs	r6, #2
 800f728:	0020      	movs	r0, r4
 800f72a:	9301      	str	r3, [sp, #4]
 800f72c:	f7ff fdf0 	bl	800f310 <rshift>
 800f730:	9b02      	ldr	r3, [sp, #8]
 800f732:	685f      	ldr	r7, [r3, #4]
 800f734:	2d00      	cmp	r5, #0
 800f736:	d041      	beq.n	800f7bc <__gethex+0x3d8>
 800f738:	9b02      	ldr	r3, [sp, #8]
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	2b02      	cmp	r3, #2
 800f73e:	d010      	beq.n	800f762 <__gethex+0x37e>
 800f740:	2b03      	cmp	r3, #3
 800f742:	d012      	beq.n	800f76a <__gethex+0x386>
 800f744:	2b01      	cmp	r3, #1
 800f746:	d106      	bne.n	800f756 <__gethex+0x372>
 800f748:	07aa      	lsls	r2, r5, #30
 800f74a:	d504      	bpl.n	800f756 <__gethex+0x372>
 800f74c:	9a04      	ldr	r2, [sp, #16]
 800f74e:	6810      	ldr	r0, [r2, #0]
 800f750:	4305      	orrs	r5, r0
 800f752:	421d      	tst	r5, r3
 800f754:	d10c      	bne.n	800f770 <__gethex+0x38c>
 800f756:	2310      	movs	r3, #16
 800f758:	e02f      	b.n	800f7ba <__gethex+0x3d6>
 800f75a:	2501      	movs	r5, #1
 800f75c:	e7d4      	b.n	800f708 <__gethex+0x324>
 800f75e:	2601      	movs	r6, #1
 800f760:	e7e8      	b.n	800f734 <__gethex+0x350>
 800f762:	2301      	movs	r3, #1
 800f764:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f766:	1a9b      	subs	r3, r3, r2
 800f768:	9313      	str	r3, [sp, #76]	; 0x4c
 800f76a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d0f2      	beq.n	800f756 <__gethex+0x372>
 800f770:	6923      	ldr	r3, [r4, #16]
 800f772:	2000      	movs	r0, #0
 800f774:	9303      	str	r3, [sp, #12]
 800f776:	009b      	lsls	r3, r3, #2
 800f778:	9304      	str	r3, [sp, #16]
 800f77a:	0023      	movs	r3, r4
 800f77c:	9a04      	ldr	r2, [sp, #16]
 800f77e:	3314      	adds	r3, #20
 800f780:	1899      	adds	r1, r3, r2
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	1c55      	adds	r5, r2, #1
 800f786:	d01e      	beq.n	800f7c6 <__gethex+0x3e2>
 800f788:	3201      	adds	r2, #1
 800f78a:	601a      	str	r2, [r3, #0]
 800f78c:	0023      	movs	r3, r4
 800f78e:	3314      	adds	r3, #20
 800f790:	2e02      	cmp	r6, #2
 800f792:	d140      	bne.n	800f816 <__gethex+0x432>
 800f794:	9a02      	ldr	r2, [sp, #8]
 800f796:	9901      	ldr	r1, [sp, #4]
 800f798:	6812      	ldr	r2, [r2, #0]
 800f79a:	3a01      	subs	r2, #1
 800f79c:	428a      	cmp	r2, r1
 800f79e:	d10b      	bne.n	800f7b8 <__gethex+0x3d4>
 800f7a0:	114a      	asrs	r2, r1, #5
 800f7a2:	211f      	movs	r1, #31
 800f7a4:	9801      	ldr	r0, [sp, #4]
 800f7a6:	0092      	lsls	r2, r2, #2
 800f7a8:	4001      	ands	r1, r0
 800f7aa:	2001      	movs	r0, #1
 800f7ac:	0005      	movs	r5, r0
 800f7ae:	408d      	lsls	r5, r1
 800f7b0:	58d3      	ldr	r3, [r2, r3]
 800f7b2:	422b      	tst	r3, r5
 800f7b4:	d000      	beq.n	800f7b8 <__gethex+0x3d4>
 800f7b6:	2601      	movs	r6, #1
 800f7b8:	2320      	movs	r3, #32
 800f7ba:	431e      	orrs	r6, r3
 800f7bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f7be:	601c      	str	r4, [r3, #0]
 800f7c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7c2:	601f      	str	r7, [r3, #0]
 800f7c4:	e6a7      	b.n	800f516 <__gethex+0x132>
 800f7c6:	c301      	stmia	r3!, {r0}
 800f7c8:	4299      	cmp	r1, r3
 800f7ca:	d8da      	bhi.n	800f782 <__gethex+0x39e>
 800f7cc:	9b03      	ldr	r3, [sp, #12]
 800f7ce:	68a2      	ldr	r2, [r4, #8]
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	db17      	blt.n	800f804 <__gethex+0x420>
 800f7d4:	6863      	ldr	r3, [r4, #4]
 800f7d6:	9805      	ldr	r0, [sp, #20]
 800f7d8:	1c59      	adds	r1, r3, #1
 800f7da:	f000 f91f 	bl	800fa1c <_Balloc>
 800f7de:	1e05      	subs	r5, r0, #0
 800f7e0:	d103      	bne.n	800f7ea <__gethex+0x406>
 800f7e2:	0002      	movs	r2, r0
 800f7e4:	2184      	movs	r1, #132	; 0x84
 800f7e6:	4b1c      	ldr	r3, [pc, #112]	; (800f858 <__gethex+0x474>)
 800f7e8:	e6b8      	b.n	800f55c <__gethex+0x178>
 800f7ea:	0021      	movs	r1, r4
 800f7ec:	6923      	ldr	r3, [r4, #16]
 800f7ee:	310c      	adds	r1, #12
 800f7f0:	1c9a      	adds	r2, r3, #2
 800f7f2:	0092      	lsls	r2, r2, #2
 800f7f4:	300c      	adds	r0, #12
 800f7f6:	f7fe fca5 	bl	800e144 <memcpy>
 800f7fa:	0021      	movs	r1, r4
 800f7fc:	9805      	ldr	r0, [sp, #20]
 800f7fe:	f000 f951 	bl	800faa4 <_Bfree>
 800f802:	002c      	movs	r4, r5
 800f804:	6923      	ldr	r3, [r4, #16]
 800f806:	1c5a      	adds	r2, r3, #1
 800f808:	6122      	str	r2, [r4, #16]
 800f80a:	2201      	movs	r2, #1
 800f80c:	3304      	adds	r3, #4
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	18e3      	adds	r3, r4, r3
 800f812:	605a      	str	r2, [r3, #4]
 800f814:	e7ba      	b.n	800f78c <__gethex+0x3a8>
 800f816:	6922      	ldr	r2, [r4, #16]
 800f818:	9903      	ldr	r1, [sp, #12]
 800f81a:	428a      	cmp	r2, r1
 800f81c:	dd09      	ble.n	800f832 <__gethex+0x44e>
 800f81e:	2101      	movs	r1, #1
 800f820:	0020      	movs	r0, r4
 800f822:	f7ff fd75 	bl	800f310 <rshift>
 800f826:	9b02      	ldr	r3, [sp, #8]
 800f828:	3701      	adds	r7, #1
 800f82a:	689b      	ldr	r3, [r3, #8]
 800f82c:	42bb      	cmp	r3, r7
 800f82e:	dac2      	bge.n	800f7b6 <__gethex+0x3d2>
 800f830:	e6dc      	b.n	800f5ec <__gethex+0x208>
 800f832:	221f      	movs	r2, #31
 800f834:	9d01      	ldr	r5, [sp, #4]
 800f836:	9901      	ldr	r1, [sp, #4]
 800f838:	2601      	movs	r6, #1
 800f83a:	4015      	ands	r5, r2
 800f83c:	4211      	tst	r1, r2
 800f83e:	d0bb      	beq.n	800f7b8 <__gethex+0x3d4>
 800f840:	9a04      	ldr	r2, [sp, #16]
 800f842:	189b      	adds	r3, r3, r2
 800f844:	3b04      	subs	r3, #4
 800f846:	6818      	ldr	r0, [r3, #0]
 800f848:	f000 f9e0 	bl	800fc0c <__hi0bits>
 800f84c:	2320      	movs	r3, #32
 800f84e:	1b5d      	subs	r5, r3, r5
 800f850:	42a8      	cmp	r0, r5
 800f852:	dbe4      	blt.n	800f81e <__gethex+0x43a>
 800f854:	e7b0      	b.n	800f7b8 <__gethex+0x3d4>
 800f856:	46c0      	nop			; (mov r8, r8)
 800f858:	08012c89 	.word	0x08012c89

0800f85c <L_shift>:
 800f85c:	2308      	movs	r3, #8
 800f85e:	b570      	push	{r4, r5, r6, lr}
 800f860:	2520      	movs	r5, #32
 800f862:	1a9a      	subs	r2, r3, r2
 800f864:	0092      	lsls	r2, r2, #2
 800f866:	1aad      	subs	r5, r5, r2
 800f868:	6843      	ldr	r3, [r0, #4]
 800f86a:	6806      	ldr	r6, [r0, #0]
 800f86c:	001c      	movs	r4, r3
 800f86e:	40ac      	lsls	r4, r5
 800f870:	40d3      	lsrs	r3, r2
 800f872:	4334      	orrs	r4, r6
 800f874:	6004      	str	r4, [r0, #0]
 800f876:	6043      	str	r3, [r0, #4]
 800f878:	3004      	adds	r0, #4
 800f87a:	4288      	cmp	r0, r1
 800f87c:	d3f4      	bcc.n	800f868 <L_shift+0xc>
 800f87e:	bd70      	pop	{r4, r5, r6, pc}

0800f880 <__match>:
 800f880:	b530      	push	{r4, r5, lr}
 800f882:	6803      	ldr	r3, [r0, #0]
 800f884:	780c      	ldrb	r4, [r1, #0]
 800f886:	3301      	adds	r3, #1
 800f888:	2c00      	cmp	r4, #0
 800f88a:	d102      	bne.n	800f892 <__match+0x12>
 800f88c:	6003      	str	r3, [r0, #0]
 800f88e:	2001      	movs	r0, #1
 800f890:	bd30      	pop	{r4, r5, pc}
 800f892:	781a      	ldrb	r2, [r3, #0]
 800f894:	0015      	movs	r5, r2
 800f896:	3d41      	subs	r5, #65	; 0x41
 800f898:	2d19      	cmp	r5, #25
 800f89a:	d800      	bhi.n	800f89e <__match+0x1e>
 800f89c:	3220      	adds	r2, #32
 800f89e:	3101      	adds	r1, #1
 800f8a0:	42a2      	cmp	r2, r4
 800f8a2:	d0ef      	beq.n	800f884 <__match+0x4>
 800f8a4:	2000      	movs	r0, #0
 800f8a6:	e7f3      	b.n	800f890 <__match+0x10>

0800f8a8 <__hexnan>:
 800f8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8aa:	680b      	ldr	r3, [r1, #0]
 800f8ac:	b08b      	sub	sp, #44	; 0x2c
 800f8ae:	9201      	str	r2, [sp, #4]
 800f8b0:	9901      	ldr	r1, [sp, #4]
 800f8b2:	115a      	asrs	r2, r3, #5
 800f8b4:	0092      	lsls	r2, r2, #2
 800f8b6:	188a      	adds	r2, r1, r2
 800f8b8:	9202      	str	r2, [sp, #8]
 800f8ba:	0019      	movs	r1, r3
 800f8bc:	221f      	movs	r2, #31
 800f8be:	4011      	ands	r1, r2
 800f8c0:	9008      	str	r0, [sp, #32]
 800f8c2:	9106      	str	r1, [sp, #24]
 800f8c4:	4213      	tst	r3, r2
 800f8c6:	d002      	beq.n	800f8ce <__hexnan+0x26>
 800f8c8:	9b02      	ldr	r3, [sp, #8]
 800f8ca:	3304      	adds	r3, #4
 800f8cc:	9302      	str	r3, [sp, #8]
 800f8ce:	9b02      	ldr	r3, [sp, #8]
 800f8d0:	2500      	movs	r5, #0
 800f8d2:	1f1e      	subs	r6, r3, #4
 800f8d4:	0037      	movs	r7, r6
 800f8d6:	0034      	movs	r4, r6
 800f8d8:	9b08      	ldr	r3, [sp, #32]
 800f8da:	6035      	str	r5, [r6, #0]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	9507      	str	r5, [sp, #28]
 800f8e0:	9305      	str	r3, [sp, #20]
 800f8e2:	9503      	str	r5, [sp, #12]
 800f8e4:	9b05      	ldr	r3, [sp, #20]
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f8ea:	9b05      	ldr	r3, [sp, #20]
 800f8ec:	785b      	ldrb	r3, [r3, #1]
 800f8ee:	9304      	str	r3, [sp, #16]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d028      	beq.n	800f946 <__hexnan+0x9e>
 800f8f4:	9804      	ldr	r0, [sp, #16]
 800f8f6:	f7ff fd5f 	bl	800f3b8 <__hexdig_fun>
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	d154      	bne.n	800f9a8 <__hexnan+0x100>
 800f8fe:	9b04      	ldr	r3, [sp, #16]
 800f900:	2b20      	cmp	r3, #32
 800f902:	d819      	bhi.n	800f938 <__hexnan+0x90>
 800f904:	9b03      	ldr	r3, [sp, #12]
 800f906:	9a07      	ldr	r2, [sp, #28]
 800f908:	4293      	cmp	r3, r2
 800f90a:	dd12      	ble.n	800f932 <__hexnan+0x8a>
 800f90c:	42bc      	cmp	r4, r7
 800f90e:	d206      	bcs.n	800f91e <__hexnan+0x76>
 800f910:	2d07      	cmp	r5, #7
 800f912:	dc04      	bgt.n	800f91e <__hexnan+0x76>
 800f914:	002a      	movs	r2, r5
 800f916:	0039      	movs	r1, r7
 800f918:	0020      	movs	r0, r4
 800f91a:	f7ff ff9f 	bl	800f85c <L_shift>
 800f91e:	9b01      	ldr	r3, [sp, #4]
 800f920:	2508      	movs	r5, #8
 800f922:	429c      	cmp	r4, r3
 800f924:	d905      	bls.n	800f932 <__hexnan+0x8a>
 800f926:	1f27      	subs	r7, r4, #4
 800f928:	2500      	movs	r5, #0
 800f92a:	003c      	movs	r4, r7
 800f92c:	9b03      	ldr	r3, [sp, #12]
 800f92e:	603d      	str	r5, [r7, #0]
 800f930:	9307      	str	r3, [sp, #28]
 800f932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f934:	9305      	str	r3, [sp, #20]
 800f936:	e7d5      	b.n	800f8e4 <__hexnan+0x3c>
 800f938:	9b04      	ldr	r3, [sp, #16]
 800f93a:	2b29      	cmp	r3, #41	; 0x29
 800f93c:	d159      	bne.n	800f9f2 <__hexnan+0x14a>
 800f93e:	9b05      	ldr	r3, [sp, #20]
 800f940:	9a08      	ldr	r2, [sp, #32]
 800f942:	3302      	adds	r3, #2
 800f944:	6013      	str	r3, [r2, #0]
 800f946:	9b03      	ldr	r3, [sp, #12]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d052      	beq.n	800f9f2 <__hexnan+0x14a>
 800f94c:	42bc      	cmp	r4, r7
 800f94e:	d206      	bcs.n	800f95e <__hexnan+0xb6>
 800f950:	2d07      	cmp	r5, #7
 800f952:	dc04      	bgt.n	800f95e <__hexnan+0xb6>
 800f954:	002a      	movs	r2, r5
 800f956:	0039      	movs	r1, r7
 800f958:	0020      	movs	r0, r4
 800f95a:	f7ff ff7f 	bl	800f85c <L_shift>
 800f95e:	9b01      	ldr	r3, [sp, #4]
 800f960:	429c      	cmp	r4, r3
 800f962:	d935      	bls.n	800f9d0 <__hexnan+0x128>
 800f964:	001a      	movs	r2, r3
 800f966:	0023      	movs	r3, r4
 800f968:	cb02      	ldmia	r3!, {r1}
 800f96a:	c202      	stmia	r2!, {r1}
 800f96c:	429e      	cmp	r6, r3
 800f96e:	d2fb      	bcs.n	800f968 <__hexnan+0xc0>
 800f970:	9b02      	ldr	r3, [sp, #8]
 800f972:	1c61      	adds	r1, r4, #1
 800f974:	1eda      	subs	r2, r3, #3
 800f976:	2304      	movs	r3, #4
 800f978:	4291      	cmp	r1, r2
 800f97a:	d805      	bhi.n	800f988 <__hexnan+0xe0>
 800f97c:	9b02      	ldr	r3, [sp, #8]
 800f97e:	3b04      	subs	r3, #4
 800f980:	1b1b      	subs	r3, r3, r4
 800f982:	089b      	lsrs	r3, r3, #2
 800f984:	3301      	adds	r3, #1
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	9a01      	ldr	r2, [sp, #4]
 800f98a:	18d3      	adds	r3, r2, r3
 800f98c:	2200      	movs	r2, #0
 800f98e:	c304      	stmia	r3!, {r2}
 800f990:	429e      	cmp	r6, r3
 800f992:	d2fc      	bcs.n	800f98e <__hexnan+0xe6>
 800f994:	6833      	ldr	r3, [r6, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d104      	bne.n	800f9a4 <__hexnan+0xfc>
 800f99a:	9b01      	ldr	r3, [sp, #4]
 800f99c:	429e      	cmp	r6, r3
 800f99e:	d126      	bne.n	800f9ee <__hexnan+0x146>
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	6033      	str	r3, [r6, #0]
 800f9a4:	2005      	movs	r0, #5
 800f9a6:	e025      	b.n	800f9f4 <__hexnan+0x14c>
 800f9a8:	9b03      	ldr	r3, [sp, #12]
 800f9aa:	3501      	adds	r5, #1
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	9303      	str	r3, [sp, #12]
 800f9b0:	2d08      	cmp	r5, #8
 800f9b2:	dd06      	ble.n	800f9c2 <__hexnan+0x11a>
 800f9b4:	9b01      	ldr	r3, [sp, #4]
 800f9b6:	429c      	cmp	r4, r3
 800f9b8:	d9bb      	bls.n	800f932 <__hexnan+0x8a>
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	2501      	movs	r5, #1
 800f9be:	3c04      	subs	r4, #4
 800f9c0:	6023      	str	r3, [r4, #0]
 800f9c2:	220f      	movs	r2, #15
 800f9c4:	6823      	ldr	r3, [r4, #0]
 800f9c6:	4010      	ands	r0, r2
 800f9c8:	011b      	lsls	r3, r3, #4
 800f9ca:	4318      	orrs	r0, r3
 800f9cc:	6020      	str	r0, [r4, #0]
 800f9ce:	e7b0      	b.n	800f932 <__hexnan+0x8a>
 800f9d0:	9b06      	ldr	r3, [sp, #24]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d0de      	beq.n	800f994 <__hexnan+0xec>
 800f9d6:	2120      	movs	r1, #32
 800f9d8:	9a06      	ldr	r2, [sp, #24]
 800f9da:	9b02      	ldr	r3, [sp, #8]
 800f9dc:	1a89      	subs	r1, r1, r2
 800f9de:	2201      	movs	r2, #1
 800f9e0:	4252      	negs	r2, r2
 800f9e2:	40ca      	lsrs	r2, r1
 800f9e4:	3b04      	subs	r3, #4
 800f9e6:	6819      	ldr	r1, [r3, #0]
 800f9e8:	400a      	ands	r2, r1
 800f9ea:	601a      	str	r2, [r3, #0]
 800f9ec:	e7d2      	b.n	800f994 <__hexnan+0xec>
 800f9ee:	3e04      	subs	r6, #4
 800f9f0:	e7d0      	b.n	800f994 <__hexnan+0xec>
 800f9f2:	2004      	movs	r0, #4
 800f9f4:	b00b      	add	sp, #44	; 0x2c
 800f9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f9f8 <__ascii_mbtowc>:
 800f9f8:	b082      	sub	sp, #8
 800f9fa:	2900      	cmp	r1, #0
 800f9fc:	d100      	bne.n	800fa00 <__ascii_mbtowc+0x8>
 800f9fe:	a901      	add	r1, sp, #4
 800fa00:	1e10      	subs	r0, r2, #0
 800fa02:	d006      	beq.n	800fa12 <__ascii_mbtowc+0x1a>
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d006      	beq.n	800fa16 <__ascii_mbtowc+0x1e>
 800fa08:	7813      	ldrb	r3, [r2, #0]
 800fa0a:	600b      	str	r3, [r1, #0]
 800fa0c:	7810      	ldrb	r0, [r2, #0]
 800fa0e:	1e43      	subs	r3, r0, #1
 800fa10:	4198      	sbcs	r0, r3
 800fa12:	b002      	add	sp, #8
 800fa14:	4770      	bx	lr
 800fa16:	2002      	movs	r0, #2
 800fa18:	4240      	negs	r0, r0
 800fa1a:	e7fa      	b.n	800fa12 <__ascii_mbtowc+0x1a>

0800fa1c <_Balloc>:
 800fa1c:	b570      	push	{r4, r5, r6, lr}
 800fa1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fa20:	0006      	movs	r6, r0
 800fa22:	000c      	movs	r4, r1
 800fa24:	2d00      	cmp	r5, #0
 800fa26:	d10e      	bne.n	800fa46 <_Balloc+0x2a>
 800fa28:	2010      	movs	r0, #16
 800fa2a:	f001 ffcb 	bl	80119c4 <malloc>
 800fa2e:	1e02      	subs	r2, r0, #0
 800fa30:	6270      	str	r0, [r6, #36]	; 0x24
 800fa32:	d104      	bne.n	800fa3e <_Balloc+0x22>
 800fa34:	2166      	movs	r1, #102	; 0x66
 800fa36:	4b19      	ldr	r3, [pc, #100]	; (800fa9c <_Balloc+0x80>)
 800fa38:	4819      	ldr	r0, [pc, #100]	; (800faa0 <_Balloc+0x84>)
 800fa3a:	f001 f8ef 	bl	8010c1c <__assert_func>
 800fa3e:	6045      	str	r5, [r0, #4]
 800fa40:	6085      	str	r5, [r0, #8]
 800fa42:	6005      	str	r5, [r0, #0]
 800fa44:	60c5      	str	r5, [r0, #12]
 800fa46:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800fa48:	68eb      	ldr	r3, [r5, #12]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d013      	beq.n	800fa76 <_Balloc+0x5a>
 800fa4e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fa50:	00a2      	lsls	r2, r4, #2
 800fa52:	68db      	ldr	r3, [r3, #12]
 800fa54:	189b      	adds	r3, r3, r2
 800fa56:	6818      	ldr	r0, [r3, #0]
 800fa58:	2800      	cmp	r0, #0
 800fa5a:	d118      	bne.n	800fa8e <_Balloc+0x72>
 800fa5c:	2101      	movs	r1, #1
 800fa5e:	000d      	movs	r5, r1
 800fa60:	40a5      	lsls	r5, r4
 800fa62:	1d6a      	adds	r2, r5, #5
 800fa64:	0030      	movs	r0, r6
 800fa66:	0092      	lsls	r2, r2, #2
 800fa68:	f000 fcbc 	bl	80103e4 <_calloc_r>
 800fa6c:	2800      	cmp	r0, #0
 800fa6e:	d00c      	beq.n	800fa8a <_Balloc+0x6e>
 800fa70:	6044      	str	r4, [r0, #4]
 800fa72:	6085      	str	r5, [r0, #8]
 800fa74:	e00d      	b.n	800fa92 <_Balloc+0x76>
 800fa76:	2221      	movs	r2, #33	; 0x21
 800fa78:	2104      	movs	r1, #4
 800fa7a:	0030      	movs	r0, r6
 800fa7c:	f000 fcb2 	bl	80103e4 <_calloc_r>
 800fa80:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fa82:	60e8      	str	r0, [r5, #12]
 800fa84:	68db      	ldr	r3, [r3, #12]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d1e1      	bne.n	800fa4e <_Balloc+0x32>
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	bd70      	pop	{r4, r5, r6, pc}
 800fa8e:	6802      	ldr	r2, [r0, #0]
 800fa90:	601a      	str	r2, [r3, #0]
 800fa92:	2300      	movs	r3, #0
 800fa94:	6103      	str	r3, [r0, #16]
 800fa96:	60c3      	str	r3, [r0, #12]
 800fa98:	e7f8      	b.n	800fa8c <_Balloc+0x70>
 800fa9a:	46c0      	nop			; (mov r8, r8)
 800fa9c:	08012d14 	.word	0x08012d14
 800faa0:	08012d2b 	.word	0x08012d2b

0800faa4 <_Bfree>:
 800faa4:	b570      	push	{r4, r5, r6, lr}
 800faa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800faa8:	0005      	movs	r5, r0
 800faaa:	000c      	movs	r4, r1
 800faac:	2e00      	cmp	r6, #0
 800faae:	d10e      	bne.n	800face <_Bfree+0x2a>
 800fab0:	2010      	movs	r0, #16
 800fab2:	f001 ff87 	bl	80119c4 <malloc>
 800fab6:	1e02      	subs	r2, r0, #0
 800fab8:	6268      	str	r0, [r5, #36]	; 0x24
 800faba:	d104      	bne.n	800fac6 <_Bfree+0x22>
 800fabc:	218a      	movs	r1, #138	; 0x8a
 800fabe:	4b09      	ldr	r3, [pc, #36]	; (800fae4 <_Bfree+0x40>)
 800fac0:	4809      	ldr	r0, [pc, #36]	; (800fae8 <_Bfree+0x44>)
 800fac2:	f001 f8ab 	bl	8010c1c <__assert_func>
 800fac6:	6046      	str	r6, [r0, #4]
 800fac8:	6086      	str	r6, [r0, #8]
 800faca:	6006      	str	r6, [r0, #0]
 800facc:	60c6      	str	r6, [r0, #12]
 800face:	2c00      	cmp	r4, #0
 800fad0:	d007      	beq.n	800fae2 <_Bfree+0x3e>
 800fad2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fad4:	6862      	ldr	r2, [r4, #4]
 800fad6:	68db      	ldr	r3, [r3, #12]
 800fad8:	0092      	lsls	r2, r2, #2
 800fada:	189b      	adds	r3, r3, r2
 800fadc:	681a      	ldr	r2, [r3, #0]
 800fade:	6022      	str	r2, [r4, #0]
 800fae0:	601c      	str	r4, [r3, #0]
 800fae2:	bd70      	pop	{r4, r5, r6, pc}
 800fae4:	08012d14 	.word	0x08012d14
 800fae8:	08012d2b 	.word	0x08012d2b

0800faec <__multadd>:
 800faec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800faee:	000e      	movs	r6, r1
 800faf0:	9001      	str	r0, [sp, #4]
 800faf2:	000c      	movs	r4, r1
 800faf4:	001d      	movs	r5, r3
 800faf6:	2000      	movs	r0, #0
 800faf8:	690f      	ldr	r7, [r1, #16]
 800fafa:	3614      	adds	r6, #20
 800fafc:	6833      	ldr	r3, [r6, #0]
 800fafe:	3001      	adds	r0, #1
 800fb00:	b299      	uxth	r1, r3
 800fb02:	4351      	muls	r1, r2
 800fb04:	0c1b      	lsrs	r3, r3, #16
 800fb06:	4353      	muls	r3, r2
 800fb08:	1949      	adds	r1, r1, r5
 800fb0a:	0c0d      	lsrs	r5, r1, #16
 800fb0c:	195b      	adds	r3, r3, r5
 800fb0e:	0c1d      	lsrs	r5, r3, #16
 800fb10:	b289      	uxth	r1, r1
 800fb12:	041b      	lsls	r3, r3, #16
 800fb14:	185b      	adds	r3, r3, r1
 800fb16:	c608      	stmia	r6!, {r3}
 800fb18:	4287      	cmp	r7, r0
 800fb1a:	dcef      	bgt.n	800fafc <__multadd+0x10>
 800fb1c:	2d00      	cmp	r5, #0
 800fb1e:	d022      	beq.n	800fb66 <__multadd+0x7a>
 800fb20:	68a3      	ldr	r3, [r4, #8]
 800fb22:	42bb      	cmp	r3, r7
 800fb24:	dc19      	bgt.n	800fb5a <__multadd+0x6e>
 800fb26:	6863      	ldr	r3, [r4, #4]
 800fb28:	9801      	ldr	r0, [sp, #4]
 800fb2a:	1c59      	adds	r1, r3, #1
 800fb2c:	f7ff ff76 	bl	800fa1c <_Balloc>
 800fb30:	1e06      	subs	r6, r0, #0
 800fb32:	d105      	bne.n	800fb40 <__multadd+0x54>
 800fb34:	0002      	movs	r2, r0
 800fb36:	21b5      	movs	r1, #181	; 0xb5
 800fb38:	4b0c      	ldr	r3, [pc, #48]	; (800fb6c <__multadd+0x80>)
 800fb3a:	480d      	ldr	r0, [pc, #52]	; (800fb70 <__multadd+0x84>)
 800fb3c:	f001 f86e 	bl	8010c1c <__assert_func>
 800fb40:	0021      	movs	r1, r4
 800fb42:	6923      	ldr	r3, [r4, #16]
 800fb44:	310c      	adds	r1, #12
 800fb46:	1c9a      	adds	r2, r3, #2
 800fb48:	0092      	lsls	r2, r2, #2
 800fb4a:	300c      	adds	r0, #12
 800fb4c:	f7fe fafa 	bl	800e144 <memcpy>
 800fb50:	0021      	movs	r1, r4
 800fb52:	9801      	ldr	r0, [sp, #4]
 800fb54:	f7ff ffa6 	bl	800faa4 <_Bfree>
 800fb58:	0034      	movs	r4, r6
 800fb5a:	1d3b      	adds	r3, r7, #4
 800fb5c:	009b      	lsls	r3, r3, #2
 800fb5e:	18e3      	adds	r3, r4, r3
 800fb60:	605d      	str	r5, [r3, #4]
 800fb62:	1c7b      	adds	r3, r7, #1
 800fb64:	6123      	str	r3, [r4, #16]
 800fb66:	0020      	movs	r0, r4
 800fb68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fb6a:	46c0      	nop			; (mov r8, r8)
 800fb6c:	08012c89 	.word	0x08012c89
 800fb70:	08012d2b 	.word	0x08012d2b

0800fb74 <__s2b>:
 800fb74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb76:	0006      	movs	r6, r0
 800fb78:	0018      	movs	r0, r3
 800fb7a:	000c      	movs	r4, r1
 800fb7c:	3008      	adds	r0, #8
 800fb7e:	2109      	movs	r1, #9
 800fb80:	9301      	str	r3, [sp, #4]
 800fb82:	0015      	movs	r5, r2
 800fb84:	f7f0 fb6c 	bl	8000260 <__divsi3>
 800fb88:	2301      	movs	r3, #1
 800fb8a:	2100      	movs	r1, #0
 800fb8c:	4283      	cmp	r3, r0
 800fb8e:	db0a      	blt.n	800fba6 <__s2b+0x32>
 800fb90:	0030      	movs	r0, r6
 800fb92:	f7ff ff43 	bl	800fa1c <_Balloc>
 800fb96:	1e01      	subs	r1, r0, #0
 800fb98:	d108      	bne.n	800fbac <__s2b+0x38>
 800fb9a:	0002      	movs	r2, r0
 800fb9c:	4b19      	ldr	r3, [pc, #100]	; (800fc04 <__s2b+0x90>)
 800fb9e:	481a      	ldr	r0, [pc, #104]	; (800fc08 <__s2b+0x94>)
 800fba0:	31ce      	adds	r1, #206	; 0xce
 800fba2:	f001 f83b 	bl	8010c1c <__assert_func>
 800fba6:	005b      	lsls	r3, r3, #1
 800fba8:	3101      	adds	r1, #1
 800fbaa:	e7ef      	b.n	800fb8c <__s2b+0x18>
 800fbac:	9b08      	ldr	r3, [sp, #32]
 800fbae:	6143      	str	r3, [r0, #20]
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	6103      	str	r3, [r0, #16]
 800fbb4:	2d09      	cmp	r5, #9
 800fbb6:	dd18      	ble.n	800fbea <__s2b+0x76>
 800fbb8:	0023      	movs	r3, r4
 800fbba:	3309      	adds	r3, #9
 800fbbc:	001f      	movs	r7, r3
 800fbbe:	9300      	str	r3, [sp, #0]
 800fbc0:	1964      	adds	r4, r4, r5
 800fbc2:	783b      	ldrb	r3, [r7, #0]
 800fbc4:	220a      	movs	r2, #10
 800fbc6:	0030      	movs	r0, r6
 800fbc8:	3b30      	subs	r3, #48	; 0x30
 800fbca:	f7ff ff8f 	bl	800faec <__multadd>
 800fbce:	3701      	adds	r7, #1
 800fbd0:	0001      	movs	r1, r0
 800fbd2:	42a7      	cmp	r7, r4
 800fbd4:	d1f5      	bne.n	800fbc2 <__s2b+0x4e>
 800fbd6:	002c      	movs	r4, r5
 800fbd8:	9b00      	ldr	r3, [sp, #0]
 800fbda:	3c08      	subs	r4, #8
 800fbdc:	191c      	adds	r4, r3, r4
 800fbde:	002f      	movs	r7, r5
 800fbe0:	9b01      	ldr	r3, [sp, #4]
 800fbe2:	429f      	cmp	r7, r3
 800fbe4:	db04      	blt.n	800fbf0 <__s2b+0x7c>
 800fbe6:	0008      	movs	r0, r1
 800fbe8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fbea:	2509      	movs	r5, #9
 800fbec:	340a      	adds	r4, #10
 800fbee:	e7f6      	b.n	800fbde <__s2b+0x6a>
 800fbf0:	1b63      	subs	r3, r4, r5
 800fbf2:	5ddb      	ldrb	r3, [r3, r7]
 800fbf4:	220a      	movs	r2, #10
 800fbf6:	0030      	movs	r0, r6
 800fbf8:	3b30      	subs	r3, #48	; 0x30
 800fbfa:	f7ff ff77 	bl	800faec <__multadd>
 800fbfe:	3701      	adds	r7, #1
 800fc00:	0001      	movs	r1, r0
 800fc02:	e7ed      	b.n	800fbe0 <__s2b+0x6c>
 800fc04:	08012c89 	.word	0x08012c89
 800fc08:	08012d2b 	.word	0x08012d2b

0800fc0c <__hi0bits>:
 800fc0c:	0003      	movs	r3, r0
 800fc0e:	0c02      	lsrs	r2, r0, #16
 800fc10:	2000      	movs	r0, #0
 800fc12:	4282      	cmp	r2, r0
 800fc14:	d101      	bne.n	800fc1a <__hi0bits+0xe>
 800fc16:	041b      	lsls	r3, r3, #16
 800fc18:	3010      	adds	r0, #16
 800fc1a:	0e1a      	lsrs	r2, r3, #24
 800fc1c:	d101      	bne.n	800fc22 <__hi0bits+0x16>
 800fc1e:	3008      	adds	r0, #8
 800fc20:	021b      	lsls	r3, r3, #8
 800fc22:	0f1a      	lsrs	r2, r3, #28
 800fc24:	d101      	bne.n	800fc2a <__hi0bits+0x1e>
 800fc26:	3004      	adds	r0, #4
 800fc28:	011b      	lsls	r3, r3, #4
 800fc2a:	0f9a      	lsrs	r2, r3, #30
 800fc2c:	d101      	bne.n	800fc32 <__hi0bits+0x26>
 800fc2e:	3002      	adds	r0, #2
 800fc30:	009b      	lsls	r3, r3, #2
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	db03      	blt.n	800fc3e <__hi0bits+0x32>
 800fc36:	3001      	adds	r0, #1
 800fc38:	005b      	lsls	r3, r3, #1
 800fc3a:	d400      	bmi.n	800fc3e <__hi0bits+0x32>
 800fc3c:	2020      	movs	r0, #32
 800fc3e:	4770      	bx	lr

0800fc40 <__lo0bits>:
 800fc40:	6803      	ldr	r3, [r0, #0]
 800fc42:	0002      	movs	r2, r0
 800fc44:	2107      	movs	r1, #7
 800fc46:	0018      	movs	r0, r3
 800fc48:	4008      	ands	r0, r1
 800fc4a:	420b      	tst	r3, r1
 800fc4c:	d00d      	beq.n	800fc6a <__lo0bits+0x2a>
 800fc4e:	3906      	subs	r1, #6
 800fc50:	2000      	movs	r0, #0
 800fc52:	420b      	tst	r3, r1
 800fc54:	d105      	bne.n	800fc62 <__lo0bits+0x22>
 800fc56:	3002      	adds	r0, #2
 800fc58:	4203      	tst	r3, r0
 800fc5a:	d003      	beq.n	800fc64 <__lo0bits+0x24>
 800fc5c:	40cb      	lsrs	r3, r1
 800fc5e:	0008      	movs	r0, r1
 800fc60:	6013      	str	r3, [r2, #0]
 800fc62:	4770      	bx	lr
 800fc64:	089b      	lsrs	r3, r3, #2
 800fc66:	6013      	str	r3, [r2, #0]
 800fc68:	e7fb      	b.n	800fc62 <__lo0bits+0x22>
 800fc6a:	b299      	uxth	r1, r3
 800fc6c:	2900      	cmp	r1, #0
 800fc6e:	d101      	bne.n	800fc74 <__lo0bits+0x34>
 800fc70:	2010      	movs	r0, #16
 800fc72:	0c1b      	lsrs	r3, r3, #16
 800fc74:	b2d9      	uxtb	r1, r3
 800fc76:	2900      	cmp	r1, #0
 800fc78:	d101      	bne.n	800fc7e <__lo0bits+0x3e>
 800fc7a:	3008      	adds	r0, #8
 800fc7c:	0a1b      	lsrs	r3, r3, #8
 800fc7e:	0719      	lsls	r1, r3, #28
 800fc80:	d101      	bne.n	800fc86 <__lo0bits+0x46>
 800fc82:	3004      	adds	r0, #4
 800fc84:	091b      	lsrs	r3, r3, #4
 800fc86:	0799      	lsls	r1, r3, #30
 800fc88:	d101      	bne.n	800fc8e <__lo0bits+0x4e>
 800fc8a:	3002      	adds	r0, #2
 800fc8c:	089b      	lsrs	r3, r3, #2
 800fc8e:	07d9      	lsls	r1, r3, #31
 800fc90:	d4e9      	bmi.n	800fc66 <__lo0bits+0x26>
 800fc92:	3001      	adds	r0, #1
 800fc94:	085b      	lsrs	r3, r3, #1
 800fc96:	d1e6      	bne.n	800fc66 <__lo0bits+0x26>
 800fc98:	2020      	movs	r0, #32
 800fc9a:	e7e2      	b.n	800fc62 <__lo0bits+0x22>

0800fc9c <__i2b>:
 800fc9c:	b510      	push	{r4, lr}
 800fc9e:	000c      	movs	r4, r1
 800fca0:	2101      	movs	r1, #1
 800fca2:	f7ff febb 	bl	800fa1c <_Balloc>
 800fca6:	2800      	cmp	r0, #0
 800fca8:	d106      	bne.n	800fcb8 <__i2b+0x1c>
 800fcaa:	21a0      	movs	r1, #160	; 0xa0
 800fcac:	0002      	movs	r2, r0
 800fcae:	4b04      	ldr	r3, [pc, #16]	; (800fcc0 <__i2b+0x24>)
 800fcb0:	4804      	ldr	r0, [pc, #16]	; (800fcc4 <__i2b+0x28>)
 800fcb2:	0049      	lsls	r1, r1, #1
 800fcb4:	f000 ffb2 	bl	8010c1c <__assert_func>
 800fcb8:	2301      	movs	r3, #1
 800fcba:	6144      	str	r4, [r0, #20]
 800fcbc:	6103      	str	r3, [r0, #16]
 800fcbe:	bd10      	pop	{r4, pc}
 800fcc0:	08012c89 	.word	0x08012c89
 800fcc4:	08012d2b 	.word	0x08012d2b

0800fcc8 <__multiply>:
 800fcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcca:	690b      	ldr	r3, [r1, #16]
 800fccc:	0014      	movs	r4, r2
 800fcce:	6912      	ldr	r2, [r2, #16]
 800fcd0:	000d      	movs	r5, r1
 800fcd2:	b089      	sub	sp, #36	; 0x24
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	da01      	bge.n	800fcdc <__multiply+0x14>
 800fcd8:	0025      	movs	r5, r4
 800fcda:	000c      	movs	r4, r1
 800fcdc:	692f      	ldr	r7, [r5, #16]
 800fcde:	6926      	ldr	r6, [r4, #16]
 800fce0:	6869      	ldr	r1, [r5, #4]
 800fce2:	19bb      	adds	r3, r7, r6
 800fce4:	9302      	str	r3, [sp, #8]
 800fce6:	68ab      	ldr	r3, [r5, #8]
 800fce8:	19ba      	adds	r2, r7, r6
 800fcea:	4293      	cmp	r3, r2
 800fcec:	da00      	bge.n	800fcf0 <__multiply+0x28>
 800fcee:	3101      	adds	r1, #1
 800fcf0:	f7ff fe94 	bl	800fa1c <_Balloc>
 800fcf4:	9001      	str	r0, [sp, #4]
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	d106      	bne.n	800fd08 <__multiply+0x40>
 800fcfa:	215e      	movs	r1, #94	; 0x5e
 800fcfc:	0002      	movs	r2, r0
 800fcfe:	4b48      	ldr	r3, [pc, #288]	; (800fe20 <__multiply+0x158>)
 800fd00:	4848      	ldr	r0, [pc, #288]	; (800fe24 <__multiply+0x15c>)
 800fd02:	31ff      	adds	r1, #255	; 0xff
 800fd04:	f000 ff8a 	bl	8010c1c <__assert_func>
 800fd08:	9b01      	ldr	r3, [sp, #4]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	3314      	adds	r3, #20
 800fd0e:	469c      	mov	ip, r3
 800fd10:	19bb      	adds	r3, r7, r6
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	4463      	add	r3, ip
 800fd16:	9303      	str	r3, [sp, #12]
 800fd18:	4663      	mov	r3, ip
 800fd1a:	9903      	ldr	r1, [sp, #12]
 800fd1c:	428b      	cmp	r3, r1
 800fd1e:	d32c      	bcc.n	800fd7a <__multiply+0xb2>
 800fd20:	002b      	movs	r3, r5
 800fd22:	0022      	movs	r2, r4
 800fd24:	3314      	adds	r3, #20
 800fd26:	00bf      	lsls	r7, r7, #2
 800fd28:	3214      	adds	r2, #20
 800fd2a:	9306      	str	r3, [sp, #24]
 800fd2c:	00b6      	lsls	r6, r6, #2
 800fd2e:	19db      	adds	r3, r3, r7
 800fd30:	9304      	str	r3, [sp, #16]
 800fd32:	1993      	adds	r3, r2, r6
 800fd34:	9307      	str	r3, [sp, #28]
 800fd36:	2304      	movs	r3, #4
 800fd38:	9305      	str	r3, [sp, #20]
 800fd3a:	002b      	movs	r3, r5
 800fd3c:	9904      	ldr	r1, [sp, #16]
 800fd3e:	3315      	adds	r3, #21
 800fd40:	9200      	str	r2, [sp, #0]
 800fd42:	4299      	cmp	r1, r3
 800fd44:	d305      	bcc.n	800fd52 <__multiply+0x8a>
 800fd46:	1b4b      	subs	r3, r1, r5
 800fd48:	3b15      	subs	r3, #21
 800fd4a:	089b      	lsrs	r3, r3, #2
 800fd4c:	3301      	adds	r3, #1
 800fd4e:	009b      	lsls	r3, r3, #2
 800fd50:	9305      	str	r3, [sp, #20]
 800fd52:	9b07      	ldr	r3, [sp, #28]
 800fd54:	9a00      	ldr	r2, [sp, #0]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d311      	bcc.n	800fd7e <__multiply+0xb6>
 800fd5a:	9b02      	ldr	r3, [sp, #8]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	dd06      	ble.n	800fd6e <__multiply+0xa6>
 800fd60:	9b03      	ldr	r3, [sp, #12]
 800fd62:	3b04      	subs	r3, #4
 800fd64:	9303      	str	r3, [sp, #12]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	9300      	str	r3, [sp, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d053      	beq.n	800fe16 <__multiply+0x14e>
 800fd6e:	9b01      	ldr	r3, [sp, #4]
 800fd70:	9a02      	ldr	r2, [sp, #8]
 800fd72:	0018      	movs	r0, r3
 800fd74:	611a      	str	r2, [r3, #16]
 800fd76:	b009      	add	sp, #36	; 0x24
 800fd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd7a:	c304      	stmia	r3!, {r2}
 800fd7c:	e7cd      	b.n	800fd1a <__multiply+0x52>
 800fd7e:	9b00      	ldr	r3, [sp, #0]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	b298      	uxth	r0, r3
 800fd84:	2800      	cmp	r0, #0
 800fd86:	d01b      	beq.n	800fdc0 <__multiply+0xf8>
 800fd88:	4667      	mov	r7, ip
 800fd8a:	2400      	movs	r4, #0
 800fd8c:	9e06      	ldr	r6, [sp, #24]
 800fd8e:	ce02      	ldmia	r6!, {r1}
 800fd90:	683a      	ldr	r2, [r7, #0]
 800fd92:	b28b      	uxth	r3, r1
 800fd94:	4343      	muls	r3, r0
 800fd96:	b292      	uxth	r2, r2
 800fd98:	189b      	adds	r3, r3, r2
 800fd9a:	191b      	adds	r3, r3, r4
 800fd9c:	0c0c      	lsrs	r4, r1, #16
 800fd9e:	4344      	muls	r4, r0
 800fda0:	683a      	ldr	r2, [r7, #0]
 800fda2:	0c11      	lsrs	r1, r2, #16
 800fda4:	1861      	adds	r1, r4, r1
 800fda6:	0c1c      	lsrs	r4, r3, #16
 800fda8:	1909      	adds	r1, r1, r4
 800fdaa:	0c0c      	lsrs	r4, r1, #16
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	0409      	lsls	r1, r1, #16
 800fdb0:	430b      	orrs	r3, r1
 800fdb2:	c708      	stmia	r7!, {r3}
 800fdb4:	9b04      	ldr	r3, [sp, #16]
 800fdb6:	42b3      	cmp	r3, r6
 800fdb8:	d8e9      	bhi.n	800fd8e <__multiply+0xc6>
 800fdba:	4663      	mov	r3, ip
 800fdbc:	9a05      	ldr	r2, [sp, #20]
 800fdbe:	509c      	str	r4, [r3, r2]
 800fdc0:	9b00      	ldr	r3, [sp, #0]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	0c1e      	lsrs	r6, r3, #16
 800fdc6:	d020      	beq.n	800fe0a <__multiply+0x142>
 800fdc8:	4663      	mov	r3, ip
 800fdca:	002c      	movs	r4, r5
 800fdcc:	4660      	mov	r0, ip
 800fdce:	2700      	movs	r7, #0
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	3414      	adds	r4, #20
 800fdd4:	6822      	ldr	r2, [r4, #0]
 800fdd6:	b29b      	uxth	r3, r3
 800fdd8:	b291      	uxth	r1, r2
 800fdda:	4371      	muls	r1, r6
 800fddc:	6802      	ldr	r2, [r0, #0]
 800fdde:	0c12      	lsrs	r2, r2, #16
 800fde0:	1889      	adds	r1, r1, r2
 800fde2:	19cf      	adds	r7, r1, r7
 800fde4:	0439      	lsls	r1, r7, #16
 800fde6:	430b      	orrs	r3, r1
 800fde8:	6003      	str	r3, [r0, #0]
 800fdea:	cc02      	ldmia	r4!, {r1}
 800fdec:	6843      	ldr	r3, [r0, #4]
 800fdee:	0c09      	lsrs	r1, r1, #16
 800fdf0:	4371      	muls	r1, r6
 800fdf2:	b29b      	uxth	r3, r3
 800fdf4:	0c3f      	lsrs	r7, r7, #16
 800fdf6:	18cb      	adds	r3, r1, r3
 800fdf8:	9a04      	ldr	r2, [sp, #16]
 800fdfa:	19db      	adds	r3, r3, r7
 800fdfc:	0c1f      	lsrs	r7, r3, #16
 800fdfe:	3004      	adds	r0, #4
 800fe00:	42a2      	cmp	r2, r4
 800fe02:	d8e7      	bhi.n	800fdd4 <__multiply+0x10c>
 800fe04:	4662      	mov	r2, ip
 800fe06:	9905      	ldr	r1, [sp, #20]
 800fe08:	5053      	str	r3, [r2, r1]
 800fe0a:	9b00      	ldr	r3, [sp, #0]
 800fe0c:	3304      	adds	r3, #4
 800fe0e:	9300      	str	r3, [sp, #0]
 800fe10:	2304      	movs	r3, #4
 800fe12:	449c      	add	ip, r3
 800fe14:	e79d      	b.n	800fd52 <__multiply+0x8a>
 800fe16:	9b02      	ldr	r3, [sp, #8]
 800fe18:	3b01      	subs	r3, #1
 800fe1a:	9302      	str	r3, [sp, #8]
 800fe1c:	e79d      	b.n	800fd5a <__multiply+0x92>
 800fe1e:	46c0      	nop			; (mov r8, r8)
 800fe20:	08012c89 	.word	0x08012c89
 800fe24:	08012d2b 	.word	0x08012d2b

0800fe28 <__pow5mult>:
 800fe28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe2a:	2303      	movs	r3, #3
 800fe2c:	0015      	movs	r5, r2
 800fe2e:	0007      	movs	r7, r0
 800fe30:	000e      	movs	r6, r1
 800fe32:	401a      	ands	r2, r3
 800fe34:	421d      	tst	r5, r3
 800fe36:	d008      	beq.n	800fe4a <__pow5mult+0x22>
 800fe38:	4925      	ldr	r1, [pc, #148]	; (800fed0 <__pow5mult+0xa8>)
 800fe3a:	3a01      	subs	r2, #1
 800fe3c:	0092      	lsls	r2, r2, #2
 800fe3e:	5852      	ldr	r2, [r2, r1]
 800fe40:	2300      	movs	r3, #0
 800fe42:	0031      	movs	r1, r6
 800fe44:	f7ff fe52 	bl	800faec <__multadd>
 800fe48:	0006      	movs	r6, r0
 800fe4a:	10ad      	asrs	r5, r5, #2
 800fe4c:	d03d      	beq.n	800feca <__pow5mult+0xa2>
 800fe4e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800fe50:	2c00      	cmp	r4, #0
 800fe52:	d10f      	bne.n	800fe74 <__pow5mult+0x4c>
 800fe54:	2010      	movs	r0, #16
 800fe56:	f001 fdb5 	bl	80119c4 <malloc>
 800fe5a:	1e02      	subs	r2, r0, #0
 800fe5c:	6278      	str	r0, [r7, #36]	; 0x24
 800fe5e:	d105      	bne.n	800fe6c <__pow5mult+0x44>
 800fe60:	21d7      	movs	r1, #215	; 0xd7
 800fe62:	4b1c      	ldr	r3, [pc, #112]	; (800fed4 <__pow5mult+0xac>)
 800fe64:	481c      	ldr	r0, [pc, #112]	; (800fed8 <__pow5mult+0xb0>)
 800fe66:	0049      	lsls	r1, r1, #1
 800fe68:	f000 fed8 	bl	8010c1c <__assert_func>
 800fe6c:	6044      	str	r4, [r0, #4]
 800fe6e:	6084      	str	r4, [r0, #8]
 800fe70:	6004      	str	r4, [r0, #0]
 800fe72:	60c4      	str	r4, [r0, #12]
 800fe74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe76:	689c      	ldr	r4, [r3, #8]
 800fe78:	9301      	str	r3, [sp, #4]
 800fe7a:	2c00      	cmp	r4, #0
 800fe7c:	d108      	bne.n	800fe90 <__pow5mult+0x68>
 800fe7e:	0038      	movs	r0, r7
 800fe80:	4916      	ldr	r1, [pc, #88]	; (800fedc <__pow5mult+0xb4>)
 800fe82:	f7ff ff0b 	bl	800fc9c <__i2b>
 800fe86:	9b01      	ldr	r3, [sp, #4]
 800fe88:	0004      	movs	r4, r0
 800fe8a:	6098      	str	r0, [r3, #8]
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	6003      	str	r3, [r0, #0]
 800fe90:	2301      	movs	r3, #1
 800fe92:	421d      	tst	r5, r3
 800fe94:	d00a      	beq.n	800feac <__pow5mult+0x84>
 800fe96:	0031      	movs	r1, r6
 800fe98:	0022      	movs	r2, r4
 800fe9a:	0038      	movs	r0, r7
 800fe9c:	f7ff ff14 	bl	800fcc8 <__multiply>
 800fea0:	0031      	movs	r1, r6
 800fea2:	9001      	str	r0, [sp, #4]
 800fea4:	0038      	movs	r0, r7
 800fea6:	f7ff fdfd 	bl	800faa4 <_Bfree>
 800feaa:	9e01      	ldr	r6, [sp, #4]
 800feac:	106d      	asrs	r5, r5, #1
 800feae:	d00c      	beq.n	800feca <__pow5mult+0xa2>
 800feb0:	6820      	ldr	r0, [r4, #0]
 800feb2:	2800      	cmp	r0, #0
 800feb4:	d107      	bne.n	800fec6 <__pow5mult+0x9e>
 800feb6:	0022      	movs	r2, r4
 800feb8:	0021      	movs	r1, r4
 800feba:	0038      	movs	r0, r7
 800febc:	f7ff ff04 	bl	800fcc8 <__multiply>
 800fec0:	2300      	movs	r3, #0
 800fec2:	6020      	str	r0, [r4, #0]
 800fec4:	6003      	str	r3, [r0, #0]
 800fec6:	0004      	movs	r4, r0
 800fec8:	e7e2      	b.n	800fe90 <__pow5mult+0x68>
 800feca:	0030      	movs	r0, r6
 800fecc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fece:	46c0      	nop			; (mov r8, r8)
 800fed0:	08012e78 	.word	0x08012e78
 800fed4:	08012d14 	.word	0x08012d14
 800fed8:	08012d2b 	.word	0x08012d2b
 800fedc:	00000271 	.word	0x00000271

0800fee0 <__lshift>:
 800fee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fee2:	000c      	movs	r4, r1
 800fee4:	0017      	movs	r7, r2
 800fee6:	6923      	ldr	r3, [r4, #16]
 800fee8:	1155      	asrs	r5, r2, #5
 800feea:	b087      	sub	sp, #28
 800feec:	18eb      	adds	r3, r5, r3
 800feee:	9302      	str	r3, [sp, #8]
 800fef0:	3301      	adds	r3, #1
 800fef2:	9301      	str	r3, [sp, #4]
 800fef4:	6849      	ldr	r1, [r1, #4]
 800fef6:	68a3      	ldr	r3, [r4, #8]
 800fef8:	9004      	str	r0, [sp, #16]
 800fefa:	9a01      	ldr	r2, [sp, #4]
 800fefc:	4293      	cmp	r3, r2
 800fefe:	db10      	blt.n	800ff22 <__lshift+0x42>
 800ff00:	9804      	ldr	r0, [sp, #16]
 800ff02:	f7ff fd8b 	bl	800fa1c <_Balloc>
 800ff06:	2300      	movs	r3, #0
 800ff08:	0002      	movs	r2, r0
 800ff0a:	0006      	movs	r6, r0
 800ff0c:	0019      	movs	r1, r3
 800ff0e:	3214      	adds	r2, #20
 800ff10:	4298      	cmp	r0, r3
 800ff12:	d10c      	bne.n	800ff2e <__lshift+0x4e>
 800ff14:	21da      	movs	r1, #218	; 0xda
 800ff16:	0002      	movs	r2, r0
 800ff18:	4b26      	ldr	r3, [pc, #152]	; (800ffb4 <__lshift+0xd4>)
 800ff1a:	4827      	ldr	r0, [pc, #156]	; (800ffb8 <__lshift+0xd8>)
 800ff1c:	31ff      	adds	r1, #255	; 0xff
 800ff1e:	f000 fe7d 	bl	8010c1c <__assert_func>
 800ff22:	3101      	adds	r1, #1
 800ff24:	005b      	lsls	r3, r3, #1
 800ff26:	e7e8      	b.n	800fefa <__lshift+0x1a>
 800ff28:	0098      	lsls	r0, r3, #2
 800ff2a:	5011      	str	r1, [r2, r0]
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	42ab      	cmp	r3, r5
 800ff30:	dbfa      	blt.n	800ff28 <__lshift+0x48>
 800ff32:	43eb      	mvns	r3, r5
 800ff34:	17db      	asrs	r3, r3, #31
 800ff36:	401d      	ands	r5, r3
 800ff38:	211f      	movs	r1, #31
 800ff3a:	0023      	movs	r3, r4
 800ff3c:	0038      	movs	r0, r7
 800ff3e:	00ad      	lsls	r5, r5, #2
 800ff40:	1955      	adds	r5, r2, r5
 800ff42:	6922      	ldr	r2, [r4, #16]
 800ff44:	3314      	adds	r3, #20
 800ff46:	0092      	lsls	r2, r2, #2
 800ff48:	4008      	ands	r0, r1
 800ff4a:	4684      	mov	ip, r0
 800ff4c:	189a      	adds	r2, r3, r2
 800ff4e:	420f      	tst	r7, r1
 800ff50:	d02a      	beq.n	800ffa8 <__lshift+0xc8>
 800ff52:	3101      	adds	r1, #1
 800ff54:	1a09      	subs	r1, r1, r0
 800ff56:	9105      	str	r1, [sp, #20]
 800ff58:	2100      	movs	r1, #0
 800ff5a:	9503      	str	r5, [sp, #12]
 800ff5c:	4667      	mov	r7, ip
 800ff5e:	6818      	ldr	r0, [r3, #0]
 800ff60:	40b8      	lsls	r0, r7
 800ff62:	4301      	orrs	r1, r0
 800ff64:	9803      	ldr	r0, [sp, #12]
 800ff66:	c002      	stmia	r0!, {r1}
 800ff68:	cb02      	ldmia	r3!, {r1}
 800ff6a:	9003      	str	r0, [sp, #12]
 800ff6c:	9805      	ldr	r0, [sp, #20]
 800ff6e:	40c1      	lsrs	r1, r0
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d8f3      	bhi.n	800ff5c <__lshift+0x7c>
 800ff74:	0020      	movs	r0, r4
 800ff76:	3015      	adds	r0, #21
 800ff78:	2304      	movs	r3, #4
 800ff7a:	4282      	cmp	r2, r0
 800ff7c:	d304      	bcc.n	800ff88 <__lshift+0xa8>
 800ff7e:	1b13      	subs	r3, r2, r4
 800ff80:	3b15      	subs	r3, #21
 800ff82:	089b      	lsrs	r3, r3, #2
 800ff84:	3301      	adds	r3, #1
 800ff86:	009b      	lsls	r3, r3, #2
 800ff88:	50e9      	str	r1, [r5, r3]
 800ff8a:	2900      	cmp	r1, #0
 800ff8c:	d002      	beq.n	800ff94 <__lshift+0xb4>
 800ff8e:	9b02      	ldr	r3, [sp, #8]
 800ff90:	3302      	adds	r3, #2
 800ff92:	9301      	str	r3, [sp, #4]
 800ff94:	9b01      	ldr	r3, [sp, #4]
 800ff96:	9804      	ldr	r0, [sp, #16]
 800ff98:	3b01      	subs	r3, #1
 800ff9a:	0021      	movs	r1, r4
 800ff9c:	6133      	str	r3, [r6, #16]
 800ff9e:	f7ff fd81 	bl	800faa4 <_Bfree>
 800ffa2:	0030      	movs	r0, r6
 800ffa4:	b007      	add	sp, #28
 800ffa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffa8:	cb02      	ldmia	r3!, {r1}
 800ffaa:	c502      	stmia	r5!, {r1}
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d8fb      	bhi.n	800ffa8 <__lshift+0xc8>
 800ffb0:	e7f0      	b.n	800ff94 <__lshift+0xb4>
 800ffb2:	46c0      	nop			; (mov r8, r8)
 800ffb4:	08012c89 	.word	0x08012c89
 800ffb8:	08012d2b 	.word	0x08012d2b

0800ffbc <__mcmp>:
 800ffbc:	6902      	ldr	r2, [r0, #16]
 800ffbe:	690b      	ldr	r3, [r1, #16]
 800ffc0:	b530      	push	{r4, r5, lr}
 800ffc2:	0004      	movs	r4, r0
 800ffc4:	1ad0      	subs	r0, r2, r3
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d10d      	bne.n	800ffe6 <__mcmp+0x2a>
 800ffca:	009b      	lsls	r3, r3, #2
 800ffcc:	3414      	adds	r4, #20
 800ffce:	3114      	adds	r1, #20
 800ffd0:	18e2      	adds	r2, r4, r3
 800ffd2:	18c9      	adds	r1, r1, r3
 800ffd4:	3a04      	subs	r2, #4
 800ffd6:	3904      	subs	r1, #4
 800ffd8:	6815      	ldr	r5, [r2, #0]
 800ffda:	680b      	ldr	r3, [r1, #0]
 800ffdc:	429d      	cmp	r5, r3
 800ffde:	d003      	beq.n	800ffe8 <__mcmp+0x2c>
 800ffe0:	2001      	movs	r0, #1
 800ffe2:	429d      	cmp	r5, r3
 800ffe4:	d303      	bcc.n	800ffee <__mcmp+0x32>
 800ffe6:	bd30      	pop	{r4, r5, pc}
 800ffe8:	4294      	cmp	r4, r2
 800ffea:	d3f3      	bcc.n	800ffd4 <__mcmp+0x18>
 800ffec:	e7fb      	b.n	800ffe6 <__mcmp+0x2a>
 800ffee:	4240      	negs	r0, r0
 800fff0:	e7f9      	b.n	800ffe6 <__mcmp+0x2a>
	...

0800fff4 <__mdiff>:
 800fff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fff6:	000e      	movs	r6, r1
 800fff8:	0007      	movs	r7, r0
 800fffa:	0011      	movs	r1, r2
 800fffc:	0030      	movs	r0, r6
 800fffe:	b087      	sub	sp, #28
 8010000:	0014      	movs	r4, r2
 8010002:	f7ff ffdb 	bl	800ffbc <__mcmp>
 8010006:	1e05      	subs	r5, r0, #0
 8010008:	d110      	bne.n	801002c <__mdiff+0x38>
 801000a:	0001      	movs	r1, r0
 801000c:	0038      	movs	r0, r7
 801000e:	f7ff fd05 	bl	800fa1c <_Balloc>
 8010012:	1e02      	subs	r2, r0, #0
 8010014:	d104      	bne.n	8010020 <__mdiff+0x2c>
 8010016:	4b40      	ldr	r3, [pc, #256]	; (8010118 <__mdiff+0x124>)
 8010018:	4940      	ldr	r1, [pc, #256]	; (801011c <__mdiff+0x128>)
 801001a:	4841      	ldr	r0, [pc, #260]	; (8010120 <__mdiff+0x12c>)
 801001c:	f000 fdfe 	bl	8010c1c <__assert_func>
 8010020:	2301      	movs	r3, #1
 8010022:	6145      	str	r5, [r0, #20]
 8010024:	6103      	str	r3, [r0, #16]
 8010026:	0010      	movs	r0, r2
 8010028:	b007      	add	sp, #28
 801002a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801002c:	2301      	movs	r3, #1
 801002e:	9301      	str	r3, [sp, #4]
 8010030:	2800      	cmp	r0, #0
 8010032:	db04      	blt.n	801003e <__mdiff+0x4a>
 8010034:	0023      	movs	r3, r4
 8010036:	0034      	movs	r4, r6
 8010038:	001e      	movs	r6, r3
 801003a:	2300      	movs	r3, #0
 801003c:	9301      	str	r3, [sp, #4]
 801003e:	0038      	movs	r0, r7
 8010040:	6861      	ldr	r1, [r4, #4]
 8010042:	f7ff fceb 	bl	800fa1c <_Balloc>
 8010046:	1e02      	subs	r2, r0, #0
 8010048:	d103      	bne.n	8010052 <__mdiff+0x5e>
 801004a:	2190      	movs	r1, #144	; 0x90
 801004c:	4b32      	ldr	r3, [pc, #200]	; (8010118 <__mdiff+0x124>)
 801004e:	0089      	lsls	r1, r1, #2
 8010050:	e7e3      	b.n	801001a <__mdiff+0x26>
 8010052:	9b01      	ldr	r3, [sp, #4]
 8010054:	2700      	movs	r7, #0
 8010056:	60c3      	str	r3, [r0, #12]
 8010058:	6920      	ldr	r0, [r4, #16]
 801005a:	3414      	adds	r4, #20
 801005c:	9401      	str	r4, [sp, #4]
 801005e:	9b01      	ldr	r3, [sp, #4]
 8010060:	0084      	lsls	r4, r0, #2
 8010062:	191b      	adds	r3, r3, r4
 8010064:	0034      	movs	r4, r6
 8010066:	9302      	str	r3, [sp, #8]
 8010068:	6933      	ldr	r3, [r6, #16]
 801006a:	3414      	adds	r4, #20
 801006c:	0099      	lsls	r1, r3, #2
 801006e:	1863      	adds	r3, r4, r1
 8010070:	9303      	str	r3, [sp, #12]
 8010072:	0013      	movs	r3, r2
 8010074:	3314      	adds	r3, #20
 8010076:	469c      	mov	ip, r3
 8010078:	9305      	str	r3, [sp, #20]
 801007a:	9b01      	ldr	r3, [sp, #4]
 801007c:	9304      	str	r3, [sp, #16]
 801007e:	9b04      	ldr	r3, [sp, #16]
 8010080:	cc02      	ldmia	r4!, {r1}
 8010082:	cb20      	ldmia	r3!, {r5}
 8010084:	9304      	str	r3, [sp, #16]
 8010086:	b2ab      	uxth	r3, r5
 8010088:	19df      	adds	r7, r3, r7
 801008a:	b28b      	uxth	r3, r1
 801008c:	1afb      	subs	r3, r7, r3
 801008e:	0c09      	lsrs	r1, r1, #16
 8010090:	0c2d      	lsrs	r5, r5, #16
 8010092:	1a6d      	subs	r5, r5, r1
 8010094:	1419      	asrs	r1, r3, #16
 8010096:	186d      	adds	r5, r5, r1
 8010098:	4661      	mov	r1, ip
 801009a:	142f      	asrs	r7, r5, #16
 801009c:	b29b      	uxth	r3, r3
 801009e:	042d      	lsls	r5, r5, #16
 80100a0:	432b      	orrs	r3, r5
 80100a2:	c108      	stmia	r1!, {r3}
 80100a4:	9b03      	ldr	r3, [sp, #12]
 80100a6:	468c      	mov	ip, r1
 80100a8:	42a3      	cmp	r3, r4
 80100aa:	d8e8      	bhi.n	801007e <__mdiff+0x8a>
 80100ac:	0031      	movs	r1, r6
 80100ae:	9c03      	ldr	r4, [sp, #12]
 80100b0:	3115      	adds	r1, #21
 80100b2:	2304      	movs	r3, #4
 80100b4:	428c      	cmp	r4, r1
 80100b6:	d304      	bcc.n	80100c2 <__mdiff+0xce>
 80100b8:	1ba3      	subs	r3, r4, r6
 80100ba:	3b15      	subs	r3, #21
 80100bc:	089b      	lsrs	r3, r3, #2
 80100be:	3301      	adds	r3, #1
 80100c0:	009b      	lsls	r3, r3, #2
 80100c2:	9901      	ldr	r1, [sp, #4]
 80100c4:	18cc      	adds	r4, r1, r3
 80100c6:	9905      	ldr	r1, [sp, #20]
 80100c8:	0026      	movs	r6, r4
 80100ca:	18cb      	adds	r3, r1, r3
 80100cc:	469c      	mov	ip, r3
 80100ce:	9902      	ldr	r1, [sp, #8]
 80100d0:	428e      	cmp	r6, r1
 80100d2:	d310      	bcc.n	80100f6 <__mdiff+0x102>
 80100d4:	9e02      	ldr	r6, [sp, #8]
 80100d6:	1ee1      	subs	r1, r4, #3
 80100d8:	2500      	movs	r5, #0
 80100da:	428e      	cmp	r6, r1
 80100dc:	d304      	bcc.n	80100e8 <__mdiff+0xf4>
 80100de:	0031      	movs	r1, r6
 80100e0:	3103      	adds	r1, #3
 80100e2:	1b0c      	subs	r4, r1, r4
 80100e4:	08a4      	lsrs	r4, r4, #2
 80100e6:	00a5      	lsls	r5, r4, #2
 80100e8:	195b      	adds	r3, r3, r5
 80100ea:	3b04      	subs	r3, #4
 80100ec:	6819      	ldr	r1, [r3, #0]
 80100ee:	2900      	cmp	r1, #0
 80100f0:	d00f      	beq.n	8010112 <__mdiff+0x11e>
 80100f2:	6110      	str	r0, [r2, #16]
 80100f4:	e797      	b.n	8010026 <__mdiff+0x32>
 80100f6:	ce02      	ldmia	r6!, {r1}
 80100f8:	b28d      	uxth	r5, r1
 80100fa:	19ed      	adds	r5, r5, r7
 80100fc:	0c0f      	lsrs	r7, r1, #16
 80100fe:	1429      	asrs	r1, r5, #16
 8010100:	1879      	adds	r1, r7, r1
 8010102:	140f      	asrs	r7, r1, #16
 8010104:	b2ad      	uxth	r5, r5
 8010106:	0409      	lsls	r1, r1, #16
 8010108:	430d      	orrs	r5, r1
 801010a:	4661      	mov	r1, ip
 801010c:	c120      	stmia	r1!, {r5}
 801010e:	468c      	mov	ip, r1
 8010110:	e7dd      	b.n	80100ce <__mdiff+0xda>
 8010112:	3801      	subs	r0, #1
 8010114:	e7e9      	b.n	80100ea <__mdiff+0xf6>
 8010116:	46c0      	nop			; (mov r8, r8)
 8010118:	08012c89 	.word	0x08012c89
 801011c:	00000232 	.word	0x00000232
 8010120:	08012d2b 	.word	0x08012d2b

08010124 <__ulp>:
 8010124:	4b0f      	ldr	r3, [pc, #60]	; (8010164 <__ulp+0x40>)
 8010126:	4019      	ands	r1, r3
 8010128:	4b0f      	ldr	r3, [pc, #60]	; (8010168 <__ulp+0x44>)
 801012a:	18c9      	adds	r1, r1, r3
 801012c:	2900      	cmp	r1, #0
 801012e:	dd04      	ble.n	801013a <__ulp+0x16>
 8010130:	2200      	movs	r2, #0
 8010132:	000b      	movs	r3, r1
 8010134:	0010      	movs	r0, r2
 8010136:	0019      	movs	r1, r3
 8010138:	4770      	bx	lr
 801013a:	4249      	negs	r1, r1
 801013c:	2200      	movs	r2, #0
 801013e:	2300      	movs	r3, #0
 8010140:	1509      	asrs	r1, r1, #20
 8010142:	2913      	cmp	r1, #19
 8010144:	dc04      	bgt.n	8010150 <__ulp+0x2c>
 8010146:	2080      	movs	r0, #128	; 0x80
 8010148:	0300      	lsls	r0, r0, #12
 801014a:	4108      	asrs	r0, r1
 801014c:	0003      	movs	r3, r0
 801014e:	e7f1      	b.n	8010134 <__ulp+0x10>
 8010150:	3914      	subs	r1, #20
 8010152:	2001      	movs	r0, #1
 8010154:	291e      	cmp	r1, #30
 8010156:	dc02      	bgt.n	801015e <__ulp+0x3a>
 8010158:	2080      	movs	r0, #128	; 0x80
 801015a:	0600      	lsls	r0, r0, #24
 801015c:	40c8      	lsrs	r0, r1
 801015e:	0002      	movs	r2, r0
 8010160:	e7e8      	b.n	8010134 <__ulp+0x10>
 8010162:	46c0      	nop			; (mov r8, r8)
 8010164:	7ff00000 	.word	0x7ff00000
 8010168:	fcc00000 	.word	0xfcc00000

0801016c <__b2d>:
 801016c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801016e:	0006      	movs	r6, r0
 8010170:	6903      	ldr	r3, [r0, #16]
 8010172:	3614      	adds	r6, #20
 8010174:	009b      	lsls	r3, r3, #2
 8010176:	18f3      	adds	r3, r6, r3
 8010178:	1f1d      	subs	r5, r3, #4
 801017a:	682c      	ldr	r4, [r5, #0]
 801017c:	000f      	movs	r7, r1
 801017e:	0020      	movs	r0, r4
 8010180:	9301      	str	r3, [sp, #4]
 8010182:	f7ff fd43 	bl	800fc0c <__hi0bits>
 8010186:	2320      	movs	r3, #32
 8010188:	1a1b      	subs	r3, r3, r0
 801018a:	491f      	ldr	r1, [pc, #124]	; (8010208 <__b2d+0x9c>)
 801018c:	603b      	str	r3, [r7, #0]
 801018e:	280a      	cmp	r0, #10
 8010190:	dc16      	bgt.n	80101c0 <__b2d+0x54>
 8010192:	230b      	movs	r3, #11
 8010194:	0027      	movs	r7, r4
 8010196:	1a1b      	subs	r3, r3, r0
 8010198:	40df      	lsrs	r7, r3
 801019a:	4339      	orrs	r1, r7
 801019c:	469c      	mov	ip, r3
 801019e:	000b      	movs	r3, r1
 80101a0:	2100      	movs	r1, #0
 80101a2:	42ae      	cmp	r6, r5
 80101a4:	d202      	bcs.n	80101ac <__b2d+0x40>
 80101a6:	9901      	ldr	r1, [sp, #4]
 80101a8:	3908      	subs	r1, #8
 80101aa:	6809      	ldr	r1, [r1, #0]
 80101ac:	3015      	adds	r0, #21
 80101ae:	4084      	lsls	r4, r0
 80101b0:	4660      	mov	r0, ip
 80101b2:	40c1      	lsrs	r1, r0
 80101b4:	430c      	orrs	r4, r1
 80101b6:	0022      	movs	r2, r4
 80101b8:	0010      	movs	r0, r2
 80101ba:	0019      	movs	r1, r3
 80101bc:	b003      	add	sp, #12
 80101be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101c0:	2700      	movs	r7, #0
 80101c2:	42ae      	cmp	r6, r5
 80101c4:	d202      	bcs.n	80101cc <__b2d+0x60>
 80101c6:	9d01      	ldr	r5, [sp, #4]
 80101c8:	3d08      	subs	r5, #8
 80101ca:	682f      	ldr	r7, [r5, #0]
 80101cc:	230b      	movs	r3, #11
 80101ce:	425b      	negs	r3, r3
 80101d0:	469c      	mov	ip, r3
 80101d2:	4484      	add	ip, r0
 80101d4:	280b      	cmp	r0, #11
 80101d6:	d013      	beq.n	8010200 <__b2d+0x94>
 80101d8:	4663      	mov	r3, ip
 80101da:	2020      	movs	r0, #32
 80101dc:	409c      	lsls	r4, r3
 80101de:	1ac0      	subs	r0, r0, r3
 80101e0:	003b      	movs	r3, r7
 80101e2:	40c3      	lsrs	r3, r0
 80101e4:	431c      	orrs	r4, r3
 80101e6:	4321      	orrs	r1, r4
 80101e8:	000b      	movs	r3, r1
 80101ea:	2100      	movs	r1, #0
 80101ec:	42b5      	cmp	r5, r6
 80101ee:	d901      	bls.n	80101f4 <__b2d+0x88>
 80101f0:	3d04      	subs	r5, #4
 80101f2:	6829      	ldr	r1, [r5, #0]
 80101f4:	4664      	mov	r4, ip
 80101f6:	40c1      	lsrs	r1, r0
 80101f8:	40a7      	lsls	r7, r4
 80101fa:	430f      	orrs	r7, r1
 80101fc:	003a      	movs	r2, r7
 80101fe:	e7db      	b.n	80101b8 <__b2d+0x4c>
 8010200:	4321      	orrs	r1, r4
 8010202:	000b      	movs	r3, r1
 8010204:	e7fa      	b.n	80101fc <__b2d+0x90>
 8010206:	46c0      	nop			; (mov r8, r8)
 8010208:	3ff00000 	.word	0x3ff00000

0801020c <__d2b>:
 801020c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801020e:	2101      	movs	r1, #1
 8010210:	0014      	movs	r4, r2
 8010212:	001e      	movs	r6, r3
 8010214:	9f08      	ldr	r7, [sp, #32]
 8010216:	f7ff fc01 	bl	800fa1c <_Balloc>
 801021a:	1e05      	subs	r5, r0, #0
 801021c:	d105      	bne.n	801022a <__d2b+0x1e>
 801021e:	0002      	movs	r2, r0
 8010220:	4b26      	ldr	r3, [pc, #152]	; (80102bc <__d2b+0xb0>)
 8010222:	4927      	ldr	r1, [pc, #156]	; (80102c0 <__d2b+0xb4>)
 8010224:	4827      	ldr	r0, [pc, #156]	; (80102c4 <__d2b+0xb8>)
 8010226:	f000 fcf9 	bl	8010c1c <__assert_func>
 801022a:	0333      	lsls	r3, r6, #12
 801022c:	0076      	lsls	r6, r6, #1
 801022e:	0b1b      	lsrs	r3, r3, #12
 8010230:	0d76      	lsrs	r6, r6, #21
 8010232:	d124      	bne.n	801027e <__d2b+0x72>
 8010234:	9301      	str	r3, [sp, #4]
 8010236:	2c00      	cmp	r4, #0
 8010238:	d027      	beq.n	801028a <__d2b+0x7e>
 801023a:	4668      	mov	r0, sp
 801023c:	9400      	str	r4, [sp, #0]
 801023e:	f7ff fcff 	bl	800fc40 <__lo0bits>
 8010242:	9c00      	ldr	r4, [sp, #0]
 8010244:	2800      	cmp	r0, #0
 8010246:	d01e      	beq.n	8010286 <__d2b+0x7a>
 8010248:	9b01      	ldr	r3, [sp, #4]
 801024a:	2120      	movs	r1, #32
 801024c:	001a      	movs	r2, r3
 801024e:	1a09      	subs	r1, r1, r0
 8010250:	408a      	lsls	r2, r1
 8010252:	40c3      	lsrs	r3, r0
 8010254:	4322      	orrs	r2, r4
 8010256:	616a      	str	r2, [r5, #20]
 8010258:	9301      	str	r3, [sp, #4]
 801025a:	9c01      	ldr	r4, [sp, #4]
 801025c:	61ac      	str	r4, [r5, #24]
 801025e:	1e63      	subs	r3, r4, #1
 8010260:	419c      	sbcs	r4, r3
 8010262:	3401      	adds	r4, #1
 8010264:	612c      	str	r4, [r5, #16]
 8010266:	2e00      	cmp	r6, #0
 8010268:	d018      	beq.n	801029c <__d2b+0x90>
 801026a:	4b17      	ldr	r3, [pc, #92]	; (80102c8 <__d2b+0xbc>)
 801026c:	18f6      	adds	r6, r6, r3
 801026e:	2335      	movs	r3, #53	; 0x35
 8010270:	1836      	adds	r6, r6, r0
 8010272:	1a18      	subs	r0, r3, r0
 8010274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010276:	603e      	str	r6, [r7, #0]
 8010278:	6018      	str	r0, [r3, #0]
 801027a:	0028      	movs	r0, r5
 801027c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801027e:	2280      	movs	r2, #128	; 0x80
 8010280:	0352      	lsls	r2, r2, #13
 8010282:	4313      	orrs	r3, r2
 8010284:	e7d6      	b.n	8010234 <__d2b+0x28>
 8010286:	616c      	str	r4, [r5, #20]
 8010288:	e7e7      	b.n	801025a <__d2b+0x4e>
 801028a:	a801      	add	r0, sp, #4
 801028c:	f7ff fcd8 	bl	800fc40 <__lo0bits>
 8010290:	2401      	movs	r4, #1
 8010292:	9b01      	ldr	r3, [sp, #4]
 8010294:	612c      	str	r4, [r5, #16]
 8010296:	616b      	str	r3, [r5, #20]
 8010298:	3020      	adds	r0, #32
 801029a:	e7e4      	b.n	8010266 <__d2b+0x5a>
 801029c:	4b0b      	ldr	r3, [pc, #44]	; (80102cc <__d2b+0xc0>)
 801029e:	18c0      	adds	r0, r0, r3
 80102a0:	4b0b      	ldr	r3, [pc, #44]	; (80102d0 <__d2b+0xc4>)
 80102a2:	6038      	str	r0, [r7, #0]
 80102a4:	18e3      	adds	r3, r4, r3
 80102a6:	009b      	lsls	r3, r3, #2
 80102a8:	18eb      	adds	r3, r5, r3
 80102aa:	6958      	ldr	r0, [r3, #20]
 80102ac:	f7ff fcae 	bl	800fc0c <__hi0bits>
 80102b0:	0164      	lsls	r4, r4, #5
 80102b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102b4:	1a24      	subs	r4, r4, r0
 80102b6:	601c      	str	r4, [r3, #0]
 80102b8:	e7df      	b.n	801027a <__d2b+0x6e>
 80102ba:	46c0      	nop			; (mov r8, r8)
 80102bc:	08012c89 	.word	0x08012c89
 80102c0:	0000030a 	.word	0x0000030a
 80102c4:	08012d2b 	.word	0x08012d2b
 80102c8:	fffffbcd 	.word	0xfffffbcd
 80102cc:	fffffbce 	.word	0xfffffbce
 80102d0:	3fffffff 	.word	0x3fffffff

080102d4 <__ratio>:
 80102d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102d6:	b087      	sub	sp, #28
 80102d8:	000f      	movs	r7, r1
 80102da:	a904      	add	r1, sp, #16
 80102dc:	0006      	movs	r6, r0
 80102de:	f7ff ff45 	bl	801016c <__b2d>
 80102e2:	9000      	str	r0, [sp, #0]
 80102e4:	9101      	str	r1, [sp, #4]
 80102e6:	9c00      	ldr	r4, [sp, #0]
 80102e8:	9d01      	ldr	r5, [sp, #4]
 80102ea:	0038      	movs	r0, r7
 80102ec:	a905      	add	r1, sp, #20
 80102ee:	f7ff ff3d 	bl	801016c <__b2d>
 80102f2:	9002      	str	r0, [sp, #8]
 80102f4:	9103      	str	r1, [sp, #12]
 80102f6:	9a02      	ldr	r2, [sp, #8]
 80102f8:	9b03      	ldr	r3, [sp, #12]
 80102fa:	6931      	ldr	r1, [r6, #16]
 80102fc:	6938      	ldr	r0, [r7, #16]
 80102fe:	9e05      	ldr	r6, [sp, #20]
 8010300:	1a08      	subs	r0, r1, r0
 8010302:	9904      	ldr	r1, [sp, #16]
 8010304:	0140      	lsls	r0, r0, #5
 8010306:	1b89      	subs	r1, r1, r6
 8010308:	1841      	adds	r1, r0, r1
 801030a:	0508      	lsls	r0, r1, #20
 801030c:	2900      	cmp	r1, #0
 801030e:	dd07      	ble.n	8010320 <__ratio+0x4c>
 8010310:	9901      	ldr	r1, [sp, #4]
 8010312:	1845      	adds	r5, r0, r1
 8010314:	0020      	movs	r0, r4
 8010316:	0029      	movs	r1, r5
 8010318:	f7f0 ff84 	bl	8001224 <__aeabi_ddiv>
 801031c:	b007      	add	sp, #28
 801031e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010320:	9903      	ldr	r1, [sp, #12]
 8010322:	1a0b      	subs	r3, r1, r0
 8010324:	e7f6      	b.n	8010314 <__ratio+0x40>
	...

08010328 <_mprec_log10>:
 8010328:	b510      	push	{r4, lr}
 801032a:	0004      	movs	r4, r0
 801032c:	2817      	cmp	r0, #23
 801032e:	dc05      	bgt.n	801033c <_mprec_log10+0x14>
 8010330:	4c07      	ldr	r4, [pc, #28]	; (8010350 <_mprec_log10+0x28>)
 8010332:	00c0      	lsls	r0, r0, #3
 8010334:	1824      	adds	r4, r4, r0
 8010336:	6820      	ldr	r0, [r4, #0]
 8010338:	6861      	ldr	r1, [r4, #4]
 801033a:	bd10      	pop	{r4, pc}
 801033c:	2000      	movs	r0, #0
 801033e:	4905      	ldr	r1, [pc, #20]	; (8010354 <_mprec_log10+0x2c>)
 8010340:	2200      	movs	r2, #0
 8010342:	4b05      	ldr	r3, [pc, #20]	; (8010358 <_mprec_log10+0x30>)
 8010344:	3c01      	subs	r4, #1
 8010346:	f7f1 fb6f 	bl	8001a28 <__aeabi_dmul>
 801034a:	2c00      	cmp	r4, #0
 801034c:	d1f8      	bne.n	8010340 <_mprec_log10+0x18>
 801034e:	e7f4      	b.n	801033a <_mprec_log10+0x12>
 8010350:	08012db0 	.word	0x08012db0
 8010354:	3ff00000 	.word	0x3ff00000
 8010358:	40240000 	.word	0x40240000

0801035c <__copybits>:
 801035c:	b570      	push	{r4, r5, r6, lr}
 801035e:	0014      	movs	r4, r2
 8010360:	0005      	movs	r5, r0
 8010362:	3901      	subs	r1, #1
 8010364:	6913      	ldr	r3, [r2, #16]
 8010366:	1149      	asrs	r1, r1, #5
 8010368:	3101      	adds	r1, #1
 801036a:	0089      	lsls	r1, r1, #2
 801036c:	3414      	adds	r4, #20
 801036e:	009b      	lsls	r3, r3, #2
 8010370:	1841      	adds	r1, r0, r1
 8010372:	18e3      	adds	r3, r4, r3
 8010374:	42a3      	cmp	r3, r4
 8010376:	d80d      	bhi.n	8010394 <__copybits+0x38>
 8010378:	0014      	movs	r4, r2
 801037a:	3411      	adds	r4, #17
 801037c:	2500      	movs	r5, #0
 801037e:	429c      	cmp	r4, r3
 8010380:	d803      	bhi.n	801038a <__copybits+0x2e>
 8010382:	1a9b      	subs	r3, r3, r2
 8010384:	3b11      	subs	r3, #17
 8010386:	089b      	lsrs	r3, r3, #2
 8010388:	009d      	lsls	r5, r3, #2
 801038a:	2300      	movs	r3, #0
 801038c:	1940      	adds	r0, r0, r5
 801038e:	4281      	cmp	r1, r0
 8010390:	d803      	bhi.n	801039a <__copybits+0x3e>
 8010392:	bd70      	pop	{r4, r5, r6, pc}
 8010394:	cc40      	ldmia	r4!, {r6}
 8010396:	c540      	stmia	r5!, {r6}
 8010398:	e7ec      	b.n	8010374 <__copybits+0x18>
 801039a:	c008      	stmia	r0!, {r3}
 801039c:	e7f7      	b.n	801038e <__copybits+0x32>

0801039e <__any_on>:
 801039e:	0002      	movs	r2, r0
 80103a0:	6900      	ldr	r0, [r0, #16]
 80103a2:	b510      	push	{r4, lr}
 80103a4:	3214      	adds	r2, #20
 80103a6:	114b      	asrs	r3, r1, #5
 80103a8:	4298      	cmp	r0, r3
 80103aa:	db13      	blt.n	80103d4 <__any_on+0x36>
 80103ac:	dd0c      	ble.n	80103c8 <__any_on+0x2a>
 80103ae:	241f      	movs	r4, #31
 80103b0:	0008      	movs	r0, r1
 80103b2:	4020      	ands	r0, r4
 80103b4:	4221      	tst	r1, r4
 80103b6:	d007      	beq.n	80103c8 <__any_on+0x2a>
 80103b8:	0099      	lsls	r1, r3, #2
 80103ba:	588c      	ldr	r4, [r1, r2]
 80103bc:	0021      	movs	r1, r4
 80103be:	40c1      	lsrs	r1, r0
 80103c0:	4081      	lsls	r1, r0
 80103c2:	2001      	movs	r0, #1
 80103c4:	428c      	cmp	r4, r1
 80103c6:	d104      	bne.n	80103d2 <__any_on+0x34>
 80103c8:	009b      	lsls	r3, r3, #2
 80103ca:	18d3      	adds	r3, r2, r3
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d803      	bhi.n	80103d8 <__any_on+0x3a>
 80103d0:	2000      	movs	r0, #0
 80103d2:	bd10      	pop	{r4, pc}
 80103d4:	0003      	movs	r3, r0
 80103d6:	e7f7      	b.n	80103c8 <__any_on+0x2a>
 80103d8:	3b04      	subs	r3, #4
 80103da:	6819      	ldr	r1, [r3, #0]
 80103dc:	2900      	cmp	r1, #0
 80103de:	d0f5      	beq.n	80103cc <__any_on+0x2e>
 80103e0:	2001      	movs	r0, #1
 80103e2:	e7f6      	b.n	80103d2 <__any_on+0x34>

080103e4 <_calloc_r>:
 80103e4:	b570      	push	{r4, r5, r6, lr}
 80103e6:	0c13      	lsrs	r3, r2, #16
 80103e8:	0c0d      	lsrs	r5, r1, #16
 80103ea:	d11e      	bne.n	801042a <_calloc_r+0x46>
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d10c      	bne.n	801040a <_calloc_r+0x26>
 80103f0:	b289      	uxth	r1, r1
 80103f2:	b294      	uxth	r4, r2
 80103f4:	434c      	muls	r4, r1
 80103f6:	0021      	movs	r1, r4
 80103f8:	f000 f842 	bl	8010480 <_malloc_r>
 80103fc:	1e05      	subs	r5, r0, #0
 80103fe:	d01b      	beq.n	8010438 <_calloc_r+0x54>
 8010400:	0022      	movs	r2, r4
 8010402:	2100      	movs	r1, #0
 8010404:	f7fd fea7 	bl	800e156 <memset>
 8010408:	e016      	b.n	8010438 <_calloc_r+0x54>
 801040a:	1c1d      	adds	r5, r3, #0
 801040c:	1c0b      	adds	r3, r1, #0
 801040e:	b292      	uxth	r2, r2
 8010410:	b289      	uxth	r1, r1
 8010412:	b29c      	uxth	r4, r3
 8010414:	4351      	muls	r1, r2
 8010416:	b2ab      	uxth	r3, r5
 8010418:	4363      	muls	r3, r4
 801041a:	0c0c      	lsrs	r4, r1, #16
 801041c:	191c      	adds	r4, r3, r4
 801041e:	0c22      	lsrs	r2, r4, #16
 8010420:	d107      	bne.n	8010432 <_calloc_r+0x4e>
 8010422:	0424      	lsls	r4, r4, #16
 8010424:	b289      	uxth	r1, r1
 8010426:	430c      	orrs	r4, r1
 8010428:	e7e5      	b.n	80103f6 <_calloc_r+0x12>
 801042a:	2b00      	cmp	r3, #0
 801042c:	d101      	bne.n	8010432 <_calloc_r+0x4e>
 801042e:	1c13      	adds	r3, r2, #0
 8010430:	e7ed      	b.n	801040e <_calloc_r+0x2a>
 8010432:	230c      	movs	r3, #12
 8010434:	2500      	movs	r5, #0
 8010436:	6003      	str	r3, [r0, #0]
 8010438:	0028      	movs	r0, r5
 801043a:	bd70      	pop	{r4, r5, r6, pc}

0801043c <sbrk_aligned>:
 801043c:	b570      	push	{r4, r5, r6, lr}
 801043e:	4e0f      	ldr	r6, [pc, #60]	; (801047c <sbrk_aligned+0x40>)
 8010440:	000d      	movs	r5, r1
 8010442:	6831      	ldr	r1, [r6, #0]
 8010444:	0004      	movs	r4, r0
 8010446:	2900      	cmp	r1, #0
 8010448:	d102      	bne.n	8010450 <sbrk_aligned+0x14>
 801044a:	f000 fba9 	bl	8010ba0 <_sbrk_r>
 801044e:	6030      	str	r0, [r6, #0]
 8010450:	0029      	movs	r1, r5
 8010452:	0020      	movs	r0, r4
 8010454:	f000 fba4 	bl	8010ba0 <_sbrk_r>
 8010458:	1c43      	adds	r3, r0, #1
 801045a:	d00a      	beq.n	8010472 <sbrk_aligned+0x36>
 801045c:	2303      	movs	r3, #3
 801045e:	1cc5      	adds	r5, r0, #3
 8010460:	439d      	bics	r5, r3
 8010462:	42a8      	cmp	r0, r5
 8010464:	d007      	beq.n	8010476 <sbrk_aligned+0x3a>
 8010466:	1a29      	subs	r1, r5, r0
 8010468:	0020      	movs	r0, r4
 801046a:	f000 fb99 	bl	8010ba0 <_sbrk_r>
 801046e:	1c43      	adds	r3, r0, #1
 8010470:	d101      	bne.n	8010476 <sbrk_aligned+0x3a>
 8010472:	2501      	movs	r5, #1
 8010474:	426d      	negs	r5, r5
 8010476:	0028      	movs	r0, r5
 8010478:	bd70      	pop	{r4, r5, r6, pc}
 801047a:	46c0      	nop			; (mov r8, r8)
 801047c:	20000cec 	.word	0x20000cec

08010480 <_malloc_r>:
 8010480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010482:	2203      	movs	r2, #3
 8010484:	1ccb      	adds	r3, r1, #3
 8010486:	4393      	bics	r3, r2
 8010488:	3308      	adds	r3, #8
 801048a:	0006      	movs	r6, r0
 801048c:	001f      	movs	r7, r3
 801048e:	2b0c      	cmp	r3, #12
 8010490:	d232      	bcs.n	80104f8 <_malloc_r+0x78>
 8010492:	270c      	movs	r7, #12
 8010494:	42b9      	cmp	r1, r7
 8010496:	d831      	bhi.n	80104fc <_malloc_r+0x7c>
 8010498:	0030      	movs	r0, r6
 801049a:	f001 fabb 	bl	8011a14 <__malloc_lock>
 801049e:	4d32      	ldr	r5, [pc, #200]	; (8010568 <_malloc_r+0xe8>)
 80104a0:	682b      	ldr	r3, [r5, #0]
 80104a2:	001c      	movs	r4, r3
 80104a4:	2c00      	cmp	r4, #0
 80104a6:	d12e      	bne.n	8010506 <_malloc_r+0x86>
 80104a8:	0039      	movs	r1, r7
 80104aa:	0030      	movs	r0, r6
 80104ac:	f7ff ffc6 	bl	801043c <sbrk_aligned>
 80104b0:	0004      	movs	r4, r0
 80104b2:	1c43      	adds	r3, r0, #1
 80104b4:	d11e      	bne.n	80104f4 <_malloc_r+0x74>
 80104b6:	682c      	ldr	r4, [r5, #0]
 80104b8:	0025      	movs	r5, r4
 80104ba:	2d00      	cmp	r5, #0
 80104bc:	d14a      	bne.n	8010554 <_malloc_r+0xd4>
 80104be:	6823      	ldr	r3, [r4, #0]
 80104c0:	0029      	movs	r1, r5
 80104c2:	18e3      	adds	r3, r4, r3
 80104c4:	0030      	movs	r0, r6
 80104c6:	9301      	str	r3, [sp, #4]
 80104c8:	f000 fb6a 	bl	8010ba0 <_sbrk_r>
 80104cc:	9b01      	ldr	r3, [sp, #4]
 80104ce:	4283      	cmp	r3, r0
 80104d0:	d143      	bne.n	801055a <_malloc_r+0xda>
 80104d2:	6823      	ldr	r3, [r4, #0]
 80104d4:	3703      	adds	r7, #3
 80104d6:	1aff      	subs	r7, r7, r3
 80104d8:	2303      	movs	r3, #3
 80104da:	439f      	bics	r7, r3
 80104dc:	3708      	adds	r7, #8
 80104de:	2f0c      	cmp	r7, #12
 80104e0:	d200      	bcs.n	80104e4 <_malloc_r+0x64>
 80104e2:	270c      	movs	r7, #12
 80104e4:	0039      	movs	r1, r7
 80104e6:	0030      	movs	r0, r6
 80104e8:	f7ff ffa8 	bl	801043c <sbrk_aligned>
 80104ec:	1c43      	adds	r3, r0, #1
 80104ee:	d034      	beq.n	801055a <_malloc_r+0xda>
 80104f0:	6823      	ldr	r3, [r4, #0]
 80104f2:	19df      	adds	r7, r3, r7
 80104f4:	6027      	str	r7, [r4, #0]
 80104f6:	e013      	b.n	8010520 <_malloc_r+0xa0>
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	dacb      	bge.n	8010494 <_malloc_r+0x14>
 80104fc:	230c      	movs	r3, #12
 80104fe:	2500      	movs	r5, #0
 8010500:	6033      	str	r3, [r6, #0]
 8010502:	0028      	movs	r0, r5
 8010504:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010506:	6822      	ldr	r2, [r4, #0]
 8010508:	1bd1      	subs	r1, r2, r7
 801050a:	d420      	bmi.n	801054e <_malloc_r+0xce>
 801050c:	290b      	cmp	r1, #11
 801050e:	d917      	bls.n	8010540 <_malloc_r+0xc0>
 8010510:	19e2      	adds	r2, r4, r7
 8010512:	6027      	str	r7, [r4, #0]
 8010514:	42a3      	cmp	r3, r4
 8010516:	d111      	bne.n	801053c <_malloc_r+0xbc>
 8010518:	602a      	str	r2, [r5, #0]
 801051a:	6863      	ldr	r3, [r4, #4]
 801051c:	6011      	str	r1, [r2, #0]
 801051e:	6053      	str	r3, [r2, #4]
 8010520:	0030      	movs	r0, r6
 8010522:	0025      	movs	r5, r4
 8010524:	f001 fa7e 	bl	8011a24 <__malloc_unlock>
 8010528:	2207      	movs	r2, #7
 801052a:	350b      	adds	r5, #11
 801052c:	1d23      	adds	r3, r4, #4
 801052e:	4395      	bics	r5, r2
 8010530:	1aea      	subs	r2, r5, r3
 8010532:	429d      	cmp	r5, r3
 8010534:	d0e5      	beq.n	8010502 <_malloc_r+0x82>
 8010536:	1b5b      	subs	r3, r3, r5
 8010538:	50a3      	str	r3, [r4, r2]
 801053a:	e7e2      	b.n	8010502 <_malloc_r+0x82>
 801053c:	605a      	str	r2, [r3, #4]
 801053e:	e7ec      	b.n	801051a <_malloc_r+0x9a>
 8010540:	6862      	ldr	r2, [r4, #4]
 8010542:	42a3      	cmp	r3, r4
 8010544:	d101      	bne.n	801054a <_malloc_r+0xca>
 8010546:	602a      	str	r2, [r5, #0]
 8010548:	e7ea      	b.n	8010520 <_malloc_r+0xa0>
 801054a:	605a      	str	r2, [r3, #4]
 801054c:	e7e8      	b.n	8010520 <_malloc_r+0xa0>
 801054e:	0023      	movs	r3, r4
 8010550:	6864      	ldr	r4, [r4, #4]
 8010552:	e7a7      	b.n	80104a4 <_malloc_r+0x24>
 8010554:	002c      	movs	r4, r5
 8010556:	686d      	ldr	r5, [r5, #4]
 8010558:	e7af      	b.n	80104ba <_malloc_r+0x3a>
 801055a:	230c      	movs	r3, #12
 801055c:	0030      	movs	r0, r6
 801055e:	6033      	str	r3, [r6, #0]
 8010560:	f001 fa60 	bl	8011a24 <__malloc_unlock>
 8010564:	e7cd      	b.n	8010502 <_malloc_r+0x82>
 8010566:	46c0      	nop			; (mov r8, r8)
 8010568:	20000ce8 	.word	0x20000ce8

0801056c <_realloc_r>:
 801056c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801056e:	0007      	movs	r7, r0
 8010570:	000e      	movs	r6, r1
 8010572:	0014      	movs	r4, r2
 8010574:	2900      	cmp	r1, #0
 8010576:	d105      	bne.n	8010584 <_realloc_r+0x18>
 8010578:	0011      	movs	r1, r2
 801057a:	f7ff ff81 	bl	8010480 <_malloc_r>
 801057e:	0005      	movs	r5, r0
 8010580:	0028      	movs	r0, r5
 8010582:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010584:	2a00      	cmp	r2, #0
 8010586:	d103      	bne.n	8010590 <_realloc_r+0x24>
 8010588:	f001 fa54 	bl	8011a34 <_free_r>
 801058c:	0025      	movs	r5, r4
 801058e:	e7f7      	b.n	8010580 <_realloc_r+0x14>
 8010590:	f001 fa9a 	bl	8011ac8 <_malloc_usable_size_r>
 8010594:	9001      	str	r0, [sp, #4]
 8010596:	4284      	cmp	r4, r0
 8010598:	d803      	bhi.n	80105a2 <_realloc_r+0x36>
 801059a:	0035      	movs	r5, r6
 801059c:	0843      	lsrs	r3, r0, #1
 801059e:	42a3      	cmp	r3, r4
 80105a0:	d3ee      	bcc.n	8010580 <_realloc_r+0x14>
 80105a2:	0021      	movs	r1, r4
 80105a4:	0038      	movs	r0, r7
 80105a6:	f7ff ff6b 	bl	8010480 <_malloc_r>
 80105aa:	1e05      	subs	r5, r0, #0
 80105ac:	d0e8      	beq.n	8010580 <_realloc_r+0x14>
 80105ae:	9b01      	ldr	r3, [sp, #4]
 80105b0:	0022      	movs	r2, r4
 80105b2:	429c      	cmp	r4, r3
 80105b4:	d900      	bls.n	80105b8 <_realloc_r+0x4c>
 80105b6:	001a      	movs	r2, r3
 80105b8:	0031      	movs	r1, r6
 80105ba:	0028      	movs	r0, r5
 80105bc:	f7fd fdc2 	bl	800e144 <memcpy>
 80105c0:	0031      	movs	r1, r6
 80105c2:	0038      	movs	r0, r7
 80105c4:	f001 fa36 	bl	8011a34 <_free_r>
 80105c8:	e7da      	b.n	8010580 <_realloc_r+0x14>
	...

080105cc <__ssputs_r>:
 80105cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105ce:	688e      	ldr	r6, [r1, #8]
 80105d0:	b085      	sub	sp, #20
 80105d2:	0007      	movs	r7, r0
 80105d4:	000c      	movs	r4, r1
 80105d6:	9203      	str	r2, [sp, #12]
 80105d8:	9301      	str	r3, [sp, #4]
 80105da:	429e      	cmp	r6, r3
 80105dc:	d83c      	bhi.n	8010658 <__ssputs_r+0x8c>
 80105de:	2390      	movs	r3, #144	; 0x90
 80105e0:	898a      	ldrh	r2, [r1, #12]
 80105e2:	00db      	lsls	r3, r3, #3
 80105e4:	421a      	tst	r2, r3
 80105e6:	d034      	beq.n	8010652 <__ssputs_r+0x86>
 80105e8:	6909      	ldr	r1, [r1, #16]
 80105ea:	6823      	ldr	r3, [r4, #0]
 80105ec:	6960      	ldr	r0, [r4, #20]
 80105ee:	1a5b      	subs	r3, r3, r1
 80105f0:	9302      	str	r3, [sp, #8]
 80105f2:	2303      	movs	r3, #3
 80105f4:	4343      	muls	r3, r0
 80105f6:	0fdd      	lsrs	r5, r3, #31
 80105f8:	18ed      	adds	r5, r5, r3
 80105fa:	9b01      	ldr	r3, [sp, #4]
 80105fc:	9802      	ldr	r0, [sp, #8]
 80105fe:	3301      	adds	r3, #1
 8010600:	181b      	adds	r3, r3, r0
 8010602:	106d      	asrs	r5, r5, #1
 8010604:	42ab      	cmp	r3, r5
 8010606:	d900      	bls.n	801060a <__ssputs_r+0x3e>
 8010608:	001d      	movs	r5, r3
 801060a:	0553      	lsls	r3, r2, #21
 801060c:	d532      	bpl.n	8010674 <__ssputs_r+0xa8>
 801060e:	0029      	movs	r1, r5
 8010610:	0038      	movs	r0, r7
 8010612:	f7ff ff35 	bl	8010480 <_malloc_r>
 8010616:	1e06      	subs	r6, r0, #0
 8010618:	d109      	bne.n	801062e <__ssputs_r+0x62>
 801061a:	230c      	movs	r3, #12
 801061c:	603b      	str	r3, [r7, #0]
 801061e:	2340      	movs	r3, #64	; 0x40
 8010620:	2001      	movs	r0, #1
 8010622:	89a2      	ldrh	r2, [r4, #12]
 8010624:	4240      	negs	r0, r0
 8010626:	4313      	orrs	r3, r2
 8010628:	81a3      	strh	r3, [r4, #12]
 801062a:	b005      	add	sp, #20
 801062c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801062e:	9a02      	ldr	r2, [sp, #8]
 8010630:	6921      	ldr	r1, [r4, #16]
 8010632:	f7fd fd87 	bl	800e144 <memcpy>
 8010636:	89a3      	ldrh	r3, [r4, #12]
 8010638:	4a14      	ldr	r2, [pc, #80]	; (801068c <__ssputs_r+0xc0>)
 801063a:	401a      	ands	r2, r3
 801063c:	2380      	movs	r3, #128	; 0x80
 801063e:	4313      	orrs	r3, r2
 8010640:	81a3      	strh	r3, [r4, #12]
 8010642:	9b02      	ldr	r3, [sp, #8]
 8010644:	6126      	str	r6, [r4, #16]
 8010646:	18f6      	adds	r6, r6, r3
 8010648:	6026      	str	r6, [r4, #0]
 801064a:	6165      	str	r5, [r4, #20]
 801064c:	9e01      	ldr	r6, [sp, #4]
 801064e:	1aed      	subs	r5, r5, r3
 8010650:	60a5      	str	r5, [r4, #8]
 8010652:	9b01      	ldr	r3, [sp, #4]
 8010654:	429e      	cmp	r6, r3
 8010656:	d900      	bls.n	801065a <__ssputs_r+0x8e>
 8010658:	9e01      	ldr	r6, [sp, #4]
 801065a:	0032      	movs	r2, r6
 801065c:	9903      	ldr	r1, [sp, #12]
 801065e:	6820      	ldr	r0, [r4, #0]
 8010660:	f001 f9c5 	bl	80119ee <memmove>
 8010664:	68a3      	ldr	r3, [r4, #8]
 8010666:	2000      	movs	r0, #0
 8010668:	1b9b      	subs	r3, r3, r6
 801066a:	60a3      	str	r3, [r4, #8]
 801066c:	6823      	ldr	r3, [r4, #0]
 801066e:	199e      	adds	r6, r3, r6
 8010670:	6026      	str	r6, [r4, #0]
 8010672:	e7da      	b.n	801062a <__ssputs_r+0x5e>
 8010674:	002a      	movs	r2, r5
 8010676:	0038      	movs	r0, r7
 8010678:	f7ff ff78 	bl	801056c <_realloc_r>
 801067c:	1e06      	subs	r6, r0, #0
 801067e:	d1e0      	bne.n	8010642 <__ssputs_r+0x76>
 8010680:	0038      	movs	r0, r7
 8010682:	6921      	ldr	r1, [r4, #16]
 8010684:	f001 f9d6 	bl	8011a34 <_free_r>
 8010688:	e7c7      	b.n	801061a <__ssputs_r+0x4e>
 801068a:	46c0      	nop			; (mov r8, r8)
 801068c:	fffffb7f 	.word	0xfffffb7f

08010690 <_svfiprintf_r>:
 8010690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010692:	b0a1      	sub	sp, #132	; 0x84
 8010694:	9003      	str	r0, [sp, #12]
 8010696:	001d      	movs	r5, r3
 8010698:	898b      	ldrh	r3, [r1, #12]
 801069a:	000f      	movs	r7, r1
 801069c:	0016      	movs	r6, r2
 801069e:	061b      	lsls	r3, r3, #24
 80106a0:	d511      	bpl.n	80106c6 <_svfiprintf_r+0x36>
 80106a2:	690b      	ldr	r3, [r1, #16]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d10e      	bne.n	80106c6 <_svfiprintf_r+0x36>
 80106a8:	2140      	movs	r1, #64	; 0x40
 80106aa:	f7ff fee9 	bl	8010480 <_malloc_r>
 80106ae:	6038      	str	r0, [r7, #0]
 80106b0:	6138      	str	r0, [r7, #16]
 80106b2:	2800      	cmp	r0, #0
 80106b4:	d105      	bne.n	80106c2 <_svfiprintf_r+0x32>
 80106b6:	230c      	movs	r3, #12
 80106b8:	9a03      	ldr	r2, [sp, #12]
 80106ba:	3801      	subs	r0, #1
 80106bc:	6013      	str	r3, [r2, #0]
 80106be:	b021      	add	sp, #132	; 0x84
 80106c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106c2:	2340      	movs	r3, #64	; 0x40
 80106c4:	617b      	str	r3, [r7, #20]
 80106c6:	2300      	movs	r3, #0
 80106c8:	ac08      	add	r4, sp, #32
 80106ca:	6163      	str	r3, [r4, #20]
 80106cc:	3320      	adds	r3, #32
 80106ce:	7663      	strb	r3, [r4, #25]
 80106d0:	3310      	adds	r3, #16
 80106d2:	76a3      	strb	r3, [r4, #26]
 80106d4:	9507      	str	r5, [sp, #28]
 80106d6:	0035      	movs	r5, r6
 80106d8:	782b      	ldrb	r3, [r5, #0]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d001      	beq.n	80106e2 <_svfiprintf_r+0x52>
 80106de:	2b25      	cmp	r3, #37	; 0x25
 80106e0:	d147      	bne.n	8010772 <_svfiprintf_r+0xe2>
 80106e2:	1bab      	subs	r3, r5, r6
 80106e4:	9305      	str	r3, [sp, #20]
 80106e6:	42b5      	cmp	r5, r6
 80106e8:	d00c      	beq.n	8010704 <_svfiprintf_r+0x74>
 80106ea:	0032      	movs	r2, r6
 80106ec:	0039      	movs	r1, r7
 80106ee:	9803      	ldr	r0, [sp, #12]
 80106f0:	f7ff ff6c 	bl	80105cc <__ssputs_r>
 80106f4:	1c43      	adds	r3, r0, #1
 80106f6:	d100      	bne.n	80106fa <_svfiprintf_r+0x6a>
 80106f8:	e0ae      	b.n	8010858 <_svfiprintf_r+0x1c8>
 80106fa:	6962      	ldr	r2, [r4, #20]
 80106fc:	9b05      	ldr	r3, [sp, #20]
 80106fe:	4694      	mov	ip, r2
 8010700:	4463      	add	r3, ip
 8010702:	6163      	str	r3, [r4, #20]
 8010704:	782b      	ldrb	r3, [r5, #0]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d100      	bne.n	801070c <_svfiprintf_r+0x7c>
 801070a:	e0a5      	b.n	8010858 <_svfiprintf_r+0x1c8>
 801070c:	2201      	movs	r2, #1
 801070e:	2300      	movs	r3, #0
 8010710:	4252      	negs	r2, r2
 8010712:	6062      	str	r2, [r4, #4]
 8010714:	a904      	add	r1, sp, #16
 8010716:	3254      	adds	r2, #84	; 0x54
 8010718:	1852      	adds	r2, r2, r1
 801071a:	1c6e      	adds	r6, r5, #1
 801071c:	6023      	str	r3, [r4, #0]
 801071e:	60e3      	str	r3, [r4, #12]
 8010720:	60a3      	str	r3, [r4, #8]
 8010722:	7013      	strb	r3, [r2, #0]
 8010724:	65a3      	str	r3, [r4, #88]	; 0x58
 8010726:	2205      	movs	r2, #5
 8010728:	7831      	ldrb	r1, [r6, #0]
 801072a:	4854      	ldr	r0, [pc, #336]	; (801087c <_svfiprintf_r+0x1ec>)
 801072c:	f001 f954 	bl	80119d8 <memchr>
 8010730:	1c75      	adds	r5, r6, #1
 8010732:	2800      	cmp	r0, #0
 8010734:	d11f      	bne.n	8010776 <_svfiprintf_r+0xe6>
 8010736:	6822      	ldr	r2, [r4, #0]
 8010738:	06d3      	lsls	r3, r2, #27
 801073a:	d504      	bpl.n	8010746 <_svfiprintf_r+0xb6>
 801073c:	2353      	movs	r3, #83	; 0x53
 801073e:	a904      	add	r1, sp, #16
 8010740:	185b      	adds	r3, r3, r1
 8010742:	2120      	movs	r1, #32
 8010744:	7019      	strb	r1, [r3, #0]
 8010746:	0713      	lsls	r3, r2, #28
 8010748:	d504      	bpl.n	8010754 <_svfiprintf_r+0xc4>
 801074a:	2353      	movs	r3, #83	; 0x53
 801074c:	a904      	add	r1, sp, #16
 801074e:	185b      	adds	r3, r3, r1
 8010750:	212b      	movs	r1, #43	; 0x2b
 8010752:	7019      	strb	r1, [r3, #0]
 8010754:	7833      	ldrb	r3, [r6, #0]
 8010756:	2b2a      	cmp	r3, #42	; 0x2a
 8010758:	d016      	beq.n	8010788 <_svfiprintf_r+0xf8>
 801075a:	0035      	movs	r5, r6
 801075c:	2100      	movs	r1, #0
 801075e:	200a      	movs	r0, #10
 8010760:	68e3      	ldr	r3, [r4, #12]
 8010762:	782a      	ldrb	r2, [r5, #0]
 8010764:	1c6e      	adds	r6, r5, #1
 8010766:	3a30      	subs	r2, #48	; 0x30
 8010768:	2a09      	cmp	r2, #9
 801076a:	d94e      	bls.n	801080a <_svfiprintf_r+0x17a>
 801076c:	2900      	cmp	r1, #0
 801076e:	d111      	bne.n	8010794 <_svfiprintf_r+0x104>
 8010770:	e017      	b.n	80107a2 <_svfiprintf_r+0x112>
 8010772:	3501      	adds	r5, #1
 8010774:	e7b0      	b.n	80106d8 <_svfiprintf_r+0x48>
 8010776:	4b41      	ldr	r3, [pc, #260]	; (801087c <_svfiprintf_r+0x1ec>)
 8010778:	6822      	ldr	r2, [r4, #0]
 801077a:	1ac0      	subs	r0, r0, r3
 801077c:	2301      	movs	r3, #1
 801077e:	4083      	lsls	r3, r0
 8010780:	4313      	orrs	r3, r2
 8010782:	002e      	movs	r6, r5
 8010784:	6023      	str	r3, [r4, #0]
 8010786:	e7ce      	b.n	8010726 <_svfiprintf_r+0x96>
 8010788:	9b07      	ldr	r3, [sp, #28]
 801078a:	1d19      	adds	r1, r3, #4
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	9107      	str	r1, [sp, #28]
 8010790:	2b00      	cmp	r3, #0
 8010792:	db01      	blt.n	8010798 <_svfiprintf_r+0x108>
 8010794:	930b      	str	r3, [sp, #44]	; 0x2c
 8010796:	e004      	b.n	80107a2 <_svfiprintf_r+0x112>
 8010798:	425b      	negs	r3, r3
 801079a:	60e3      	str	r3, [r4, #12]
 801079c:	2302      	movs	r3, #2
 801079e:	4313      	orrs	r3, r2
 80107a0:	6023      	str	r3, [r4, #0]
 80107a2:	782b      	ldrb	r3, [r5, #0]
 80107a4:	2b2e      	cmp	r3, #46	; 0x2e
 80107a6:	d10a      	bne.n	80107be <_svfiprintf_r+0x12e>
 80107a8:	786b      	ldrb	r3, [r5, #1]
 80107aa:	2b2a      	cmp	r3, #42	; 0x2a
 80107ac:	d135      	bne.n	801081a <_svfiprintf_r+0x18a>
 80107ae:	9b07      	ldr	r3, [sp, #28]
 80107b0:	3502      	adds	r5, #2
 80107b2:	1d1a      	adds	r2, r3, #4
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	9207      	str	r2, [sp, #28]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	db2b      	blt.n	8010814 <_svfiprintf_r+0x184>
 80107bc:	9309      	str	r3, [sp, #36]	; 0x24
 80107be:	4e30      	ldr	r6, [pc, #192]	; (8010880 <_svfiprintf_r+0x1f0>)
 80107c0:	2203      	movs	r2, #3
 80107c2:	0030      	movs	r0, r6
 80107c4:	7829      	ldrb	r1, [r5, #0]
 80107c6:	f001 f907 	bl	80119d8 <memchr>
 80107ca:	2800      	cmp	r0, #0
 80107cc:	d006      	beq.n	80107dc <_svfiprintf_r+0x14c>
 80107ce:	2340      	movs	r3, #64	; 0x40
 80107d0:	1b80      	subs	r0, r0, r6
 80107d2:	4083      	lsls	r3, r0
 80107d4:	6822      	ldr	r2, [r4, #0]
 80107d6:	3501      	adds	r5, #1
 80107d8:	4313      	orrs	r3, r2
 80107da:	6023      	str	r3, [r4, #0]
 80107dc:	7829      	ldrb	r1, [r5, #0]
 80107de:	2206      	movs	r2, #6
 80107e0:	4828      	ldr	r0, [pc, #160]	; (8010884 <_svfiprintf_r+0x1f4>)
 80107e2:	1c6e      	adds	r6, r5, #1
 80107e4:	7621      	strb	r1, [r4, #24]
 80107e6:	f001 f8f7 	bl	80119d8 <memchr>
 80107ea:	2800      	cmp	r0, #0
 80107ec:	d03c      	beq.n	8010868 <_svfiprintf_r+0x1d8>
 80107ee:	4b26      	ldr	r3, [pc, #152]	; (8010888 <_svfiprintf_r+0x1f8>)
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d125      	bne.n	8010840 <_svfiprintf_r+0x1b0>
 80107f4:	2207      	movs	r2, #7
 80107f6:	9b07      	ldr	r3, [sp, #28]
 80107f8:	3307      	adds	r3, #7
 80107fa:	4393      	bics	r3, r2
 80107fc:	3308      	adds	r3, #8
 80107fe:	9307      	str	r3, [sp, #28]
 8010800:	6963      	ldr	r3, [r4, #20]
 8010802:	9a04      	ldr	r2, [sp, #16]
 8010804:	189b      	adds	r3, r3, r2
 8010806:	6163      	str	r3, [r4, #20]
 8010808:	e765      	b.n	80106d6 <_svfiprintf_r+0x46>
 801080a:	4343      	muls	r3, r0
 801080c:	0035      	movs	r5, r6
 801080e:	2101      	movs	r1, #1
 8010810:	189b      	adds	r3, r3, r2
 8010812:	e7a6      	b.n	8010762 <_svfiprintf_r+0xd2>
 8010814:	2301      	movs	r3, #1
 8010816:	425b      	negs	r3, r3
 8010818:	e7d0      	b.n	80107bc <_svfiprintf_r+0x12c>
 801081a:	2300      	movs	r3, #0
 801081c:	200a      	movs	r0, #10
 801081e:	001a      	movs	r2, r3
 8010820:	3501      	adds	r5, #1
 8010822:	6063      	str	r3, [r4, #4]
 8010824:	7829      	ldrb	r1, [r5, #0]
 8010826:	1c6e      	adds	r6, r5, #1
 8010828:	3930      	subs	r1, #48	; 0x30
 801082a:	2909      	cmp	r1, #9
 801082c:	d903      	bls.n	8010836 <_svfiprintf_r+0x1a6>
 801082e:	2b00      	cmp	r3, #0
 8010830:	d0c5      	beq.n	80107be <_svfiprintf_r+0x12e>
 8010832:	9209      	str	r2, [sp, #36]	; 0x24
 8010834:	e7c3      	b.n	80107be <_svfiprintf_r+0x12e>
 8010836:	4342      	muls	r2, r0
 8010838:	0035      	movs	r5, r6
 801083a:	2301      	movs	r3, #1
 801083c:	1852      	adds	r2, r2, r1
 801083e:	e7f1      	b.n	8010824 <_svfiprintf_r+0x194>
 8010840:	ab07      	add	r3, sp, #28
 8010842:	9300      	str	r3, [sp, #0]
 8010844:	003a      	movs	r2, r7
 8010846:	0021      	movs	r1, r4
 8010848:	4b10      	ldr	r3, [pc, #64]	; (801088c <_svfiprintf_r+0x1fc>)
 801084a:	9803      	ldr	r0, [sp, #12]
 801084c:	e000      	b.n	8010850 <_svfiprintf_r+0x1c0>
 801084e:	bf00      	nop
 8010850:	9004      	str	r0, [sp, #16]
 8010852:	9b04      	ldr	r3, [sp, #16]
 8010854:	3301      	adds	r3, #1
 8010856:	d1d3      	bne.n	8010800 <_svfiprintf_r+0x170>
 8010858:	89bb      	ldrh	r3, [r7, #12]
 801085a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801085c:	065b      	lsls	r3, r3, #25
 801085e:	d400      	bmi.n	8010862 <_svfiprintf_r+0x1d2>
 8010860:	e72d      	b.n	80106be <_svfiprintf_r+0x2e>
 8010862:	2001      	movs	r0, #1
 8010864:	4240      	negs	r0, r0
 8010866:	e72a      	b.n	80106be <_svfiprintf_r+0x2e>
 8010868:	ab07      	add	r3, sp, #28
 801086a:	9300      	str	r3, [sp, #0]
 801086c:	003a      	movs	r2, r7
 801086e:	0021      	movs	r1, r4
 8010870:	4b06      	ldr	r3, [pc, #24]	; (801088c <_svfiprintf_r+0x1fc>)
 8010872:	9803      	ldr	r0, [sp, #12]
 8010874:	f000 f87c 	bl	8010970 <_printf_i>
 8010878:	e7ea      	b.n	8010850 <_svfiprintf_r+0x1c0>
 801087a:	46c0      	nop			; (mov r8, r8)
 801087c:	08012e84 	.word	0x08012e84
 8010880:	08012e8a 	.word	0x08012e8a
 8010884:	08012e8e 	.word	0x08012e8e
 8010888:	00000000 	.word	0x00000000
 801088c:	080105cd 	.word	0x080105cd

08010890 <_printf_common>:
 8010890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010892:	0015      	movs	r5, r2
 8010894:	9301      	str	r3, [sp, #4]
 8010896:	688a      	ldr	r2, [r1, #8]
 8010898:	690b      	ldr	r3, [r1, #16]
 801089a:	000c      	movs	r4, r1
 801089c:	9000      	str	r0, [sp, #0]
 801089e:	4293      	cmp	r3, r2
 80108a0:	da00      	bge.n	80108a4 <_printf_common+0x14>
 80108a2:	0013      	movs	r3, r2
 80108a4:	0022      	movs	r2, r4
 80108a6:	602b      	str	r3, [r5, #0]
 80108a8:	3243      	adds	r2, #67	; 0x43
 80108aa:	7812      	ldrb	r2, [r2, #0]
 80108ac:	2a00      	cmp	r2, #0
 80108ae:	d001      	beq.n	80108b4 <_printf_common+0x24>
 80108b0:	3301      	adds	r3, #1
 80108b2:	602b      	str	r3, [r5, #0]
 80108b4:	6823      	ldr	r3, [r4, #0]
 80108b6:	069b      	lsls	r3, r3, #26
 80108b8:	d502      	bpl.n	80108c0 <_printf_common+0x30>
 80108ba:	682b      	ldr	r3, [r5, #0]
 80108bc:	3302      	adds	r3, #2
 80108be:	602b      	str	r3, [r5, #0]
 80108c0:	6822      	ldr	r2, [r4, #0]
 80108c2:	2306      	movs	r3, #6
 80108c4:	0017      	movs	r7, r2
 80108c6:	401f      	ands	r7, r3
 80108c8:	421a      	tst	r2, r3
 80108ca:	d027      	beq.n	801091c <_printf_common+0x8c>
 80108cc:	0023      	movs	r3, r4
 80108ce:	3343      	adds	r3, #67	; 0x43
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	1e5a      	subs	r2, r3, #1
 80108d4:	4193      	sbcs	r3, r2
 80108d6:	6822      	ldr	r2, [r4, #0]
 80108d8:	0692      	lsls	r2, r2, #26
 80108da:	d430      	bmi.n	801093e <_printf_common+0xae>
 80108dc:	0022      	movs	r2, r4
 80108de:	9901      	ldr	r1, [sp, #4]
 80108e0:	9800      	ldr	r0, [sp, #0]
 80108e2:	9e08      	ldr	r6, [sp, #32]
 80108e4:	3243      	adds	r2, #67	; 0x43
 80108e6:	47b0      	blx	r6
 80108e8:	1c43      	adds	r3, r0, #1
 80108ea:	d025      	beq.n	8010938 <_printf_common+0xa8>
 80108ec:	2306      	movs	r3, #6
 80108ee:	6820      	ldr	r0, [r4, #0]
 80108f0:	682a      	ldr	r2, [r5, #0]
 80108f2:	68e1      	ldr	r1, [r4, #12]
 80108f4:	2500      	movs	r5, #0
 80108f6:	4003      	ands	r3, r0
 80108f8:	2b04      	cmp	r3, #4
 80108fa:	d103      	bne.n	8010904 <_printf_common+0x74>
 80108fc:	1a8d      	subs	r5, r1, r2
 80108fe:	43eb      	mvns	r3, r5
 8010900:	17db      	asrs	r3, r3, #31
 8010902:	401d      	ands	r5, r3
 8010904:	68a3      	ldr	r3, [r4, #8]
 8010906:	6922      	ldr	r2, [r4, #16]
 8010908:	4293      	cmp	r3, r2
 801090a:	dd01      	ble.n	8010910 <_printf_common+0x80>
 801090c:	1a9b      	subs	r3, r3, r2
 801090e:	18ed      	adds	r5, r5, r3
 8010910:	2700      	movs	r7, #0
 8010912:	42bd      	cmp	r5, r7
 8010914:	d120      	bne.n	8010958 <_printf_common+0xc8>
 8010916:	2000      	movs	r0, #0
 8010918:	e010      	b.n	801093c <_printf_common+0xac>
 801091a:	3701      	adds	r7, #1
 801091c:	68e3      	ldr	r3, [r4, #12]
 801091e:	682a      	ldr	r2, [r5, #0]
 8010920:	1a9b      	subs	r3, r3, r2
 8010922:	42bb      	cmp	r3, r7
 8010924:	ddd2      	ble.n	80108cc <_printf_common+0x3c>
 8010926:	0022      	movs	r2, r4
 8010928:	2301      	movs	r3, #1
 801092a:	9901      	ldr	r1, [sp, #4]
 801092c:	9800      	ldr	r0, [sp, #0]
 801092e:	9e08      	ldr	r6, [sp, #32]
 8010930:	3219      	adds	r2, #25
 8010932:	47b0      	blx	r6
 8010934:	1c43      	adds	r3, r0, #1
 8010936:	d1f0      	bne.n	801091a <_printf_common+0x8a>
 8010938:	2001      	movs	r0, #1
 801093a:	4240      	negs	r0, r0
 801093c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801093e:	2030      	movs	r0, #48	; 0x30
 8010940:	18e1      	adds	r1, r4, r3
 8010942:	3143      	adds	r1, #67	; 0x43
 8010944:	7008      	strb	r0, [r1, #0]
 8010946:	0021      	movs	r1, r4
 8010948:	1c5a      	adds	r2, r3, #1
 801094a:	3145      	adds	r1, #69	; 0x45
 801094c:	7809      	ldrb	r1, [r1, #0]
 801094e:	18a2      	adds	r2, r4, r2
 8010950:	3243      	adds	r2, #67	; 0x43
 8010952:	3302      	adds	r3, #2
 8010954:	7011      	strb	r1, [r2, #0]
 8010956:	e7c1      	b.n	80108dc <_printf_common+0x4c>
 8010958:	0022      	movs	r2, r4
 801095a:	2301      	movs	r3, #1
 801095c:	9901      	ldr	r1, [sp, #4]
 801095e:	9800      	ldr	r0, [sp, #0]
 8010960:	9e08      	ldr	r6, [sp, #32]
 8010962:	321a      	adds	r2, #26
 8010964:	47b0      	blx	r6
 8010966:	1c43      	adds	r3, r0, #1
 8010968:	d0e6      	beq.n	8010938 <_printf_common+0xa8>
 801096a:	3701      	adds	r7, #1
 801096c:	e7d1      	b.n	8010912 <_printf_common+0x82>
	...

08010970 <_printf_i>:
 8010970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010972:	b08b      	sub	sp, #44	; 0x2c
 8010974:	9206      	str	r2, [sp, #24]
 8010976:	000a      	movs	r2, r1
 8010978:	3243      	adds	r2, #67	; 0x43
 801097a:	9307      	str	r3, [sp, #28]
 801097c:	9005      	str	r0, [sp, #20]
 801097e:	9204      	str	r2, [sp, #16]
 8010980:	7e0a      	ldrb	r2, [r1, #24]
 8010982:	000c      	movs	r4, r1
 8010984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010986:	2a78      	cmp	r2, #120	; 0x78
 8010988:	d807      	bhi.n	801099a <_printf_i+0x2a>
 801098a:	2a62      	cmp	r2, #98	; 0x62
 801098c:	d809      	bhi.n	80109a2 <_printf_i+0x32>
 801098e:	2a00      	cmp	r2, #0
 8010990:	d100      	bne.n	8010994 <_printf_i+0x24>
 8010992:	e0c1      	b.n	8010b18 <_printf_i+0x1a8>
 8010994:	2a58      	cmp	r2, #88	; 0x58
 8010996:	d100      	bne.n	801099a <_printf_i+0x2a>
 8010998:	e08c      	b.n	8010ab4 <_printf_i+0x144>
 801099a:	0026      	movs	r6, r4
 801099c:	3642      	adds	r6, #66	; 0x42
 801099e:	7032      	strb	r2, [r6, #0]
 80109a0:	e022      	b.n	80109e8 <_printf_i+0x78>
 80109a2:	0010      	movs	r0, r2
 80109a4:	3863      	subs	r0, #99	; 0x63
 80109a6:	2815      	cmp	r0, #21
 80109a8:	d8f7      	bhi.n	801099a <_printf_i+0x2a>
 80109aa:	f7ef fbc5 	bl	8000138 <__gnu_thumb1_case_shi>
 80109ae:	0016      	.short	0x0016
 80109b0:	fff6001f 	.word	0xfff6001f
 80109b4:	fff6fff6 	.word	0xfff6fff6
 80109b8:	001ffff6 	.word	0x001ffff6
 80109bc:	fff6fff6 	.word	0xfff6fff6
 80109c0:	fff6fff6 	.word	0xfff6fff6
 80109c4:	003600a8 	.word	0x003600a8
 80109c8:	fff6009a 	.word	0xfff6009a
 80109cc:	00b9fff6 	.word	0x00b9fff6
 80109d0:	0036fff6 	.word	0x0036fff6
 80109d4:	fff6fff6 	.word	0xfff6fff6
 80109d8:	009e      	.short	0x009e
 80109da:	0026      	movs	r6, r4
 80109dc:	681a      	ldr	r2, [r3, #0]
 80109de:	3642      	adds	r6, #66	; 0x42
 80109e0:	1d11      	adds	r1, r2, #4
 80109e2:	6019      	str	r1, [r3, #0]
 80109e4:	6813      	ldr	r3, [r2, #0]
 80109e6:	7033      	strb	r3, [r6, #0]
 80109e8:	2301      	movs	r3, #1
 80109ea:	e0a7      	b.n	8010b3c <_printf_i+0x1cc>
 80109ec:	6808      	ldr	r0, [r1, #0]
 80109ee:	6819      	ldr	r1, [r3, #0]
 80109f0:	1d0a      	adds	r2, r1, #4
 80109f2:	0605      	lsls	r5, r0, #24
 80109f4:	d50b      	bpl.n	8010a0e <_printf_i+0x9e>
 80109f6:	680d      	ldr	r5, [r1, #0]
 80109f8:	601a      	str	r2, [r3, #0]
 80109fa:	2d00      	cmp	r5, #0
 80109fc:	da03      	bge.n	8010a06 <_printf_i+0x96>
 80109fe:	232d      	movs	r3, #45	; 0x2d
 8010a00:	9a04      	ldr	r2, [sp, #16]
 8010a02:	426d      	negs	r5, r5
 8010a04:	7013      	strb	r3, [r2, #0]
 8010a06:	4b61      	ldr	r3, [pc, #388]	; (8010b8c <_printf_i+0x21c>)
 8010a08:	270a      	movs	r7, #10
 8010a0a:	9303      	str	r3, [sp, #12]
 8010a0c:	e01b      	b.n	8010a46 <_printf_i+0xd6>
 8010a0e:	680d      	ldr	r5, [r1, #0]
 8010a10:	601a      	str	r2, [r3, #0]
 8010a12:	0641      	lsls	r1, r0, #25
 8010a14:	d5f1      	bpl.n	80109fa <_printf_i+0x8a>
 8010a16:	b22d      	sxth	r5, r5
 8010a18:	e7ef      	b.n	80109fa <_printf_i+0x8a>
 8010a1a:	680d      	ldr	r5, [r1, #0]
 8010a1c:	6819      	ldr	r1, [r3, #0]
 8010a1e:	1d08      	adds	r0, r1, #4
 8010a20:	6018      	str	r0, [r3, #0]
 8010a22:	062e      	lsls	r6, r5, #24
 8010a24:	d501      	bpl.n	8010a2a <_printf_i+0xba>
 8010a26:	680d      	ldr	r5, [r1, #0]
 8010a28:	e003      	b.n	8010a32 <_printf_i+0xc2>
 8010a2a:	066d      	lsls	r5, r5, #25
 8010a2c:	d5fb      	bpl.n	8010a26 <_printf_i+0xb6>
 8010a2e:	680d      	ldr	r5, [r1, #0]
 8010a30:	b2ad      	uxth	r5, r5
 8010a32:	4b56      	ldr	r3, [pc, #344]	; (8010b8c <_printf_i+0x21c>)
 8010a34:	2708      	movs	r7, #8
 8010a36:	9303      	str	r3, [sp, #12]
 8010a38:	2a6f      	cmp	r2, #111	; 0x6f
 8010a3a:	d000      	beq.n	8010a3e <_printf_i+0xce>
 8010a3c:	3702      	adds	r7, #2
 8010a3e:	0023      	movs	r3, r4
 8010a40:	2200      	movs	r2, #0
 8010a42:	3343      	adds	r3, #67	; 0x43
 8010a44:	701a      	strb	r2, [r3, #0]
 8010a46:	6863      	ldr	r3, [r4, #4]
 8010a48:	60a3      	str	r3, [r4, #8]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	db03      	blt.n	8010a56 <_printf_i+0xe6>
 8010a4e:	2204      	movs	r2, #4
 8010a50:	6821      	ldr	r1, [r4, #0]
 8010a52:	4391      	bics	r1, r2
 8010a54:	6021      	str	r1, [r4, #0]
 8010a56:	2d00      	cmp	r5, #0
 8010a58:	d102      	bne.n	8010a60 <_printf_i+0xf0>
 8010a5a:	9e04      	ldr	r6, [sp, #16]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d00c      	beq.n	8010a7a <_printf_i+0x10a>
 8010a60:	9e04      	ldr	r6, [sp, #16]
 8010a62:	0028      	movs	r0, r5
 8010a64:	0039      	movs	r1, r7
 8010a66:	f7ef fbf7 	bl	8000258 <__aeabi_uidivmod>
 8010a6a:	9b03      	ldr	r3, [sp, #12]
 8010a6c:	3e01      	subs	r6, #1
 8010a6e:	5c5b      	ldrb	r3, [r3, r1]
 8010a70:	7033      	strb	r3, [r6, #0]
 8010a72:	002b      	movs	r3, r5
 8010a74:	0005      	movs	r5, r0
 8010a76:	429f      	cmp	r7, r3
 8010a78:	d9f3      	bls.n	8010a62 <_printf_i+0xf2>
 8010a7a:	2f08      	cmp	r7, #8
 8010a7c:	d109      	bne.n	8010a92 <_printf_i+0x122>
 8010a7e:	6823      	ldr	r3, [r4, #0]
 8010a80:	07db      	lsls	r3, r3, #31
 8010a82:	d506      	bpl.n	8010a92 <_printf_i+0x122>
 8010a84:	6863      	ldr	r3, [r4, #4]
 8010a86:	6922      	ldr	r2, [r4, #16]
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	dc02      	bgt.n	8010a92 <_printf_i+0x122>
 8010a8c:	2330      	movs	r3, #48	; 0x30
 8010a8e:	3e01      	subs	r6, #1
 8010a90:	7033      	strb	r3, [r6, #0]
 8010a92:	9b04      	ldr	r3, [sp, #16]
 8010a94:	1b9b      	subs	r3, r3, r6
 8010a96:	6123      	str	r3, [r4, #16]
 8010a98:	9b07      	ldr	r3, [sp, #28]
 8010a9a:	0021      	movs	r1, r4
 8010a9c:	9300      	str	r3, [sp, #0]
 8010a9e:	9805      	ldr	r0, [sp, #20]
 8010aa0:	9b06      	ldr	r3, [sp, #24]
 8010aa2:	aa09      	add	r2, sp, #36	; 0x24
 8010aa4:	f7ff fef4 	bl	8010890 <_printf_common>
 8010aa8:	1c43      	adds	r3, r0, #1
 8010aaa:	d14c      	bne.n	8010b46 <_printf_i+0x1d6>
 8010aac:	2001      	movs	r0, #1
 8010aae:	4240      	negs	r0, r0
 8010ab0:	b00b      	add	sp, #44	; 0x2c
 8010ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ab4:	3145      	adds	r1, #69	; 0x45
 8010ab6:	700a      	strb	r2, [r1, #0]
 8010ab8:	4a34      	ldr	r2, [pc, #208]	; (8010b8c <_printf_i+0x21c>)
 8010aba:	9203      	str	r2, [sp, #12]
 8010abc:	681a      	ldr	r2, [r3, #0]
 8010abe:	6821      	ldr	r1, [r4, #0]
 8010ac0:	ca20      	ldmia	r2!, {r5}
 8010ac2:	601a      	str	r2, [r3, #0]
 8010ac4:	0608      	lsls	r0, r1, #24
 8010ac6:	d516      	bpl.n	8010af6 <_printf_i+0x186>
 8010ac8:	07cb      	lsls	r3, r1, #31
 8010aca:	d502      	bpl.n	8010ad2 <_printf_i+0x162>
 8010acc:	2320      	movs	r3, #32
 8010ace:	4319      	orrs	r1, r3
 8010ad0:	6021      	str	r1, [r4, #0]
 8010ad2:	2710      	movs	r7, #16
 8010ad4:	2d00      	cmp	r5, #0
 8010ad6:	d1b2      	bne.n	8010a3e <_printf_i+0xce>
 8010ad8:	2320      	movs	r3, #32
 8010ada:	6822      	ldr	r2, [r4, #0]
 8010adc:	439a      	bics	r2, r3
 8010ade:	6022      	str	r2, [r4, #0]
 8010ae0:	e7ad      	b.n	8010a3e <_printf_i+0xce>
 8010ae2:	2220      	movs	r2, #32
 8010ae4:	6809      	ldr	r1, [r1, #0]
 8010ae6:	430a      	orrs	r2, r1
 8010ae8:	6022      	str	r2, [r4, #0]
 8010aea:	0022      	movs	r2, r4
 8010aec:	2178      	movs	r1, #120	; 0x78
 8010aee:	3245      	adds	r2, #69	; 0x45
 8010af0:	7011      	strb	r1, [r2, #0]
 8010af2:	4a27      	ldr	r2, [pc, #156]	; (8010b90 <_printf_i+0x220>)
 8010af4:	e7e1      	b.n	8010aba <_printf_i+0x14a>
 8010af6:	0648      	lsls	r0, r1, #25
 8010af8:	d5e6      	bpl.n	8010ac8 <_printf_i+0x158>
 8010afa:	b2ad      	uxth	r5, r5
 8010afc:	e7e4      	b.n	8010ac8 <_printf_i+0x158>
 8010afe:	681a      	ldr	r2, [r3, #0]
 8010b00:	680d      	ldr	r5, [r1, #0]
 8010b02:	1d10      	adds	r0, r2, #4
 8010b04:	6949      	ldr	r1, [r1, #20]
 8010b06:	6018      	str	r0, [r3, #0]
 8010b08:	6813      	ldr	r3, [r2, #0]
 8010b0a:	062e      	lsls	r6, r5, #24
 8010b0c:	d501      	bpl.n	8010b12 <_printf_i+0x1a2>
 8010b0e:	6019      	str	r1, [r3, #0]
 8010b10:	e002      	b.n	8010b18 <_printf_i+0x1a8>
 8010b12:	066d      	lsls	r5, r5, #25
 8010b14:	d5fb      	bpl.n	8010b0e <_printf_i+0x19e>
 8010b16:	8019      	strh	r1, [r3, #0]
 8010b18:	2300      	movs	r3, #0
 8010b1a:	9e04      	ldr	r6, [sp, #16]
 8010b1c:	6123      	str	r3, [r4, #16]
 8010b1e:	e7bb      	b.n	8010a98 <_printf_i+0x128>
 8010b20:	681a      	ldr	r2, [r3, #0]
 8010b22:	1d11      	adds	r1, r2, #4
 8010b24:	6019      	str	r1, [r3, #0]
 8010b26:	6816      	ldr	r6, [r2, #0]
 8010b28:	2100      	movs	r1, #0
 8010b2a:	0030      	movs	r0, r6
 8010b2c:	6862      	ldr	r2, [r4, #4]
 8010b2e:	f000 ff53 	bl	80119d8 <memchr>
 8010b32:	2800      	cmp	r0, #0
 8010b34:	d001      	beq.n	8010b3a <_printf_i+0x1ca>
 8010b36:	1b80      	subs	r0, r0, r6
 8010b38:	6060      	str	r0, [r4, #4]
 8010b3a:	6863      	ldr	r3, [r4, #4]
 8010b3c:	6123      	str	r3, [r4, #16]
 8010b3e:	2300      	movs	r3, #0
 8010b40:	9a04      	ldr	r2, [sp, #16]
 8010b42:	7013      	strb	r3, [r2, #0]
 8010b44:	e7a8      	b.n	8010a98 <_printf_i+0x128>
 8010b46:	6923      	ldr	r3, [r4, #16]
 8010b48:	0032      	movs	r2, r6
 8010b4a:	9906      	ldr	r1, [sp, #24]
 8010b4c:	9805      	ldr	r0, [sp, #20]
 8010b4e:	9d07      	ldr	r5, [sp, #28]
 8010b50:	47a8      	blx	r5
 8010b52:	1c43      	adds	r3, r0, #1
 8010b54:	d0aa      	beq.n	8010aac <_printf_i+0x13c>
 8010b56:	6823      	ldr	r3, [r4, #0]
 8010b58:	079b      	lsls	r3, r3, #30
 8010b5a:	d415      	bmi.n	8010b88 <_printf_i+0x218>
 8010b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b5e:	68e0      	ldr	r0, [r4, #12]
 8010b60:	4298      	cmp	r0, r3
 8010b62:	daa5      	bge.n	8010ab0 <_printf_i+0x140>
 8010b64:	0018      	movs	r0, r3
 8010b66:	e7a3      	b.n	8010ab0 <_printf_i+0x140>
 8010b68:	0022      	movs	r2, r4
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	9906      	ldr	r1, [sp, #24]
 8010b6e:	9805      	ldr	r0, [sp, #20]
 8010b70:	9e07      	ldr	r6, [sp, #28]
 8010b72:	3219      	adds	r2, #25
 8010b74:	47b0      	blx	r6
 8010b76:	1c43      	adds	r3, r0, #1
 8010b78:	d098      	beq.n	8010aac <_printf_i+0x13c>
 8010b7a:	3501      	adds	r5, #1
 8010b7c:	68e3      	ldr	r3, [r4, #12]
 8010b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b80:	1a9b      	subs	r3, r3, r2
 8010b82:	42ab      	cmp	r3, r5
 8010b84:	dcf0      	bgt.n	8010b68 <_printf_i+0x1f8>
 8010b86:	e7e9      	b.n	8010b5c <_printf_i+0x1ec>
 8010b88:	2500      	movs	r5, #0
 8010b8a:	e7f7      	b.n	8010b7c <_printf_i+0x20c>
 8010b8c:	08012e95 	.word	0x08012e95
 8010b90:	08012ea6 	.word	0x08012ea6

08010b94 <nan>:
 8010b94:	2000      	movs	r0, #0
 8010b96:	4901      	ldr	r1, [pc, #4]	; (8010b9c <nan+0x8>)
 8010b98:	4770      	bx	lr
 8010b9a:	46c0      	nop			; (mov r8, r8)
 8010b9c:	7ff80000 	.word	0x7ff80000

08010ba0 <_sbrk_r>:
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	b570      	push	{r4, r5, r6, lr}
 8010ba4:	4d06      	ldr	r5, [pc, #24]	; (8010bc0 <_sbrk_r+0x20>)
 8010ba6:	0004      	movs	r4, r0
 8010ba8:	0008      	movs	r0, r1
 8010baa:	602b      	str	r3, [r5, #0]
 8010bac:	f7f7 fb72 	bl	8008294 <_sbrk>
 8010bb0:	1c43      	adds	r3, r0, #1
 8010bb2:	d103      	bne.n	8010bbc <_sbrk_r+0x1c>
 8010bb4:	682b      	ldr	r3, [r5, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d000      	beq.n	8010bbc <_sbrk_r+0x1c>
 8010bba:	6023      	str	r3, [r4, #0]
 8010bbc:	bd70      	pop	{r4, r5, r6, pc}
 8010bbe:	46c0      	nop			; (mov r8, r8)
 8010bc0:	20000cf0 	.word	0x20000cf0

08010bc4 <nanf>:
 8010bc4:	4800      	ldr	r0, [pc, #0]	; (8010bc8 <nanf+0x4>)
 8010bc6:	4770      	bx	lr
 8010bc8:	7fc00000 	.word	0x7fc00000

08010bcc <strcpy>:
 8010bcc:	0003      	movs	r3, r0
 8010bce:	780a      	ldrb	r2, [r1, #0]
 8010bd0:	3101      	adds	r1, #1
 8010bd2:	701a      	strb	r2, [r3, #0]
 8010bd4:	3301      	adds	r3, #1
 8010bd6:	2a00      	cmp	r2, #0
 8010bd8:	d1f9      	bne.n	8010bce <strcpy+0x2>
 8010bda:	4770      	bx	lr

08010bdc <strncmp>:
 8010bdc:	b530      	push	{r4, r5, lr}
 8010bde:	0005      	movs	r5, r0
 8010be0:	1e10      	subs	r0, r2, #0
 8010be2:	d008      	beq.n	8010bf6 <strncmp+0x1a>
 8010be4:	2400      	movs	r4, #0
 8010be6:	3a01      	subs	r2, #1
 8010be8:	5d2b      	ldrb	r3, [r5, r4]
 8010bea:	5d08      	ldrb	r0, [r1, r4]
 8010bec:	4283      	cmp	r3, r0
 8010bee:	d101      	bne.n	8010bf4 <strncmp+0x18>
 8010bf0:	4294      	cmp	r4, r2
 8010bf2:	d101      	bne.n	8010bf8 <strncmp+0x1c>
 8010bf4:	1a18      	subs	r0, r3, r0
 8010bf6:	bd30      	pop	{r4, r5, pc}
 8010bf8:	3401      	adds	r4, #1
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d1f4      	bne.n	8010be8 <strncmp+0xc>
 8010bfe:	e7f9      	b.n	8010bf4 <strncmp+0x18>

08010c00 <__ascii_wctomb>:
 8010c00:	0003      	movs	r3, r0
 8010c02:	1e08      	subs	r0, r1, #0
 8010c04:	d005      	beq.n	8010c12 <__ascii_wctomb+0x12>
 8010c06:	2aff      	cmp	r2, #255	; 0xff
 8010c08:	d904      	bls.n	8010c14 <__ascii_wctomb+0x14>
 8010c0a:	228a      	movs	r2, #138	; 0x8a
 8010c0c:	2001      	movs	r0, #1
 8010c0e:	601a      	str	r2, [r3, #0]
 8010c10:	4240      	negs	r0, r0
 8010c12:	4770      	bx	lr
 8010c14:	2001      	movs	r0, #1
 8010c16:	700a      	strb	r2, [r1, #0]
 8010c18:	e7fb      	b.n	8010c12 <__ascii_wctomb+0x12>
	...

08010c1c <__assert_func>:
 8010c1c:	b530      	push	{r4, r5, lr}
 8010c1e:	0014      	movs	r4, r2
 8010c20:	001a      	movs	r2, r3
 8010c22:	4b09      	ldr	r3, [pc, #36]	; (8010c48 <__assert_func+0x2c>)
 8010c24:	0005      	movs	r5, r0
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	b085      	sub	sp, #20
 8010c2a:	68d8      	ldr	r0, [r3, #12]
 8010c2c:	4b07      	ldr	r3, [pc, #28]	; (8010c4c <__assert_func+0x30>)
 8010c2e:	2c00      	cmp	r4, #0
 8010c30:	d101      	bne.n	8010c36 <__assert_func+0x1a>
 8010c32:	4b07      	ldr	r3, [pc, #28]	; (8010c50 <__assert_func+0x34>)
 8010c34:	001c      	movs	r4, r3
 8010c36:	9301      	str	r3, [sp, #4]
 8010c38:	9100      	str	r1, [sp, #0]
 8010c3a:	002b      	movs	r3, r5
 8010c3c:	4905      	ldr	r1, [pc, #20]	; (8010c54 <__assert_func+0x38>)
 8010c3e:	9402      	str	r4, [sp, #8]
 8010c40:	f000 feb0 	bl	80119a4 <fiprintf>
 8010c44:	f001 f978 	bl	8011f38 <abort>
 8010c48:	200000e0 	.word	0x200000e0
 8010c4c:	08012eb7 	.word	0x08012eb7
 8010c50:	08012ef2 	.word	0x08012ef2
 8010c54:	08012ec4 	.word	0x08012ec4

08010c58 <quorem>:
 8010c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c5a:	0006      	movs	r6, r0
 8010c5c:	690b      	ldr	r3, [r1, #16]
 8010c5e:	6932      	ldr	r2, [r6, #16]
 8010c60:	b087      	sub	sp, #28
 8010c62:	2000      	movs	r0, #0
 8010c64:	9103      	str	r1, [sp, #12]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	db65      	blt.n	8010d36 <quorem+0xde>
 8010c6a:	3b01      	subs	r3, #1
 8010c6c:	009c      	lsls	r4, r3, #2
 8010c6e:	9300      	str	r3, [sp, #0]
 8010c70:	000b      	movs	r3, r1
 8010c72:	3314      	adds	r3, #20
 8010c74:	9305      	str	r3, [sp, #20]
 8010c76:	191b      	adds	r3, r3, r4
 8010c78:	9304      	str	r3, [sp, #16]
 8010c7a:	0033      	movs	r3, r6
 8010c7c:	3314      	adds	r3, #20
 8010c7e:	9302      	str	r3, [sp, #8]
 8010c80:	191c      	adds	r4, r3, r4
 8010c82:	9b04      	ldr	r3, [sp, #16]
 8010c84:	6827      	ldr	r7, [r4, #0]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	0038      	movs	r0, r7
 8010c8a:	1c5d      	adds	r5, r3, #1
 8010c8c:	0029      	movs	r1, r5
 8010c8e:	9301      	str	r3, [sp, #4]
 8010c90:	f7ef fa5c 	bl	800014c <__udivsi3>
 8010c94:	9001      	str	r0, [sp, #4]
 8010c96:	42af      	cmp	r7, r5
 8010c98:	d324      	bcc.n	8010ce4 <quorem+0x8c>
 8010c9a:	2500      	movs	r5, #0
 8010c9c:	46ac      	mov	ip, r5
 8010c9e:	9802      	ldr	r0, [sp, #8]
 8010ca0:	9f05      	ldr	r7, [sp, #20]
 8010ca2:	cf08      	ldmia	r7!, {r3}
 8010ca4:	9a01      	ldr	r2, [sp, #4]
 8010ca6:	b299      	uxth	r1, r3
 8010ca8:	4351      	muls	r1, r2
 8010caa:	0c1b      	lsrs	r3, r3, #16
 8010cac:	4353      	muls	r3, r2
 8010cae:	1949      	adds	r1, r1, r5
 8010cb0:	0c0a      	lsrs	r2, r1, #16
 8010cb2:	189b      	adds	r3, r3, r2
 8010cb4:	6802      	ldr	r2, [r0, #0]
 8010cb6:	b289      	uxth	r1, r1
 8010cb8:	b292      	uxth	r2, r2
 8010cba:	4462      	add	r2, ip
 8010cbc:	1a52      	subs	r2, r2, r1
 8010cbe:	6801      	ldr	r1, [r0, #0]
 8010cc0:	0c1d      	lsrs	r5, r3, #16
 8010cc2:	0c09      	lsrs	r1, r1, #16
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	1acb      	subs	r3, r1, r3
 8010cc8:	1411      	asrs	r1, r2, #16
 8010cca:	185b      	adds	r3, r3, r1
 8010ccc:	1419      	asrs	r1, r3, #16
 8010cce:	b292      	uxth	r2, r2
 8010cd0:	041b      	lsls	r3, r3, #16
 8010cd2:	431a      	orrs	r2, r3
 8010cd4:	9b04      	ldr	r3, [sp, #16]
 8010cd6:	468c      	mov	ip, r1
 8010cd8:	c004      	stmia	r0!, {r2}
 8010cda:	42bb      	cmp	r3, r7
 8010cdc:	d2e1      	bcs.n	8010ca2 <quorem+0x4a>
 8010cde:	6823      	ldr	r3, [r4, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d030      	beq.n	8010d46 <quorem+0xee>
 8010ce4:	0030      	movs	r0, r6
 8010ce6:	9903      	ldr	r1, [sp, #12]
 8010ce8:	f7ff f968 	bl	800ffbc <__mcmp>
 8010cec:	2800      	cmp	r0, #0
 8010cee:	db21      	blt.n	8010d34 <quorem+0xdc>
 8010cf0:	0030      	movs	r0, r6
 8010cf2:	2400      	movs	r4, #0
 8010cf4:	9b01      	ldr	r3, [sp, #4]
 8010cf6:	9903      	ldr	r1, [sp, #12]
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	9301      	str	r3, [sp, #4]
 8010cfc:	3014      	adds	r0, #20
 8010cfe:	3114      	adds	r1, #20
 8010d00:	6803      	ldr	r3, [r0, #0]
 8010d02:	c920      	ldmia	r1!, {r5}
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	1914      	adds	r4, r2, r4
 8010d08:	b2aa      	uxth	r2, r5
 8010d0a:	1aa2      	subs	r2, r4, r2
 8010d0c:	0c1b      	lsrs	r3, r3, #16
 8010d0e:	0c2d      	lsrs	r5, r5, #16
 8010d10:	1414      	asrs	r4, r2, #16
 8010d12:	1b5b      	subs	r3, r3, r5
 8010d14:	191b      	adds	r3, r3, r4
 8010d16:	141c      	asrs	r4, r3, #16
 8010d18:	b292      	uxth	r2, r2
 8010d1a:	041b      	lsls	r3, r3, #16
 8010d1c:	4313      	orrs	r3, r2
 8010d1e:	c008      	stmia	r0!, {r3}
 8010d20:	9b04      	ldr	r3, [sp, #16]
 8010d22:	428b      	cmp	r3, r1
 8010d24:	d2ec      	bcs.n	8010d00 <quorem+0xa8>
 8010d26:	9b00      	ldr	r3, [sp, #0]
 8010d28:	9a02      	ldr	r2, [sp, #8]
 8010d2a:	009b      	lsls	r3, r3, #2
 8010d2c:	18d3      	adds	r3, r2, r3
 8010d2e:	681a      	ldr	r2, [r3, #0]
 8010d30:	2a00      	cmp	r2, #0
 8010d32:	d015      	beq.n	8010d60 <quorem+0x108>
 8010d34:	9801      	ldr	r0, [sp, #4]
 8010d36:	b007      	add	sp, #28
 8010d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d3a:	6823      	ldr	r3, [r4, #0]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d106      	bne.n	8010d4e <quorem+0xf6>
 8010d40:	9b00      	ldr	r3, [sp, #0]
 8010d42:	3b01      	subs	r3, #1
 8010d44:	9300      	str	r3, [sp, #0]
 8010d46:	9b02      	ldr	r3, [sp, #8]
 8010d48:	3c04      	subs	r4, #4
 8010d4a:	42a3      	cmp	r3, r4
 8010d4c:	d3f5      	bcc.n	8010d3a <quorem+0xe2>
 8010d4e:	9b00      	ldr	r3, [sp, #0]
 8010d50:	6133      	str	r3, [r6, #16]
 8010d52:	e7c7      	b.n	8010ce4 <quorem+0x8c>
 8010d54:	681a      	ldr	r2, [r3, #0]
 8010d56:	2a00      	cmp	r2, #0
 8010d58:	d106      	bne.n	8010d68 <quorem+0x110>
 8010d5a:	9a00      	ldr	r2, [sp, #0]
 8010d5c:	3a01      	subs	r2, #1
 8010d5e:	9200      	str	r2, [sp, #0]
 8010d60:	9a02      	ldr	r2, [sp, #8]
 8010d62:	3b04      	subs	r3, #4
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d3f5      	bcc.n	8010d54 <quorem+0xfc>
 8010d68:	9b00      	ldr	r3, [sp, #0]
 8010d6a:	6133      	str	r3, [r6, #16]
 8010d6c:	e7e2      	b.n	8010d34 <quorem+0xdc>
	...

08010d70 <_dtoa_r>:
 8010d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d72:	b09d      	sub	sp, #116	; 0x74
 8010d74:	9202      	str	r2, [sp, #8]
 8010d76:	9303      	str	r3, [sp, #12]
 8010d78:	9b02      	ldr	r3, [sp, #8]
 8010d7a:	9c03      	ldr	r4, [sp, #12]
 8010d7c:	9308      	str	r3, [sp, #32]
 8010d7e:	9409      	str	r4, [sp, #36]	; 0x24
 8010d80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010d82:	0007      	movs	r7, r0
 8010d84:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8010d86:	2c00      	cmp	r4, #0
 8010d88:	d10e      	bne.n	8010da8 <_dtoa_r+0x38>
 8010d8a:	2010      	movs	r0, #16
 8010d8c:	f000 fe1a 	bl	80119c4 <malloc>
 8010d90:	1e02      	subs	r2, r0, #0
 8010d92:	6278      	str	r0, [r7, #36]	; 0x24
 8010d94:	d104      	bne.n	8010da0 <_dtoa_r+0x30>
 8010d96:	21ea      	movs	r1, #234	; 0xea
 8010d98:	4bc7      	ldr	r3, [pc, #796]	; (80110b8 <_dtoa_r+0x348>)
 8010d9a:	48c8      	ldr	r0, [pc, #800]	; (80110bc <_dtoa_r+0x34c>)
 8010d9c:	f7ff ff3e 	bl	8010c1c <__assert_func>
 8010da0:	6044      	str	r4, [r0, #4]
 8010da2:	6084      	str	r4, [r0, #8]
 8010da4:	6004      	str	r4, [r0, #0]
 8010da6:	60c4      	str	r4, [r0, #12]
 8010da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010daa:	6819      	ldr	r1, [r3, #0]
 8010dac:	2900      	cmp	r1, #0
 8010dae:	d00a      	beq.n	8010dc6 <_dtoa_r+0x56>
 8010db0:	685a      	ldr	r2, [r3, #4]
 8010db2:	2301      	movs	r3, #1
 8010db4:	4093      	lsls	r3, r2
 8010db6:	604a      	str	r2, [r1, #4]
 8010db8:	608b      	str	r3, [r1, #8]
 8010dba:	0038      	movs	r0, r7
 8010dbc:	f7fe fe72 	bl	800faa4 <_Bfree>
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc4:	601a      	str	r2, [r3, #0]
 8010dc6:	9b03      	ldr	r3, [sp, #12]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	da20      	bge.n	8010e0e <_dtoa_r+0x9e>
 8010dcc:	2301      	movs	r3, #1
 8010dce:	602b      	str	r3, [r5, #0]
 8010dd0:	9b03      	ldr	r3, [sp, #12]
 8010dd2:	005b      	lsls	r3, r3, #1
 8010dd4:	085b      	lsrs	r3, r3, #1
 8010dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8010dd8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010dda:	4bb9      	ldr	r3, [pc, #740]	; (80110c0 <_dtoa_r+0x350>)
 8010ddc:	4ab8      	ldr	r2, [pc, #736]	; (80110c0 <_dtoa_r+0x350>)
 8010dde:	402b      	ands	r3, r5
 8010de0:	4293      	cmp	r3, r2
 8010de2:	d117      	bne.n	8010e14 <_dtoa_r+0xa4>
 8010de4:	4bb7      	ldr	r3, [pc, #732]	; (80110c4 <_dtoa_r+0x354>)
 8010de6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010de8:	0328      	lsls	r0, r5, #12
 8010dea:	6013      	str	r3, [r2, #0]
 8010dec:	9b02      	ldr	r3, [sp, #8]
 8010dee:	0b00      	lsrs	r0, r0, #12
 8010df0:	4318      	orrs	r0, r3
 8010df2:	d101      	bne.n	8010df8 <_dtoa_r+0x88>
 8010df4:	f000 fdbf 	bl	8011976 <_dtoa_r+0xc06>
 8010df8:	48b3      	ldr	r0, [pc, #716]	; (80110c8 <_dtoa_r+0x358>)
 8010dfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010dfc:	9006      	str	r0, [sp, #24]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d002      	beq.n	8010e08 <_dtoa_r+0x98>
 8010e02:	4bb2      	ldr	r3, [pc, #712]	; (80110cc <_dtoa_r+0x35c>)
 8010e04:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010e06:	6013      	str	r3, [r2, #0]
 8010e08:	9806      	ldr	r0, [sp, #24]
 8010e0a:	b01d      	add	sp, #116	; 0x74
 8010e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e0e:	2300      	movs	r3, #0
 8010e10:	602b      	str	r3, [r5, #0]
 8010e12:	e7e1      	b.n	8010dd8 <_dtoa_r+0x68>
 8010e14:	9b08      	ldr	r3, [sp, #32]
 8010e16:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010e18:	9312      	str	r3, [sp, #72]	; 0x48
 8010e1a:	9413      	str	r4, [sp, #76]	; 0x4c
 8010e1c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010e1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010e20:	2200      	movs	r2, #0
 8010e22:	2300      	movs	r3, #0
 8010e24:	f7ef fb18 	bl	8000458 <__aeabi_dcmpeq>
 8010e28:	1e04      	subs	r4, r0, #0
 8010e2a:	d009      	beq.n	8010e40 <_dtoa_r+0xd0>
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010e30:	6013      	str	r3, [r2, #0]
 8010e32:	4ba7      	ldr	r3, [pc, #668]	; (80110d0 <_dtoa_r+0x360>)
 8010e34:	9306      	str	r3, [sp, #24]
 8010e36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d0e5      	beq.n	8010e08 <_dtoa_r+0x98>
 8010e3c:	4ba5      	ldr	r3, [pc, #660]	; (80110d4 <_dtoa_r+0x364>)
 8010e3e:	e7e1      	b.n	8010e04 <_dtoa_r+0x94>
 8010e40:	ab1a      	add	r3, sp, #104	; 0x68
 8010e42:	9301      	str	r3, [sp, #4]
 8010e44:	ab1b      	add	r3, sp, #108	; 0x6c
 8010e46:	9300      	str	r3, [sp, #0]
 8010e48:	0038      	movs	r0, r7
 8010e4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010e4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010e4e:	f7ff f9dd 	bl	801020c <__d2b>
 8010e52:	006e      	lsls	r6, r5, #1
 8010e54:	9005      	str	r0, [sp, #20]
 8010e56:	0d76      	lsrs	r6, r6, #21
 8010e58:	d100      	bne.n	8010e5c <_dtoa_r+0xec>
 8010e5a:	e07c      	b.n	8010f56 <_dtoa_r+0x1e6>
 8010e5c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010e5e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010e60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010e62:	4a9d      	ldr	r2, [pc, #628]	; (80110d8 <_dtoa_r+0x368>)
 8010e64:	031b      	lsls	r3, r3, #12
 8010e66:	0b1b      	lsrs	r3, r3, #12
 8010e68:	431a      	orrs	r2, r3
 8010e6a:	0011      	movs	r1, r2
 8010e6c:	4b9b      	ldr	r3, [pc, #620]	; (80110dc <_dtoa_r+0x36c>)
 8010e6e:	9418      	str	r4, [sp, #96]	; 0x60
 8010e70:	18f6      	adds	r6, r6, r3
 8010e72:	2200      	movs	r2, #0
 8010e74:	4b9a      	ldr	r3, [pc, #616]	; (80110e0 <_dtoa_r+0x370>)
 8010e76:	f7f1 f843 	bl	8001f00 <__aeabi_dsub>
 8010e7a:	4a9a      	ldr	r2, [pc, #616]	; (80110e4 <_dtoa_r+0x374>)
 8010e7c:	4b9a      	ldr	r3, [pc, #616]	; (80110e8 <_dtoa_r+0x378>)
 8010e7e:	f7f0 fdd3 	bl	8001a28 <__aeabi_dmul>
 8010e82:	4a9a      	ldr	r2, [pc, #616]	; (80110ec <_dtoa_r+0x37c>)
 8010e84:	4b9a      	ldr	r3, [pc, #616]	; (80110f0 <_dtoa_r+0x380>)
 8010e86:	f7ef fe91 	bl	8000bac <__aeabi_dadd>
 8010e8a:	0004      	movs	r4, r0
 8010e8c:	0030      	movs	r0, r6
 8010e8e:	000d      	movs	r5, r1
 8010e90:	f7f1 fc1c 	bl	80026cc <__aeabi_i2d>
 8010e94:	4a97      	ldr	r2, [pc, #604]	; (80110f4 <_dtoa_r+0x384>)
 8010e96:	4b98      	ldr	r3, [pc, #608]	; (80110f8 <_dtoa_r+0x388>)
 8010e98:	f7f0 fdc6 	bl	8001a28 <__aeabi_dmul>
 8010e9c:	0002      	movs	r2, r0
 8010e9e:	000b      	movs	r3, r1
 8010ea0:	0020      	movs	r0, r4
 8010ea2:	0029      	movs	r1, r5
 8010ea4:	f7ef fe82 	bl	8000bac <__aeabi_dadd>
 8010ea8:	0004      	movs	r4, r0
 8010eaa:	000d      	movs	r5, r1
 8010eac:	f7f1 fbd8 	bl	8002660 <__aeabi_d2iz>
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	9002      	str	r0, [sp, #8]
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	0020      	movs	r0, r4
 8010eb8:	0029      	movs	r1, r5
 8010eba:	f7ef fad3 	bl	8000464 <__aeabi_dcmplt>
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	d00b      	beq.n	8010eda <_dtoa_r+0x16a>
 8010ec2:	9802      	ldr	r0, [sp, #8]
 8010ec4:	f7f1 fc02 	bl	80026cc <__aeabi_i2d>
 8010ec8:	002b      	movs	r3, r5
 8010eca:	0022      	movs	r2, r4
 8010ecc:	f7ef fac4 	bl	8000458 <__aeabi_dcmpeq>
 8010ed0:	4243      	negs	r3, r0
 8010ed2:	4158      	adcs	r0, r3
 8010ed4:	9b02      	ldr	r3, [sp, #8]
 8010ed6:	1a1b      	subs	r3, r3, r0
 8010ed8:	9302      	str	r3, [sp, #8]
 8010eda:	2301      	movs	r3, #1
 8010edc:	9316      	str	r3, [sp, #88]	; 0x58
 8010ede:	9b02      	ldr	r3, [sp, #8]
 8010ee0:	2b16      	cmp	r3, #22
 8010ee2:	d80f      	bhi.n	8010f04 <_dtoa_r+0x194>
 8010ee4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010ee6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010ee8:	00da      	lsls	r2, r3, #3
 8010eea:	4b84      	ldr	r3, [pc, #528]	; (80110fc <_dtoa_r+0x38c>)
 8010eec:	189b      	adds	r3, r3, r2
 8010eee:	681a      	ldr	r2, [r3, #0]
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	f7ef fab7 	bl	8000464 <__aeabi_dcmplt>
 8010ef6:	2800      	cmp	r0, #0
 8010ef8:	d049      	beq.n	8010f8e <_dtoa_r+0x21e>
 8010efa:	9b02      	ldr	r3, [sp, #8]
 8010efc:	3b01      	subs	r3, #1
 8010efe:	9302      	str	r3, [sp, #8]
 8010f00:	2300      	movs	r3, #0
 8010f02:	9316      	str	r3, [sp, #88]	; 0x58
 8010f04:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010f06:	1b9e      	subs	r6, r3, r6
 8010f08:	2300      	movs	r3, #0
 8010f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8010f0c:	0033      	movs	r3, r6
 8010f0e:	3b01      	subs	r3, #1
 8010f10:	930d      	str	r3, [sp, #52]	; 0x34
 8010f12:	d504      	bpl.n	8010f1e <_dtoa_r+0x1ae>
 8010f14:	2301      	movs	r3, #1
 8010f16:	1b9b      	subs	r3, r3, r6
 8010f18:	930a      	str	r3, [sp, #40]	; 0x28
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	930d      	str	r3, [sp, #52]	; 0x34
 8010f1e:	9b02      	ldr	r3, [sp, #8]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	db36      	blt.n	8010f92 <_dtoa_r+0x222>
 8010f24:	9a02      	ldr	r2, [sp, #8]
 8010f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f28:	4694      	mov	ip, r2
 8010f2a:	4463      	add	r3, ip
 8010f2c:	930d      	str	r3, [sp, #52]	; 0x34
 8010f2e:	2300      	movs	r3, #0
 8010f30:	9215      	str	r2, [sp, #84]	; 0x54
 8010f32:	930e      	str	r3, [sp, #56]	; 0x38
 8010f34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f36:	2401      	movs	r4, #1
 8010f38:	2b09      	cmp	r3, #9
 8010f3a:	d864      	bhi.n	8011006 <_dtoa_r+0x296>
 8010f3c:	2b05      	cmp	r3, #5
 8010f3e:	dd02      	ble.n	8010f46 <_dtoa_r+0x1d6>
 8010f40:	2400      	movs	r4, #0
 8010f42:	3b04      	subs	r3, #4
 8010f44:	9322      	str	r3, [sp, #136]	; 0x88
 8010f46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f48:	1e98      	subs	r0, r3, #2
 8010f4a:	2803      	cmp	r0, #3
 8010f4c:	d864      	bhi.n	8011018 <_dtoa_r+0x2a8>
 8010f4e:	f7ef f8e9 	bl	8000124 <__gnu_thumb1_case_uqi>
 8010f52:	3829      	.short	0x3829
 8010f54:	5836      	.short	0x5836
 8010f56:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010f58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010f5a:	189e      	adds	r6, r3, r2
 8010f5c:	4b68      	ldr	r3, [pc, #416]	; (8011100 <_dtoa_r+0x390>)
 8010f5e:	18f2      	adds	r2, r6, r3
 8010f60:	2a20      	cmp	r2, #32
 8010f62:	dd0f      	ble.n	8010f84 <_dtoa_r+0x214>
 8010f64:	2340      	movs	r3, #64	; 0x40
 8010f66:	1a9b      	subs	r3, r3, r2
 8010f68:	409d      	lsls	r5, r3
 8010f6a:	4b66      	ldr	r3, [pc, #408]	; (8011104 <_dtoa_r+0x394>)
 8010f6c:	9802      	ldr	r0, [sp, #8]
 8010f6e:	18f3      	adds	r3, r6, r3
 8010f70:	40d8      	lsrs	r0, r3
 8010f72:	4328      	orrs	r0, r5
 8010f74:	f7f1 fbda 	bl	800272c <__aeabi_ui2d>
 8010f78:	2301      	movs	r3, #1
 8010f7a:	4c63      	ldr	r4, [pc, #396]	; (8011108 <_dtoa_r+0x398>)
 8010f7c:	3e01      	subs	r6, #1
 8010f7e:	1909      	adds	r1, r1, r4
 8010f80:	9318      	str	r3, [sp, #96]	; 0x60
 8010f82:	e776      	b.n	8010e72 <_dtoa_r+0x102>
 8010f84:	2320      	movs	r3, #32
 8010f86:	9802      	ldr	r0, [sp, #8]
 8010f88:	1a9b      	subs	r3, r3, r2
 8010f8a:	4098      	lsls	r0, r3
 8010f8c:	e7f2      	b.n	8010f74 <_dtoa_r+0x204>
 8010f8e:	9016      	str	r0, [sp, #88]	; 0x58
 8010f90:	e7b8      	b.n	8010f04 <_dtoa_r+0x194>
 8010f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f94:	9a02      	ldr	r2, [sp, #8]
 8010f96:	1a9b      	subs	r3, r3, r2
 8010f98:	930a      	str	r3, [sp, #40]	; 0x28
 8010f9a:	4253      	negs	r3, r2
 8010f9c:	930e      	str	r3, [sp, #56]	; 0x38
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	9315      	str	r3, [sp, #84]	; 0x54
 8010fa2:	e7c7      	b.n	8010f34 <_dtoa_r+0x1c4>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010fa8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010faa:	930c      	str	r3, [sp, #48]	; 0x30
 8010fac:	9307      	str	r3, [sp, #28]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	dc13      	bgt.n	8010fda <_dtoa_r+0x26a>
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	001a      	movs	r2, r3
 8010fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8010fb8:	9307      	str	r3, [sp, #28]
 8010fba:	9223      	str	r2, [sp, #140]	; 0x8c
 8010fbc:	e00d      	b.n	8010fda <_dtoa_r+0x26a>
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	e7f1      	b.n	8010fa6 <_dtoa_r+0x236>
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8010fc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010fc8:	4694      	mov	ip, r2
 8010fca:	9b02      	ldr	r3, [sp, #8]
 8010fcc:	4463      	add	r3, ip
 8010fce:	930c      	str	r3, [sp, #48]	; 0x30
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	9307      	str	r3, [sp, #28]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	dc00      	bgt.n	8010fda <_dtoa_r+0x26a>
 8010fd8:	2301      	movs	r3, #1
 8010fda:	2200      	movs	r2, #0
 8010fdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fde:	6042      	str	r2, [r0, #4]
 8010fe0:	3204      	adds	r2, #4
 8010fe2:	0015      	movs	r5, r2
 8010fe4:	3514      	adds	r5, #20
 8010fe6:	6841      	ldr	r1, [r0, #4]
 8010fe8:	429d      	cmp	r5, r3
 8010fea:	d919      	bls.n	8011020 <_dtoa_r+0x2b0>
 8010fec:	0038      	movs	r0, r7
 8010fee:	f7fe fd15 	bl	800fa1c <_Balloc>
 8010ff2:	9006      	str	r0, [sp, #24]
 8010ff4:	2800      	cmp	r0, #0
 8010ff6:	d117      	bne.n	8011028 <_dtoa_r+0x2b8>
 8010ff8:	21d5      	movs	r1, #213	; 0xd5
 8010ffa:	0002      	movs	r2, r0
 8010ffc:	4b43      	ldr	r3, [pc, #268]	; (801110c <_dtoa_r+0x39c>)
 8010ffe:	0049      	lsls	r1, r1, #1
 8011000:	e6cb      	b.n	8010d9a <_dtoa_r+0x2a>
 8011002:	2301      	movs	r3, #1
 8011004:	e7de      	b.n	8010fc4 <_dtoa_r+0x254>
 8011006:	2300      	movs	r3, #0
 8011008:	940f      	str	r4, [sp, #60]	; 0x3c
 801100a:	9322      	str	r3, [sp, #136]	; 0x88
 801100c:	3b01      	subs	r3, #1
 801100e:	930c      	str	r3, [sp, #48]	; 0x30
 8011010:	9307      	str	r3, [sp, #28]
 8011012:	2200      	movs	r2, #0
 8011014:	3313      	adds	r3, #19
 8011016:	e7d0      	b.n	8010fba <_dtoa_r+0x24a>
 8011018:	2301      	movs	r3, #1
 801101a:	930f      	str	r3, [sp, #60]	; 0x3c
 801101c:	3b02      	subs	r3, #2
 801101e:	e7f6      	b.n	801100e <_dtoa_r+0x29e>
 8011020:	3101      	adds	r1, #1
 8011022:	6041      	str	r1, [r0, #4]
 8011024:	0052      	lsls	r2, r2, #1
 8011026:	e7dc      	b.n	8010fe2 <_dtoa_r+0x272>
 8011028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102a:	9a06      	ldr	r2, [sp, #24]
 801102c:	601a      	str	r2, [r3, #0]
 801102e:	9b07      	ldr	r3, [sp, #28]
 8011030:	2b0e      	cmp	r3, #14
 8011032:	d900      	bls.n	8011036 <_dtoa_r+0x2c6>
 8011034:	e0eb      	b.n	801120e <_dtoa_r+0x49e>
 8011036:	2c00      	cmp	r4, #0
 8011038:	d100      	bne.n	801103c <_dtoa_r+0x2cc>
 801103a:	e0e8      	b.n	801120e <_dtoa_r+0x49e>
 801103c:	9b02      	ldr	r3, [sp, #8]
 801103e:	2b00      	cmp	r3, #0
 8011040:	dd68      	ble.n	8011114 <_dtoa_r+0x3a4>
 8011042:	001a      	movs	r2, r3
 8011044:	210f      	movs	r1, #15
 8011046:	4b2d      	ldr	r3, [pc, #180]	; (80110fc <_dtoa_r+0x38c>)
 8011048:	400a      	ands	r2, r1
 801104a:	00d2      	lsls	r2, r2, #3
 801104c:	189b      	adds	r3, r3, r2
 801104e:	681d      	ldr	r5, [r3, #0]
 8011050:	685e      	ldr	r6, [r3, #4]
 8011052:	9b02      	ldr	r3, [sp, #8]
 8011054:	111c      	asrs	r4, r3, #4
 8011056:	2302      	movs	r3, #2
 8011058:	9310      	str	r3, [sp, #64]	; 0x40
 801105a:	9b02      	ldr	r3, [sp, #8]
 801105c:	05db      	lsls	r3, r3, #23
 801105e:	d50b      	bpl.n	8011078 <_dtoa_r+0x308>
 8011060:	4b2b      	ldr	r3, [pc, #172]	; (8011110 <_dtoa_r+0x3a0>)
 8011062:	400c      	ands	r4, r1
 8011064:	6a1a      	ldr	r2, [r3, #32]
 8011066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011068:	9812      	ldr	r0, [sp, #72]	; 0x48
 801106a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801106c:	f7f0 f8da 	bl	8001224 <__aeabi_ddiv>
 8011070:	2303      	movs	r3, #3
 8011072:	9008      	str	r0, [sp, #32]
 8011074:	9109      	str	r1, [sp, #36]	; 0x24
 8011076:	9310      	str	r3, [sp, #64]	; 0x40
 8011078:	4b25      	ldr	r3, [pc, #148]	; (8011110 <_dtoa_r+0x3a0>)
 801107a:	9314      	str	r3, [sp, #80]	; 0x50
 801107c:	2c00      	cmp	r4, #0
 801107e:	d108      	bne.n	8011092 <_dtoa_r+0x322>
 8011080:	9808      	ldr	r0, [sp, #32]
 8011082:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011084:	002a      	movs	r2, r5
 8011086:	0033      	movs	r3, r6
 8011088:	f7f0 f8cc 	bl	8001224 <__aeabi_ddiv>
 801108c:	9008      	str	r0, [sp, #32]
 801108e:	9109      	str	r1, [sp, #36]	; 0x24
 8011090:	e05c      	b.n	801114c <_dtoa_r+0x3dc>
 8011092:	2301      	movs	r3, #1
 8011094:	421c      	tst	r4, r3
 8011096:	d00b      	beq.n	80110b0 <_dtoa_r+0x340>
 8011098:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801109a:	0028      	movs	r0, r5
 801109c:	3301      	adds	r3, #1
 801109e:	9310      	str	r3, [sp, #64]	; 0x40
 80110a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80110a2:	0031      	movs	r1, r6
 80110a4:	681a      	ldr	r2, [r3, #0]
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	f7f0 fcbe 	bl	8001a28 <__aeabi_dmul>
 80110ac:	0005      	movs	r5, r0
 80110ae:	000e      	movs	r6, r1
 80110b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80110b2:	1064      	asrs	r4, r4, #1
 80110b4:	3308      	adds	r3, #8
 80110b6:	e7e0      	b.n	801107a <_dtoa_r+0x30a>
 80110b8:	08012d14 	.word	0x08012d14
 80110bc:	08012f02 	.word	0x08012f02
 80110c0:	7ff00000 	.word	0x7ff00000
 80110c4:	0000270f 	.word	0x0000270f
 80110c8:	08012efc 	.word	0x08012efc
 80110cc:	08012eff 	.word	0x08012eff
 80110d0:	08012f00 	.word	0x08012f00
 80110d4:	08012f01 	.word	0x08012f01
 80110d8:	3ff00000 	.word	0x3ff00000
 80110dc:	fffffc01 	.word	0xfffffc01
 80110e0:	3ff80000 	.word	0x3ff80000
 80110e4:	636f4361 	.word	0x636f4361
 80110e8:	3fd287a7 	.word	0x3fd287a7
 80110ec:	8b60c8b3 	.word	0x8b60c8b3
 80110f0:	3fc68a28 	.word	0x3fc68a28
 80110f4:	509f79fb 	.word	0x509f79fb
 80110f8:	3fd34413 	.word	0x3fd34413
 80110fc:	08012db0 	.word	0x08012db0
 8011100:	00000432 	.word	0x00000432
 8011104:	00000412 	.word	0x00000412
 8011108:	fe100000 	.word	0xfe100000
 801110c:	08012c89 	.word	0x08012c89
 8011110:	08012d88 	.word	0x08012d88
 8011114:	2302      	movs	r3, #2
 8011116:	9310      	str	r3, [sp, #64]	; 0x40
 8011118:	9b02      	ldr	r3, [sp, #8]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d016      	beq.n	801114c <_dtoa_r+0x3dc>
 801111e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011120:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011122:	425c      	negs	r4, r3
 8011124:	230f      	movs	r3, #15
 8011126:	4ab6      	ldr	r2, [pc, #728]	; (8011400 <_dtoa_r+0x690>)
 8011128:	4023      	ands	r3, r4
 801112a:	00db      	lsls	r3, r3, #3
 801112c:	18d3      	adds	r3, r2, r3
 801112e:	681a      	ldr	r2, [r3, #0]
 8011130:	685b      	ldr	r3, [r3, #4]
 8011132:	f7f0 fc79 	bl	8001a28 <__aeabi_dmul>
 8011136:	2601      	movs	r6, #1
 8011138:	2300      	movs	r3, #0
 801113a:	9008      	str	r0, [sp, #32]
 801113c:	9109      	str	r1, [sp, #36]	; 0x24
 801113e:	4db1      	ldr	r5, [pc, #708]	; (8011404 <_dtoa_r+0x694>)
 8011140:	1124      	asrs	r4, r4, #4
 8011142:	2c00      	cmp	r4, #0
 8011144:	d000      	beq.n	8011148 <_dtoa_r+0x3d8>
 8011146:	e094      	b.n	8011272 <_dtoa_r+0x502>
 8011148:	2b00      	cmp	r3, #0
 801114a:	d19f      	bne.n	801108c <_dtoa_r+0x31c>
 801114c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801114e:	2b00      	cmp	r3, #0
 8011150:	d100      	bne.n	8011154 <_dtoa_r+0x3e4>
 8011152:	e09b      	b.n	801128c <_dtoa_r+0x51c>
 8011154:	9c08      	ldr	r4, [sp, #32]
 8011156:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011158:	2200      	movs	r2, #0
 801115a:	0020      	movs	r0, r4
 801115c:	0029      	movs	r1, r5
 801115e:	4baa      	ldr	r3, [pc, #680]	; (8011408 <_dtoa_r+0x698>)
 8011160:	f7ef f980 	bl	8000464 <__aeabi_dcmplt>
 8011164:	2800      	cmp	r0, #0
 8011166:	d100      	bne.n	801116a <_dtoa_r+0x3fa>
 8011168:	e090      	b.n	801128c <_dtoa_r+0x51c>
 801116a:	9b07      	ldr	r3, [sp, #28]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d100      	bne.n	8011172 <_dtoa_r+0x402>
 8011170:	e08c      	b.n	801128c <_dtoa_r+0x51c>
 8011172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011174:	2b00      	cmp	r3, #0
 8011176:	dd46      	ble.n	8011206 <_dtoa_r+0x496>
 8011178:	9b02      	ldr	r3, [sp, #8]
 801117a:	2200      	movs	r2, #0
 801117c:	0020      	movs	r0, r4
 801117e:	0029      	movs	r1, r5
 8011180:	1e5e      	subs	r6, r3, #1
 8011182:	4ba2      	ldr	r3, [pc, #648]	; (801140c <_dtoa_r+0x69c>)
 8011184:	f7f0 fc50 	bl	8001a28 <__aeabi_dmul>
 8011188:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801118a:	9008      	str	r0, [sp, #32]
 801118c:	9109      	str	r1, [sp, #36]	; 0x24
 801118e:	3301      	adds	r3, #1
 8011190:	9310      	str	r3, [sp, #64]	; 0x40
 8011192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011194:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011196:	9c08      	ldr	r4, [sp, #32]
 8011198:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801119a:	9314      	str	r3, [sp, #80]	; 0x50
 801119c:	f7f1 fa96 	bl	80026cc <__aeabi_i2d>
 80111a0:	0022      	movs	r2, r4
 80111a2:	002b      	movs	r3, r5
 80111a4:	f7f0 fc40 	bl	8001a28 <__aeabi_dmul>
 80111a8:	2200      	movs	r2, #0
 80111aa:	4b99      	ldr	r3, [pc, #612]	; (8011410 <_dtoa_r+0x6a0>)
 80111ac:	f7ef fcfe 	bl	8000bac <__aeabi_dadd>
 80111b0:	9010      	str	r0, [sp, #64]	; 0x40
 80111b2:	9111      	str	r1, [sp, #68]	; 0x44
 80111b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80111b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80111b8:	9208      	str	r2, [sp, #32]
 80111ba:	9309      	str	r3, [sp, #36]	; 0x24
 80111bc:	4a95      	ldr	r2, [pc, #596]	; (8011414 <_dtoa_r+0x6a4>)
 80111be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80111c0:	4694      	mov	ip, r2
 80111c2:	4463      	add	r3, ip
 80111c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80111c6:	9309      	str	r3, [sp, #36]	; 0x24
 80111c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d161      	bne.n	8011292 <_dtoa_r+0x522>
 80111ce:	2200      	movs	r2, #0
 80111d0:	0020      	movs	r0, r4
 80111d2:	0029      	movs	r1, r5
 80111d4:	4b90      	ldr	r3, [pc, #576]	; (8011418 <_dtoa_r+0x6a8>)
 80111d6:	f7f0 fe93 	bl	8001f00 <__aeabi_dsub>
 80111da:	9a08      	ldr	r2, [sp, #32]
 80111dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80111de:	0004      	movs	r4, r0
 80111e0:	000d      	movs	r5, r1
 80111e2:	f7ef f953 	bl	800048c <__aeabi_dcmpgt>
 80111e6:	2800      	cmp	r0, #0
 80111e8:	d000      	beq.n	80111ec <_dtoa_r+0x47c>
 80111ea:	e2af      	b.n	801174c <_dtoa_r+0x9dc>
 80111ec:	488b      	ldr	r0, [pc, #556]	; (801141c <_dtoa_r+0x6ac>)
 80111ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 80111f0:	4684      	mov	ip, r0
 80111f2:	4461      	add	r1, ip
 80111f4:	000b      	movs	r3, r1
 80111f6:	0020      	movs	r0, r4
 80111f8:	0029      	movs	r1, r5
 80111fa:	9a08      	ldr	r2, [sp, #32]
 80111fc:	f7ef f932 	bl	8000464 <__aeabi_dcmplt>
 8011200:	2800      	cmp	r0, #0
 8011202:	d000      	beq.n	8011206 <_dtoa_r+0x496>
 8011204:	e29f      	b.n	8011746 <_dtoa_r+0x9d6>
 8011206:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011208:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801120a:	9308      	str	r3, [sp, #32]
 801120c:	9409      	str	r4, [sp, #36]	; 0x24
 801120e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011210:	2b00      	cmp	r3, #0
 8011212:	da00      	bge.n	8011216 <_dtoa_r+0x4a6>
 8011214:	e172      	b.n	80114fc <_dtoa_r+0x78c>
 8011216:	9a02      	ldr	r2, [sp, #8]
 8011218:	2a0e      	cmp	r2, #14
 801121a:	dd00      	ble.n	801121e <_dtoa_r+0x4ae>
 801121c:	e16e      	b.n	80114fc <_dtoa_r+0x78c>
 801121e:	4b78      	ldr	r3, [pc, #480]	; (8011400 <_dtoa_r+0x690>)
 8011220:	00d2      	lsls	r2, r2, #3
 8011222:	189b      	adds	r3, r3, r2
 8011224:	685c      	ldr	r4, [r3, #4]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	930a      	str	r3, [sp, #40]	; 0x28
 801122a:	940b      	str	r4, [sp, #44]	; 0x2c
 801122c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801122e:	2b00      	cmp	r3, #0
 8011230:	db00      	blt.n	8011234 <_dtoa_r+0x4c4>
 8011232:	e0f7      	b.n	8011424 <_dtoa_r+0x6b4>
 8011234:	9b07      	ldr	r3, [sp, #28]
 8011236:	2b00      	cmp	r3, #0
 8011238:	dd00      	ble.n	801123c <_dtoa_r+0x4cc>
 801123a:	e0f3      	b.n	8011424 <_dtoa_r+0x6b4>
 801123c:	d000      	beq.n	8011240 <_dtoa_r+0x4d0>
 801123e:	e282      	b.n	8011746 <_dtoa_r+0x9d6>
 8011240:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011242:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011244:	2200      	movs	r2, #0
 8011246:	4b74      	ldr	r3, [pc, #464]	; (8011418 <_dtoa_r+0x6a8>)
 8011248:	f7f0 fbee 	bl	8001a28 <__aeabi_dmul>
 801124c:	9a08      	ldr	r2, [sp, #32]
 801124e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011250:	f7ef f926 	bl	80004a0 <__aeabi_dcmpge>
 8011254:	9e07      	ldr	r6, [sp, #28]
 8011256:	0035      	movs	r5, r6
 8011258:	2800      	cmp	r0, #0
 801125a:	d000      	beq.n	801125e <_dtoa_r+0x4ee>
 801125c:	e259      	b.n	8011712 <_dtoa_r+0x9a2>
 801125e:	9b06      	ldr	r3, [sp, #24]
 8011260:	9a06      	ldr	r2, [sp, #24]
 8011262:	3301      	adds	r3, #1
 8011264:	9308      	str	r3, [sp, #32]
 8011266:	2331      	movs	r3, #49	; 0x31
 8011268:	7013      	strb	r3, [r2, #0]
 801126a:	9b02      	ldr	r3, [sp, #8]
 801126c:	3301      	adds	r3, #1
 801126e:	9302      	str	r3, [sp, #8]
 8011270:	e254      	b.n	801171c <_dtoa_r+0x9ac>
 8011272:	4234      	tst	r4, r6
 8011274:	d007      	beq.n	8011286 <_dtoa_r+0x516>
 8011276:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011278:	3301      	adds	r3, #1
 801127a:	9310      	str	r3, [sp, #64]	; 0x40
 801127c:	682a      	ldr	r2, [r5, #0]
 801127e:	686b      	ldr	r3, [r5, #4]
 8011280:	f7f0 fbd2 	bl	8001a28 <__aeabi_dmul>
 8011284:	0033      	movs	r3, r6
 8011286:	1064      	asrs	r4, r4, #1
 8011288:	3508      	adds	r5, #8
 801128a:	e75a      	b.n	8011142 <_dtoa_r+0x3d2>
 801128c:	9e02      	ldr	r6, [sp, #8]
 801128e:	9b07      	ldr	r3, [sp, #28]
 8011290:	e780      	b.n	8011194 <_dtoa_r+0x424>
 8011292:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011294:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011296:	1e5a      	subs	r2, r3, #1
 8011298:	4b59      	ldr	r3, [pc, #356]	; (8011400 <_dtoa_r+0x690>)
 801129a:	00d2      	lsls	r2, r2, #3
 801129c:	189b      	adds	r3, r3, r2
 801129e:	681a      	ldr	r2, [r3, #0]
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	2900      	cmp	r1, #0
 80112a4:	d051      	beq.n	801134a <_dtoa_r+0x5da>
 80112a6:	2000      	movs	r0, #0
 80112a8:	495d      	ldr	r1, [pc, #372]	; (8011420 <_dtoa_r+0x6b0>)
 80112aa:	f7ef ffbb 	bl	8001224 <__aeabi_ddiv>
 80112ae:	9a08      	ldr	r2, [sp, #32]
 80112b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112b2:	f7f0 fe25 	bl	8001f00 <__aeabi_dsub>
 80112b6:	9a06      	ldr	r2, [sp, #24]
 80112b8:	9b06      	ldr	r3, [sp, #24]
 80112ba:	4694      	mov	ip, r2
 80112bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80112be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80112c0:	9010      	str	r0, [sp, #64]	; 0x40
 80112c2:	9111      	str	r1, [sp, #68]	; 0x44
 80112c4:	4463      	add	r3, ip
 80112c6:	9319      	str	r3, [sp, #100]	; 0x64
 80112c8:	0029      	movs	r1, r5
 80112ca:	0020      	movs	r0, r4
 80112cc:	f7f1 f9c8 	bl	8002660 <__aeabi_d2iz>
 80112d0:	9014      	str	r0, [sp, #80]	; 0x50
 80112d2:	f7f1 f9fb 	bl	80026cc <__aeabi_i2d>
 80112d6:	0002      	movs	r2, r0
 80112d8:	000b      	movs	r3, r1
 80112da:	0020      	movs	r0, r4
 80112dc:	0029      	movs	r1, r5
 80112de:	f7f0 fe0f 	bl	8001f00 <__aeabi_dsub>
 80112e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80112e6:	3301      	adds	r3, #1
 80112e8:	9308      	str	r3, [sp, #32]
 80112ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80112ec:	0004      	movs	r4, r0
 80112ee:	3330      	adds	r3, #48	; 0x30
 80112f0:	7013      	strb	r3, [r2, #0]
 80112f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80112f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80112f6:	000d      	movs	r5, r1
 80112f8:	f7ef f8b4 	bl	8000464 <__aeabi_dcmplt>
 80112fc:	2800      	cmp	r0, #0
 80112fe:	d175      	bne.n	80113ec <_dtoa_r+0x67c>
 8011300:	0022      	movs	r2, r4
 8011302:	002b      	movs	r3, r5
 8011304:	2000      	movs	r0, #0
 8011306:	4940      	ldr	r1, [pc, #256]	; (8011408 <_dtoa_r+0x698>)
 8011308:	f7f0 fdfa 	bl	8001f00 <__aeabi_dsub>
 801130c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801130e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011310:	f7ef f8a8 	bl	8000464 <__aeabi_dcmplt>
 8011314:	2800      	cmp	r0, #0
 8011316:	d000      	beq.n	801131a <_dtoa_r+0x5aa>
 8011318:	e0d2      	b.n	80114c0 <_dtoa_r+0x750>
 801131a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801131c:	9a08      	ldr	r2, [sp, #32]
 801131e:	4293      	cmp	r3, r2
 8011320:	d100      	bne.n	8011324 <_dtoa_r+0x5b4>
 8011322:	e770      	b.n	8011206 <_dtoa_r+0x496>
 8011324:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011326:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011328:	2200      	movs	r2, #0
 801132a:	4b38      	ldr	r3, [pc, #224]	; (801140c <_dtoa_r+0x69c>)
 801132c:	f7f0 fb7c 	bl	8001a28 <__aeabi_dmul>
 8011330:	4b36      	ldr	r3, [pc, #216]	; (801140c <_dtoa_r+0x69c>)
 8011332:	9010      	str	r0, [sp, #64]	; 0x40
 8011334:	9111      	str	r1, [sp, #68]	; 0x44
 8011336:	2200      	movs	r2, #0
 8011338:	0020      	movs	r0, r4
 801133a:	0029      	movs	r1, r5
 801133c:	f7f0 fb74 	bl	8001a28 <__aeabi_dmul>
 8011340:	9b08      	ldr	r3, [sp, #32]
 8011342:	0004      	movs	r4, r0
 8011344:	000d      	movs	r5, r1
 8011346:	9317      	str	r3, [sp, #92]	; 0x5c
 8011348:	e7be      	b.n	80112c8 <_dtoa_r+0x558>
 801134a:	9808      	ldr	r0, [sp, #32]
 801134c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801134e:	f7f0 fb6b 	bl	8001a28 <__aeabi_dmul>
 8011352:	9a06      	ldr	r2, [sp, #24]
 8011354:	9b06      	ldr	r3, [sp, #24]
 8011356:	4694      	mov	ip, r2
 8011358:	9308      	str	r3, [sp, #32]
 801135a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801135c:	9010      	str	r0, [sp, #64]	; 0x40
 801135e:	9111      	str	r1, [sp, #68]	; 0x44
 8011360:	4463      	add	r3, ip
 8011362:	9319      	str	r3, [sp, #100]	; 0x64
 8011364:	0029      	movs	r1, r5
 8011366:	0020      	movs	r0, r4
 8011368:	f7f1 f97a 	bl	8002660 <__aeabi_d2iz>
 801136c:	9017      	str	r0, [sp, #92]	; 0x5c
 801136e:	f7f1 f9ad 	bl	80026cc <__aeabi_i2d>
 8011372:	0002      	movs	r2, r0
 8011374:	000b      	movs	r3, r1
 8011376:	0020      	movs	r0, r4
 8011378:	0029      	movs	r1, r5
 801137a:	f7f0 fdc1 	bl	8001f00 <__aeabi_dsub>
 801137e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011380:	9a08      	ldr	r2, [sp, #32]
 8011382:	3330      	adds	r3, #48	; 0x30
 8011384:	7013      	strb	r3, [r2, #0]
 8011386:	0013      	movs	r3, r2
 8011388:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801138a:	3301      	adds	r3, #1
 801138c:	0004      	movs	r4, r0
 801138e:	000d      	movs	r5, r1
 8011390:	9308      	str	r3, [sp, #32]
 8011392:	4293      	cmp	r3, r2
 8011394:	d12c      	bne.n	80113f0 <_dtoa_r+0x680>
 8011396:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011398:	9911      	ldr	r1, [sp, #68]	; 0x44
 801139a:	9a06      	ldr	r2, [sp, #24]
 801139c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801139e:	4694      	mov	ip, r2
 80113a0:	4463      	add	r3, ip
 80113a2:	2200      	movs	r2, #0
 80113a4:	9308      	str	r3, [sp, #32]
 80113a6:	4b1e      	ldr	r3, [pc, #120]	; (8011420 <_dtoa_r+0x6b0>)
 80113a8:	f7ef fc00 	bl	8000bac <__aeabi_dadd>
 80113ac:	0002      	movs	r2, r0
 80113ae:	000b      	movs	r3, r1
 80113b0:	0020      	movs	r0, r4
 80113b2:	0029      	movs	r1, r5
 80113b4:	f7ef f86a 	bl	800048c <__aeabi_dcmpgt>
 80113b8:	2800      	cmp	r0, #0
 80113ba:	d000      	beq.n	80113be <_dtoa_r+0x64e>
 80113bc:	e080      	b.n	80114c0 <_dtoa_r+0x750>
 80113be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80113c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80113c2:	2000      	movs	r0, #0
 80113c4:	4916      	ldr	r1, [pc, #88]	; (8011420 <_dtoa_r+0x6b0>)
 80113c6:	f7f0 fd9b 	bl	8001f00 <__aeabi_dsub>
 80113ca:	0002      	movs	r2, r0
 80113cc:	000b      	movs	r3, r1
 80113ce:	0020      	movs	r0, r4
 80113d0:	0029      	movs	r1, r5
 80113d2:	f7ef f847 	bl	8000464 <__aeabi_dcmplt>
 80113d6:	2800      	cmp	r0, #0
 80113d8:	d100      	bne.n	80113dc <_dtoa_r+0x66c>
 80113da:	e714      	b.n	8011206 <_dtoa_r+0x496>
 80113dc:	9b08      	ldr	r3, [sp, #32]
 80113de:	001a      	movs	r2, r3
 80113e0:	3a01      	subs	r2, #1
 80113e2:	9208      	str	r2, [sp, #32]
 80113e4:	7812      	ldrb	r2, [r2, #0]
 80113e6:	2a30      	cmp	r2, #48	; 0x30
 80113e8:	d0f8      	beq.n	80113dc <_dtoa_r+0x66c>
 80113ea:	9308      	str	r3, [sp, #32]
 80113ec:	9602      	str	r6, [sp, #8]
 80113ee:	e055      	b.n	801149c <_dtoa_r+0x72c>
 80113f0:	2200      	movs	r2, #0
 80113f2:	4b06      	ldr	r3, [pc, #24]	; (801140c <_dtoa_r+0x69c>)
 80113f4:	f7f0 fb18 	bl	8001a28 <__aeabi_dmul>
 80113f8:	0004      	movs	r4, r0
 80113fa:	000d      	movs	r5, r1
 80113fc:	e7b2      	b.n	8011364 <_dtoa_r+0x5f4>
 80113fe:	46c0      	nop			; (mov r8, r8)
 8011400:	08012db0 	.word	0x08012db0
 8011404:	08012d88 	.word	0x08012d88
 8011408:	3ff00000 	.word	0x3ff00000
 801140c:	40240000 	.word	0x40240000
 8011410:	401c0000 	.word	0x401c0000
 8011414:	fcc00000 	.word	0xfcc00000
 8011418:	40140000 	.word	0x40140000
 801141c:	7cc00000 	.word	0x7cc00000
 8011420:	3fe00000 	.word	0x3fe00000
 8011424:	9b07      	ldr	r3, [sp, #28]
 8011426:	9e06      	ldr	r6, [sp, #24]
 8011428:	3b01      	subs	r3, #1
 801142a:	199b      	adds	r3, r3, r6
 801142c:	930c      	str	r3, [sp, #48]	; 0x30
 801142e:	9c08      	ldr	r4, [sp, #32]
 8011430:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011436:	0020      	movs	r0, r4
 8011438:	0029      	movs	r1, r5
 801143a:	f7ef fef3 	bl	8001224 <__aeabi_ddiv>
 801143e:	f7f1 f90f 	bl	8002660 <__aeabi_d2iz>
 8011442:	9007      	str	r0, [sp, #28]
 8011444:	f7f1 f942 	bl	80026cc <__aeabi_i2d>
 8011448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801144a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801144c:	f7f0 faec 	bl	8001a28 <__aeabi_dmul>
 8011450:	0002      	movs	r2, r0
 8011452:	000b      	movs	r3, r1
 8011454:	0020      	movs	r0, r4
 8011456:	0029      	movs	r1, r5
 8011458:	f7f0 fd52 	bl	8001f00 <__aeabi_dsub>
 801145c:	0033      	movs	r3, r6
 801145e:	9a07      	ldr	r2, [sp, #28]
 8011460:	3601      	adds	r6, #1
 8011462:	3230      	adds	r2, #48	; 0x30
 8011464:	701a      	strb	r2, [r3, #0]
 8011466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011468:	9608      	str	r6, [sp, #32]
 801146a:	429a      	cmp	r2, r3
 801146c:	d139      	bne.n	80114e2 <_dtoa_r+0x772>
 801146e:	0002      	movs	r2, r0
 8011470:	000b      	movs	r3, r1
 8011472:	f7ef fb9b 	bl	8000bac <__aeabi_dadd>
 8011476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801147a:	0004      	movs	r4, r0
 801147c:	000d      	movs	r5, r1
 801147e:	f7ef f805 	bl	800048c <__aeabi_dcmpgt>
 8011482:	2800      	cmp	r0, #0
 8011484:	d11b      	bne.n	80114be <_dtoa_r+0x74e>
 8011486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801148a:	0020      	movs	r0, r4
 801148c:	0029      	movs	r1, r5
 801148e:	f7ee ffe3 	bl	8000458 <__aeabi_dcmpeq>
 8011492:	2800      	cmp	r0, #0
 8011494:	d002      	beq.n	801149c <_dtoa_r+0x72c>
 8011496:	9b07      	ldr	r3, [sp, #28]
 8011498:	07db      	lsls	r3, r3, #31
 801149a:	d410      	bmi.n	80114be <_dtoa_r+0x74e>
 801149c:	0038      	movs	r0, r7
 801149e:	9905      	ldr	r1, [sp, #20]
 80114a0:	f7fe fb00 	bl	800faa4 <_Bfree>
 80114a4:	2300      	movs	r3, #0
 80114a6:	9a08      	ldr	r2, [sp, #32]
 80114a8:	9802      	ldr	r0, [sp, #8]
 80114aa:	7013      	strb	r3, [r2, #0]
 80114ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80114ae:	3001      	adds	r0, #1
 80114b0:	6018      	str	r0, [r3, #0]
 80114b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d100      	bne.n	80114ba <_dtoa_r+0x74a>
 80114b8:	e4a6      	b.n	8010e08 <_dtoa_r+0x98>
 80114ba:	601a      	str	r2, [r3, #0]
 80114bc:	e4a4      	b.n	8010e08 <_dtoa_r+0x98>
 80114be:	9e02      	ldr	r6, [sp, #8]
 80114c0:	9b08      	ldr	r3, [sp, #32]
 80114c2:	9308      	str	r3, [sp, #32]
 80114c4:	3b01      	subs	r3, #1
 80114c6:	781a      	ldrb	r2, [r3, #0]
 80114c8:	2a39      	cmp	r2, #57	; 0x39
 80114ca:	d106      	bne.n	80114da <_dtoa_r+0x76a>
 80114cc:	9a06      	ldr	r2, [sp, #24]
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d1f7      	bne.n	80114c2 <_dtoa_r+0x752>
 80114d2:	2230      	movs	r2, #48	; 0x30
 80114d4:	9906      	ldr	r1, [sp, #24]
 80114d6:	3601      	adds	r6, #1
 80114d8:	700a      	strb	r2, [r1, #0]
 80114da:	781a      	ldrb	r2, [r3, #0]
 80114dc:	3201      	adds	r2, #1
 80114de:	701a      	strb	r2, [r3, #0]
 80114e0:	e784      	b.n	80113ec <_dtoa_r+0x67c>
 80114e2:	2200      	movs	r2, #0
 80114e4:	4baa      	ldr	r3, [pc, #680]	; (8011790 <_dtoa_r+0xa20>)
 80114e6:	f7f0 fa9f 	bl	8001a28 <__aeabi_dmul>
 80114ea:	2200      	movs	r2, #0
 80114ec:	2300      	movs	r3, #0
 80114ee:	0004      	movs	r4, r0
 80114f0:	000d      	movs	r5, r1
 80114f2:	f7ee ffb1 	bl	8000458 <__aeabi_dcmpeq>
 80114f6:	2800      	cmp	r0, #0
 80114f8:	d09b      	beq.n	8011432 <_dtoa_r+0x6c2>
 80114fa:	e7cf      	b.n	801149c <_dtoa_r+0x72c>
 80114fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80114fe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011500:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011502:	2d00      	cmp	r5, #0
 8011504:	d012      	beq.n	801152c <_dtoa_r+0x7bc>
 8011506:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011508:	2a01      	cmp	r2, #1
 801150a:	dc66      	bgt.n	80115da <_dtoa_r+0x86a>
 801150c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801150e:	2a00      	cmp	r2, #0
 8011510:	d05d      	beq.n	80115ce <_dtoa_r+0x85e>
 8011512:	4aa0      	ldr	r2, [pc, #640]	; (8011794 <_dtoa_r+0xa24>)
 8011514:	189b      	adds	r3, r3, r2
 8011516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011518:	2101      	movs	r1, #1
 801151a:	18d2      	adds	r2, r2, r3
 801151c:	920a      	str	r2, [sp, #40]	; 0x28
 801151e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011520:	0038      	movs	r0, r7
 8011522:	18d3      	adds	r3, r2, r3
 8011524:	930d      	str	r3, [sp, #52]	; 0x34
 8011526:	f7fe fbb9 	bl	800fc9c <__i2b>
 801152a:	0005      	movs	r5, r0
 801152c:	2c00      	cmp	r4, #0
 801152e:	dd0e      	ble.n	801154e <_dtoa_r+0x7de>
 8011530:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011532:	2b00      	cmp	r3, #0
 8011534:	dd0b      	ble.n	801154e <_dtoa_r+0x7de>
 8011536:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011538:	0023      	movs	r3, r4
 801153a:	4294      	cmp	r4, r2
 801153c:	dd00      	ble.n	8011540 <_dtoa_r+0x7d0>
 801153e:	0013      	movs	r3, r2
 8011540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011542:	1ae4      	subs	r4, r4, r3
 8011544:	1ad2      	subs	r2, r2, r3
 8011546:	920a      	str	r2, [sp, #40]	; 0x28
 8011548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801154a:	1ad3      	subs	r3, r2, r3
 801154c:	930d      	str	r3, [sp, #52]	; 0x34
 801154e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011550:	2b00      	cmp	r3, #0
 8011552:	d01f      	beq.n	8011594 <_dtoa_r+0x824>
 8011554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011556:	2b00      	cmp	r3, #0
 8011558:	d054      	beq.n	8011604 <_dtoa_r+0x894>
 801155a:	2e00      	cmp	r6, #0
 801155c:	dd11      	ble.n	8011582 <_dtoa_r+0x812>
 801155e:	0029      	movs	r1, r5
 8011560:	0032      	movs	r2, r6
 8011562:	0038      	movs	r0, r7
 8011564:	f7fe fc60 	bl	800fe28 <__pow5mult>
 8011568:	9a05      	ldr	r2, [sp, #20]
 801156a:	0001      	movs	r1, r0
 801156c:	0005      	movs	r5, r0
 801156e:	0038      	movs	r0, r7
 8011570:	f7fe fbaa 	bl	800fcc8 <__multiply>
 8011574:	9905      	ldr	r1, [sp, #20]
 8011576:	9014      	str	r0, [sp, #80]	; 0x50
 8011578:	0038      	movs	r0, r7
 801157a:	f7fe fa93 	bl	800faa4 <_Bfree>
 801157e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011580:	9305      	str	r3, [sp, #20]
 8011582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011584:	1b9a      	subs	r2, r3, r6
 8011586:	42b3      	cmp	r3, r6
 8011588:	d004      	beq.n	8011594 <_dtoa_r+0x824>
 801158a:	0038      	movs	r0, r7
 801158c:	9905      	ldr	r1, [sp, #20]
 801158e:	f7fe fc4b 	bl	800fe28 <__pow5mult>
 8011592:	9005      	str	r0, [sp, #20]
 8011594:	2101      	movs	r1, #1
 8011596:	0038      	movs	r0, r7
 8011598:	f7fe fb80 	bl	800fc9c <__i2b>
 801159c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801159e:	0006      	movs	r6, r0
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	dd31      	ble.n	8011608 <_dtoa_r+0x898>
 80115a4:	001a      	movs	r2, r3
 80115a6:	0001      	movs	r1, r0
 80115a8:	0038      	movs	r0, r7
 80115aa:	f7fe fc3d 	bl	800fe28 <__pow5mult>
 80115ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80115b0:	0006      	movs	r6, r0
 80115b2:	2b01      	cmp	r3, #1
 80115b4:	dd2d      	ble.n	8011612 <_dtoa_r+0x8a2>
 80115b6:	2300      	movs	r3, #0
 80115b8:	930e      	str	r3, [sp, #56]	; 0x38
 80115ba:	6933      	ldr	r3, [r6, #16]
 80115bc:	3303      	adds	r3, #3
 80115be:	009b      	lsls	r3, r3, #2
 80115c0:	18f3      	adds	r3, r6, r3
 80115c2:	6858      	ldr	r0, [r3, #4]
 80115c4:	f7fe fb22 	bl	800fc0c <__hi0bits>
 80115c8:	2320      	movs	r3, #32
 80115ca:	1a18      	subs	r0, r3, r0
 80115cc:	e039      	b.n	8011642 <_dtoa_r+0x8d2>
 80115ce:	2336      	movs	r3, #54	; 0x36
 80115d0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80115d2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80115d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80115d6:	1a9b      	subs	r3, r3, r2
 80115d8:	e79d      	b.n	8011516 <_dtoa_r+0x7a6>
 80115da:	9b07      	ldr	r3, [sp, #28]
 80115dc:	1e5e      	subs	r6, r3, #1
 80115de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115e0:	42b3      	cmp	r3, r6
 80115e2:	db07      	blt.n	80115f4 <_dtoa_r+0x884>
 80115e4:	1b9e      	subs	r6, r3, r6
 80115e6:	9b07      	ldr	r3, [sp, #28]
 80115e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	da93      	bge.n	8011516 <_dtoa_r+0x7a6>
 80115ee:	1ae4      	subs	r4, r4, r3
 80115f0:	2300      	movs	r3, #0
 80115f2:	e790      	b.n	8011516 <_dtoa_r+0x7a6>
 80115f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80115f8:	1af3      	subs	r3, r6, r3
 80115fa:	18d3      	adds	r3, r2, r3
 80115fc:	960e      	str	r6, [sp, #56]	; 0x38
 80115fe:	9315      	str	r3, [sp, #84]	; 0x54
 8011600:	2600      	movs	r6, #0
 8011602:	e7f0      	b.n	80115e6 <_dtoa_r+0x876>
 8011604:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011606:	e7c0      	b.n	801158a <_dtoa_r+0x81a>
 8011608:	2300      	movs	r3, #0
 801160a:	930e      	str	r3, [sp, #56]	; 0x38
 801160c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801160e:	2b01      	cmp	r3, #1
 8011610:	dc13      	bgt.n	801163a <_dtoa_r+0x8ca>
 8011612:	2300      	movs	r3, #0
 8011614:	930e      	str	r3, [sp, #56]	; 0x38
 8011616:	9b08      	ldr	r3, [sp, #32]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d10e      	bne.n	801163a <_dtoa_r+0x8ca>
 801161c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801161e:	031b      	lsls	r3, r3, #12
 8011620:	d10b      	bne.n	801163a <_dtoa_r+0x8ca>
 8011622:	4b5d      	ldr	r3, [pc, #372]	; (8011798 <_dtoa_r+0xa28>)
 8011624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011626:	4213      	tst	r3, r2
 8011628:	d007      	beq.n	801163a <_dtoa_r+0x8ca>
 801162a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801162c:	3301      	adds	r3, #1
 801162e:	930a      	str	r3, [sp, #40]	; 0x28
 8011630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011632:	3301      	adds	r3, #1
 8011634:	930d      	str	r3, [sp, #52]	; 0x34
 8011636:	2301      	movs	r3, #1
 8011638:	930e      	str	r3, [sp, #56]	; 0x38
 801163a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801163c:	2001      	movs	r0, #1
 801163e:	2b00      	cmp	r3, #0
 8011640:	d1bb      	bne.n	80115ba <_dtoa_r+0x84a>
 8011642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011644:	221f      	movs	r2, #31
 8011646:	1818      	adds	r0, r3, r0
 8011648:	0003      	movs	r3, r0
 801164a:	4013      	ands	r3, r2
 801164c:	4210      	tst	r0, r2
 801164e:	d046      	beq.n	80116de <_dtoa_r+0x96e>
 8011650:	3201      	adds	r2, #1
 8011652:	1ad2      	subs	r2, r2, r3
 8011654:	2a04      	cmp	r2, #4
 8011656:	dd3f      	ble.n	80116d8 <_dtoa_r+0x968>
 8011658:	221c      	movs	r2, #28
 801165a:	1ad3      	subs	r3, r2, r3
 801165c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801165e:	18e4      	adds	r4, r4, r3
 8011660:	18d2      	adds	r2, r2, r3
 8011662:	920a      	str	r2, [sp, #40]	; 0x28
 8011664:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011666:	18d3      	adds	r3, r2, r3
 8011668:	930d      	str	r3, [sp, #52]	; 0x34
 801166a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801166c:	2b00      	cmp	r3, #0
 801166e:	dd05      	ble.n	801167c <_dtoa_r+0x90c>
 8011670:	001a      	movs	r2, r3
 8011672:	0038      	movs	r0, r7
 8011674:	9905      	ldr	r1, [sp, #20]
 8011676:	f7fe fc33 	bl	800fee0 <__lshift>
 801167a:	9005      	str	r0, [sp, #20]
 801167c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801167e:	2b00      	cmp	r3, #0
 8011680:	dd05      	ble.n	801168e <_dtoa_r+0x91e>
 8011682:	0031      	movs	r1, r6
 8011684:	001a      	movs	r2, r3
 8011686:	0038      	movs	r0, r7
 8011688:	f7fe fc2a 	bl	800fee0 <__lshift>
 801168c:	0006      	movs	r6, r0
 801168e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011690:	2b00      	cmp	r3, #0
 8011692:	d026      	beq.n	80116e2 <_dtoa_r+0x972>
 8011694:	0031      	movs	r1, r6
 8011696:	9805      	ldr	r0, [sp, #20]
 8011698:	f7fe fc90 	bl	800ffbc <__mcmp>
 801169c:	2800      	cmp	r0, #0
 801169e:	da20      	bge.n	80116e2 <_dtoa_r+0x972>
 80116a0:	9b02      	ldr	r3, [sp, #8]
 80116a2:	220a      	movs	r2, #10
 80116a4:	3b01      	subs	r3, #1
 80116a6:	9302      	str	r3, [sp, #8]
 80116a8:	0038      	movs	r0, r7
 80116aa:	2300      	movs	r3, #0
 80116ac:	9905      	ldr	r1, [sp, #20]
 80116ae:	f7fe fa1d 	bl	800faec <__multadd>
 80116b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80116b4:	9005      	str	r0, [sp, #20]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d100      	bne.n	80116bc <_dtoa_r+0x94c>
 80116ba:	e166      	b.n	801198a <_dtoa_r+0xc1a>
 80116bc:	2300      	movs	r3, #0
 80116be:	0029      	movs	r1, r5
 80116c0:	220a      	movs	r2, #10
 80116c2:	0038      	movs	r0, r7
 80116c4:	f7fe fa12 	bl	800faec <__multadd>
 80116c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116ca:	0005      	movs	r5, r0
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	dc47      	bgt.n	8011760 <_dtoa_r+0x9f0>
 80116d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80116d2:	2b02      	cmp	r3, #2
 80116d4:	dc0d      	bgt.n	80116f2 <_dtoa_r+0x982>
 80116d6:	e043      	b.n	8011760 <_dtoa_r+0x9f0>
 80116d8:	2a04      	cmp	r2, #4
 80116da:	d0c6      	beq.n	801166a <_dtoa_r+0x8fa>
 80116dc:	0013      	movs	r3, r2
 80116de:	331c      	adds	r3, #28
 80116e0:	e7bc      	b.n	801165c <_dtoa_r+0x8ec>
 80116e2:	9b07      	ldr	r3, [sp, #28]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	dc35      	bgt.n	8011754 <_dtoa_r+0x9e4>
 80116e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80116ea:	2b02      	cmp	r3, #2
 80116ec:	dd32      	ble.n	8011754 <_dtoa_r+0x9e4>
 80116ee:	9b07      	ldr	r3, [sp, #28]
 80116f0:	930c      	str	r3, [sp, #48]	; 0x30
 80116f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d10c      	bne.n	8011712 <_dtoa_r+0x9a2>
 80116f8:	0031      	movs	r1, r6
 80116fa:	2205      	movs	r2, #5
 80116fc:	0038      	movs	r0, r7
 80116fe:	f7fe f9f5 	bl	800faec <__multadd>
 8011702:	0006      	movs	r6, r0
 8011704:	0001      	movs	r1, r0
 8011706:	9805      	ldr	r0, [sp, #20]
 8011708:	f7fe fc58 	bl	800ffbc <__mcmp>
 801170c:	2800      	cmp	r0, #0
 801170e:	dd00      	ble.n	8011712 <_dtoa_r+0x9a2>
 8011710:	e5a5      	b.n	801125e <_dtoa_r+0x4ee>
 8011712:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011714:	43db      	mvns	r3, r3
 8011716:	9302      	str	r3, [sp, #8]
 8011718:	9b06      	ldr	r3, [sp, #24]
 801171a:	9308      	str	r3, [sp, #32]
 801171c:	2400      	movs	r4, #0
 801171e:	0031      	movs	r1, r6
 8011720:	0038      	movs	r0, r7
 8011722:	f7fe f9bf 	bl	800faa4 <_Bfree>
 8011726:	2d00      	cmp	r5, #0
 8011728:	d100      	bne.n	801172c <_dtoa_r+0x9bc>
 801172a:	e6b7      	b.n	801149c <_dtoa_r+0x72c>
 801172c:	2c00      	cmp	r4, #0
 801172e:	d005      	beq.n	801173c <_dtoa_r+0x9cc>
 8011730:	42ac      	cmp	r4, r5
 8011732:	d003      	beq.n	801173c <_dtoa_r+0x9cc>
 8011734:	0021      	movs	r1, r4
 8011736:	0038      	movs	r0, r7
 8011738:	f7fe f9b4 	bl	800faa4 <_Bfree>
 801173c:	0029      	movs	r1, r5
 801173e:	0038      	movs	r0, r7
 8011740:	f7fe f9b0 	bl	800faa4 <_Bfree>
 8011744:	e6aa      	b.n	801149c <_dtoa_r+0x72c>
 8011746:	2600      	movs	r6, #0
 8011748:	0035      	movs	r5, r6
 801174a:	e7e2      	b.n	8011712 <_dtoa_r+0x9a2>
 801174c:	9602      	str	r6, [sp, #8]
 801174e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011750:	0035      	movs	r5, r6
 8011752:	e584      	b.n	801125e <_dtoa_r+0x4ee>
 8011754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011756:	2b00      	cmp	r3, #0
 8011758:	d100      	bne.n	801175c <_dtoa_r+0x9ec>
 801175a:	e0ce      	b.n	80118fa <_dtoa_r+0xb8a>
 801175c:	9b07      	ldr	r3, [sp, #28]
 801175e:	930c      	str	r3, [sp, #48]	; 0x30
 8011760:	2c00      	cmp	r4, #0
 8011762:	dd05      	ble.n	8011770 <_dtoa_r+0xa00>
 8011764:	0029      	movs	r1, r5
 8011766:	0022      	movs	r2, r4
 8011768:	0038      	movs	r0, r7
 801176a:	f7fe fbb9 	bl	800fee0 <__lshift>
 801176e:	0005      	movs	r5, r0
 8011770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011772:	0028      	movs	r0, r5
 8011774:	2b00      	cmp	r3, #0
 8011776:	d022      	beq.n	80117be <_dtoa_r+0xa4e>
 8011778:	0038      	movs	r0, r7
 801177a:	6869      	ldr	r1, [r5, #4]
 801177c:	f7fe f94e 	bl	800fa1c <_Balloc>
 8011780:	1e04      	subs	r4, r0, #0
 8011782:	d10f      	bne.n	80117a4 <_dtoa_r+0xa34>
 8011784:	0002      	movs	r2, r0
 8011786:	4b05      	ldr	r3, [pc, #20]	; (801179c <_dtoa_r+0xa2c>)
 8011788:	4905      	ldr	r1, [pc, #20]	; (80117a0 <_dtoa_r+0xa30>)
 801178a:	f7ff fb06 	bl	8010d9a <_dtoa_r+0x2a>
 801178e:	46c0      	nop			; (mov r8, r8)
 8011790:	40240000 	.word	0x40240000
 8011794:	00000433 	.word	0x00000433
 8011798:	7ff00000 	.word	0x7ff00000
 801179c:	08012c89 	.word	0x08012c89
 80117a0:	000002ea 	.word	0x000002ea
 80117a4:	0029      	movs	r1, r5
 80117a6:	692b      	ldr	r3, [r5, #16]
 80117a8:	310c      	adds	r1, #12
 80117aa:	1c9a      	adds	r2, r3, #2
 80117ac:	0092      	lsls	r2, r2, #2
 80117ae:	300c      	adds	r0, #12
 80117b0:	f7fc fcc8 	bl	800e144 <memcpy>
 80117b4:	2201      	movs	r2, #1
 80117b6:	0021      	movs	r1, r4
 80117b8:	0038      	movs	r0, r7
 80117ba:	f7fe fb91 	bl	800fee0 <__lshift>
 80117be:	9b06      	ldr	r3, [sp, #24]
 80117c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80117c2:	930a      	str	r3, [sp, #40]	; 0x28
 80117c4:	3b01      	subs	r3, #1
 80117c6:	189b      	adds	r3, r3, r2
 80117c8:	2201      	movs	r2, #1
 80117ca:	002c      	movs	r4, r5
 80117cc:	0005      	movs	r5, r0
 80117ce:	9314      	str	r3, [sp, #80]	; 0x50
 80117d0:	9b08      	ldr	r3, [sp, #32]
 80117d2:	4013      	ands	r3, r2
 80117d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80117d6:	0031      	movs	r1, r6
 80117d8:	9805      	ldr	r0, [sp, #20]
 80117da:	f7ff fa3d 	bl	8010c58 <quorem>
 80117de:	0003      	movs	r3, r0
 80117e0:	0021      	movs	r1, r4
 80117e2:	3330      	adds	r3, #48	; 0x30
 80117e4:	900d      	str	r0, [sp, #52]	; 0x34
 80117e6:	9805      	ldr	r0, [sp, #20]
 80117e8:	9307      	str	r3, [sp, #28]
 80117ea:	f7fe fbe7 	bl	800ffbc <__mcmp>
 80117ee:	002a      	movs	r2, r5
 80117f0:	900e      	str	r0, [sp, #56]	; 0x38
 80117f2:	0031      	movs	r1, r6
 80117f4:	0038      	movs	r0, r7
 80117f6:	f7fe fbfd 	bl	800fff4 <__mdiff>
 80117fa:	68c3      	ldr	r3, [r0, #12]
 80117fc:	9008      	str	r0, [sp, #32]
 80117fe:	9310      	str	r3, [sp, #64]	; 0x40
 8011800:	2301      	movs	r3, #1
 8011802:	930c      	str	r3, [sp, #48]	; 0x30
 8011804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011806:	2b00      	cmp	r3, #0
 8011808:	d104      	bne.n	8011814 <_dtoa_r+0xaa4>
 801180a:	0001      	movs	r1, r0
 801180c:	9805      	ldr	r0, [sp, #20]
 801180e:	f7fe fbd5 	bl	800ffbc <__mcmp>
 8011812:	900c      	str	r0, [sp, #48]	; 0x30
 8011814:	0038      	movs	r0, r7
 8011816:	9908      	ldr	r1, [sp, #32]
 8011818:	f7fe f944 	bl	800faa4 <_Bfree>
 801181c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801181e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011820:	3301      	adds	r3, #1
 8011822:	9308      	str	r3, [sp, #32]
 8011824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011826:	4313      	orrs	r3, r2
 8011828:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801182a:	4313      	orrs	r3, r2
 801182c:	d10c      	bne.n	8011848 <_dtoa_r+0xad8>
 801182e:	9b07      	ldr	r3, [sp, #28]
 8011830:	2b39      	cmp	r3, #57	; 0x39
 8011832:	d026      	beq.n	8011882 <_dtoa_r+0xb12>
 8011834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011836:	2b00      	cmp	r3, #0
 8011838:	dd02      	ble.n	8011840 <_dtoa_r+0xad0>
 801183a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801183c:	3331      	adds	r3, #49	; 0x31
 801183e:	9307      	str	r3, [sp, #28]
 8011840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011842:	9a07      	ldr	r2, [sp, #28]
 8011844:	701a      	strb	r2, [r3, #0]
 8011846:	e76a      	b.n	801171e <_dtoa_r+0x9ae>
 8011848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801184a:	2b00      	cmp	r3, #0
 801184c:	db04      	blt.n	8011858 <_dtoa_r+0xae8>
 801184e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011850:	4313      	orrs	r3, r2
 8011852:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011854:	4313      	orrs	r3, r2
 8011856:	d11f      	bne.n	8011898 <_dtoa_r+0xb28>
 8011858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801185a:	2b00      	cmp	r3, #0
 801185c:	ddf0      	ble.n	8011840 <_dtoa_r+0xad0>
 801185e:	9905      	ldr	r1, [sp, #20]
 8011860:	2201      	movs	r2, #1
 8011862:	0038      	movs	r0, r7
 8011864:	f7fe fb3c 	bl	800fee0 <__lshift>
 8011868:	0031      	movs	r1, r6
 801186a:	9005      	str	r0, [sp, #20]
 801186c:	f7fe fba6 	bl	800ffbc <__mcmp>
 8011870:	2800      	cmp	r0, #0
 8011872:	dc03      	bgt.n	801187c <_dtoa_r+0xb0c>
 8011874:	d1e4      	bne.n	8011840 <_dtoa_r+0xad0>
 8011876:	9b07      	ldr	r3, [sp, #28]
 8011878:	07db      	lsls	r3, r3, #31
 801187a:	d5e1      	bpl.n	8011840 <_dtoa_r+0xad0>
 801187c:	9b07      	ldr	r3, [sp, #28]
 801187e:	2b39      	cmp	r3, #57	; 0x39
 8011880:	d1db      	bne.n	801183a <_dtoa_r+0xaca>
 8011882:	2339      	movs	r3, #57	; 0x39
 8011884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011886:	7013      	strb	r3, [r2, #0]
 8011888:	9b08      	ldr	r3, [sp, #32]
 801188a:	9308      	str	r3, [sp, #32]
 801188c:	3b01      	subs	r3, #1
 801188e:	781a      	ldrb	r2, [r3, #0]
 8011890:	2a39      	cmp	r2, #57	; 0x39
 8011892:	d068      	beq.n	8011966 <_dtoa_r+0xbf6>
 8011894:	3201      	adds	r2, #1
 8011896:	e7d5      	b.n	8011844 <_dtoa_r+0xad4>
 8011898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801189a:	2b00      	cmp	r3, #0
 801189c:	dd07      	ble.n	80118ae <_dtoa_r+0xb3e>
 801189e:	9b07      	ldr	r3, [sp, #28]
 80118a0:	2b39      	cmp	r3, #57	; 0x39
 80118a2:	d0ee      	beq.n	8011882 <_dtoa_r+0xb12>
 80118a4:	9b07      	ldr	r3, [sp, #28]
 80118a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118a8:	3301      	adds	r3, #1
 80118aa:	7013      	strb	r3, [r2, #0]
 80118ac:	e737      	b.n	801171e <_dtoa_r+0x9ae>
 80118ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118b0:	9a07      	ldr	r2, [sp, #28]
 80118b2:	701a      	strb	r2, [r3, #0]
 80118b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80118b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d03e      	beq.n	801193a <_dtoa_r+0xbca>
 80118bc:	2300      	movs	r3, #0
 80118be:	220a      	movs	r2, #10
 80118c0:	9905      	ldr	r1, [sp, #20]
 80118c2:	0038      	movs	r0, r7
 80118c4:	f7fe f912 	bl	800faec <__multadd>
 80118c8:	2300      	movs	r3, #0
 80118ca:	9005      	str	r0, [sp, #20]
 80118cc:	220a      	movs	r2, #10
 80118ce:	0021      	movs	r1, r4
 80118d0:	0038      	movs	r0, r7
 80118d2:	42ac      	cmp	r4, r5
 80118d4:	d106      	bne.n	80118e4 <_dtoa_r+0xb74>
 80118d6:	f7fe f909 	bl	800faec <__multadd>
 80118da:	0004      	movs	r4, r0
 80118dc:	0005      	movs	r5, r0
 80118de:	9b08      	ldr	r3, [sp, #32]
 80118e0:	930a      	str	r3, [sp, #40]	; 0x28
 80118e2:	e778      	b.n	80117d6 <_dtoa_r+0xa66>
 80118e4:	f7fe f902 	bl	800faec <__multadd>
 80118e8:	0029      	movs	r1, r5
 80118ea:	0004      	movs	r4, r0
 80118ec:	2300      	movs	r3, #0
 80118ee:	220a      	movs	r2, #10
 80118f0:	0038      	movs	r0, r7
 80118f2:	f7fe f8fb 	bl	800faec <__multadd>
 80118f6:	0005      	movs	r5, r0
 80118f8:	e7f1      	b.n	80118de <_dtoa_r+0xb6e>
 80118fa:	9b07      	ldr	r3, [sp, #28]
 80118fc:	930c      	str	r3, [sp, #48]	; 0x30
 80118fe:	2400      	movs	r4, #0
 8011900:	0031      	movs	r1, r6
 8011902:	9805      	ldr	r0, [sp, #20]
 8011904:	f7ff f9a8 	bl	8010c58 <quorem>
 8011908:	9b06      	ldr	r3, [sp, #24]
 801190a:	3030      	adds	r0, #48	; 0x30
 801190c:	5518      	strb	r0, [r3, r4]
 801190e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011910:	3401      	adds	r4, #1
 8011912:	9007      	str	r0, [sp, #28]
 8011914:	42a3      	cmp	r3, r4
 8011916:	dd07      	ble.n	8011928 <_dtoa_r+0xbb8>
 8011918:	2300      	movs	r3, #0
 801191a:	220a      	movs	r2, #10
 801191c:	0038      	movs	r0, r7
 801191e:	9905      	ldr	r1, [sp, #20]
 8011920:	f7fe f8e4 	bl	800faec <__multadd>
 8011924:	9005      	str	r0, [sp, #20]
 8011926:	e7eb      	b.n	8011900 <_dtoa_r+0xb90>
 8011928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801192a:	2001      	movs	r0, #1
 801192c:	2b00      	cmp	r3, #0
 801192e:	dd00      	ble.n	8011932 <_dtoa_r+0xbc2>
 8011930:	0018      	movs	r0, r3
 8011932:	2400      	movs	r4, #0
 8011934:	9b06      	ldr	r3, [sp, #24]
 8011936:	181b      	adds	r3, r3, r0
 8011938:	9308      	str	r3, [sp, #32]
 801193a:	9905      	ldr	r1, [sp, #20]
 801193c:	2201      	movs	r2, #1
 801193e:	0038      	movs	r0, r7
 8011940:	f7fe face 	bl	800fee0 <__lshift>
 8011944:	0031      	movs	r1, r6
 8011946:	9005      	str	r0, [sp, #20]
 8011948:	f7fe fb38 	bl	800ffbc <__mcmp>
 801194c:	2800      	cmp	r0, #0
 801194e:	dc9b      	bgt.n	8011888 <_dtoa_r+0xb18>
 8011950:	d102      	bne.n	8011958 <_dtoa_r+0xbe8>
 8011952:	9b07      	ldr	r3, [sp, #28]
 8011954:	07db      	lsls	r3, r3, #31
 8011956:	d497      	bmi.n	8011888 <_dtoa_r+0xb18>
 8011958:	9b08      	ldr	r3, [sp, #32]
 801195a:	9308      	str	r3, [sp, #32]
 801195c:	3b01      	subs	r3, #1
 801195e:	781a      	ldrb	r2, [r3, #0]
 8011960:	2a30      	cmp	r2, #48	; 0x30
 8011962:	d0fa      	beq.n	801195a <_dtoa_r+0xbea>
 8011964:	e6db      	b.n	801171e <_dtoa_r+0x9ae>
 8011966:	9a06      	ldr	r2, [sp, #24]
 8011968:	429a      	cmp	r2, r3
 801196a:	d18e      	bne.n	801188a <_dtoa_r+0xb1a>
 801196c:	9b02      	ldr	r3, [sp, #8]
 801196e:	3301      	adds	r3, #1
 8011970:	9302      	str	r3, [sp, #8]
 8011972:	2331      	movs	r3, #49	; 0x31
 8011974:	e799      	b.n	80118aa <_dtoa_r+0xb3a>
 8011976:	4b09      	ldr	r3, [pc, #36]	; (801199c <_dtoa_r+0xc2c>)
 8011978:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801197a:	9306      	str	r3, [sp, #24]
 801197c:	4b08      	ldr	r3, [pc, #32]	; (80119a0 <_dtoa_r+0xc30>)
 801197e:	2a00      	cmp	r2, #0
 8011980:	d001      	beq.n	8011986 <_dtoa_r+0xc16>
 8011982:	f7ff fa3f 	bl	8010e04 <_dtoa_r+0x94>
 8011986:	f7ff fa3f 	bl	8010e08 <_dtoa_r+0x98>
 801198a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801198c:	2b00      	cmp	r3, #0
 801198e:	dcb6      	bgt.n	80118fe <_dtoa_r+0xb8e>
 8011990:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011992:	2b02      	cmp	r3, #2
 8011994:	dd00      	ble.n	8011998 <_dtoa_r+0xc28>
 8011996:	e6ac      	b.n	80116f2 <_dtoa_r+0x982>
 8011998:	e7b1      	b.n	80118fe <_dtoa_r+0xb8e>
 801199a:	46c0      	nop			; (mov r8, r8)
 801199c:	08012ef3 	.word	0x08012ef3
 80119a0:	08012efb 	.word	0x08012efb

080119a4 <fiprintf>:
 80119a4:	b40e      	push	{r1, r2, r3}
 80119a6:	b503      	push	{r0, r1, lr}
 80119a8:	0001      	movs	r1, r0
 80119aa:	ab03      	add	r3, sp, #12
 80119ac:	4804      	ldr	r0, [pc, #16]	; (80119c0 <fiprintf+0x1c>)
 80119ae:	cb04      	ldmia	r3!, {r2}
 80119b0:	6800      	ldr	r0, [r0, #0]
 80119b2:	9301      	str	r3, [sp, #4]
 80119b4:	f000 f8b8 	bl	8011b28 <_vfiprintf_r>
 80119b8:	b002      	add	sp, #8
 80119ba:	bc08      	pop	{r3}
 80119bc:	b003      	add	sp, #12
 80119be:	4718      	bx	r3
 80119c0:	200000e0 	.word	0x200000e0

080119c4 <malloc>:
 80119c4:	b510      	push	{r4, lr}
 80119c6:	4b03      	ldr	r3, [pc, #12]	; (80119d4 <malloc+0x10>)
 80119c8:	0001      	movs	r1, r0
 80119ca:	6818      	ldr	r0, [r3, #0]
 80119cc:	f7fe fd58 	bl	8010480 <_malloc_r>
 80119d0:	bd10      	pop	{r4, pc}
 80119d2:	46c0      	nop			; (mov r8, r8)
 80119d4:	200000e0 	.word	0x200000e0

080119d8 <memchr>:
 80119d8:	b2c9      	uxtb	r1, r1
 80119da:	1882      	adds	r2, r0, r2
 80119dc:	4290      	cmp	r0, r2
 80119de:	d101      	bne.n	80119e4 <memchr+0xc>
 80119e0:	2000      	movs	r0, #0
 80119e2:	4770      	bx	lr
 80119e4:	7803      	ldrb	r3, [r0, #0]
 80119e6:	428b      	cmp	r3, r1
 80119e8:	d0fb      	beq.n	80119e2 <memchr+0xa>
 80119ea:	3001      	adds	r0, #1
 80119ec:	e7f6      	b.n	80119dc <memchr+0x4>

080119ee <memmove>:
 80119ee:	b510      	push	{r4, lr}
 80119f0:	4288      	cmp	r0, r1
 80119f2:	d902      	bls.n	80119fa <memmove+0xc>
 80119f4:	188b      	adds	r3, r1, r2
 80119f6:	4298      	cmp	r0, r3
 80119f8:	d303      	bcc.n	8011a02 <memmove+0x14>
 80119fa:	2300      	movs	r3, #0
 80119fc:	e007      	b.n	8011a0e <memmove+0x20>
 80119fe:	5c8b      	ldrb	r3, [r1, r2]
 8011a00:	5483      	strb	r3, [r0, r2]
 8011a02:	3a01      	subs	r2, #1
 8011a04:	d2fb      	bcs.n	80119fe <memmove+0x10>
 8011a06:	bd10      	pop	{r4, pc}
 8011a08:	5ccc      	ldrb	r4, [r1, r3]
 8011a0a:	54c4      	strb	r4, [r0, r3]
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	d1fa      	bne.n	8011a08 <memmove+0x1a>
 8011a12:	e7f8      	b.n	8011a06 <memmove+0x18>

08011a14 <__malloc_lock>:
 8011a14:	b510      	push	{r4, lr}
 8011a16:	4802      	ldr	r0, [pc, #8]	; (8011a20 <__malloc_lock+0xc>)
 8011a18:	f000 fc65 	bl	80122e6 <__retarget_lock_acquire_recursive>
 8011a1c:	bd10      	pop	{r4, pc}
 8011a1e:	46c0      	nop			; (mov r8, r8)
 8011a20:	20000cf4 	.word	0x20000cf4

08011a24 <__malloc_unlock>:
 8011a24:	b510      	push	{r4, lr}
 8011a26:	4802      	ldr	r0, [pc, #8]	; (8011a30 <__malloc_unlock+0xc>)
 8011a28:	f000 fc5e 	bl	80122e8 <__retarget_lock_release_recursive>
 8011a2c:	bd10      	pop	{r4, pc}
 8011a2e:	46c0      	nop			; (mov r8, r8)
 8011a30:	20000cf4 	.word	0x20000cf4

08011a34 <_free_r>:
 8011a34:	b570      	push	{r4, r5, r6, lr}
 8011a36:	0005      	movs	r5, r0
 8011a38:	2900      	cmp	r1, #0
 8011a3a:	d010      	beq.n	8011a5e <_free_r+0x2a>
 8011a3c:	1f0c      	subs	r4, r1, #4
 8011a3e:	6823      	ldr	r3, [r4, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	da00      	bge.n	8011a46 <_free_r+0x12>
 8011a44:	18e4      	adds	r4, r4, r3
 8011a46:	0028      	movs	r0, r5
 8011a48:	f7ff ffe4 	bl	8011a14 <__malloc_lock>
 8011a4c:	4a1d      	ldr	r2, [pc, #116]	; (8011ac4 <_free_r+0x90>)
 8011a4e:	6813      	ldr	r3, [r2, #0]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d105      	bne.n	8011a60 <_free_r+0x2c>
 8011a54:	6063      	str	r3, [r4, #4]
 8011a56:	6014      	str	r4, [r2, #0]
 8011a58:	0028      	movs	r0, r5
 8011a5a:	f7ff ffe3 	bl	8011a24 <__malloc_unlock>
 8011a5e:	bd70      	pop	{r4, r5, r6, pc}
 8011a60:	42a3      	cmp	r3, r4
 8011a62:	d908      	bls.n	8011a76 <_free_r+0x42>
 8011a64:	6821      	ldr	r1, [r4, #0]
 8011a66:	1860      	adds	r0, r4, r1
 8011a68:	4283      	cmp	r3, r0
 8011a6a:	d1f3      	bne.n	8011a54 <_free_r+0x20>
 8011a6c:	6818      	ldr	r0, [r3, #0]
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	1841      	adds	r1, r0, r1
 8011a72:	6021      	str	r1, [r4, #0]
 8011a74:	e7ee      	b.n	8011a54 <_free_r+0x20>
 8011a76:	001a      	movs	r2, r3
 8011a78:	685b      	ldr	r3, [r3, #4]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d001      	beq.n	8011a82 <_free_r+0x4e>
 8011a7e:	42a3      	cmp	r3, r4
 8011a80:	d9f9      	bls.n	8011a76 <_free_r+0x42>
 8011a82:	6811      	ldr	r1, [r2, #0]
 8011a84:	1850      	adds	r0, r2, r1
 8011a86:	42a0      	cmp	r0, r4
 8011a88:	d10b      	bne.n	8011aa2 <_free_r+0x6e>
 8011a8a:	6820      	ldr	r0, [r4, #0]
 8011a8c:	1809      	adds	r1, r1, r0
 8011a8e:	1850      	adds	r0, r2, r1
 8011a90:	6011      	str	r1, [r2, #0]
 8011a92:	4283      	cmp	r3, r0
 8011a94:	d1e0      	bne.n	8011a58 <_free_r+0x24>
 8011a96:	6818      	ldr	r0, [r3, #0]
 8011a98:	685b      	ldr	r3, [r3, #4]
 8011a9a:	1841      	adds	r1, r0, r1
 8011a9c:	6011      	str	r1, [r2, #0]
 8011a9e:	6053      	str	r3, [r2, #4]
 8011aa0:	e7da      	b.n	8011a58 <_free_r+0x24>
 8011aa2:	42a0      	cmp	r0, r4
 8011aa4:	d902      	bls.n	8011aac <_free_r+0x78>
 8011aa6:	230c      	movs	r3, #12
 8011aa8:	602b      	str	r3, [r5, #0]
 8011aaa:	e7d5      	b.n	8011a58 <_free_r+0x24>
 8011aac:	6821      	ldr	r1, [r4, #0]
 8011aae:	1860      	adds	r0, r4, r1
 8011ab0:	4283      	cmp	r3, r0
 8011ab2:	d103      	bne.n	8011abc <_free_r+0x88>
 8011ab4:	6818      	ldr	r0, [r3, #0]
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	1841      	adds	r1, r0, r1
 8011aba:	6021      	str	r1, [r4, #0]
 8011abc:	6063      	str	r3, [r4, #4]
 8011abe:	6054      	str	r4, [r2, #4]
 8011ac0:	e7ca      	b.n	8011a58 <_free_r+0x24>
 8011ac2:	46c0      	nop			; (mov r8, r8)
 8011ac4:	20000ce8 	.word	0x20000ce8

08011ac8 <_malloc_usable_size_r>:
 8011ac8:	1f0b      	subs	r3, r1, #4
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	1f18      	subs	r0, r3, #4
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	da01      	bge.n	8011ad6 <_malloc_usable_size_r+0xe>
 8011ad2:	580b      	ldr	r3, [r1, r0]
 8011ad4:	18c0      	adds	r0, r0, r3
 8011ad6:	4770      	bx	lr

08011ad8 <__sfputc_r>:
 8011ad8:	6893      	ldr	r3, [r2, #8]
 8011ada:	b510      	push	{r4, lr}
 8011adc:	3b01      	subs	r3, #1
 8011ade:	6093      	str	r3, [r2, #8]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	da04      	bge.n	8011aee <__sfputc_r+0x16>
 8011ae4:	6994      	ldr	r4, [r2, #24]
 8011ae6:	42a3      	cmp	r3, r4
 8011ae8:	db07      	blt.n	8011afa <__sfputc_r+0x22>
 8011aea:	290a      	cmp	r1, #10
 8011aec:	d005      	beq.n	8011afa <__sfputc_r+0x22>
 8011aee:	6813      	ldr	r3, [r2, #0]
 8011af0:	1c58      	adds	r0, r3, #1
 8011af2:	6010      	str	r0, [r2, #0]
 8011af4:	7019      	strb	r1, [r3, #0]
 8011af6:	0008      	movs	r0, r1
 8011af8:	bd10      	pop	{r4, pc}
 8011afa:	f000 f94f 	bl	8011d9c <__swbuf_r>
 8011afe:	0001      	movs	r1, r0
 8011b00:	e7f9      	b.n	8011af6 <__sfputc_r+0x1e>

08011b02 <__sfputs_r>:
 8011b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b04:	0006      	movs	r6, r0
 8011b06:	000f      	movs	r7, r1
 8011b08:	0014      	movs	r4, r2
 8011b0a:	18d5      	adds	r5, r2, r3
 8011b0c:	42ac      	cmp	r4, r5
 8011b0e:	d101      	bne.n	8011b14 <__sfputs_r+0x12>
 8011b10:	2000      	movs	r0, #0
 8011b12:	e007      	b.n	8011b24 <__sfputs_r+0x22>
 8011b14:	7821      	ldrb	r1, [r4, #0]
 8011b16:	003a      	movs	r2, r7
 8011b18:	0030      	movs	r0, r6
 8011b1a:	f7ff ffdd 	bl	8011ad8 <__sfputc_r>
 8011b1e:	3401      	adds	r4, #1
 8011b20:	1c43      	adds	r3, r0, #1
 8011b22:	d1f3      	bne.n	8011b0c <__sfputs_r+0xa>
 8011b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011b28 <_vfiprintf_r>:
 8011b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b2a:	b0a1      	sub	sp, #132	; 0x84
 8011b2c:	0006      	movs	r6, r0
 8011b2e:	000c      	movs	r4, r1
 8011b30:	001f      	movs	r7, r3
 8011b32:	9203      	str	r2, [sp, #12]
 8011b34:	2800      	cmp	r0, #0
 8011b36:	d004      	beq.n	8011b42 <_vfiprintf_r+0x1a>
 8011b38:	6983      	ldr	r3, [r0, #24]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d101      	bne.n	8011b42 <_vfiprintf_r+0x1a>
 8011b3e:	f000 fb31 	bl	80121a4 <__sinit>
 8011b42:	4b8e      	ldr	r3, [pc, #568]	; (8011d7c <_vfiprintf_r+0x254>)
 8011b44:	429c      	cmp	r4, r3
 8011b46:	d11c      	bne.n	8011b82 <_vfiprintf_r+0x5a>
 8011b48:	6874      	ldr	r4, [r6, #4]
 8011b4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b4c:	07db      	lsls	r3, r3, #31
 8011b4e:	d405      	bmi.n	8011b5c <_vfiprintf_r+0x34>
 8011b50:	89a3      	ldrh	r3, [r4, #12]
 8011b52:	059b      	lsls	r3, r3, #22
 8011b54:	d402      	bmi.n	8011b5c <_vfiprintf_r+0x34>
 8011b56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b58:	f000 fbc5 	bl	80122e6 <__retarget_lock_acquire_recursive>
 8011b5c:	89a3      	ldrh	r3, [r4, #12]
 8011b5e:	071b      	lsls	r3, r3, #28
 8011b60:	d502      	bpl.n	8011b68 <_vfiprintf_r+0x40>
 8011b62:	6923      	ldr	r3, [r4, #16]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d11d      	bne.n	8011ba4 <_vfiprintf_r+0x7c>
 8011b68:	0021      	movs	r1, r4
 8011b6a:	0030      	movs	r0, r6
 8011b6c:	f000 f96c 	bl	8011e48 <__swsetup_r>
 8011b70:	2800      	cmp	r0, #0
 8011b72:	d017      	beq.n	8011ba4 <_vfiprintf_r+0x7c>
 8011b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b76:	07db      	lsls	r3, r3, #31
 8011b78:	d50d      	bpl.n	8011b96 <_vfiprintf_r+0x6e>
 8011b7a:	2001      	movs	r0, #1
 8011b7c:	4240      	negs	r0, r0
 8011b7e:	b021      	add	sp, #132	; 0x84
 8011b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b82:	4b7f      	ldr	r3, [pc, #508]	; (8011d80 <_vfiprintf_r+0x258>)
 8011b84:	429c      	cmp	r4, r3
 8011b86:	d101      	bne.n	8011b8c <_vfiprintf_r+0x64>
 8011b88:	68b4      	ldr	r4, [r6, #8]
 8011b8a:	e7de      	b.n	8011b4a <_vfiprintf_r+0x22>
 8011b8c:	4b7d      	ldr	r3, [pc, #500]	; (8011d84 <_vfiprintf_r+0x25c>)
 8011b8e:	429c      	cmp	r4, r3
 8011b90:	d1db      	bne.n	8011b4a <_vfiprintf_r+0x22>
 8011b92:	68f4      	ldr	r4, [r6, #12]
 8011b94:	e7d9      	b.n	8011b4a <_vfiprintf_r+0x22>
 8011b96:	89a3      	ldrh	r3, [r4, #12]
 8011b98:	059b      	lsls	r3, r3, #22
 8011b9a:	d4ee      	bmi.n	8011b7a <_vfiprintf_r+0x52>
 8011b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b9e:	f000 fba3 	bl	80122e8 <__retarget_lock_release_recursive>
 8011ba2:	e7ea      	b.n	8011b7a <_vfiprintf_r+0x52>
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	ad08      	add	r5, sp, #32
 8011ba8:	616b      	str	r3, [r5, #20]
 8011baa:	3320      	adds	r3, #32
 8011bac:	766b      	strb	r3, [r5, #25]
 8011bae:	3310      	adds	r3, #16
 8011bb0:	76ab      	strb	r3, [r5, #26]
 8011bb2:	9707      	str	r7, [sp, #28]
 8011bb4:	9f03      	ldr	r7, [sp, #12]
 8011bb6:	783b      	ldrb	r3, [r7, #0]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d001      	beq.n	8011bc0 <_vfiprintf_r+0x98>
 8011bbc:	2b25      	cmp	r3, #37	; 0x25
 8011bbe:	d14e      	bne.n	8011c5e <_vfiprintf_r+0x136>
 8011bc0:	9b03      	ldr	r3, [sp, #12]
 8011bc2:	1afb      	subs	r3, r7, r3
 8011bc4:	9305      	str	r3, [sp, #20]
 8011bc6:	9b03      	ldr	r3, [sp, #12]
 8011bc8:	429f      	cmp	r7, r3
 8011bca:	d00d      	beq.n	8011be8 <_vfiprintf_r+0xc0>
 8011bcc:	9b05      	ldr	r3, [sp, #20]
 8011bce:	0021      	movs	r1, r4
 8011bd0:	0030      	movs	r0, r6
 8011bd2:	9a03      	ldr	r2, [sp, #12]
 8011bd4:	f7ff ff95 	bl	8011b02 <__sfputs_r>
 8011bd8:	1c43      	adds	r3, r0, #1
 8011bda:	d100      	bne.n	8011bde <_vfiprintf_r+0xb6>
 8011bdc:	e0b5      	b.n	8011d4a <_vfiprintf_r+0x222>
 8011bde:	696a      	ldr	r2, [r5, #20]
 8011be0:	9b05      	ldr	r3, [sp, #20]
 8011be2:	4694      	mov	ip, r2
 8011be4:	4463      	add	r3, ip
 8011be6:	616b      	str	r3, [r5, #20]
 8011be8:	783b      	ldrb	r3, [r7, #0]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d100      	bne.n	8011bf0 <_vfiprintf_r+0xc8>
 8011bee:	e0ac      	b.n	8011d4a <_vfiprintf_r+0x222>
 8011bf0:	2201      	movs	r2, #1
 8011bf2:	1c7b      	adds	r3, r7, #1
 8011bf4:	9303      	str	r3, [sp, #12]
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	4252      	negs	r2, r2
 8011bfa:	606a      	str	r2, [r5, #4]
 8011bfc:	a904      	add	r1, sp, #16
 8011bfe:	3254      	adds	r2, #84	; 0x54
 8011c00:	1852      	adds	r2, r2, r1
 8011c02:	602b      	str	r3, [r5, #0]
 8011c04:	60eb      	str	r3, [r5, #12]
 8011c06:	60ab      	str	r3, [r5, #8]
 8011c08:	7013      	strb	r3, [r2, #0]
 8011c0a:	65ab      	str	r3, [r5, #88]	; 0x58
 8011c0c:	9b03      	ldr	r3, [sp, #12]
 8011c0e:	2205      	movs	r2, #5
 8011c10:	7819      	ldrb	r1, [r3, #0]
 8011c12:	485d      	ldr	r0, [pc, #372]	; (8011d88 <_vfiprintf_r+0x260>)
 8011c14:	f7ff fee0 	bl	80119d8 <memchr>
 8011c18:	9b03      	ldr	r3, [sp, #12]
 8011c1a:	1c5f      	adds	r7, r3, #1
 8011c1c:	2800      	cmp	r0, #0
 8011c1e:	d120      	bne.n	8011c62 <_vfiprintf_r+0x13a>
 8011c20:	682a      	ldr	r2, [r5, #0]
 8011c22:	06d3      	lsls	r3, r2, #27
 8011c24:	d504      	bpl.n	8011c30 <_vfiprintf_r+0x108>
 8011c26:	2353      	movs	r3, #83	; 0x53
 8011c28:	a904      	add	r1, sp, #16
 8011c2a:	185b      	adds	r3, r3, r1
 8011c2c:	2120      	movs	r1, #32
 8011c2e:	7019      	strb	r1, [r3, #0]
 8011c30:	0713      	lsls	r3, r2, #28
 8011c32:	d504      	bpl.n	8011c3e <_vfiprintf_r+0x116>
 8011c34:	2353      	movs	r3, #83	; 0x53
 8011c36:	a904      	add	r1, sp, #16
 8011c38:	185b      	adds	r3, r3, r1
 8011c3a:	212b      	movs	r1, #43	; 0x2b
 8011c3c:	7019      	strb	r1, [r3, #0]
 8011c3e:	9b03      	ldr	r3, [sp, #12]
 8011c40:	781b      	ldrb	r3, [r3, #0]
 8011c42:	2b2a      	cmp	r3, #42	; 0x2a
 8011c44:	d016      	beq.n	8011c74 <_vfiprintf_r+0x14c>
 8011c46:	2100      	movs	r1, #0
 8011c48:	68eb      	ldr	r3, [r5, #12]
 8011c4a:	9f03      	ldr	r7, [sp, #12]
 8011c4c:	783a      	ldrb	r2, [r7, #0]
 8011c4e:	1c78      	adds	r0, r7, #1
 8011c50:	3a30      	subs	r2, #48	; 0x30
 8011c52:	4684      	mov	ip, r0
 8011c54:	2a09      	cmp	r2, #9
 8011c56:	d94f      	bls.n	8011cf8 <_vfiprintf_r+0x1d0>
 8011c58:	2900      	cmp	r1, #0
 8011c5a:	d111      	bne.n	8011c80 <_vfiprintf_r+0x158>
 8011c5c:	e017      	b.n	8011c8e <_vfiprintf_r+0x166>
 8011c5e:	3701      	adds	r7, #1
 8011c60:	e7a9      	b.n	8011bb6 <_vfiprintf_r+0x8e>
 8011c62:	4b49      	ldr	r3, [pc, #292]	; (8011d88 <_vfiprintf_r+0x260>)
 8011c64:	682a      	ldr	r2, [r5, #0]
 8011c66:	1ac0      	subs	r0, r0, r3
 8011c68:	2301      	movs	r3, #1
 8011c6a:	4083      	lsls	r3, r0
 8011c6c:	4313      	orrs	r3, r2
 8011c6e:	602b      	str	r3, [r5, #0]
 8011c70:	9703      	str	r7, [sp, #12]
 8011c72:	e7cb      	b.n	8011c0c <_vfiprintf_r+0xe4>
 8011c74:	9b07      	ldr	r3, [sp, #28]
 8011c76:	1d19      	adds	r1, r3, #4
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	9107      	str	r1, [sp, #28]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	db01      	blt.n	8011c84 <_vfiprintf_r+0x15c>
 8011c80:	930b      	str	r3, [sp, #44]	; 0x2c
 8011c82:	e004      	b.n	8011c8e <_vfiprintf_r+0x166>
 8011c84:	425b      	negs	r3, r3
 8011c86:	60eb      	str	r3, [r5, #12]
 8011c88:	2302      	movs	r3, #2
 8011c8a:	4313      	orrs	r3, r2
 8011c8c:	602b      	str	r3, [r5, #0]
 8011c8e:	783b      	ldrb	r3, [r7, #0]
 8011c90:	2b2e      	cmp	r3, #46	; 0x2e
 8011c92:	d10a      	bne.n	8011caa <_vfiprintf_r+0x182>
 8011c94:	787b      	ldrb	r3, [r7, #1]
 8011c96:	2b2a      	cmp	r3, #42	; 0x2a
 8011c98:	d137      	bne.n	8011d0a <_vfiprintf_r+0x1e2>
 8011c9a:	9b07      	ldr	r3, [sp, #28]
 8011c9c:	3702      	adds	r7, #2
 8011c9e:	1d1a      	adds	r2, r3, #4
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	9207      	str	r2, [sp, #28]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	db2d      	blt.n	8011d04 <_vfiprintf_r+0x1dc>
 8011ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8011caa:	2203      	movs	r2, #3
 8011cac:	7839      	ldrb	r1, [r7, #0]
 8011cae:	4837      	ldr	r0, [pc, #220]	; (8011d8c <_vfiprintf_r+0x264>)
 8011cb0:	f7ff fe92 	bl	80119d8 <memchr>
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	d007      	beq.n	8011cc8 <_vfiprintf_r+0x1a0>
 8011cb8:	4b34      	ldr	r3, [pc, #208]	; (8011d8c <_vfiprintf_r+0x264>)
 8011cba:	682a      	ldr	r2, [r5, #0]
 8011cbc:	1ac0      	subs	r0, r0, r3
 8011cbe:	2340      	movs	r3, #64	; 0x40
 8011cc0:	4083      	lsls	r3, r0
 8011cc2:	4313      	orrs	r3, r2
 8011cc4:	3701      	adds	r7, #1
 8011cc6:	602b      	str	r3, [r5, #0]
 8011cc8:	7839      	ldrb	r1, [r7, #0]
 8011cca:	1c7b      	adds	r3, r7, #1
 8011ccc:	2206      	movs	r2, #6
 8011cce:	4830      	ldr	r0, [pc, #192]	; (8011d90 <_vfiprintf_r+0x268>)
 8011cd0:	9303      	str	r3, [sp, #12]
 8011cd2:	7629      	strb	r1, [r5, #24]
 8011cd4:	f7ff fe80 	bl	80119d8 <memchr>
 8011cd8:	2800      	cmp	r0, #0
 8011cda:	d045      	beq.n	8011d68 <_vfiprintf_r+0x240>
 8011cdc:	4b2d      	ldr	r3, [pc, #180]	; (8011d94 <_vfiprintf_r+0x26c>)
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d127      	bne.n	8011d32 <_vfiprintf_r+0x20a>
 8011ce2:	2207      	movs	r2, #7
 8011ce4:	9b07      	ldr	r3, [sp, #28]
 8011ce6:	3307      	adds	r3, #7
 8011ce8:	4393      	bics	r3, r2
 8011cea:	3308      	adds	r3, #8
 8011cec:	9307      	str	r3, [sp, #28]
 8011cee:	696b      	ldr	r3, [r5, #20]
 8011cf0:	9a04      	ldr	r2, [sp, #16]
 8011cf2:	189b      	adds	r3, r3, r2
 8011cf4:	616b      	str	r3, [r5, #20]
 8011cf6:	e75d      	b.n	8011bb4 <_vfiprintf_r+0x8c>
 8011cf8:	210a      	movs	r1, #10
 8011cfa:	434b      	muls	r3, r1
 8011cfc:	4667      	mov	r7, ip
 8011cfe:	189b      	adds	r3, r3, r2
 8011d00:	3909      	subs	r1, #9
 8011d02:	e7a3      	b.n	8011c4c <_vfiprintf_r+0x124>
 8011d04:	2301      	movs	r3, #1
 8011d06:	425b      	negs	r3, r3
 8011d08:	e7ce      	b.n	8011ca8 <_vfiprintf_r+0x180>
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	001a      	movs	r2, r3
 8011d0e:	3701      	adds	r7, #1
 8011d10:	606b      	str	r3, [r5, #4]
 8011d12:	7839      	ldrb	r1, [r7, #0]
 8011d14:	1c78      	adds	r0, r7, #1
 8011d16:	3930      	subs	r1, #48	; 0x30
 8011d18:	4684      	mov	ip, r0
 8011d1a:	2909      	cmp	r1, #9
 8011d1c:	d903      	bls.n	8011d26 <_vfiprintf_r+0x1fe>
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d0c3      	beq.n	8011caa <_vfiprintf_r+0x182>
 8011d22:	9209      	str	r2, [sp, #36]	; 0x24
 8011d24:	e7c1      	b.n	8011caa <_vfiprintf_r+0x182>
 8011d26:	230a      	movs	r3, #10
 8011d28:	435a      	muls	r2, r3
 8011d2a:	4667      	mov	r7, ip
 8011d2c:	1852      	adds	r2, r2, r1
 8011d2e:	3b09      	subs	r3, #9
 8011d30:	e7ef      	b.n	8011d12 <_vfiprintf_r+0x1ea>
 8011d32:	ab07      	add	r3, sp, #28
 8011d34:	9300      	str	r3, [sp, #0]
 8011d36:	0022      	movs	r2, r4
 8011d38:	0029      	movs	r1, r5
 8011d3a:	0030      	movs	r0, r6
 8011d3c:	4b16      	ldr	r3, [pc, #88]	; (8011d98 <_vfiprintf_r+0x270>)
 8011d3e:	e000      	b.n	8011d42 <_vfiprintf_r+0x21a>
 8011d40:	bf00      	nop
 8011d42:	9004      	str	r0, [sp, #16]
 8011d44:	9b04      	ldr	r3, [sp, #16]
 8011d46:	3301      	adds	r3, #1
 8011d48:	d1d1      	bne.n	8011cee <_vfiprintf_r+0x1c6>
 8011d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011d4c:	07db      	lsls	r3, r3, #31
 8011d4e:	d405      	bmi.n	8011d5c <_vfiprintf_r+0x234>
 8011d50:	89a3      	ldrh	r3, [r4, #12]
 8011d52:	059b      	lsls	r3, r3, #22
 8011d54:	d402      	bmi.n	8011d5c <_vfiprintf_r+0x234>
 8011d56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d58:	f000 fac6 	bl	80122e8 <__retarget_lock_release_recursive>
 8011d5c:	89a3      	ldrh	r3, [r4, #12]
 8011d5e:	065b      	lsls	r3, r3, #25
 8011d60:	d500      	bpl.n	8011d64 <_vfiprintf_r+0x23c>
 8011d62:	e70a      	b.n	8011b7a <_vfiprintf_r+0x52>
 8011d64:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011d66:	e70a      	b.n	8011b7e <_vfiprintf_r+0x56>
 8011d68:	ab07      	add	r3, sp, #28
 8011d6a:	9300      	str	r3, [sp, #0]
 8011d6c:	0022      	movs	r2, r4
 8011d6e:	0029      	movs	r1, r5
 8011d70:	0030      	movs	r0, r6
 8011d72:	4b09      	ldr	r3, [pc, #36]	; (8011d98 <_vfiprintf_r+0x270>)
 8011d74:	f7fe fdfc 	bl	8010970 <_printf_i>
 8011d78:	e7e3      	b.n	8011d42 <_vfiprintf_r+0x21a>
 8011d7a:	46c0      	nop			; (mov r8, r8)
 8011d7c:	08012f80 	.word	0x08012f80
 8011d80:	08012fa0 	.word	0x08012fa0
 8011d84:	08012f60 	.word	0x08012f60
 8011d88:	08012e84 	.word	0x08012e84
 8011d8c:	08012e8a 	.word	0x08012e8a
 8011d90:	08012e8e 	.word	0x08012e8e
 8011d94:	00000000 	.word	0x00000000
 8011d98:	08011b03 	.word	0x08011b03

08011d9c <__swbuf_r>:
 8011d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d9e:	0005      	movs	r5, r0
 8011da0:	000e      	movs	r6, r1
 8011da2:	0014      	movs	r4, r2
 8011da4:	2800      	cmp	r0, #0
 8011da6:	d004      	beq.n	8011db2 <__swbuf_r+0x16>
 8011da8:	6983      	ldr	r3, [r0, #24]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d101      	bne.n	8011db2 <__swbuf_r+0x16>
 8011dae:	f000 f9f9 	bl	80121a4 <__sinit>
 8011db2:	4b22      	ldr	r3, [pc, #136]	; (8011e3c <__swbuf_r+0xa0>)
 8011db4:	429c      	cmp	r4, r3
 8011db6:	d12e      	bne.n	8011e16 <__swbuf_r+0x7a>
 8011db8:	686c      	ldr	r4, [r5, #4]
 8011dba:	69a3      	ldr	r3, [r4, #24]
 8011dbc:	60a3      	str	r3, [r4, #8]
 8011dbe:	89a3      	ldrh	r3, [r4, #12]
 8011dc0:	071b      	lsls	r3, r3, #28
 8011dc2:	d532      	bpl.n	8011e2a <__swbuf_r+0x8e>
 8011dc4:	6923      	ldr	r3, [r4, #16]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d02f      	beq.n	8011e2a <__swbuf_r+0x8e>
 8011dca:	6823      	ldr	r3, [r4, #0]
 8011dcc:	6922      	ldr	r2, [r4, #16]
 8011dce:	b2f7      	uxtb	r7, r6
 8011dd0:	1a98      	subs	r0, r3, r2
 8011dd2:	6963      	ldr	r3, [r4, #20]
 8011dd4:	b2f6      	uxtb	r6, r6
 8011dd6:	4283      	cmp	r3, r0
 8011dd8:	dc05      	bgt.n	8011de6 <__swbuf_r+0x4a>
 8011dda:	0021      	movs	r1, r4
 8011ddc:	0028      	movs	r0, r5
 8011dde:	f000 f93f 	bl	8012060 <_fflush_r>
 8011de2:	2800      	cmp	r0, #0
 8011de4:	d127      	bne.n	8011e36 <__swbuf_r+0x9a>
 8011de6:	68a3      	ldr	r3, [r4, #8]
 8011de8:	3001      	adds	r0, #1
 8011dea:	3b01      	subs	r3, #1
 8011dec:	60a3      	str	r3, [r4, #8]
 8011dee:	6823      	ldr	r3, [r4, #0]
 8011df0:	1c5a      	adds	r2, r3, #1
 8011df2:	6022      	str	r2, [r4, #0]
 8011df4:	701f      	strb	r7, [r3, #0]
 8011df6:	6963      	ldr	r3, [r4, #20]
 8011df8:	4283      	cmp	r3, r0
 8011dfa:	d004      	beq.n	8011e06 <__swbuf_r+0x6a>
 8011dfc:	89a3      	ldrh	r3, [r4, #12]
 8011dfe:	07db      	lsls	r3, r3, #31
 8011e00:	d507      	bpl.n	8011e12 <__swbuf_r+0x76>
 8011e02:	2e0a      	cmp	r6, #10
 8011e04:	d105      	bne.n	8011e12 <__swbuf_r+0x76>
 8011e06:	0021      	movs	r1, r4
 8011e08:	0028      	movs	r0, r5
 8011e0a:	f000 f929 	bl	8012060 <_fflush_r>
 8011e0e:	2800      	cmp	r0, #0
 8011e10:	d111      	bne.n	8011e36 <__swbuf_r+0x9a>
 8011e12:	0030      	movs	r0, r6
 8011e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e16:	4b0a      	ldr	r3, [pc, #40]	; (8011e40 <__swbuf_r+0xa4>)
 8011e18:	429c      	cmp	r4, r3
 8011e1a:	d101      	bne.n	8011e20 <__swbuf_r+0x84>
 8011e1c:	68ac      	ldr	r4, [r5, #8]
 8011e1e:	e7cc      	b.n	8011dba <__swbuf_r+0x1e>
 8011e20:	4b08      	ldr	r3, [pc, #32]	; (8011e44 <__swbuf_r+0xa8>)
 8011e22:	429c      	cmp	r4, r3
 8011e24:	d1c9      	bne.n	8011dba <__swbuf_r+0x1e>
 8011e26:	68ec      	ldr	r4, [r5, #12]
 8011e28:	e7c7      	b.n	8011dba <__swbuf_r+0x1e>
 8011e2a:	0021      	movs	r1, r4
 8011e2c:	0028      	movs	r0, r5
 8011e2e:	f000 f80b 	bl	8011e48 <__swsetup_r>
 8011e32:	2800      	cmp	r0, #0
 8011e34:	d0c9      	beq.n	8011dca <__swbuf_r+0x2e>
 8011e36:	2601      	movs	r6, #1
 8011e38:	4276      	negs	r6, r6
 8011e3a:	e7ea      	b.n	8011e12 <__swbuf_r+0x76>
 8011e3c:	08012f80 	.word	0x08012f80
 8011e40:	08012fa0 	.word	0x08012fa0
 8011e44:	08012f60 	.word	0x08012f60

08011e48 <__swsetup_r>:
 8011e48:	4b37      	ldr	r3, [pc, #220]	; (8011f28 <__swsetup_r+0xe0>)
 8011e4a:	b570      	push	{r4, r5, r6, lr}
 8011e4c:	681d      	ldr	r5, [r3, #0]
 8011e4e:	0006      	movs	r6, r0
 8011e50:	000c      	movs	r4, r1
 8011e52:	2d00      	cmp	r5, #0
 8011e54:	d005      	beq.n	8011e62 <__swsetup_r+0x1a>
 8011e56:	69ab      	ldr	r3, [r5, #24]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d102      	bne.n	8011e62 <__swsetup_r+0x1a>
 8011e5c:	0028      	movs	r0, r5
 8011e5e:	f000 f9a1 	bl	80121a4 <__sinit>
 8011e62:	4b32      	ldr	r3, [pc, #200]	; (8011f2c <__swsetup_r+0xe4>)
 8011e64:	429c      	cmp	r4, r3
 8011e66:	d10f      	bne.n	8011e88 <__swsetup_r+0x40>
 8011e68:	686c      	ldr	r4, [r5, #4]
 8011e6a:	230c      	movs	r3, #12
 8011e6c:	5ee2      	ldrsh	r2, [r4, r3]
 8011e6e:	b293      	uxth	r3, r2
 8011e70:	0711      	lsls	r1, r2, #28
 8011e72:	d42d      	bmi.n	8011ed0 <__swsetup_r+0x88>
 8011e74:	06d9      	lsls	r1, r3, #27
 8011e76:	d411      	bmi.n	8011e9c <__swsetup_r+0x54>
 8011e78:	2309      	movs	r3, #9
 8011e7a:	2001      	movs	r0, #1
 8011e7c:	6033      	str	r3, [r6, #0]
 8011e7e:	3337      	adds	r3, #55	; 0x37
 8011e80:	4313      	orrs	r3, r2
 8011e82:	81a3      	strh	r3, [r4, #12]
 8011e84:	4240      	negs	r0, r0
 8011e86:	bd70      	pop	{r4, r5, r6, pc}
 8011e88:	4b29      	ldr	r3, [pc, #164]	; (8011f30 <__swsetup_r+0xe8>)
 8011e8a:	429c      	cmp	r4, r3
 8011e8c:	d101      	bne.n	8011e92 <__swsetup_r+0x4a>
 8011e8e:	68ac      	ldr	r4, [r5, #8]
 8011e90:	e7eb      	b.n	8011e6a <__swsetup_r+0x22>
 8011e92:	4b28      	ldr	r3, [pc, #160]	; (8011f34 <__swsetup_r+0xec>)
 8011e94:	429c      	cmp	r4, r3
 8011e96:	d1e8      	bne.n	8011e6a <__swsetup_r+0x22>
 8011e98:	68ec      	ldr	r4, [r5, #12]
 8011e9a:	e7e6      	b.n	8011e6a <__swsetup_r+0x22>
 8011e9c:	075b      	lsls	r3, r3, #29
 8011e9e:	d513      	bpl.n	8011ec8 <__swsetup_r+0x80>
 8011ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ea2:	2900      	cmp	r1, #0
 8011ea4:	d008      	beq.n	8011eb8 <__swsetup_r+0x70>
 8011ea6:	0023      	movs	r3, r4
 8011ea8:	3344      	adds	r3, #68	; 0x44
 8011eaa:	4299      	cmp	r1, r3
 8011eac:	d002      	beq.n	8011eb4 <__swsetup_r+0x6c>
 8011eae:	0030      	movs	r0, r6
 8011eb0:	f7ff fdc0 	bl	8011a34 <_free_r>
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	6363      	str	r3, [r4, #52]	; 0x34
 8011eb8:	2224      	movs	r2, #36	; 0x24
 8011eba:	89a3      	ldrh	r3, [r4, #12]
 8011ebc:	4393      	bics	r3, r2
 8011ebe:	81a3      	strh	r3, [r4, #12]
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	6063      	str	r3, [r4, #4]
 8011ec4:	6923      	ldr	r3, [r4, #16]
 8011ec6:	6023      	str	r3, [r4, #0]
 8011ec8:	2308      	movs	r3, #8
 8011eca:	89a2      	ldrh	r2, [r4, #12]
 8011ecc:	4313      	orrs	r3, r2
 8011ece:	81a3      	strh	r3, [r4, #12]
 8011ed0:	6923      	ldr	r3, [r4, #16]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d10b      	bne.n	8011eee <__swsetup_r+0xa6>
 8011ed6:	21a0      	movs	r1, #160	; 0xa0
 8011ed8:	2280      	movs	r2, #128	; 0x80
 8011eda:	89a3      	ldrh	r3, [r4, #12]
 8011edc:	0089      	lsls	r1, r1, #2
 8011ede:	0092      	lsls	r2, r2, #2
 8011ee0:	400b      	ands	r3, r1
 8011ee2:	4293      	cmp	r3, r2
 8011ee4:	d003      	beq.n	8011eee <__swsetup_r+0xa6>
 8011ee6:	0021      	movs	r1, r4
 8011ee8:	0030      	movs	r0, r6
 8011eea:	f000 fa27 	bl	801233c <__smakebuf_r>
 8011eee:	220c      	movs	r2, #12
 8011ef0:	5ea3      	ldrsh	r3, [r4, r2]
 8011ef2:	2001      	movs	r0, #1
 8011ef4:	001a      	movs	r2, r3
 8011ef6:	b299      	uxth	r1, r3
 8011ef8:	4002      	ands	r2, r0
 8011efa:	4203      	tst	r3, r0
 8011efc:	d00f      	beq.n	8011f1e <__swsetup_r+0xd6>
 8011efe:	2200      	movs	r2, #0
 8011f00:	60a2      	str	r2, [r4, #8]
 8011f02:	6962      	ldr	r2, [r4, #20]
 8011f04:	4252      	negs	r2, r2
 8011f06:	61a2      	str	r2, [r4, #24]
 8011f08:	2000      	movs	r0, #0
 8011f0a:	6922      	ldr	r2, [r4, #16]
 8011f0c:	4282      	cmp	r2, r0
 8011f0e:	d1ba      	bne.n	8011e86 <__swsetup_r+0x3e>
 8011f10:	060a      	lsls	r2, r1, #24
 8011f12:	d5b8      	bpl.n	8011e86 <__swsetup_r+0x3e>
 8011f14:	2240      	movs	r2, #64	; 0x40
 8011f16:	4313      	orrs	r3, r2
 8011f18:	81a3      	strh	r3, [r4, #12]
 8011f1a:	3801      	subs	r0, #1
 8011f1c:	e7b3      	b.n	8011e86 <__swsetup_r+0x3e>
 8011f1e:	0788      	lsls	r0, r1, #30
 8011f20:	d400      	bmi.n	8011f24 <__swsetup_r+0xdc>
 8011f22:	6962      	ldr	r2, [r4, #20]
 8011f24:	60a2      	str	r2, [r4, #8]
 8011f26:	e7ef      	b.n	8011f08 <__swsetup_r+0xc0>
 8011f28:	200000e0 	.word	0x200000e0
 8011f2c:	08012f80 	.word	0x08012f80
 8011f30:	08012fa0 	.word	0x08012fa0
 8011f34:	08012f60 	.word	0x08012f60

08011f38 <abort>:
 8011f38:	2006      	movs	r0, #6
 8011f3a:	b510      	push	{r4, lr}
 8011f3c:	f000 fa6c 	bl	8012418 <raise>
 8011f40:	2001      	movs	r0, #1
 8011f42:	f7f6 f935 	bl	80081b0 <_exit>
	...

08011f48 <__sflush_r>:
 8011f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f4a:	898b      	ldrh	r3, [r1, #12]
 8011f4c:	0005      	movs	r5, r0
 8011f4e:	000c      	movs	r4, r1
 8011f50:	071a      	lsls	r2, r3, #28
 8011f52:	d45f      	bmi.n	8012014 <__sflush_r+0xcc>
 8011f54:	684a      	ldr	r2, [r1, #4]
 8011f56:	2a00      	cmp	r2, #0
 8011f58:	dc04      	bgt.n	8011f64 <__sflush_r+0x1c>
 8011f5a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8011f5c:	2a00      	cmp	r2, #0
 8011f5e:	dc01      	bgt.n	8011f64 <__sflush_r+0x1c>
 8011f60:	2000      	movs	r0, #0
 8011f62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011f64:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8011f66:	2f00      	cmp	r7, #0
 8011f68:	d0fa      	beq.n	8011f60 <__sflush_r+0x18>
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	2180      	movs	r1, #128	; 0x80
 8011f6e:	682e      	ldr	r6, [r5, #0]
 8011f70:	602a      	str	r2, [r5, #0]
 8011f72:	001a      	movs	r2, r3
 8011f74:	0149      	lsls	r1, r1, #5
 8011f76:	400a      	ands	r2, r1
 8011f78:	420b      	tst	r3, r1
 8011f7a:	d034      	beq.n	8011fe6 <__sflush_r+0x9e>
 8011f7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011f7e:	89a3      	ldrh	r3, [r4, #12]
 8011f80:	075b      	lsls	r3, r3, #29
 8011f82:	d506      	bpl.n	8011f92 <__sflush_r+0x4a>
 8011f84:	6863      	ldr	r3, [r4, #4]
 8011f86:	1ac0      	subs	r0, r0, r3
 8011f88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d001      	beq.n	8011f92 <__sflush_r+0x4a>
 8011f8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011f90:	1ac0      	subs	r0, r0, r3
 8011f92:	0002      	movs	r2, r0
 8011f94:	6a21      	ldr	r1, [r4, #32]
 8011f96:	2300      	movs	r3, #0
 8011f98:	0028      	movs	r0, r5
 8011f9a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8011f9c:	47b8      	blx	r7
 8011f9e:	89a1      	ldrh	r1, [r4, #12]
 8011fa0:	1c43      	adds	r3, r0, #1
 8011fa2:	d106      	bne.n	8011fb2 <__sflush_r+0x6a>
 8011fa4:	682b      	ldr	r3, [r5, #0]
 8011fa6:	2b1d      	cmp	r3, #29
 8011fa8:	d831      	bhi.n	801200e <__sflush_r+0xc6>
 8011faa:	4a2c      	ldr	r2, [pc, #176]	; (801205c <__sflush_r+0x114>)
 8011fac:	40da      	lsrs	r2, r3
 8011fae:	07d3      	lsls	r3, r2, #31
 8011fb0:	d52d      	bpl.n	801200e <__sflush_r+0xc6>
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	6063      	str	r3, [r4, #4]
 8011fb6:	6923      	ldr	r3, [r4, #16]
 8011fb8:	6023      	str	r3, [r4, #0]
 8011fba:	04cb      	lsls	r3, r1, #19
 8011fbc:	d505      	bpl.n	8011fca <__sflush_r+0x82>
 8011fbe:	1c43      	adds	r3, r0, #1
 8011fc0:	d102      	bne.n	8011fc8 <__sflush_r+0x80>
 8011fc2:	682b      	ldr	r3, [r5, #0]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d100      	bne.n	8011fca <__sflush_r+0x82>
 8011fc8:	6560      	str	r0, [r4, #84]	; 0x54
 8011fca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011fcc:	602e      	str	r6, [r5, #0]
 8011fce:	2900      	cmp	r1, #0
 8011fd0:	d0c6      	beq.n	8011f60 <__sflush_r+0x18>
 8011fd2:	0023      	movs	r3, r4
 8011fd4:	3344      	adds	r3, #68	; 0x44
 8011fd6:	4299      	cmp	r1, r3
 8011fd8:	d002      	beq.n	8011fe0 <__sflush_r+0x98>
 8011fda:	0028      	movs	r0, r5
 8011fdc:	f7ff fd2a 	bl	8011a34 <_free_r>
 8011fe0:	2000      	movs	r0, #0
 8011fe2:	6360      	str	r0, [r4, #52]	; 0x34
 8011fe4:	e7bd      	b.n	8011f62 <__sflush_r+0x1a>
 8011fe6:	2301      	movs	r3, #1
 8011fe8:	0028      	movs	r0, r5
 8011fea:	6a21      	ldr	r1, [r4, #32]
 8011fec:	47b8      	blx	r7
 8011fee:	1c43      	adds	r3, r0, #1
 8011ff0:	d1c5      	bne.n	8011f7e <__sflush_r+0x36>
 8011ff2:	682b      	ldr	r3, [r5, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d0c2      	beq.n	8011f7e <__sflush_r+0x36>
 8011ff8:	2b1d      	cmp	r3, #29
 8011ffa:	d001      	beq.n	8012000 <__sflush_r+0xb8>
 8011ffc:	2b16      	cmp	r3, #22
 8011ffe:	d101      	bne.n	8012004 <__sflush_r+0xbc>
 8012000:	602e      	str	r6, [r5, #0]
 8012002:	e7ad      	b.n	8011f60 <__sflush_r+0x18>
 8012004:	2340      	movs	r3, #64	; 0x40
 8012006:	89a2      	ldrh	r2, [r4, #12]
 8012008:	4313      	orrs	r3, r2
 801200a:	81a3      	strh	r3, [r4, #12]
 801200c:	e7a9      	b.n	8011f62 <__sflush_r+0x1a>
 801200e:	2340      	movs	r3, #64	; 0x40
 8012010:	430b      	orrs	r3, r1
 8012012:	e7fa      	b.n	801200a <__sflush_r+0xc2>
 8012014:	690f      	ldr	r7, [r1, #16]
 8012016:	2f00      	cmp	r7, #0
 8012018:	d0a2      	beq.n	8011f60 <__sflush_r+0x18>
 801201a:	680a      	ldr	r2, [r1, #0]
 801201c:	600f      	str	r7, [r1, #0]
 801201e:	1bd2      	subs	r2, r2, r7
 8012020:	9201      	str	r2, [sp, #4]
 8012022:	2200      	movs	r2, #0
 8012024:	079b      	lsls	r3, r3, #30
 8012026:	d100      	bne.n	801202a <__sflush_r+0xe2>
 8012028:	694a      	ldr	r2, [r1, #20]
 801202a:	60a2      	str	r2, [r4, #8]
 801202c:	9b01      	ldr	r3, [sp, #4]
 801202e:	2b00      	cmp	r3, #0
 8012030:	dc00      	bgt.n	8012034 <__sflush_r+0xec>
 8012032:	e795      	b.n	8011f60 <__sflush_r+0x18>
 8012034:	003a      	movs	r2, r7
 8012036:	0028      	movs	r0, r5
 8012038:	9b01      	ldr	r3, [sp, #4]
 801203a:	6a21      	ldr	r1, [r4, #32]
 801203c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801203e:	47b0      	blx	r6
 8012040:	2800      	cmp	r0, #0
 8012042:	dc06      	bgt.n	8012052 <__sflush_r+0x10a>
 8012044:	2340      	movs	r3, #64	; 0x40
 8012046:	2001      	movs	r0, #1
 8012048:	89a2      	ldrh	r2, [r4, #12]
 801204a:	4240      	negs	r0, r0
 801204c:	4313      	orrs	r3, r2
 801204e:	81a3      	strh	r3, [r4, #12]
 8012050:	e787      	b.n	8011f62 <__sflush_r+0x1a>
 8012052:	9b01      	ldr	r3, [sp, #4]
 8012054:	183f      	adds	r7, r7, r0
 8012056:	1a1b      	subs	r3, r3, r0
 8012058:	9301      	str	r3, [sp, #4]
 801205a:	e7e7      	b.n	801202c <__sflush_r+0xe4>
 801205c:	20400001 	.word	0x20400001

08012060 <_fflush_r>:
 8012060:	690b      	ldr	r3, [r1, #16]
 8012062:	b570      	push	{r4, r5, r6, lr}
 8012064:	0005      	movs	r5, r0
 8012066:	000c      	movs	r4, r1
 8012068:	2b00      	cmp	r3, #0
 801206a:	d102      	bne.n	8012072 <_fflush_r+0x12>
 801206c:	2500      	movs	r5, #0
 801206e:	0028      	movs	r0, r5
 8012070:	bd70      	pop	{r4, r5, r6, pc}
 8012072:	2800      	cmp	r0, #0
 8012074:	d004      	beq.n	8012080 <_fflush_r+0x20>
 8012076:	6983      	ldr	r3, [r0, #24]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d101      	bne.n	8012080 <_fflush_r+0x20>
 801207c:	f000 f892 	bl	80121a4 <__sinit>
 8012080:	4b14      	ldr	r3, [pc, #80]	; (80120d4 <_fflush_r+0x74>)
 8012082:	429c      	cmp	r4, r3
 8012084:	d11b      	bne.n	80120be <_fflush_r+0x5e>
 8012086:	686c      	ldr	r4, [r5, #4]
 8012088:	220c      	movs	r2, #12
 801208a:	5ea3      	ldrsh	r3, [r4, r2]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d0ed      	beq.n	801206c <_fflush_r+0xc>
 8012090:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012092:	07d2      	lsls	r2, r2, #31
 8012094:	d404      	bmi.n	80120a0 <_fflush_r+0x40>
 8012096:	059b      	lsls	r3, r3, #22
 8012098:	d402      	bmi.n	80120a0 <_fflush_r+0x40>
 801209a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801209c:	f000 f923 	bl	80122e6 <__retarget_lock_acquire_recursive>
 80120a0:	0028      	movs	r0, r5
 80120a2:	0021      	movs	r1, r4
 80120a4:	f7ff ff50 	bl	8011f48 <__sflush_r>
 80120a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80120aa:	0005      	movs	r5, r0
 80120ac:	07db      	lsls	r3, r3, #31
 80120ae:	d4de      	bmi.n	801206e <_fflush_r+0xe>
 80120b0:	89a3      	ldrh	r3, [r4, #12]
 80120b2:	059b      	lsls	r3, r3, #22
 80120b4:	d4db      	bmi.n	801206e <_fflush_r+0xe>
 80120b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80120b8:	f000 f916 	bl	80122e8 <__retarget_lock_release_recursive>
 80120bc:	e7d7      	b.n	801206e <_fflush_r+0xe>
 80120be:	4b06      	ldr	r3, [pc, #24]	; (80120d8 <_fflush_r+0x78>)
 80120c0:	429c      	cmp	r4, r3
 80120c2:	d101      	bne.n	80120c8 <_fflush_r+0x68>
 80120c4:	68ac      	ldr	r4, [r5, #8]
 80120c6:	e7df      	b.n	8012088 <_fflush_r+0x28>
 80120c8:	4b04      	ldr	r3, [pc, #16]	; (80120dc <_fflush_r+0x7c>)
 80120ca:	429c      	cmp	r4, r3
 80120cc:	d1dc      	bne.n	8012088 <_fflush_r+0x28>
 80120ce:	68ec      	ldr	r4, [r5, #12]
 80120d0:	e7da      	b.n	8012088 <_fflush_r+0x28>
 80120d2:	46c0      	nop			; (mov r8, r8)
 80120d4:	08012f80 	.word	0x08012f80
 80120d8:	08012fa0 	.word	0x08012fa0
 80120dc:	08012f60 	.word	0x08012f60

080120e0 <std>:
 80120e0:	2300      	movs	r3, #0
 80120e2:	b510      	push	{r4, lr}
 80120e4:	0004      	movs	r4, r0
 80120e6:	6003      	str	r3, [r0, #0]
 80120e8:	6043      	str	r3, [r0, #4]
 80120ea:	6083      	str	r3, [r0, #8]
 80120ec:	8181      	strh	r1, [r0, #12]
 80120ee:	6643      	str	r3, [r0, #100]	; 0x64
 80120f0:	0019      	movs	r1, r3
 80120f2:	81c2      	strh	r2, [r0, #14]
 80120f4:	6103      	str	r3, [r0, #16]
 80120f6:	6143      	str	r3, [r0, #20]
 80120f8:	6183      	str	r3, [r0, #24]
 80120fa:	2208      	movs	r2, #8
 80120fc:	305c      	adds	r0, #92	; 0x5c
 80120fe:	f7fc f82a 	bl	800e156 <memset>
 8012102:	4b05      	ldr	r3, [pc, #20]	; (8012118 <std+0x38>)
 8012104:	6224      	str	r4, [r4, #32]
 8012106:	6263      	str	r3, [r4, #36]	; 0x24
 8012108:	4b04      	ldr	r3, [pc, #16]	; (801211c <std+0x3c>)
 801210a:	62a3      	str	r3, [r4, #40]	; 0x28
 801210c:	4b04      	ldr	r3, [pc, #16]	; (8012120 <std+0x40>)
 801210e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012110:	4b04      	ldr	r3, [pc, #16]	; (8012124 <std+0x44>)
 8012112:	6323      	str	r3, [r4, #48]	; 0x30
 8012114:	bd10      	pop	{r4, pc}
 8012116:	46c0      	nop			; (mov r8, r8)
 8012118:	08012459 	.word	0x08012459
 801211c:	08012481 	.word	0x08012481
 8012120:	080124b9 	.word	0x080124b9
 8012124:	080124e5 	.word	0x080124e5

08012128 <_cleanup_r>:
 8012128:	b510      	push	{r4, lr}
 801212a:	4902      	ldr	r1, [pc, #8]	; (8012134 <_cleanup_r+0xc>)
 801212c:	f000 f8ba 	bl	80122a4 <_fwalk_reent>
 8012130:	bd10      	pop	{r4, pc}
 8012132:	46c0      	nop			; (mov r8, r8)
 8012134:	08012061 	.word	0x08012061

08012138 <__sfmoreglue>:
 8012138:	b570      	push	{r4, r5, r6, lr}
 801213a:	2568      	movs	r5, #104	; 0x68
 801213c:	1e4a      	subs	r2, r1, #1
 801213e:	4355      	muls	r5, r2
 8012140:	000e      	movs	r6, r1
 8012142:	0029      	movs	r1, r5
 8012144:	3174      	adds	r1, #116	; 0x74
 8012146:	f7fe f99b 	bl	8010480 <_malloc_r>
 801214a:	1e04      	subs	r4, r0, #0
 801214c:	d008      	beq.n	8012160 <__sfmoreglue+0x28>
 801214e:	2100      	movs	r1, #0
 8012150:	002a      	movs	r2, r5
 8012152:	6001      	str	r1, [r0, #0]
 8012154:	6046      	str	r6, [r0, #4]
 8012156:	300c      	adds	r0, #12
 8012158:	60a0      	str	r0, [r4, #8]
 801215a:	3268      	adds	r2, #104	; 0x68
 801215c:	f7fb fffb 	bl	800e156 <memset>
 8012160:	0020      	movs	r0, r4
 8012162:	bd70      	pop	{r4, r5, r6, pc}

08012164 <__sfp_lock_acquire>:
 8012164:	b510      	push	{r4, lr}
 8012166:	4802      	ldr	r0, [pc, #8]	; (8012170 <__sfp_lock_acquire+0xc>)
 8012168:	f000 f8bd 	bl	80122e6 <__retarget_lock_acquire_recursive>
 801216c:	bd10      	pop	{r4, pc}
 801216e:	46c0      	nop			; (mov r8, r8)
 8012170:	20000cf5 	.word	0x20000cf5

08012174 <__sfp_lock_release>:
 8012174:	b510      	push	{r4, lr}
 8012176:	4802      	ldr	r0, [pc, #8]	; (8012180 <__sfp_lock_release+0xc>)
 8012178:	f000 f8b6 	bl	80122e8 <__retarget_lock_release_recursive>
 801217c:	bd10      	pop	{r4, pc}
 801217e:	46c0      	nop			; (mov r8, r8)
 8012180:	20000cf5 	.word	0x20000cf5

08012184 <__sinit_lock_acquire>:
 8012184:	b510      	push	{r4, lr}
 8012186:	4802      	ldr	r0, [pc, #8]	; (8012190 <__sinit_lock_acquire+0xc>)
 8012188:	f000 f8ad 	bl	80122e6 <__retarget_lock_acquire_recursive>
 801218c:	bd10      	pop	{r4, pc}
 801218e:	46c0      	nop			; (mov r8, r8)
 8012190:	20000cf6 	.word	0x20000cf6

08012194 <__sinit_lock_release>:
 8012194:	b510      	push	{r4, lr}
 8012196:	4802      	ldr	r0, [pc, #8]	; (80121a0 <__sinit_lock_release+0xc>)
 8012198:	f000 f8a6 	bl	80122e8 <__retarget_lock_release_recursive>
 801219c:	bd10      	pop	{r4, pc}
 801219e:	46c0      	nop			; (mov r8, r8)
 80121a0:	20000cf6 	.word	0x20000cf6

080121a4 <__sinit>:
 80121a4:	b513      	push	{r0, r1, r4, lr}
 80121a6:	0004      	movs	r4, r0
 80121a8:	f7ff ffec 	bl	8012184 <__sinit_lock_acquire>
 80121ac:	69a3      	ldr	r3, [r4, #24]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d002      	beq.n	80121b8 <__sinit+0x14>
 80121b2:	f7ff ffef 	bl	8012194 <__sinit_lock_release>
 80121b6:	bd13      	pop	{r0, r1, r4, pc}
 80121b8:	64a3      	str	r3, [r4, #72]	; 0x48
 80121ba:	64e3      	str	r3, [r4, #76]	; 0x4c
 80121bc:	6523      	str	r3, [r4, #80]	; 0x50
 80121be:	4b13      	ldr	r3, [pc, #76]	; (801220c <__sinit+0x68>)
 80121c0:	4a13      	ldr	r2, [pc, #76]	; (8012210 <__sinit+0x6c>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80121c6:	9301      	str	r3, [sp, #4]
 80121c8:	42a3      	cmp	r3, r4
 80121ca:	d101      	bne.n	80121d0 <__sinit+0x2c>
 80121cc:	2301      	movs	r3, #1
 80121ce:	61a3      	str	r3, [r4, #24]
 80121d0:	0020      	movs	r0, r4
 80121d2:	f000 f81f 	bl	8012214 <__sfp>
 80121d6:	6060      	str	r0, [r4, #4]
 80121d8:	0020      	movs	r0, r4
 80121da:	f000 f81b 	bl	8012214 <__sfp>
 80121de:	60a0      	str	r0, [r4, #8]
 80121e0:	0020      	movs	r0, r4
 80121e2:	f000 f817 	bl	8012214 <__sfp>
 80121e6:	2200      	movs	r2, #0
 80121e8:	2104      	movs	r1, #4
 80121ea:	60e0      	str	r0, [r4, #12]
 80121ec:	6860      	ldr	r0, [r4, #4]
 80121ee:	f7ff ff77 	bl	80120e0 <std>
 80121f2:	2201      	movs	r2, #1
 80121f4:	2109      	movs	r1, #9
 80121f6:	68a0      	ldr	r0, [r4, #8]
 80121f8:	f7ff ff72 	bl	80120e0 <std>
 80121fc:	2202      	movs	r2, #2
 80121fe:	2112      	movs	r1, #18
 8012200:	68e0      	ldr	r0, [r4, #12]
 8012202:	f7ff ff6d 	bl	80120e0 <std>
 8012206:	2301      	movs	r3, #1
 8012208:	61a3      	str	r3, [r4, #24]
 801220a:	e7d2      	b.n	80121b2 <__sinit+0xe>
 801220c:	08012b2c 	.word	0x08012b2c
 8012210:	08012129 	.word	0x08012129

08012214 <__sfp>:
 8012214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012216:	0007      	movs	r7, r0
 8012218:	f7ff ffa4 	bl	8012164 <__sfp_lock_acquire>
 801221c:	4b1f      	ldr	r3, [pc, #124]	; (801229c <__sfp+0x88>)
 801221e:	681e      	ldr	r6, [r3, #0]
 8012220:	69b3      	ldr	r3, [r6, #24]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d102      	bne.n	801222c <__sfp+0x18>
 8012226:	0030      	movs	r0, r6
 8012228:	f7ff ffbc 	bl	80121a4 <__sinit>
 801222c:	3648      	adds	r6, #72	; 0x48
 801222e:	68b4      	ldr	r4, [r6, #8]
 8012230:	6873      	ldr	r3, [r6, #4]
 8012232:	3b01      	subs	r3, #1
 8012234:	d504      	bpl.n	8012240 <__sfp+0x2c>
 8012236:	6833      	ldr	r3, [r6, #0]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d022      	beq.n	8012282 <__sfp+0x6e>
 801223c:	6836      	ldr	r6, [r6, #0]
 801223e:	e7f6      	b.n	801222e <__sfp+0x1a>
 8012240:	220c      	movs	r2, #12
 8012242:	5ea5      	ldrsh	r5, [r4, r2]
 8012244:	2d00      	cmp	r5, #0
 8012246:	d11a      	bne.n	801227e <__sfp+0x6a>
 8012248:	0020      	movs	r0, r4
 801224a:	4b15      	ldr	r3, [pc, #84]	; (80122a0 <__sfp+0x8c>)
 801224c:	3058      	adds	r0, #88	; 0x58
 801224e:	60e3      	str	r3, [r4, #12]
 8012250:	6665      	str	r5, [r4, #100]	; 0x64
 8012252:	f000 f847 	bl	80122e4 <__retarget_lock_init_recursive>
 8012256:	f7ff ff8d 	bl	8012174 <__sfp_lock_release>
 801225a:	0020      	movs	r0, r4
 801225c:	2208      	movs	r2, #8
 801225e:	0029      	movs	r1, r5
 8012260:	6025      	str	r5, [r4, #0]
 8012262:	60a5      	str	r5, [r4, #8]
 8012264:	6065      	str	r5, [r4, #4]
 8012266:	6125      	str	r5, [r4, #16]
 8012268:	6165      	str	r5, [r4, #20]
 801226a:	61a5      	str	r5, [r4, #24]
 801226c:	305c      	adds	r0, #92	; 0x5c
 801226e:	f7fb ff72 	bl	800e156 <memset>
 8012272:	6365      	str	r5, [r4, #52]	; 0x34
 8012274:	63a5      	str	r5, [r4, #56]	; 0x38
 8012276:	64a5      	str	r5, [r4, #72]	; 0x48
 8012278:	64e5      	str	r5, [r4, #76]	; 0x4c
 801227a:	0020      	movs	r0, r4
 801227c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801227e:	3468      	adds	r4, #104	; 0x68
 8012280:	e7d7      	b.n	8012232 <__sfp+0x1e>
 8012282:	2104      	movs	r1, #4
 8012284:	0038      	movs	r0, r7
 8012286:	f7ff ff57 	bl	8012138 <__sfmoreglue>
 801228a:	1e04      	subs	r4, r0, #0
 801228c:	6030      	str	r0, [r6, #0]
 801228e:	d1d5      	bne.n	801223c <__sfp+0x28>
 8012290:	f7ff ff70 	bl	8012174 <__sfp_lock_release>
 8012294:	230c      	movs	r3, #12
 8012296:	603b      	str	r3, [r7, #0]
 8012298:	e7ef      	b.n	801227a <__sfp+0x66>
 801229a:	46c0      	nop			; (mov r8, r8)
 801229c:	08012b2c 	.word	0x08012b2c
 80122a0:	ffff0001 	.word	0xffff0001

080122a4 <_fwalk_reent>:
 80122a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122a6:	0004      	movs	r4, r0
 80122a8:	0006      	movs	r6, r0
 80122aa:	2700      	movs	r7, #0
 80122ac:	9101      	str	r1, [sp, #4]
 80122ae:	3448      	adds	r4, #72	; 0x48
 80122b0:	6863      	ldr	r3, [r4, #4]
 80122b2:	68a5      	ldr	r5, [r4, #8]
 80122b4:	9300      	str	r3, [sp, #0]
 80122b6:	9b00      	ldr	r3, [sp, #0]
 80122b8:	3b01      	subs	r3, #1
 80122ba:	9300      	str	r3, [sp, #0]
 80122bc:	d504      	bpl.n	80122c8 <_fwalk_reent+0x24>
 80122be:	6824      	ldr	r4, [r4, #0]
 80122c0:	2c00      	cmp	r4, #0
 80122c2:	d1f5      	bne.n	80122b0 <_fwalk_reent+0xc>
 80122c4:	0038      	movs	r0, r7
 80122c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80122c8:	89ab      	ldrh	r3, [r5, #12]
 80122ca:	2b01      	cmp	r3, #1
 80122cc:	d908      	bls.n	80122e0 <_fwalk_reent+0x3c>
 80122ce:	220e      	movs	r2, #14
 80122d0:	5eab      	ldrsh	r3, [r5, r2]
 80122d2:	3301      	adds	r3, #1
 80122d4:	d004      	beq.n	80122e0 <_fwalk_reent+0x3c>
 80122d6:	0029      	movs	r1, r5
 80122d8:	0030      	movs	r0, r6
 80122da:	9b01      	ldr	r3, [sp, #4]
 80122dc:	4798      	blx	r3
 80122de:	4307      	orrs	r7, r0
 80122e0:	3568      	adds	r5, #104	; 0x68
 80122e2:	e7e8      	b.n	80122b6 <_fwalk_reent+0x12>

080122e4 <__retarget_lock_init_recursive>:
 80122e4:	4770      	bx	lr

080122e6 <__retarget_lock_acquire_recursive>:
 80122e6:	4770      	bx	lr

080122e8 <__retarget_lock_release_recursive>:
 80122e8:	4770      	bx	lr
	...

080122ec <__swhatbuf_r>:
 80122ec:	b570      	push	{r4, r5, r6, lr}
 80122ee:	000e      	movs	r6, r1
 80122f0:	001d      	movs	r5, r3
 80122f2:	230e      	movs	r3, #14
 80122f4:	5ec9      	ldrsh	r1, [r1, r3]
 80122f6:	0014      	movs	r4, r2
 80122f8:	b096      	sub	sp, #88	; 0x58
 80122fa:	2900      	cmp	r1, #0
 80122fc:	da08      	bge.n	8012310 <__swhatbuf_r+0x24>
 80122fe:	220c      	movs	r2, #12
 8012300:	5eb3      	ldrsh	r3, [r6, r2]
 8012302:	2200      	movs	r2, #0
 8012304:	602a      	str	r2, [r5, #0]
 8012306:	061b      	lsls	r3, r3, #24
 8012308:	d411      	bmi.n	801232e <__swhatbuf_r+0x42>
 801230a:	2380      	movs	r3, #128	; 0x80
 801230c:	00db      	lsls	r3, r3, #3
 801230e:	e00f      	b.n	8012330 <__swhatbuf_r+0x44>
 8012310:	466a      	mov	r2, sp
 8012312:	f000 f913 	bl	801253c <_fstat_r>
 8012316:	2800      	cmp	r0, #0
 8012318:	dbf1      	blt.n	80122fe <__swhatbuf_r+0x12>
 801231a:	23f0      	movs	r3, #240	; 0xf0
 801231c:	9901      	ldr	r1, [sp, #4]
 801231e:	021b      	lsls	r3, r3, #8
 8012320:	4019      	ands	r1, r3
 8012322:	4b05      	ldr	r3, [pc, #20]	; (8012338 <__swhatbuf_r+0x4c>)
 8012324:	18c9      	adds	r1, r1, r3
 8012326:	424b      	negs	r3, r1
 8012328:	4159      	adcs	r1, r3
 801232a:	6029      	str	r1, [r5, #0]
 801232c:	e7ed      	b.n	801230a <__swhatbuf_r+0x1e>
 801232e:	2340      	movs	r3, #64	; 0x40
 8012330:	2000      	movs	r0, #0
 8012332:	6023      	str	r3, [r4, #0]
 8012334:	b016      	add	sp, #88	; 0x58
 8012336:	bd70      	pop	{r4, r5, r6, pc}
 8012338:	ffffe000 	.word	0xffffe000

0801233c <__smakebuf_r>:
 801233c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801233e:	2602      	movs	r6, #2
 8012340:	898b      	ldrh	r3, [r1, #12]
 8012342:	0005      	movs	r5, r0
 8012344:	000c      	movs	r4, r1
 8012346:	4233      	tst	r3, r6
 8012348:	d006      	beq.n	8012358 <__smakebuf_r+0x1c>
 801234a:	0023      	movs	r3, r4
 801234c:	3347      	adds	r3, #71	; 0x47
 801234e:	6023      	str	r3, [r4, #0]
 8012350:	6123      	str	r3, [r4, #16]
 8012352:	2301      	movs	r3, #1
 8012354:	6163      	str	r3, [r4, #20]
 8012356:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012358:	466a      	mov	r2, sp
 801235a:	ab01      	add	r3, sp, #4
 801235c:	f7ff ffc6 	bl	80122ec <__swhatbuf_r>
 8012360:	9900      	ldr	r1, [sp, #0]
 8012362:	0007      	movs	r7, r0
 8012364:	0028      	movs	r0, r5
 8012366:	f7fe f88b 	bl	8010480 <_malloc_r>
 801236a:	2800      	cmp	r0, #0
 801236c:	d108      	bne.n	8012380 <__smakebuf_r+0x44>
 801236e:	220c      	movs	r2, #12
 8012370:	5ea3      	ldrsh	r3, [r4, r2]
 8012372:	059a      	lsls	r2, r3, #22
 8012374:	d4ef      	bmi.n	8012356 <__smakebuf_r+0x1a>
 8012376:	2203      	movs	r2, #3
 8012378:	4393      	bics	r3, r2
 801237a:	431e      	orrs	r6, r3
 801237c:	81a6      	strh	r6, [r4, #12]
 801237e:	e7e4      	b.n	801234a <__smakebuf_r+0xe>
 8012380:	4b0f      	ldr	r3, [pc, #60]	; (80123c0 <__smakebuf_r+0x84>)
 8012382:	62ab      	str	r3, [r5, #40]	; 0x28
 8012384:	2380      	movs	r3, #128	; 0x80
 8012386:	89a2      	ldrh	r2, [r4, #12]
 8012388:	6020      	str	r0, [r4, #0]
 801238a:	4313      	orrs	r3, r2
 801238c:	81a3      	strh	r3, [r4, #12]
 801238e:	9b00      	ldr	r3, [sp, #0]
 8012390:	6120      	str	r0, [r4, #16]
 8012392:	6163      	str	r3, [r4, #20]
 8012394:	9b01      	ldr	r3, [sp, #4]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d00d      	beq.n	80123b6 <__smakebuf_r+0x7a>
 801239a:	0028      	movs	r0, r5
 801239c:	230e      	movs	r3, #14
 801239e:	5ee1      	ldrsh	r1, [r4, r3]
 80123a0:	f000 f8de 	bl	8012560 <_isatty_r>
 80123a4:	2800      	cmp	r0, #0
 80123a6:	d006      	beq.n	80123b6 <__smakebuf_r+0x7a>
 80123a8:	2203      	movs	r2, #3
 80123aa:	89a3      	ldrh	r3, [r4, #12]
 80123ac:	4393      	bics	r3, r2
 80123ae:	001a      	movs	r2, r3
 80123b0:	2301      	movs	r3, #1
 80123b2:	4313      	orrs	r3, r2
 80123b4:	81a3      	strh	r3, [r4, #12]
 80123b6:	89a0      	ldrh	r0, [r4, #12]
 80123b8:	4307      	orrs	r7, r0
 80123ba:	81a7      	strh	r7, [r4, #12]
 80123bc:	e7cb      	b.n	8012356 <__smakebuf_r+0x1a>
 80123be:	46c0      	nop			; (mov r8, r8)
 80123c0:	08012129 	.word	0x08012129

080123c4 <_raise_r>:
 80123c4:	b570      	push	{r4, r5, r6, lr}
 80123c6:	0004      	movs	r4, r0
 80123c8:	000d      	movs	r5, r1
 80123ca:	291f      	cmp	r1, #31
 80123cc:	d904      	bls.n	80123d8 <_raise_r+0x14>
 80123ce:	2316      	movs	r3, #22
 80123d0:	6003      	str	r3, [r0, #0]
 80123d2:	2001      	movs	r0, #1
 80123d4:	4240      	negs	r0, r0
 80123d6:	bd70      	pop	{r4, r5, r6, pc}
 80123d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d004      	beq.n	80123e8 <_raise_r+0x24>
 80123de:	008a      	lsls	r2, r1, #2
 80123e0:	189b      	adds	r3, r3, r2
 80123e2:	681a      	ldr	r2, [r3, #0]
 80123e4:	2a00      	cmp	r2, #0
 80123e6:	d108      	bne.n	80123fa <_raise_r+0x36>
 80123e8:	0020      	movs	r0, r4
 80123ea:	f000 f831 	bl	8012450 <_getpid_r>
 80123ee:	002a      	movs	r2, r5
 80123f0:	0001      	movs	r1, r0
 80123f2:	0020      	movs	r0, r4
 80123f4:	f000 f81a 	bl	801242c <_kill_r>
 80123f8:	e7ed      	b.n	80123d6 <_raise_r+0x12>
 80123fa:	2000      	movs	r0, #0
 80123fc:	2a01      	cmp	r2, #1
 80123fe:	d0ea      	beq.n	80123d6 <_raise_r+0x12>
 8012400:	1c51      	adds	r1, r2, #1
 8012402:	d103      	bne.n	801240c <_raise_r+0x48>
 8012404:	2316      	movs	r3, #22
 8012406:	3001      	adds	r0, #1
 8012408:	6023      	str	r3, [r4, #0]
 801240a:	e7e4      	b.n	80123d6 <_raise_r+0x12>
 801240c:	2400      	movs	r4, #0
 801240e:	0028      	movs	r0, r5
 8012410:	601c      	str	r4, [r3, #0]
 8012412:	4790      	blx	r2
 8012414:	0020      	movs	r0, r4
 8012416:	e7de      	b.n	80123d6 <_raise_r+0x12>

08012418 <raise>:
 8012418:	b510      	push	{r4, lr}
 801241a:	4b03      	ldr	r3, [pc, #12]	; (8012428 <raise+0x10>)
 801241c:	0001      	movs	r1, r0
 801241e:	6818      	ldr	r0, [r3, #0]
 8012420:	f7ff ffd0 	bl	80123c4 <_raise_r>
 8012424:	bd10      	pop	{r4, pc}
 8012426:	46c0      	nop			; (mov r8, r8)
 8012428:	200000e0 	.word	0x200000e0

0801242c <_kill_r>:
 801242c:	2300      	movs	r3, #0
 801242e:	b570      	push	{r4, r5, r6, lr}
 8012430:	4d06      	ldr	r5, [pc, #24]	; (801244c <_kill_r+0x20>)
 8012432:	0004      	movs	r4, r0
 8012434:	0008      	movs	r0, r1
 8012436:	0011      	movs	r1, r2
 8012438:	602b      	str	r3, [r5, #0]
 801243a:	f7f5 fea9 	bl	8008190 <_kill>
 801243e:	1c43      	adds	r3, r0, #1
 8012440:	d103      	bne.n	801244a <_kill_r+0x1e>
 8012442:	682b      	ldr	r3, [r5, #0]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d000      	beq.n	801244a <_kill_r+0x1e>
 8012448:	6023      	str	r3, [r4, #0]
 801244a:	bd70      	pop	{r4, r5, r6, pc}
 801244c:	20000cf0 	.word	0x20000cf0

08012450 <_getpid_r>:
 8012450:	b510      	push	{r4, lr}
 8012452:	f7f5 fe97 	bl	8008184 <_getpid>
 8012456:	bd10      	pop	{r4, pc}

08012458 <__sread>:
 8012458:	b570      	push	{r4, r5, r6, lr}
 801245a:	000c      	movs	r4, r1
 801245c:	250e      	movs	r5, #14
 801245e:	5f49      	ldrsh	r1, [r1, r5]
 8012460:	f000 f8a4 	bl	80125ac <_read_r>
 8012464:	2800      	cmp	r0, #0
 8012466:	db03      	blt.n	8012470 <__sread+0x18>
 8012468:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801246a:	181b      	adds	r3, r3, r0
 801246c:	6563      	str	r3, [r4, #84]	; 0x54
 801246e:	bd70      	pop	{r4, r5, r6, pc}
 8012470:	89a3      	ldrh	r3, [r4, #12]
 8012472:	4a02      	ldr	r2, [pc, #8]	; (801247c <__sread+0x24>)
 8012474:	4013      	ands	r3, r2
 8012476:	81a3      	strh	r3, [r4, #12]
 8012478:	e7f9      	b.n	801246e <__sread+0x16>
 801247a:	46c0      	nop			; (mov r8, r8)
 801247c:	ffffefff 	.word	0xffffefff

08012480 <__swrite>:
 8012480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012482:	001f      	movs	r7, r3
 8012484:	898b      	ldrh	r3, [r1, #12]
 8012486:	0005      	movs	r5, r0
 8012488:	000c      	movs	r4, r1
 801248a:	0016      	movs	r6, r2
 801248c:	05db      	lsls	r3, r3, #23
 801248e:	d505      	bpl.n	801249c <__swrite+0x1c>
 8012490:	230e      	movs	r3, #14
 8012492:	5ec9      	ldrsh	r1, [r1, r3]
 8012494:	2200      	movs	r2, #0
 8012496:	2302      	movs	r3, #2
 8012498:	f000 f874 	bl	8012584 <_lseek_r>
 801249c:	89a3      	ldrh	r3, [r4, #12]
 801249e:	4a05      	ldr	r2, [pc, #20]	; (80124b4 <__swrite+0x34>)
 80124a0:	0028      	movs	r0, r5
 80124a2:	4013      	ands	r3, r2
 80124a4:	81a3      	strh	r3, [r4, #12]
 80124a6:	0032      	movs	r2, r6
 80124a8:	230e      	movs	r3, #14
 80124aa:	5ee1      	ldrsh	r1, [r4, r3]
 80124ac:	003b      	movs	r3, r7
 80124ae:	f000 f81f 	bl	80124f0 <_write_r>
 80124b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124b4:	ffffefff 	.word	0xffffefff

080124b8 <__sseek>:
 80124b8:	b570      	push	{r4, r5, r6, lr}
 80124ba:	000c      	movs	r4, r1
 80124bc:	250e      	movs	r5, #14
 80124be:	5f49      	ldrsh	r1, [r1, r5]
 80124c0:	f000 f860 	bl	8012584 <_lseek_r>
 80124c4:	89a3      	ldrh	r3, [r4, #12]
 80124c6:	1c42      	adds	r2, r0, #1
 80124c8:	d103      	bne.n	80124d2 <__sseek+0x1a>
 80124ca:	4a05      	ldr	r2, [pc, #20]	; (80124e0 <__sseek+0x28>)
 80124cc:	4013      	ands	r3, r2
 80124ce:	81a3      	strh	r3, [r4, #12]
 80124d0:	bd70      	pop	{r4, r5, r6, pc}
 80124d2:	2280      	movs	r2, #128	; 0x80
 80124d4:	0152      	lsls	r2, r2, #5
 80124d6:	4313      	orrs	r3, r2
 80124d8:	81a3      	strh	r3, [r4, #12]
 80124da:	6560      	str	r0, [r4, #84]	; 0x54
 80124dc:	e7f8      	b.n	80124d0 <__sseek+0x18>
 80124de:	46c0      	nop			; (mov r8, r8)
 80124e0:	ffffefff 	.word	0xffffefff

080124e4 <__sclose>:
 80124e4:	b510      	push	{r4, lr}
 80124e6:	230e      	movs	r3, #14
 80124e8:	5ec9      	ldrsh	r1, [r1, r3]
 80124ea:	f000 f815 	bl	8012518 <_close_r>
 80124ee:	bd10      	pop	{r4, pc}

080124f0 <_write_r>:
 80124f0:	b570      	push	{r4, r5, r6, lr}
 80124f2:	0004      	movs	r4, r0
 80124f4:	0008      	movs	r0, r1
 80124f6:	0011      	movs	r1, r2
 80124f8:	001a      	movs	r2, r3
 80124fa:	2300      	movs	r3, #0
 80124fc:	4d05      	ldr	r5, [pc, #20]	; (8012514 <_write_r+0x24>)
 80124fe:	602b      	str	r3, [r5, #0]
 8012500:	f7f5 fe7f 	bl	8008202 <_write>
 8012504:	1c43      	adds	r3, r0, #1
 8012506:	d103      	bne.n	8012510 <_write_r+0x20>
 8012508:	682b      	ldr	r3, [r5, #0]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d000      	beq.n	8012510 <_write_r+0x20>
 801250e:	6023      	str	r3, [r4, #0]
 8012510:	bd70      	pop	{r4, r5, r6, pc}
 8012512:	46c0      	nop			; (mov r8, r8)
 8012514:	20000cf0 	.word	0x20000cf0

08012518 <_close_r>:
 8012518:	2300      	movs	r3, #0
 801251a:	b570      	push	{r4, r5, r6, lr}
 801251c:	4d06      	ldr	r5, [pc, #24]	; (8012538 <_close_r+0x20>)
 801251e:	0004      	movs	r4, r0
 8012520:	0008      	movs	r0, r1
 8012522:	602b      	str	r3, [r5, #0]
 8012524:	f7f5 fe89 	bl	800823a <_close>
 8012528:	1c43      	adds	r3, r0, #1
 801252a:	d103      	bne.n	8012534 <_close_r+0x1c>
 801252c:	682b      	ldr	r3, [r5, #0]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d000      	beq.n	8012534 <_close_r+0x1c>
 8012532:	6023      	str	r3, [r4, #0]
 8012534:	bd70      	pop	{r4, r5, r6, pc}
 8012536:	46c0      	nop			; (mov r8, r8)
 8012538:	20000cf0 	.word	0x20000cf0

0801253c <_fstat_r>:
 801253c:	2300      	movs	r3, #0
 801253e:	b570      	push	{r4, r5, r6, lr}
 8012540:	4d06      	ldr	r5, [pc, #24]	; (801255c <_fstat_r+0x20>)
 8012542:	0004      	movs	r4, r0
 8012544:	0008      	movs	r0, r1
 8012546:	0011      	movs	r1, r2
 8012548:	602b      	str	r3, [r5, #0]
 801254a:	f7f5 fe80 	bl	800824e <_fstat>
 801254e:	1c43      	adds	r3, r0, #1
 8012550:	d103      	bne.n	801255a <_fstat_r+0x1e>
 8012552:	682b      	ldr	r3, [r5, #0]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d000      	beq.n	801255a <_fstat_r+0x1e>
 8012558:	6023      	str	r3, [r4, #0]
 801255a:	bd70      	pop	{r4, r5, r6, pc}
 801255c:	20000cf0 	.word	0x20000cf0

08012560 <_isatty_r>:
 8012560:	2300      	movs	r3, #0
 8012562:	b570      	push	{r4, r5, r6, lr}
 8012564:	4d06      	ldr	r5, [pc, #24]	; (8012580 <_isatty_r+0x20>)
 8012566:	0004      	movs	r4, r0
 8012568:	0008      	movs	r0, r1
 801256a:	602b      	str	r3, [r5, #0]
 801256c:	f7f5 fe7d 	bl	800826a <_isatty>
 8012570:	1c43      	adds	r3, r0, #1
 8012572:	d103      	bne.n	801257c <_isatty_r+0x1c>
 8012574:	682b      	ldr	r3, [r5, #0]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d000      	beq.n	801257c <_isatty_r+0x1c>
 801257a:	6023      	str	r3, [r4, #0]
 801257c:	bd70      	pop	{r4, r5, r6, pc}
 801257e:	46c0      	nop			; (mov r8, r8)
 8012580:	20000cf0 	.word	0x20000cf0

08012584 <_lseek_r>:
 8012584:	b570      	push	{r4, r5, r6, lr}
 8012586:	0004      	movs	r4, r0
 8012588:	0008      	movs	r0, r1
 801258a:	0011      	movs	r1, r2
 801258c:	001a      	movs	r2, r3
 801258e:	2300      	movs	r3, #0
 8012590:	4d05      	ldr	r5, [pc, #20]	; (80125a8 <_lseek_r+0x24>)
 8012592:	602b      	str	r3, [r5, #0]
 8012594:	f7f5 fe72 	bl	800827c <_lseek>
 8012598:	1c43      	adds	r3, r0, #1
 801259a:	d103      	bne.n	80125a4 <_lseek_r+0x20>
 801259c:	682b      	ldr	r3, [r5, #0]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d000      	beq.n	80125a4 <_lseek_r+0x20>
 80125a2:	6023      	str	r3, [r4, #0]
 80125a4:	bd70      	pop	{r4, r5, r6, pc}
 80125a6:	46c0      	nop			; (mov r8, r8)
 80125a8:	20000cf0 	.word	0x20000cf0

080125ac <_read_r>:
 80125ac:	b570      	push	{r4, r5, r6, lr}
 80125ae:	0004      	movs	r4, r0
 80125b0:	0008      	movs	r0, r1
 80125b2:	0011      	movs	r1, r2
 80125b4:	001a      	movs	r2, r3
 80125b6:	2300      	movs	r3, #0
 80125b8:	4d05      	ldr	r5, [pc, #20]	; (80125d0 <_read_r+0x24>)
 80125ba:	602b      	str	r3, [r5, #0]
 80125bc:	f7f5 fe04 	bl	80081c8 <_read>
 80125c0:	1c43      	adds	r3, r0, #1
 80125c2:	d103      	bne.n	80125cc <_read_r+0x20>
 80125c4:	682b      	ldr	r3, [r5, #0]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d000      	beq.n	80125cc <_read_r+0x20>
 80125ca:	6023      	str	r3, [r4, #0]
 80125cc:	bd70      	pop	{r4, r5, r6, pc}
 80125ce:	46c0      	nop			; (mov r8, r8)
 80125d0:	20000cf0 	.word	0x20000cf0

080125d4 <_init>:
 80125d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125d6:	46c0      	nop			; (mov r8, r8)
 80125d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125da:	bc08      	pop	{r3}
 80125dc:	469e      	mov	lr, r3
 80125de:	4770      	bx	lr

080125e0 <_fini>:
 80125e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125e2:	46c0      	nop			; (mov r8, r8)
 80125e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125e6:	bc08      	pop	{r3}
 80125e8:	469e      	mov	lr, r3
 80125ea:	4770      	bx	lr
